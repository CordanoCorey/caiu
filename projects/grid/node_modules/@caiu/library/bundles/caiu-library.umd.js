(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/animations'), require('@angular/common'), require('@angular/flex-layout'), require('@angular/router'), require('hammerjs'), require('@angular/forms'), require('@angular/material'), require('rxjs'), require('@progress/kendo-data-query'), require('@progress/kendo-angular-excel-export'), require('@progress/kendo-angular-grid'), require('@angular/material/icon'), require('@ngrx/effects'), require('rxjs/operators'), require('@ngrx/store'), require('@angular/common/http'), require('rxjs/internal/Observable')) :
    typeof define === 'function' && define.amd ? define('@caiu/library', ['exports', '@angular/core', '@angular/animations', '@angular/common', '@angular/flex-layout', '@angular/router', 'hammerjs', '@angular/forms', '@angular/material', 'rxjs', '@progress/kendo-data-query', '@progress/kendo-angular-excel-export', '@progress/kendo-angular-grid', '@angular/material/icon', '@ngrx/effects', 'rxjs/operators', '@ngrx/store', '@angular/common/http', 'rxjs/internal/Observable'], factory) :
    (factory((global.caiu = global.caiu || {}, global.caiu.library = {}),global.ng.core,global.ng.animations,global.ng.common,global.ng['flex-layout'],global.ng.router,null,global.ng.forms,global.ng.material,global.rxjs,null,null,null,global.ng.material.icon,null,global.rxjs.operators,null,global.ng.common.http,global.rxjs['internal/Observable']));
}(this, (function (exports,i0,animations,common,flexLayout,i1,hammerjs,forms,material,rxjs,kendoDataQuery,kendoAngularExcelExport,kendoAngularGrid,icon,effects,operators,i1$1,i1$2,i2) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LibraryService = (function () {
        function LibraryService() {
        }
        LibraryService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        LibraryService.ctorParameters = function () { return []; };
        /** @nocollapse */ LibraryService.ngInjectableDef = i0.defineInjectable({ factory: function LibraryService_Factory() { return new LibraryService(); }, token: LibraryService, providedIn: "root" });
        return LibraryService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LibraryComponent = (function () {
        function LibraryComponent() {
        }
        /**
         * @return {?}
         */
        LibraryComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        LibraryComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-library',
                        template: "\n    <p>\n      library works!\n    </p>\n  ",
                        styles: []
                    },] },
        ];
        /** @nocollapse */
        LibraryComponent.ctorParameters = function () { return []; };
        return LibraryComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AccordionComponent = (function () {
        function AccordionComponent() {
            this.active = true;
            this.opened = true;
            this.showArrow = false;
            this.closeStart = new i0.EventEmitter();
            this.closeDone = new i0.EventEmitter();
            this.openStart = new i0.EventEmitter();
            this.openDone = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        AccordionComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        AccordionComponent.prototype.toggle = /**
         * @return {?}
         */
            function () {
                this.opened = !this.opened;
            };
        /**
         * @return {?}
         */
        AccordionComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                this.opened = true;
            };
        /**
         * @return {?}
         */
        AccordionComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.opened = false;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        AccordionComponent.prototype.onStart = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (this.opened) {
                    this.openStart.emit();
                }
                else {
                    this.closeStart.emit();
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        AccordionComponent.prototype.onDone = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (this.opened) {
                    this.openDone.emit();
                }
                else {
                    this.closeDone.emit();
                }
            };
        /**
         * @return {?}
         */
        AccordionComponent.prototype.onClickTrigger = /**
         * @return {?}
         */
            function () {
                if (this.active) {
                    this.toggle();
                }
            };
        AccordionComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-accordion',
                        template: "<div class=\"accordion\">\n  <div class=\"trigger-wrapper\" (click)=\"onClickTrigger()\" [class.active]=\"active\">\n    <ng-content select=\".accordion-trigger\"></ng-content>\n  </div>\n  <div class=\"content-wrapper\" [@toggle]=\"opened ? 'show' : 'hide'\" (@toggle.start)=\"onStart($event)\" (@toggle.done)=\"onDone($event)\">\n    <ng-content select=\".accordion-content\"></ng-content>\n  </div>\n</div>",
                        styles: [".trigger-wrapper{position:relative;padding:0}.trigger-wrapper.active{cursor:pointer}.content-wrapper{overflow:hidden;clear:both}.mat-icon{position:absolute;right:2%;top:25%;color:#fff;font-size:32px;height:50%;font-weight:700}"],
                        animations: [
                            animations.trigger('toggle', [
                                animations.state('*', animations.style({ height: '0px' })),
                                animations.state('show', animations.style({ height: '*' })),
                                animations.state('hide', animations.style({ height: '0px' })),
                                animations.transition('show <=> hide', [
                                    animations.animate('300ms ease-out')
                                ])
                            ])
                        ]
                    },] },
        ];
        /** @nocollapse */
        AccordionComponent.ctorParameters = function () { return []; };
        AccordionComponent.propDecorators = {
            active: [{ type: i0.Input }],
            opened: [{ type: i0.Input }],
            showArrow: [{ type: i0.Input }],
            closeStart: [{ type: i0.Output }],
            closeDone: [{ type: i0.Output }],
            openStart: [{ type: i0.Output }],
            openDone: [{ type: i0.Output }]
        };
        return AccordionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SharedModule = (function () {
        function SharedModule() {
        }
        SharedModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            i1.RouterModule,
                            flexLayout.FlexLayoutModule,
                        ],
                        declarations: [],
                        exports: [
                            common.CommonModule,
                            i1.RouterModule,
                            flexLayout.FlexLayoutModule,
                        ]
                    },] },
        ];
        return SharedModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AccordionModule = (function () {
        function AccordionModule() {
        }
        AccordionModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            SharedModule,
                        ],
                        declarations: [
                            AccordionComponent,
                        ],
                        exports: [
                            AccordionComponent,
                        ]
                    },] },
        ];
        return AccordionModule;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Address = (function () {
        function Address() {
            this.firstName = '';
            this.lastName = '';
            this.streetAddress = '';
            this.address2 = '';
            this.city = '';
            this.state = '';
            this.stateId = 45;
            this.zipCode = 0;
            this.metadata = {
                streetAddress: {},
                address2: {},
                city: {},
                stateId: {},
                zipCode: {}
            };
        }
        Object.defineProperty(Address.prototype, "cityStateZip", {
            get: /**
             * @return {?}
             */ function () {
                return this.hasCityStateZip ?
                    this.city + ", " + this.state + " " + this.zipCode + " " : '';
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "fullName", {
            get: /**
             * @return {?}
             */ function () {
                return this.firstName && this.lastName ? this.firstName + " " + this.lastName : '';
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "hasAddress", {
            get: /**
             * @return {?}
             */ function () {
                return this.hasStreetAddress && this.hasCityStateZip;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "hasCityStateZip", {
            get: /**
             * @return {?}
             */ function () {
                return this.city !== '' && (this.state !== '' || this.stateId !== 0) && this.zipCode !== 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Address.prototype, "hasStreetAddress", {
            get: /**
             * @return {?}
             */ function () {
                return this.streetAddress !== '';
            },
            enumerable: true,
            configurable: true
        });
        return Address;
    }());
    var Alert = (function () {
        function Alert() {
            this.message = '';
        }
        return Alert;
    }());
    var Coordinates = (function () {
        function Coordinates() {
            this.row = 0;
            this.column = 0;
        }
        return Coordinates;
    }());
    var Dimensions = (function () {
        function Dimensions() {
            this.height = 0;
            this.width = 0;
            this.rows = 0;
            this.columns = 0;
        }
        Object.defineProperty(Dimensions.prototype, "approxRatio", {
            get: /**
             * @return {?}
             */ function () {
                return this.rows / this.columns;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Dimensions.prototype, "ratio", {
            get: /**
             * @return {?}
             */ function () {
                return this.height / this.width;
            },
            enumerable: true,
            configurable: true
        });
        return Dimensions;
    }());
    var Email = (function () {
        function Email() {
            this.id = 0;
            this.bcc = '';
            this.body = '';
            this.cc = '';
            this.failed = '';
            this.from = '';
            this.sent = false;
            this.sentDate = new Date();
            this.subject = '';
            this.to = '';
            this.createdById = null;
            this.createdDate = new Date();
            this.attachments = [];
        }
        return Email;
    }());
    var /** @type {?} */ EMAIL_REGEX = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
    var Filters = (function () {
        function Filters() {
            this.skip = 0;
            this.sortBy = '';
            this.take = 0;
        }
        return Filters;
    }());
    var Image = (function () {
        function Image() {
            this.src = '';
            this.height = 0;
            this.width = 0;
        }
        Object.defineProperty(Image.prototype, "horizontal", {
            get: /**
             * @return {?}
             */ function () {
                return this.orientation === 'h';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "vertical", {
            get: /**
             * @return {?}
             */ function () {
                return this.orientation === 'v';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "colspan", {
            get: /**
             * @return {?}
             */ function () {
                return this.vertical ? 1 : 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "rowspan", {
            get: /**
             * @return {?}
             */ function () {
                return this.vertical ? 2 : 1;
            },
            enumerable: true,
            configurable: true
        });
        return Image;
    }());
    var Metadata = (function () {
        function Metadata() {
            this.controls = [];
            this.ignore = [];
            this.label = '';
            this.name = '';
        }
        return Metadata;
    }());
    /** @enum {number} */
    var MetadataType = {
        CLASS: 0,
        METHOD: 1,
        PROPERTY: 2,
        PARAMETER: 3,
        STATIC_METHOD: 4,
        STATIC_PROPERTY: 5,
    };
    MetadataType[MetadataType.CLASS] = "CLASS";
    MetadataType[MetadataType.METHOD] = "METHOD";
    MetadataType[MetadataType.PROPERTY] = "PROPERTY";
    MetadataType[MetadataType.PARAMETER] = "PARAMETER";
    MetadataType[MetadataType.STATIC_METHOD] = "STATIC_METHOD";
    MetadataType[MetadataType.STATIC_PROPERTY] = "STATIC_PROPERTY";
    /**
     * @template T
     */
    var /**
     * @template T
     */ PropertyMetadata = (function () {
        function PropertyMetadata() {
            this.ignore = [];
            this.label = '';
            this.name = '';
        }
        return PropertyMetadata;
    }());
    var QueryItem = (function () {
        function QueryItem() {
            this.label = '';
        }
        return QueryItem;
    }());
    /**
     * @template T
     */
    var /**
     * @template T
     */ QueryModel = (function () {
        function QueryModel() {
            this.userId = 0;
            this.accountId = 0;
            this.fields = [];
            this.filters = [];
            this.groups = [];
            this.params = {};
            this.skip = 0;
            this.sort = [];
            this.take = 0;
            this.term = '';
        }
        Object.defineProperty(QueryModel.prototype, "hasParams", {
            get: /**
             * @return {?}
             */ function () {
                return this.totalParams > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryModel.prototype, "keys", {
            get: /**
             * @return {?}
             */ function () {
                return Object.keys(new QueryModel());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryModel.prototype, "totalParams", {
            get: /**
             * @return {?}
             */ function () {
                return Object.keys(this.params).length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} query
         * @return {?}
         */
        QueryModel.AppendQueryString = /**
         * @param {?} query
         * @return {?}
         */
            function (query) {
                var /** @type {?} */ obj = QueryModel.BuildQueryObject(query);
                return Object.keys(obj).reduce(function (acc, key) {
                    var /** @type {?} */ str = obj[key];
                    return str ? QueryModel.AppendToQueryString(acc, str) : acc;
                }, '');
            };
        /**
         * @param {?} path
         * @param {?} str
         * @return {?}
         */
        QueryModel.AppendToQueryString = /**
         * @param {?} path
         * @param {?} str
         * @return {?}
         */
            function (path, str) {
                return path ? path + "&" + str : str;
            };
        /**
         * @param {?} query
         * @return {?}
         */
        QueryModel.BuildQueryString = /**
         * @param {?} query
         * @return {?}
         */
            function (query) {
                var /** @type {?} */ path = QueryModel.AppendQueryString(query);
                return path ? "?" + path : '';
            };
        /**
         * @param {?} query
         * @return {?}
         */
        QueryModel.BuildQueryObject = /**
         * @param {?} query
         * @return {?}
         */
            function (query) {
                return Object.assign({
                    skip: QueryModel.QuerySkip(query),
                    take: QueryModel.QueryTake(query),
                    term: QueryModel.QueryTerm(query)
                }, QueryModel.QueryParams(query));
            };
        /**
         * @param {?} date
         * @return {?}
         */
        QueryModel.FormatDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                var /** @type {?} */ d = new Date(date);
                var /** @type {?} */ month = '' + (d.getMonth() + 1);
                var /** @type {?} */ day = '' + d.getDate();
                var /** @type {?} */ year = d.getFullYear();
                if (month.length < 2) {
                    month = '0' + month;
                }
                if (day.length < 2) {
                    day = '0' + day;
                }
                return [year, month, day].join('-');
            };
        /**
         * @param {?} queryString
         * @return {?}
         */
        QueryModel.ParseQuery = /**
         * @param {?} queryString
         * @return {?}
         */
            function (queryString) {
                var /** @type {?} */ query = {};
                var /** @type {?} */ pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');
                for (var /** @type {?} */ i = 0; i < pairs.length; i++) {
                    var /** @type {?} */ pair = pairs[i].split('=');
                    query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');
                }
                return query;
            };
        /**
         * @param {?} query
         * @return {?}
         */
        QueryModel.QueryParams = /**
         * @param {?} query
         * @return {?}
         */
            function (query) {
                return Object.keys(query.params)
                    .reduce(function (acc, key) {
                    return Object.assign({}, acc, (_a = {}, _a[key] = key + "=" + query.params[key], _a));
                    var _a;
                }, {});
            };
        /**
         * @param {?} query
         * @return {?}
         */
        QueryModel.QuerySkip = /**
         * @param {?} query
         * @return {?}
         */
            function (query) {
                return query.skip ? "skip=" + query.skip : '';
            };
        /**
         * @param {?} query
         * @return {?}
         */
        QueryModel.QueryTake = /**
         * @param {?} query
         * @return {?}
         */
            function (query) {
                return query.take ? "take=" + query.take : '';
            };
        /**
         * @param {?} query
         * @return {?}
         */
        QueryModel.QueryTerm = /**
         * @param {?} query
         * @return {?}
         */
            function (query) {
                return query.term ? "term=" + query.term : '';
            };
        Object.defineProperty(QueryModel.prototype, "queryParams", {
            get: /**
             * @return {?}
             */ function () {
                return QueryModel.QueryParams(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryModel.prototype, "queryString", {
            get: /**
             * @return {?}
             */ function () {
                return QueryModel.BuildQueryString(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryModel.prototype, "queryObject", {
            get: /**
             * @return {?}
             */ function () {
                return QueryModel.BuildQueryObject(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryModel.prototype, "querySkip", {
            get: /**
             * @return {?}
             */ function () {
                return this.skip ? "skip=" + this.skip : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryModel.prototype, "queryTake", {
            get: /**
             * @return {?}
             */ function () {
                return this.take ? "take=" + this.take : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryModel.prototype, "queryTerm", {
            get: /**
             * @return {?}
             */ function () {
                return this.term ? "term=" + this.term : '';
            },
            enumerable: true,
            configurable: true
        });
        return QueryModel;
    }());
    /**
     * @template T
     */
    var /**
     * @template T
     */ Search = (function () {
        function Search() {
            this.query = new QueryModel();
            this.results = [];
            this.total = 0;
        }
        return Search;
    }());
    var StyleModel = (function () {
        function StyleModel() {
        }
        Object.defineProperty(StyleModel.prototype, "styles", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ s = {};
                if (this.backgroundColor) {
                    s['backgroundColor'] = this.backgroundColor;
                }
                if (this.border) {
                    s['border'] = this.border;
                }
                if (this.borderRadius) {
                    s['borderRadius.px'] = this.borderRadius;
                }
                if (this.color) {
                    s['color'] = this.color;
                }
                if (this.cursor) {
                    s['color'] = this.cursor;
                }
                if (this.display) {
                    s['display'] = this.display;
                }
                if (this.fontSize) {
                    s['fontSize'] = this.fontSize;
                }
                if (this.height) {
                    s['height.px'] = this.height;
                }
                if (this.lineHeight) {
                    s['line-height.px'] = this.lineHeight;
                }
                if (this.padding) {
                    s['padding.px'] = this.padding;
                }
                if (this.paddingTop) {
                    s['padding-top.px'] = this.paddingTop;
                }
                if (this.paddingBottom) {
                    s['padding-bottom.px'] = this.paddingBottom;
                }
                if (this.paddingLeft) {
                    s['padding-left.px'] = this.paddingLeft;
                }
                if (this.paddingRight) {
                    s['padding-right.px'] = this.paddingRight;
                }
                if (this.textDecoration) {
                    s['textDecoration'] = this.textDecoration;
                }
                if (this.width) {
                    s['width.px'] = this.width;
                }
                return s;
            },
            enumerable: true,
            configurable: true
        });
        return StyleModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Tile = (function () {
        function Tile() {
            this.id = 0;
            this.cellHeight = 0;
            this.cellWidth = 0;
            this.color = '#fff';
            this.name = '';
            this.src = '';
            this.text = '';
            this._coordinates = new Coordinates();
            this._dimensions = new Dimensions();
            this._image = new Image();
        }
        Object.defineProperty(Tile.prototype, "coordinates", {
            get: /**
             * @return {?}
             */ function () {
                return this._coordinates || new Coordinates();
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._coordinates = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "dimensions", {
            get: /**
             * @return {?}
             */ function () {
                return this._dimensions || new Dimensions();
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._dimensions = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "image", {
            get: /**
             * @return {?}
             */ function () {
                return this._image || new Image();
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._image = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "height", {
            get: /**
             * @return {?}
             */ function () {
                return this.rows * this.cellHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "width", {
            get: /**
             * @return {?}
             */ function () {
                return this.columns * this.cellWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "imageSrc", {
            get: /**
             * @return {?}
             */ function () {
                return this.image.src;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "imageHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this.image.height * this.scale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "imageWidth", {
            get: /**
             * @return {?}
             */ function () {
                return this.image.width * this.scale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "rows", {
            get: /**
             * @return {?}
             */ function () {
                return this.dimensions.rows;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "columns", {
            get: /**
             * @return {?}
             */ function () {
                return this.dimensions.columns;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "positionTop", {
            get: /**
             * @return {?}
             */ function () {
                return this.startRow * this.cellHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "positionLeft", {
            get: /**
             * @return {?}
             */ function () {
                return this.startColumn * this.cellWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "approxRatio", {
            get: /**
             * @return {?}
             */ function () {
                return this.rows * this.cellHeight / this.columns * this.cellWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "ratio", {
            get: /**
             * @return {?}
             */ function () {
                return this.dimensions.ratio;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "scale", {
            get: /**
             * @return {?}
             */ function () {
                return this.heightScale >= this.widthScale ? this.heightScale : this.widthScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "heightScale", {
            get: /**
             * @return {?}
             */ function () {
                return (this.rows * this.cellHeight) / this.image.height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "widthScale", {
            get: /**
             * @return {?}
             */ function () {
                return (this.columns * this.cellWidth) / this.image.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "startRow", {
            get: /**
             * @return {?}
             */ function () {
                return this.coordinates.row;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "startColumn", {
            get: /**
             * @return {?}
             */ function () {
                return this.coordinates.column;
            },
            enumerable: true,
            configurable: true
        });
        return Tile;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} derived
     * @param {?} baseCtors
     * @return {?}
     */
    function applyDecorators(derived, baseCtors) {
        baseCtors.forEach(function (baseCtor) {
            Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
                derived[name] = baseCtor.prototype[name];
            });
        });
    }
    /**
     * @param {?} derivedCtor The clas Constructor
     * @param {?} baseCtors
     * @return {?}
     */
    function applyMixins(derivedCtor, baseCtors) {
        baseCtors.forEach(function (baseCtor) {
            Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
                derivedCtor.prototype[name] = baseCtor.prototype[name];
            });
        });
    }
    /**
     * Find distinct elements in the union of 2 arrays.
     * @param {?} array1
     * @param {?} array2
     * @return {?}
     */
    function arrayUnion(array1, array2) {
        var /** @type {?} */ a = __spread(array1, array2);
        for (var /** @type {?} */ i = 0; i < a.length; ++i) {
            for (var /** @type {?} */ j = i + 1; j < a.length; ++j) {
                if (a[i] === a[j]) {
                    a.splice(j--, 1);
                }
            }
        }
        return a;
    }
    /**
     * @param {?} target
     * @param {?} props
     * @return {?}
     */
    function assignProps(target, props) {
        Object.keys(props).forEach(function (key) {
            if (target[key]) {
                target[key] = props[key];
            }
        });
    }
    /**
     * @template T
     * @param {?} ctor
     * @param {...?} args
     * @return {?}
     */
    function build(ctor) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var /** @type {?} */ instance = new ctor();
        return args.reduce(function (acc, next) {
            var /** @type {?} */ ret;
            try {
                ret = Object.assign(acc, next);
            }
            catch (e) {
                console.warn(e);
                ret = acc;
            }
            finally {
                return ret;
            }
        }, instance);
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function compareDates(a, b) {
        return new Date(b).getTime() - new Date(a).getTime();
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function compareNumbers(a, b) {
        return a - b;
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function compareStrings(a, b) {
        var /** @type {?} */ x = a.toLowerCase();
        var /** @type {?} */ y = b.toLowerCase();
        if (x < y) {
            return -1;
        }
        else if (x > y) {
            return 1;
        }
        return 0;
    }
    /**
     * @param {?} arr
     * @param {?=} key
     * @return {?}
     */
    function distinct(arr, key) {
        if (key === void 0) {
            key = '';
        }
        return key ? arr.reduce(function (acc, x) { return acc.findIndex(function (y) { return y[key] === x[key]; }) === -1 ? __spread(acc, [x]) : acc; }, [])
            : arr.reduce(function (acc, x) { return acc.indexOf(x) === -1 ? __spread(acc, [x]) : acc; }, []);
    }
    /**
     * @param {?} x1
     * @param {?} x2
     * @return {?}
     */
    function equals(x1, x2) {
        // check whether x1 and x2 have the same type
        if (typeof (x1) !== typeof (x2)) {
            return false;
        }
        // check whether x1 and x2 are both null or both undefined
        if ((x1 === null && x2 === null) || (x1 === undefined && x2 === undefined)) {
            return true;
        }
        // account for non-matching null and undefined values
        if (((x1 === null || x1 === undefined) && x2 !== null && x2 !== undefined)
            || ((x2 === null || x2 === undefined) && x1 !== null && x1 !== undefined)) {
            return false;
        }
        // compare two arrays
        if (Array.isArray(x1) && Array.isArray(x2) && x1.length === x2.length) {
            return x1.findIndex(function (x, index) { return !equals(x, x2[index]); }) === -1 ? true : false;
        }
        // compare two objects
        if (x1 && typeof (x1) === 'object' && typeof (x2) === 'object'
            && Object.keys(x1).length === Object.keys(x2).length
            && Object.keys(x2).length === arrayUnion(Object.keys(x1), Object.keys(x2)).length) {
            return Object.keys(x1).findIndex(function (key) { return !equals(x1[key], x2[key]); }) === -1;
        }
        // compare two primitives with the same type
        return x1 === x2;
    }
    /**
     * Extends an object with the *enumerable* and *own* properties of one or more source objects,
     * similar to Object.assign.
     *
     * @param {?} dest The object which will have properties copied to it.
     * @param {...?} sources The source objects from which properties will be copied.
     * @return {?}
     */
    function extendObject(dest) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (dest == null) {
            throw TypeError('Cannot convert undefined or null to object');
        }
        try {
            for (var sources_1 = __values(sources), sources_1_1 = sources_1.next(); !sources_1_1.done; sources_1_1 = sources_1.next()) {
                var source = sources_1_1.value;
                if (source != null) {
                    for (var /** @type {?} */ key in source) {
                        if (source.hasOwnProperty(key)) {
                            dest[key] = source[key];
                        }
                    }
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (sources_1_1 && !sources_1_1.done && (_a = sources_1.return))
                    _a.call(sources_1);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return dest;
        var e_1, _a;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function falsy(value) {
        return value === null || value === 0 || value === '' || value === undefined;
    }
    /**
     * Remove problematic or undesired store properties.
     * @param {?} obj
     * @return {?}
     */
    function filterState(obj) {
        return removeCycles(removeProps(obj));
    }
    /**
     * @param {?} ctor
     * @return {?}
     */
    function findMetadata(ctor) {
        var /** @type {?} */ instance = new ctor();
        return instance && instance.metadata ? instance.metadata : new Metadata();
    }
    /**
     * @return {?}
     */
    function findSchoolYear() {
        var /** @type {?} */ date = new Date();
        var /** @type {?} */ year = date.getFullYear();
        var /** @type {?} */ month = date.getMonth();
        return month >= 7 ? year + "-" + (year + 1) : year - 1 + "-" + year;
    }
    /**
     * @param {?} obj
     * @param {?} parents
     * @return {?}
     */
    function flattenKeys(obj, parents) {
        return Object.keys(obj).reduce(function (acc, key) {
            var /** @type {?} */ pathToRoot = __spread(parents, [key]);
            var /** @type {?} */ val = obj[key];
            if (!Array.isArray(val) && Object.keys(val).length > 0) {
                return __spread(acc, flattenKeys(val, pathToRoot));
            }
            return __spread(acc, pathToRoot);
        }, []);
    }
    /**
     * @param {?=} number
     * @return {?}
     */
    function formatPhoneNumber(number) {
        if (number === void 0) {
            number = '';
        }
        if (!number) {
            return '000-000-0000';
        }
        var /** @type {?} */ l = number.length;
        return number && (l === 7 || l === 10) ?
            l === 7 ? format7DigitPhoneNumber(number)
                : format10DigitPhoneNumber(number)
            : '000-000-0000';
    }
    /**
     * @param {?=} number
     * @return {?}
     */
    function format7DigitPhoneNumber(number) {
        if (number === void 0) {
            number = '0000000';
        }
        var /** @type {?} */ first3 = number.substring(0, 3);
        var /** @type {?} */ last4 = number.substring(3, 7);
        return first3 + " -" + last4 + " ";
    }
    /**
     * @param {?=} number
     * @return {?}
     */
    function format10DigitPhoneNumber(number) {
        if (number === void 0) {
            number = '0000000000';
        }
        var /** @type {?} */ first3 = number.substring(0, 3);
        var /** @type {?} */ last7 = format7DigitPhoneNumber(number.substring(3, 10));
        return first3 + " -" + last7 + " ";
    }
    /**
     * @param {?} total
     * @return {?}
     */
    function formatPrice(total) {
        var /** @type {?} */ dollars = total.toFixed(2).replace(/./g, function (c, i, a) {
            return i && c !== '.' && ((a.length - i) % 3 === 0) ? ',' + c : c;
        });
        return "$" + dollars;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    function getTypeNameForDebugging(type) {
        return type['name'] || typeof type;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function getAllProps(obj) {
        var /** @type {?} */ mapped = obj['metadata'] && obj['metadata']['include'] && Array.isArray(obj['metadata']['include']) ?
            obj['metadata']['include'].reduce(function (acc, key) {
                return Object.assign({}, acc, (_a = {}, _a[key] = obj[key], _a));
                var _a;
            }, {}) : obj;
        if (obj['metadata'] && obj['metadata']['exclude'] && Array.isArray(obj['metadata']['exclude'])) {
            obj['metadata']['exclude'].forEach(function (key) {
                delete mapped[key];
            });
        }
        return __spread(Object.keys(mapped), getGetters(mapped));
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function getGetters(obj) {
        return Object.keys(obj.constructor.prototype).filter(function (name) {
            return typeof Object.getOwnPropertyDescriptor(obj.constructor.prototype, name)['get'] === 'function';
        });
    }
    /**
     * @param {?} model
     * @return {?}
     */
    function getKeyValues(model) {
        var /** @type {?} */ keys = getAllProps(model);
        return model['metadata'] && model['metadata']['include'] ?
            toArray(model['metadata']['include']).reduce(function (acc, key) {
                return Object.assign({}, acc, (_a = {}, _a[key] = model[key], _a));
                var _a;
            }, {})
            : keys.reduce(function (acc, key) {
                return Object.assign({}, acc, (_a = {}, _a[key] = model[key], _a));
                var _a;
            }, {});
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function getSetters(obj) {
        return Object.keys(obj.prototype).filter(function (name) {
            return typeof Object.getOwnPropertyDescriptor(obj.prototype, name)['set'] === 'function';
        });
    }
    /**
     * @param {?} el
     * @param {?} styleProp
     * @return {?}
     */
    function getStyle(el, styleProp) {
        var /** @type {?} */ value;
        var /** @type {?} */ defaultView = el.ownerDocument.defaultView;
        // W3C standard way:
        if (defaultView && defaultView.getComputedStyle) {
            // sanitize property name to css notation (hypen separated words eg. font-Size)
            styleProp = styleProp.replace(/([A-Z])/g, '-$1').toLowerCase();
            return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);
        }
        else if (el['currentStyle']) {
            // IE
            // sanitize property name to camelCase
            styleProp = styleProp.replace(/\-(\w)/g, function (str, letter) {
                return letter.toUpperCase();
            });
            value = el['currentStyle'][styleProp];
            return value;
        }
        return '';
    }
    /**
     * @param {?} model
     * @return {?}
     */
    function getValue(model) {
        if (model === null || typeof (model) === 'string' || typeof (model) === 'string' || model instanceof Date) {
            return model;
        }
        var /** @type {?} */ keys = getAllProps(model);
        var /** @type {?} */ props = keys.filter(function (key) { return key !== 'metadata' && !ignoreKey(model, key); })
            .map(function (key) {
            var /** @type {?} */ obj = {};
            obj[key] = model[key] && typeof model[key] === 'object' ?
                (Array.isArray(model[key]) ?
                    (model[key].length > 0 ?
                        model[key].map(function (x) { return (typeof x === 'object' ? getValue(x) : x); }) : [])
                    : getValue(model[key])) : model[key];
            return obj;
        });
        return props.reduce(function (acc, val) {
            return Object.assign({}, acc, val);
        }, {});
    }
    /**
     * @return {?}
     */
    function guid() {
        /**
         * @return {?}
         */
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
            s4() + '-' + s4() + s4() + s4();
    }
    /**
     * @param {?} changes
     * @param {?} key
     * @param {?} props
     * @return {?}
     */
    function hasChanged(changes, key, props) {
        var /** @type {?} */ currentValue = changes[key] && changes[key].currentValue ? changes[key].currentValue : {};
        var /** @type {?} */ previousValue = changes[key] && changes[key].previousValue ? changes[key].previousValue : {};
        return props.reduce(function (acc, prop) {
            return acc ? true : currentValue[prop] !== previousValue[prop];
        }, false);
    }
    /**
     * @param {?} changes
     * @param {?} key
     * @return {?}
     */
    function idChanged(changes, key) {
        var /** @type {?} */ newId = changes[key].currentValue ? changes[key].currentValue['id'] || 0 : 0;
        var /** @type {?} */ oldId = changes[key].previousValue ? changes[key].previousValue['id'] || 0 : 0;
        return newId !== oldId;
    }
    /**
     * @param {?} model
     * @param {?} key
     * @return {?}
     */
    function ignoreKey(model, key) {
        if (model['metadata'] && model['metadata']['ignore']) {
            return inArray(model['metadata']['ignore'], key);
        }
        return false;
    }
    /**
     * @param {?} arr
     * @param {?} val
     * @return {?}
     */
    function inArray(arr, val) {
        return arr.filter(function (item) { return item === val; }).length > 0;
    }
    /**
     * @param {?} arr
     * @param {?} val
     * @param {?} key
     * @return {?}
     */
    function inArrayByKey(arr, val, key) {
        return arr.findIndex(function (item) { return item[key] === val; }) !== -1;
    }
    /**
     * @param {?} n
     * @return {?}
     */
    function integerArray(n) {
        return Array.from(Array(n).keys());
    }
    /**
     * @param {?} dateFrom
     * @param {?} dateTo
     * @param {?} dateCheck
     * @return {?}
     */
    function isBetweenDates(dateFrom, dateTo, dateCheck) {
        var /** @type {?} */ d1 = dateFrom.toLocaleDateString().split('/');
        var /** @type {?} */ d2 = dateTo.toLocaleDateString().split('/');
        var /** @type {?} */ c = dateCheck.toLocaleDateString().split('/');
        var /** @type {?} */ from = new Date(d1[2], toInt(d1[1]) - 1, d1[0]); // -1 because months are from 0 to 11
        var /** @type {?} */ to = new Date(d2[2], toInt(d2[1]) - 1, d2[0]);
        var /** @type {?} */ check = new Date(c[2], toInt(c[1]) - 1, c[0]);
        return (check >= from && check <= to);
    }
    /**
     * Detects cycles in an object.
     * @param {?} obj
     * @return {?}
     */
    function isCyclic(obj) {
        var /** @type {?} */ seenObjects = [];
        var /** @type {?} */ detect = function (x) {
            if (x && typeof x === 'object') {
                if (seenObjects.indexOf(x) !== -1) {
                    return true;
                }
                seenObjects.push(x);
                for (var /** @type {?} */ key in x) {
                    if (x.hasOwnProperty(key) && detect(x[key])) {
                        return true;
                    }
                }
            }
            return false;
        };
        return detect(obj);
    }
    /**
     * @param {?} fromState The last state object from the store
     * @param {?} dState A partial class containing all properties that have changed wrt fromState
     * @return {?} The current/updated state of the application (toState)
     */
    function nextState(fromState, dState) {
        var /** @type {?} */ toState = Object.assign({}, fromState, dState);
        return toState;
    }
    /**
     * @param {?} n
     * @return {?}
     */
    function positiveIntegerArray(n) {
        return integerArray(n).map(function (x) { return x + 1; });
    }
    /**
     * Remove store props that contain cycles.
     * @param {?} obj
     * @return {?}
     */
    function removeCycles(obj) {
        if (obj && typeof obj === 'object') {
            for (var /** @type {?} */ key in obj) {
                if (obj.hasOwnProperty(key) && isCyclic(obj[key])) {
                    delete obj[key];
                }
            }
        }
        return obj;
    }
    /**
     * Remove any props that should not appear in the store.
     * @param {?} obj
     * @return {?}
     */
    function removeProps(obj) {
        return obj;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    function serialize(model) {
        if (Array.isArray(model)) {
            return model.map(function (x) { return serialize(x); });
        }
        if (model.serialize && typeof model.serialize === 'function') {
            return serialize(model.serialize());
        }
        if (model === null || typeof (model) === 'number' || typeof (model) === 'string' || model instanceof Date) {
            return model;
        }
        var /** @type {?} */ keys = getAllProps(model);
        if (keys.length === 0) {
            return model;
        }
        return keys.reduce(function (acc, key) {
            var /** @type {?} */ val = null;
            if (model[key] !== null && typeof (model[key]) === 'object' && !(model[key] instanceof Date)) {
                if (model[key].serialize && typeof model[key].serialize === 'function') {
                    val = model[key].serialize();
                }
                else {
                    val = serialize(model[key]);
                }
            }
            else {
                val = model[key];
            }
            return Object.assign({}, acc, (_a = {},
                _a[key] = val,
                _a));
            var _a;
        }, {});
    }
    /**
     * @param {?} token
     * @return {?}
     */
    function stringify(token) {
        if (typeof token === 'string') {
            return token;
        }
        if (token == null) {
            return '' + token;
        }
        if (token.overriddenName) {
            return "" + token.overriddenName;
        }
        if (token.name) {
            return "" + token.name;
        }
        var /** @type {?} */ res = token.toString();
        var /** @type {?} */ newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function str2CharCode(str) {
        return str.charCodeAt(0);
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function str2Id(str) {
        var /** @type {?} */ charCodes = str ? str.split('').reduce(function (acc, x) { return "" + acc + str2CharCode(x); }, '') : '';
        return toInt(charCodes);
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function str2int(str) {
        return parseInt(str, 10);
    }
    /**
     * @param {?} strArray
     * @return {?}
     */
    function strArray2Id(strArray) {
        var /** @type {?} */ str = strArray.reduce(function (acc, x) { return "" + acc + x; }, '');
        return str2Id(str);
    }
    /**
     * @param {?} errorName
     * @param {?} errorMessage
     * @return {?}
     */
    function throwException(errorName, errorMessage) {
        throw {
            name: errorName,
            level: 'Show Stopper',
            message: errorMessage,
            htmlMessage: 'Error detected. Please contact the <a href=\'mailto:agendamanager@caiu.com\'>system administrator</a>.',
            toString: function () { return errorName + ': ' + errorMessage; }
        };
    }
    /**
     * @return {?}
     */
    function throwNotImplementedException() {
        throwException('Not Implemented', 'Not Implemented');
    }
    /**
     * @param {?} val
     * @return {?}
     */
    function toArray(val) {
        return val ? (Array.isArray(val) ? val : [val]) : [];
    }
    /**
     * @param {?} val
     * @return {?}
     */
    function toInt(val) {
        return val && val.toString ? str2int(val.toString()) : 0;
    }
    /**
     * @param {?} action
     * @return {?}
     */
    function toPayload(action) {
        return action ? action.payload : null;
    }
    /**
     * @param {?} n
     * @return {?}
     */
    function toPx(n) {
        return n + "px";
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function truthy(value) {
        return !falsy(value);
    }
    /**
     * @param {?} obj
     * @param {?} type
     * @return {?}
     */
    function tryCast(obj, type) {
        var /** @type {?} */ retObj = new type();
        for (var /** @type {?} */ key in obj) {
            if (typeof (retObj[key]) !== 'undefined') {
                retObj[key] = obj[key];
            }
        }
        return retObj;
    }
    /**
     * @param {?} changes
     * @param {?=} key
     * @return {?}
     */
    function valueChanged(changes, key) {
        if (key === void 0) {
            key = '';
        }
        return key ? changes[key].currentValue !== changes[key].previousValue
            : Object.keys(changes).reduce(function (acc, currentKey) {
                return acc ? true : changes[currentKey].currentValue !== changes[currentKey].previousValue;
            }, false);
    }
    /**
     * @param {?} value
     * @param {?} formValue
     * @return {?}
     */
    function valueEquals(value, formValue) {
        return equals(getValue(value), formValue);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Collage = (function () {
        function Collage() {
            this.canvasHeight = 0;
            this.canvasWidth = 0;
            this.maxColumns = 4;
            this.maxRows = 4;
            this.totalColumns = 0;
            this.totalRows = 0;
            this._images = [];
            this._tiles = [];
        }
        /**
         * @param {?} startRow
         * @param {?} startColumn
         * @param {?} maxColumns
         * @param {?} cells
         * @return {?}
         */
        Collage.AvailableColumns = /**
         * @param {?} startRow
         * @param {?} startColumn
         * @param {?} maxColumns
         * @param {?} cells
         * @return {?}
         */
            function (startRow, startColumn, maxColumns, cells) {
                var /** @type {?} */ totalColumns = cells[0].length;
                return Math.max.apply(Math, __spread(positiveIntegerArray(maxColumns)
                    .map(function (k) { return k <= maxColumns && startColumn + k <= totalColumns && cells[startRow] && cells[startRow][startColumn + k] ? k : 1; })));
            };
        /**
         * @param {?} startRow
         * @param {?} startColumn
         * @param {?} maxRows
         * @param {?} cells
         * @return {?}
         */
        Collage.AvailableRows = /**
         * @param {?} startRow
         * @param {?} startColumn
         * @param {?} maxRows
         * @param {?} cells
         * @return {?}
         */
            function (startRow, startColumn, maxRows, cells) {
                var /** @type {?} */ totalRows = cells[0].length;
                return Math.max.apply(Math, __spread(positiveIntegerArray(maxRows)
                    .map(function (k) { return k <= maxRows && startRow + k <= totalRows && cells[startRow + k] && cells[startRow + k][startColumn] ? k : 1; })));
            };
        /**
         * @param {?} dimensions
         * @param {?} startRow
         * @param {?} startColumn
         * @param {?} maxRows
         * @param {?} maxColumns
         * @param {?} cells
         * @return {?}
         */
        Collage.AvailableDimensions = /**
         * @param {?} dimensions
         * @param {?} startRow
         * @param {?} startColumn
         * @param {?} maxRows
         * @param {?} maxColumns
         * @param {?} cells
         * @return {?}
         */
            function (dimensions, startRow, startColumn, maxRows, maxColumns, cells) {
                var /** @type {?} */ availableRows = Collage.AvailableRows(startRow, startColumn, maxRows, cells);
                var /** @type {?} */ availableColumns = Collage.AvailableColumns(startRow, startColumn, maxColumns, cells);
                return dimensions.filter(function (x) { return x.rows <= availableRows && x.columns <= availableColumns; });
            };
        /**
         * @param {?} images
         * @param {?} canvasHeight
         * @param {?} canvasWidth
         * @param {?=} totalRows
         * @param {?=} totalColumns
         * @param {?=} maxRows
         * @param {?=} maxColumns
         * @return {?}
         */
        Collage.Build = /**
         * @param {?} images
         * @param {?} canvasHeight
         * @param {?} canvasWidth
         * @param {?=} totalRows
         * @param {?=} totalColumns
         * @param {?=} maxRows
         * @param {?=} maxColumns
         * @return {?}
         */
            function (images, canvasHeight, canvasWidth, totalRows, totalColumns, maxRows, maxColumns) {
                if (totalRows === void 0) {
                    totalRows = 0;
                }
                if (totalColumns === void 0) {
                    totalColumns = 0;
                }
                if (maxRows === void 0) {
                    maxRows = 0;
                }
                if (maxColumns === void 0) {
                    maxColumns = 0;
                }
                var /** @type {?} */ collage = Object.assign(new Collage(), {
                    canvasHeight: canvasHeight,
                    canvasWidth: canvasWidth,
                    totalRows: totalRows,
                    totalColumns: totalColumns,
                    maxRows: maxRows,
                    maxColumns: maxColumns
                });
                collage.images = images;
                return collage;
            };
        /**
         * @param {?} rows
         * @param {?} cols
         * @return {?}
         */
        Collage.BuildEmptyCells = /**
         * @param {?} rows
         * @param {?} cols
         * @return {?}
         */
            function (rows, cols) {
                return integerArray(rows).map(function (x) { return integerArray(cols).map(function (y) { return true; }); });
            };
        /**
         * @param {?} collage
         * @return {?}
         */
        Collage.BuildTiles = /**
         * @param {?} collage
         * @return {?}
         */
            function (collage) {
                return collage.images.map(function (image, index) {
                    var /** @type {?} */ dimensions = Collage.FindDimensions(image.height, image.width, collage.tileDimensions, collage.cellHeight, collage.cellWidth);
                    return Object.assign(new Tile(), {
                        image: image,
                        dimensions: dimensions,
                        id: index + 1,
                        cellHeight: collage.cellHeight,
                        cellWidth: collage.cellWidth
                    });
                });
            };
        /**
         * @param {?} id
         * @param {?} tileIds
         * @return {?}
         */
        Collage.ChooseTileId = /**
         * @param {?} id
         * @param {?} tileIds
         * @return {?}
         */
            function (id, tileIds) {
                return __spread(tileIds.filter(function (x) { return x !== id; }), [id]);
            };
        /**
         * @param {?} index
         * @param {?} totalRows
         * @param {?} totalColumns
         * @return {?}
         */
        Collage.FindCoordinates = /**
         * @param {?} index
         * @param {?} totalRows
         * @param {?} totalColumns
         * @return {?}
         */
            function (index, totalRows, totalColumns) {
                var /** @type {?} */ remainder = (index + totalColumns) % totalColumns;
                return {
                    row: (index - remainder) / totalColumns,
                    column: remainder
                };
            };
        /**
         * @param {?} index
         * @param {?} totalRows
         * @param {?} totalColumns
         * @param {?} startRow
         * @param {?} startColumn
         * @return {?}
         */
        Collage.FindCoordinatesNested = /**
         * @param {?} index
         * @param {?} totalRows
         * @param {?} totalColumns
         * @param {?} startRow
         * @param {?} startColumn
         * @return {?}
         */
            function (index, totalRows, totalColumns, startRow, startColumn) {
                var /** @type {?} */ coordinates = Collage.FindCoordinates(index, totalRows, totalColumns);
                coordinates.column += startColumn;
                coordinates.row += startRow;
                return coordinates;
            };
        /**
         * @param {?} height
         * @param {?} width
         * @param {?} dimensions
         * @param {?} cellHeight
         * @param {?} cellWidth
         * @return {?}
         */
        Collage.FindDimensions = /**
         * @param {?} height
         * @param {?} width
         * @param {?} dimensions
         * @param {?} cellHeight
         * @param {?} cellWidth
         * @return {?}
         */
            function (height, width, dimensions, cellHeight, cellWidth) {
                var /** @type {?} */ filtered = dimensions.filter(function (x) { return x.rows * cellHeight <= height && x.columns * cellWidth <= width; });
                var /** @type {?} */ ordered = filtered.sort(function (a, b) { return Math.abs(height / width - a.ratio) - Math.abs(height / width - b.ratio); });
                var /** @type {?} */ closestMatch = ordered[0];
                var /** @type {?} */ rows = closestMatch && closestMatch.rows ? closestMatch.rows : [];
                var /** @type {?} */ columns = closestMatch && closestMatch.columns ? closestMatch.columns : [];
                return Object.assign(new Dimensions(), {
                    rows: rows,
                    columns: columns,
                    height: height,
                    width: width
                });
            };
        /**
         * @param {?} tiles
         * @param {?} tileIds
         * @param {?} dimensions
         * @return {?}
         */
        Collage.FindNextTileId = /**
         * @param {?} tiles
         * @param {?} tileIds
         * @param {?} dimensions
         * @return {?}
         */
            function (tiles, tileIds, dimensions) {
                var /** @type {?} */ nextMatch = Collage.FindNextMatchId(tiles, tileIds, dimensions);
                return nextMatch || Collage.FindBestMatchId(tiles, tileIds, dimensions);
            };
        /**
         * @param {?} tiles
         * @param {?} tileIds
         * @param {?} dimensions
         * @return {?}
         */
        Collage.FindBestMatchId = /**
         * @param {?} tiles
         * @param {?} tileIds
         * @param {?} dimensions
         * @return {?}
         */
            function (tiles, tileIds, dimensions) {
                var /** @type {?} */ diff = 999;
                return tileIds.reduce(function (acc, id) {
                    var /** @type {?} */ tile = tiles.find(function (x) { return x.id === id; });
                    diff = Math.abs(tile.ratio - dimensions.ratio);
                    return acc === 0 || diff < acc ? id : acc;
                }, 0);
            };
        /**
         * @param {?} tiles
         * @param {?} tileIds
         * @param {?} dimensions
         * @return {?}
         */
        Collage.FindNextMatchId = /**
         * @param {?} tiles
         * @param {?} tileIds
         * @param {?} dimensions
         * @return {?}
         */
            function (tiles, tileIds, dimensions) {
                return tileIds.reduce(function (acc, id) {
                    if (acc !== 0) {
                        return acc;
                    }
                    var /** @type {?} */ tile = tiles.find(function (x) { return x.id === id; });
                    return tile && tile.rows === dimensions.rows && tile.columns === dimensions.columns ? tile.id : 0;
                }, 0);
            };
        /**
         * @param {?} tiles
         * @param {?} tileIds
         * @param {?} dimensions
         * @return {?}
         */
        Collage.FindBestMatch = /**
         * @param {?} tiles
         * @param {?} tileIds
         * @param {?} dimensions
         * @return {?}
         */
            function (tiles, tileIds, dimensions) {
                var /** @type {?} */ id = Collage.FindBestMatchId(tiles, tileIds, dimensions);
                return tiles.find(function (x) { return x.id === id; });
            };
        /**
         * @param {?} tiles
         * @param {?} tileIds
         * @param {?} dimensions
         * @return {?}
         */
        Collage.FindNextTile = /**
         * @param {?} tiles
         * @param {?} tileIds
         * @param {?} dimensions
         * @return {?}
         */
            function (tiles, tileIds, dimensions) {
                return tileIds.reduce(function (acc, id) {
                    if (acc === null || acc.id === 0) {
                        var /** @type {?} */ tile_1 = tiles.find(function (x) { return x.id === id; });
                        var /** @type {?} */ dim = dimensions.find(function (x) { return tile_1.rows === x.rows && tile_1.columns === x.columns; });
                        return dim ? Object.assign(new Tile(), tile_1, {
                            dimensions: Object.assign(new Dimensions(), tile_1.dimensions, {
                                rows: dim.rows,
                                columns: dim.columns
                            })
                        }) : null;
                    }
                    return acc;
                }, new Tile()) || Collage.FindBestMatch(tiles, tileIds, dimensions[0]);
            };
        /**
         * @param {?} cellHeight
         * @param {?} cellWidth
         * @param {?} maxRows
         * @param {?} maxColumns
         * @return {?}
         */
        Collage.GetTileDimensions = /**
         * @param {?} cellHeight
         * @param {?} cellWidth
         * @param {?} maxRows
         * @param {?} maxColumns
         * @return {?}
         */
            function (cellHeight, cellWidth, maxRows, maxColumns) {
                return positiveIntegerArray(maxRows).reduce(function (acc, x) {
                    var /** @type {?} */ dimensions = positiveIntegerArray(maxColumns)
                        .map(function (y) {
                        return Object.assign(new Dimensions(), {
                            rows: x,
                            columns: y,
                            height: x * cellHeight,
                            width: y * cellWidth
                        });
                    });
                    return __spread(acc, dimensions);
                }, []);
            };
        /**
         * @param {?} cells
         * @param {?} startIndex
         * @param {?} dimensions
         * @param {?} totalRows
         * @param {?} totalColumns
         * @return {?}
         */
        Collage.MarkCellsAsFilled = /**
         * @param {?} cells
         * @param {?} startIndex
         * @param {?} dimensions
         * @param {?} totalRows
         * @param {?} totalColumns
         * @return {?}
         */
            function (cells, startIndex, dimensions, totalRows, totalColumns) {
                var /** @type {?} */ start = Collage.FindCoordinates(startIndex, totalRows, totalColumns);
                return integerArray(dimensions.rows * dimensions.columns).reduce(function (acc, i) {
                    var /** @type {?} */ coordinates = Collage.FindCoordinatesNested(i, dimensions.rows, dimensions.columns, start.row, start.column);
                    cells[coordinates.row][coordinates.column] = false;
                    return cells;
                }, cells);
            };
        /**
         * @param {?} tiles
         * @param {?} collage
         * @return {?}
         */
        Collage.PositionTiles = /**
         * @param {?} tiles
         * @param {?} collage
         * @return {?}
         */
            function (tiles, collage) {
                var /** @type {?} */ cells = Collage.BuildEmptyCells(collage.totalRows, collage.totalColumns);
                var /** @type {?} */ tileIds = tiles.map(function (x) { return x.id; });
                return integerArray(collage.totalCells).reduce(function (acc, i) {
                    var /** @type {?} */ coordinates = Collage.FindCoordinates(i, collage.totalRows, collage.totalColumns);
                    if (!cells[coordinates.row][coordinates.column]) {
                        return acc;
                    }
                    var /** @type {?} */ availableDimensions = Collage.AvailableDimensions(collage.tileDimensions, coordinates.row, coordinates.column, collage.maxRows, collage.maxColumns, cells);
                    var /** @type {?} */ tile = Collage.FindNextTile(tiles, tileIds, availableDimensions);
                    tile.coordinates = coordinates;
                    cells = Collage.MarkCellsAsFilled(cells, i, tile.dimensions, collage.totalRows, collage.totalColumns);
                    tileIds = Collage.ChooseTileId(tile.id, tileIds);
                    return __spread(acc, [tile]);
                }, []);
            };
        Object.defineProperty(Collage.prototype, "cellHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this.canvasHeight / this.totalRows;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collage.prototype, "cellWidth", {
            get: /**
             * @return {?}
             */ function () {
                return this.canvasWidth / this.totalColumns;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collage.prototype, "emptyCells", {
            get: /**
             * @return {?}
             */ function () {
                return Collage.BuildEmptyCells(this.totalRows, this.totalColumns);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collage.prototype, "images", {
            get: /**
             * @return {?}
             */ function () {
                return this._images;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._images = value;
                this.tiles = Collage.BuildTiles(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collage.prototype, "tileDimensions", {
            get: /**
             * @return {?}
             */ function () {
                return Collage.GetTileDimensions(this.cellHeight, this.cellWidth, this.maxRows, this.maxColumns);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collage.prototype, "tiles", {
            get: /**
             * @return {?}
             */ function () {
                return this._tiles;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._tiles = Collage.PositionTiles(value, this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collage.prototype, "totalCells", {
            get: /**
             * @return {?}
             */ function () {
                return this.totalRows * this.totalColumns;
            },
            enumerable: true,
            configurable: true
        });
        return Collage;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CollageComponent = (function () {
        function CollageComponent() {
            this.images = [];
            this.canvasHeight = 0;
            this.canvasWidth = 0;
            this.totalRows = 0;
            this.totalColumns = 0;
            this.maxRows = 0;
            this.maxColumns = 0;
        }
        Object.defineProperty(CollageComponent.prototype, "collage", {
            get: /**
             * @return {?}
             */ function () {
                return this.canvasHeight > 0 && this.canvasWidth > 0 ?
                    Collage.Build(this.images, this.canvasHeight, this.canvasWidth, this.totalRows, this.totalColumns, this.maxRows, this.maxColumns)
                    : new Collage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CollageComponent.prototype, "tiles", {
            get: /**
             * @return {?}
             */ function () {
                return this.collage.tiles;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        CollageComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        CollageComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-collage',
                        template: "<iu-tile *ngFor=\"let tile of tiles\" [tile]=\"tile\"></iu-tile>",
                        styles: [""],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        CollageComponent.ctorParameters = function () { return []; };
        CollageComponent.propDecorators = {
            images: [{ type: i0.Input }],
            canvasHeight: [{ type: i0.Input }],
            canvasWidth: [{ type: i0.Input }],
            totalRows: [{ type: i0.Input }],
            totalColumns: [{ type: i0.Input }],
            maxRows: [{ type: i0.Input }],
            maxColumns: [{ type: i0.Input }]
        };
        return CollageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TileComponent = (function () {
        function TileComponent() {
            this.tile = new Tile();
        }
        Object.defineProperty(TileComponent.prototype, "backgroundColor", {
            get: /**
             * @return {?}
             */ function () {
                return '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileComponent.prototype, "height", {
            get: /**
             * @return {?}
             */ function () {
                return this.tile.height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileComponent.prototype, "imageHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this.tile.imageHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileComponent.prototype, "imageSrc", {
            get: /**
             * @return {?}
             */ function () {
                return this.tile.image.src;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileComponent.prototype, "imageWidth", {
            get: /**
             * @return {?}
             */ function () {
                return this.tile.imageWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileComponent.prototype, "position", {
            get: /**
             * @return {?}
             */ function () {
                return 'absolute';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileComponent.prototype, "positionLeft", {
            get: /**
             * @return {?}
             */ function () {
                return this.tile.positionLeft;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileComponent.prototype, "positionTop", {
            get: /**
             * @return {?}
             */ function () {
                return this.tile.positionTop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileComponent.prototype, "width", {
            get: /**
             * @return {?}
             */ function () {
                return this.tile.width;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TileComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        TileComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-tile',
                        template: "<div fxLayout fxLayoutAlign=\"center center\" class=\"tile\" [style.position]=\"position\" [style.top.px]=\"positionTop\" [style.left.px]=\"positionLeft\"\n  [style.background-color]=\"backgroundColor\" [style.height.px]=\"height\" [style.width.px]=\"width\">\n  <img [src]=\"imageSrc\" [style.height.px]=\"imageHeight\" [style.width.px]=\"imageWidth\">\n</div>\n",
                        styles: [""],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        TileComponent.ctorParameters = function () { return []; };
        TileComponent.propDecorators = {
            tile: [{ type: i0.Input }]
        };
        return TileComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TileModule = (function () {
        function TileModule() {
        }
        TileModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            SharedModule,
                        ],
                        declarations: [
                            TileComponent,
                        ],
                        exports: [
                            TileComponent,
                        ]
                    },] },
        ];
        return TileModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CollageModule = (function () {
        function CollageModule() {
        }
        CollageModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            SharedModule,
                            TileModule,
                        ],
                        declarations: [
                            CollageComponent,
                        ],
                        exports: [
                            CollageComponent,
                        ]
                    },] },
        ];
        return CollageModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DateRange = (function () {
        function DateRange() {
            this.startDate = new Date();
            this.endDate = new Date();
        }
        return DateRange;
    }());
    var DateHelper = (function () {
        function DateHelper() {
        }
        /**
         * @param {?} startDate
         * @param {?} startHours
         * @param {?} startMinutes
         * @param {?} startMeridian
         * @return {?}
         */
        DateHelper.BuildStartTime = /**
         * @param {?} startDate
         * @param {?} startHours
         * @param {?} startMinutes
         * @param {?} startMeridian
         * @return {?}
         */
            function (startDate, startHours, startMinutes, startMeridian) {
                var /** @type {?} */ startTime = new Date(startDate);
                var /** @type {?} */ hours = startMeridian === 'AM' ? startHours : startHours + 12;
                startTime.setHours(hours);
                startTime.setMinutes(startMinutes);
                return startTime;
            };
        /**
         * @param {?} startTime
         * @param {?} dHours
         * @param {?} dMinutes
         * @return {?}
         */
        DateHelper.BuildEndTime = /**
         * @param {?} startTime
         * @param {?} dHours
         * @param {?} dMinutes
         * @return {?}
         */
            function (startTime, dHours, dMinutes) {
                var /** @type {?} */ endTime = new Date(startTime);
                endTime.setHours(endTime.getHours() + dHours);
                endTime.setMinutes(endTime.getMinutes() + dMinutes);
                return endTime;
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DateHelper.FormatDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                var /** @type {?} */ d = new Date(date);
                var /** @type {?} */ month = '' + (d.getMonth() + 1);
                var /** @type {?} */ day = '' + d.getDate();
                var /** @type {?} */ year = d.getFullYear();
                return month && day && year ? [month, day, year].join('/') : null;
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DateHelper.FormatDateDashes = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                var /** @type {?} */ d = new Date(date);
                var /** @type {?} */ month = '' + (d.getMonth() + 1);
                var /** @type {?} */ day = '' + d.getDate();
                var /** @type {?} */ year = d.getFullYear();
                if (month.length < 2) {
                    month = '0' + month;
                }
                if (day.length < 2) {
                    day = '0' + day;
                }
                return [year, month, day].join('-');
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DateHelper.FormatDateSlashes = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                var /** @type {?} */ d = new Date(date);
                var /** @type {?} */ month = '' + (d.getMonth() + 1);
                var /** @type {?} */ day = '' + d.getDate();
                var /** @type {?} */ year = d.getFullYear();
                if (month.length < 2) {
                    month = '0' + month;
                }
                if (day.length < 2) {
                    day = '0' + day;
                }
                return [month, day, year].join('/');
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DateHelper.TimeAgo = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                if (!date) {
                    return '';
                }
                var /** @type {?} */ seconds = Math.floor(((new Date()).getTime() - (new Date(date)).getTime()) / 1000);
                var /** @type {?} */ interval = Math.floor(seconds / 31536000);
                if (interval > 1) {
                    return interval + ' years';
                }
                interval = Math.floor(seconds / 2592000);
                if (interval > 1) {
                    return interval + ' months';
                }
                interval = Math.floor(seconds / 86400);
                if (interval > 1) {
                    return interval + ' days';
                }
                interval = Math.floor(seconds / 3600);
                if (interval > 1) {
                    return interval + ' hours';
                }
                interval = Math.floor(seconds / 60);
                if (interval > 1) {
                    return interval + ' minutes';
                }
                return Math.floor(seconds) + ' seconds';
            };
        /**
         * @param {?} d
         * @return {?}
         */
        DateHelper.ToMonthName = /**
         * @param {?} d
         * @return {?}
         */
            function (d) {
                var /** @type {?} */ date = new Date(d);
                return DateHelper.MonthNames[date.getMonth()];
            };
        /**
         * @param {?} d
         * @return {?}
         */
        DateHelper.ToMonthNumber = /**
         * @param {?} d
         * @return {?}
         */
            function (d) {
                var /** @type {?} */ date = new Date(d);
                return date.getMonth() + 1;
            };
        /**
         * @param {?} monthYear
         * @return {?}
         */
        DateHelper.ToMonthNumberFromMonthYear = /**
         * @param {?} monthYear
         * @return {?}
         */
            function (monthYear) {
                var /** @type {?} */ month = monthYear.substr(monthYear.length - 2);
                return toInt(month) - 1;
            };
        /**
         * @param {?} monthYear
         * @return {?}
         */
        DateHelper.ToMonthNumberFromMonthYearName = /**
         * @param {?} monthYear
         * @return {?}
         */
            function (monthYear) {
                var /** @type {?} */ parts = monthYear.split(/\s*,\s*/);
                var /** @type {?} */ month = DateHelper.MonthNumbers[parts[0]];
                return month;
            };
        /**
         * @param {?} d
         * @return {?}
         */
        DateHelper.ToMonthYear = /**
         * @param {?} d
         * @return {?}
         */
            function (d) {
                var /** @type {?} */ date = new Date(d);
                var /** @type {?} */ monthNumber = DateHelper.ToMonthNumber(date);
                var /** @type {?} */ month = monthNumber < 10 ? "0" + monthNumber : monthNumber;
                return date.getFullYear() + "-" + month;
            };
        /**
         * @param {?} d
         * @return {?}
         */
        DateHelper.ToMonthYearName = /**
         * @param {?} d
         * @return {?}
         */
            function (d) {
                var /** @type {?} */ date = new Date(d);
                var /** @type {?} */ month = DateHelper.ToMonthName(date);
                var /** @type {?} */ year = date.getFullYear();
                return month && year ? month + " " + year : '';
            };
        /**
         * @param {?} monthYear
         * @return {?}
         */
        DateHelper.ToYearNumberFromMonthYear = /**
         * @param {?} monthYear
         * @return {?}
         */
            function (monthYear) {
                var /** @type {?} */ year = monthYear.substring(0, 4);
                return toInt(year);
            };
        /**
         * @param {?} monthYear
         * @return {?}
         */
        DateHelper.FromMonthYear = /**
         * @param {?} monthYear
         * @return {?}
         */
            function (monthYear) {
                var /** @type {?} */ year = DateHelper.ToYearNumberFromMonthYear(monthYear);
                var /** @type {?} */ month = DateHelper.ToMonthNumberFromMonthYear(monthYear);
                return year && month ? new Date(year, month) : new Date();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DateHelper.IsDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                return Object.prototype.toString.call(date) === '[object Date]';
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DateHelper.IsValidDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                var /** @type {?} */ dateWrapper = new Date(date);
                return !isNaN(dateWrapper.getDate());
            };
        Object.defineProperty(DateHelper, "Today", {
            get: /**
             * @return {?}
             */ function () {
                return new Date();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateHelper, "Month", {
            get: /**
             * @return {?}
             */ function () {
                return DateHelper.Today.getMonth();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateHelper, "MonthNumbers", {
            get: /**
             * @return {?}
             */ function () {
                return DateHelper.MonthNames.reduce(function (acc, x, i) {
                    return Object.assign({}, acc, (_a = {}, _a[x] = i, _a));
                    var _a;
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateHelper, "Year", {
            get: /**
             * @return {?}
             */ function () {
                return DateHelper.Today.getFullYear();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateHelper, "NextSchoolYear", {
            get: /**
             * @return {?}
             */ function () {
                return DateHelper.Month < 7 ? DateHelper.Year : DateHelper.Year + 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateHelper, "NextSchoolYearStartDate", {
            get: /**
             * @return {?}
             */ function () {
                return new Date(DateHelper.SchoolYearStart(DateHelper.NextSchoolYear));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateHelper, "PreviousSchoolYear", {
            get: /**
             * @return {?}
             */ function () {
                return DateHelper.Month < 7 ? DateHelper.Year : DateHelper.Year + 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateHelper, "PreviousSchoolYearEndDate", {
            get: /**
             * @return {?}
             */ function () {
                return new Date(DateHelper.SchoolYearEnd(DateHelper.PreviousSchoolYear));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateHelper, "FutureDate", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ date = DateHelper.Today;
                return DateHelper.AddDays(date, 100000);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateHelper, "PastDate", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ date = DateHelper.Today;
                return DateHelper.SubtractDays(date, 100000);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} d
         * @param {?} days
         * @return {?}
         */
        DateHelper.AddDays = /**
         * @param {?} d
         * @param {?} days
         * @return {?}
         */
            function (d, days) {
                var /** @type {?} */ date = new Date(d);
                date.setDate(date.getDate() + days);
                return date;
            };
        /**
         * @param {?} d
         * @param {?} days
         * @return {?}
         */
        DateHelper.SubtractDays = /**
         * @param {?} d
         * @param {?} days
         * @return {?}
         */
            function (d, days) {
                var /** @type {?} */ date = new Date(d);
                date.setDate(date.getDate() - days);
                return date;
            };
        /**
         * @param {?} year
         * @param {?} month
         * @param {?} day
         * @return {?}
         */
        DateHelper.BuildDate = /**
         * @param {?} year
         * @param {?} month
         * @param {?} day
         * @return {?}
         */
            function (year, month, day) {
                var /** @type {?} */ date = new Date();
                date.setFullYear(year);
                date.setMonth(month);
                date.setDate(day);
                return date;
            };
        /**
         * @param {?} d1
         * @param {?} d2
         * @return {?}
         */
        DateHelper.DateChanged = /**
         * @param {?} d1
         * @param {?} d2
         * @return {?}
         */
            function (d1, d2) {
                var /** @type {?} */ date1 = new Date(d1);
                var /** @type {?} */ date2 = new Date(d2);
                return date1.getDate() !== date2.getDate() || date1.getMonth() !== date2.getMonth() || date1.getFullYear() !== date2.getFullYear();
            };
        /**
         * @param {?} d1
         * @param {?} d2
         * @return {?}
         */
        DateHelper.IsSameDay = /**
         * @param {?} d1
         * @param {?} d2
         * @return {?}
         */
            function (d1, d2) {
                return !DateHelper.DateChanged(d1, d2);
            };
        Object.defineProperty(DateHelper, "YearStartDate", {
            get: /**
             * @return {?}
             */ function () {
                if (DateHelper.Month < 7) {
                    return DateHelper.BuildDate(DateHelper.Year - 1, 6, 1);
                }
                else {
                    return DateHelper.BuildDate(DateHelper.Year, 6, 1);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateHelper, "PreviousYearStartDate", {
            get: /**
             * @return {?}
             */ function () {
                if (DateHelper.Month < 7) {
                    return DateHelper.BuildDate(DateHelper.Year - 2, 6, 1);
                }
                else {
                    return DateHelper.BuildDate(DateHelper.Year - 1, 6, 1);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} year
         * @return {?}
         */
        DateHelper.SchoolYearStart = /**
         * @param {?} year
         * @return {?}
         */
            function (year) {
                return DateHelper.BuildDate(year, 6, 1);
            };
        Object.defineProperty(DateHelper, "YearEndDate", {
            get: /**
             * @return {?}
             */ function () {
                if (DateHelper.Month < 7) {
                    return DateHelper.BuildDate(DateHelper.Year, 5, 30);
                }
                else {
                    return DateHelper.BuildDate(DateHelper.Year + 1, 5, 30);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateHelper, "PreviousYearEndDate", {
            get: /**
             * @return {?}
             */ function () {
                if (DateHelper.Month < 7) {
                    return DateHelper.BuildDate(DateHelper.Year - 1, 5, 30);
                }
                else {
                    return DateHelper.BuildDate(DateHelper.Year, 5, 30);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?=} year
         * @return {?}
         */
        DateHelper.SchoolYearEnd = /**
         * @param {?=} year
         * @return {?}
         */
            function (year) {
                return DateHelper.BuildDate(year - 1, 5, 30);
            };
        /**
         * @param {?} dateRangeId
         * @return {?}
         */
        DateHelper.BuildDateRange = /**
         * @param {?} dateRangeId
         * @return {?}
         */
            function (dateRangeId) {
                var /** @type {?} */ startDate;
                var /** @type {?} */ endDate;
                switch (dateRangeId) {
                    case 0:
                        break;
                    case 1:
                        break;
                    case 2:
                        // Today
                        startDate = DateHelper.Today;
                        endDate = startDate;
                        break;
                    case 3:
                        // Next 15
                        startDate = DateHelper.Today;
                        endDate = DateHelper.AddDays(startDate, 15);
                        break;
                    case 4:
                        // Next 30
                        startDate = DateHelper.Today;
                        endDate = DateHelper.AddDays(startDate, 30);
                        break;
                    case 5:
                        // Next 60
                        startDate = DateHelper.Today;
                        endDate = DateHelper.AddDays(startDate, 60);
                        break;
                    case 6:
                        // Previous 15
                        endDate = DateHelper.Today;
                        startDate = DateHelper.SubtractDays(endDate, 15);
                        break;
                    case 7:
                        // Previous 30
                        endDate = DateHelper.Today;
                        startDate = DateHelper.SubtractDays(endDate, 30);
                        break;
                    case 8:
                        // Previous 60
                        endDate = DateHelper.Today;
                        startDate = DateHelper.SubtractDays(endDate, 60);
                        break;
                    case 9:
                        // School Year - Runs from July 1st Thru June 30th
                        startDate = DateHelper.YearStartDate;
                        endDate = DateHelper.YearEndDate;
                        break;
                    case 10:
                        // Number of meetings = 10
                        startDate = DateHelper.Today;
                        endDate = DateHelper.FutureDate;
                        break;
                    case 11:
                        // Previous School Year
                        startDate = DateHelper.PreviousYearStartDate;
                        endDate = DateHelper.PreviousYearEndDate;
                        break;
                }
                return build(DateRange, { startDate: startDate, endDate: endDate });
            };
        DateHelper.MonthNames = [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December'
        ];
        return DateHelper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ DATEPICKER_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return DatepickerComponent; }),
        multi: true
    };
    var DatepickerComponent = (function () {
        function DatepickerComponent() {
            this.placeholder = 'Choose a date';
            this.startView = 'month';
            this.selectedChanged = new i0.EventEmitter();
        }
        Object.defineProperty(DatepickerComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._value = val;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} fn
         * @return {?}
         */
        DatepickerComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        DatepickerComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouch = fn;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DatepickerComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DatepickerComponent.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
                if (this.onModelChange) {
                    this.onModelChange(value);
                }
            };
        /**
         * @param {?} input
         * @return {?}
         */
        DatepickerComponent.prototype.onBlur = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                var /** @type {?} */ date = new Date(input.value);
                if (DateHelper.IsValidDate(date)) {
                    this.changeSelected(date);
                }
                else {
                    input.value = DateHelper.FormatDate(this.value);
                }
            };
        Object.defineProperty(DatepickerComponent.prototype, "id", {
            get: /**
             * @return {?}
             */ function () {
                return this.datepicker.id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatepickerComponent.prototype, "opened", {
            get: /**
             * @return {?}
             */ function () {
                return this.datepicker.opened;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DatepickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.startAt = this.value;
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DatepickerComponent.prototype.changeSelected = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                this.onChange(date);
                this.selectedChanged.emit(date);
            };
        /**
         * @return {?}
         */
        DatepickerComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.datepicker.close();
            };
        /**
         * @return {?}
         */
        DatepickerComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                this.datepicker.open();
            };
        DatepickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-datepicker',
                        template: "<mat-form-field>\n  <input matInput [placeholder]=\"placeholder\" [matDatepicker]=\"picker\" (blur)=\"onBlur(pickerInput)\" (change)=\"onChange(value)\"\n    [min]=\"min\" [max]=\"max\" [value]=\"value\" #pickerInput>\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n  <mat-datepicker #picker [startAt]=\"startAt\" [startView]=\"startView\" [touchUi]=\"touchUi\" (selectedChanged)=\"changeSelected($event)\"></mat-datepicker>\n</mat-form-field>",
                        styles: [".mat-input-container{float:left}"],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [DATEPICKER_ACCESSOR]
                    },] },
        ];
        /** @nocollapse */
        DatepickerComponent.ctorParameters = function () { return []; };
        DatepickerComponent.propDecorators = {
            min: [{ type: i0.Input }],
            max: [{ type: i0.Input }],
            placeholder: [{ type: i0.Input }],
            startAt: [{ type: i0.Input }],
            startView: [{ type: i0.Input }],
            touchUi: [{ type: i0.Input }],
            selectedChanged: [{ type: i0.Output }],
            datepicker: [{ type: i0.ViewChild, args: ['picker',] }],
            value: [{ type: i0.Input }]
        };
        return DatepickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ DATERANGE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return DaterangeComponent; }),
        multi: true
    };
    var DaterangeComponent = (function () {
        function DaterangeComponent(changeDetectorRef) {
            this.changeDetectorRef = changeDetectorRef;
            this.inline = false;
            this.startLabel = 'Start Date';
            this.endLabel = 'End Date';
            this.startDateChanged = new i0.EventEmitter();
            this.endDateChanged = new i0.EventEmitter();
            this._value = new DateRange();
            this.focused = new DateRange();
        }
        Object.defineProperty(DaterangeComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._value = val;
                if (this && this.changeDetectorRef && !this.changeDetectorRef['destroyed']) {
                    this.changeDetectorRef.detectChanges();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DaterangeComponent.prototype, "startDateId", {
            get: /**
             * @return {?}
             */ function () {
                return this.startDatepicker.id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DaterangeComponent.prototype, "startDateOpened", {
            get: /**
             * @return {?}
             */ function () {
                return this.startDatepicker.opened;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DaterangeComponent.prototype, "endDateId", {
            get: /**
             * @return {?}
             */ function () {
                return this.endDatepicker.id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DaterangeComponent.prototype, "endDateOpened", {
            get: /**
             * @return {?}
             */ function () {
                return this.endDatepicker.opened;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DaterangeComponent.prototype, "startDateValue", {
            get: /**
             * @return {?}
             */ function () {
                return this.value.startDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.changeStartDate(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DaterangeComponent.prototype, "endDateValue", {
            get: /**
             * @return {?}
             */ function () {
                return this.value.endDate;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.changeEndDate(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} date
         * @return {?}
         */
        DaterangeComponent.prototype.changeStartDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                this.onChange(build(DateRange, {
                    endDate: this.value.endDate,
                    startDate: date
                }));
                this.startDateChanged.emit(date);
            };
        /**
         * @return {?}
         */
        DaterangeComponent.prototype.closeStartDate = /**
         * @return {?}
         */
            function () {
                this.startDatepicker.close();
            };
        /**
         * @return {?}
         */
        DaterangeComponent.prototype.openStateDate = /**
         * @return {?}
         */
            function () {
                this.startDatepicker.open();
            };
        /**
         * @param {?} date
         * @return {?}
         */
        DaterangeComponent.prototype.changeEndDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                this.onChange(build(DateRange, {
                    endDate: date,
                    startDate: this.value.startDate
                }));
                this.endDateChanged.emit(date);
            };
        /**
         * @return {?}
         */
        DaterangeComponent.prototype.closeEndDate = /**
         * @return {?}
         */
            function () {
                this.endDatepicker.close();
            };
        /**
         * @return {?}
         */
        DaterangeComponent.prototype.openEndDate = /**
         * @return {?}
         */
            function () {
                this.endDatepicker.open();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        DaterangeComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        DaterangeComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouch = fn;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DaterangeComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DaterangeComponent.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
                if (this.onModelChange) {
                    this.onModelChange(value);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DaterangeComponent.prototype.onBlur = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DaterangeComponent.prototype.onFocus = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.focused = value;
                if (this.onTouch) {
                    this.onTouch();
                }
            };
        DaterangeComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-daterange',
                        template: "<div class=\"daterange\">\n  <div class=\"start-date\" [class.date]=\"!inline\" [class.inline-date]=\"inline\">\n    <label class=\"lbl-date iu-primary\">{{ startLabel }}:</label>\n    <iu-datepicker #startDate (selectedChanged)=\"changeStartDate($event)\" [value]=\"startDateValue\"></iu-datepicker>\n  </div>\n  <div class=\"end-date\" [class.date]=\"!inline\" [class.inline-date]=\"inline\">\n    <label class=\"lbl-date iu-primary\">{{ endLabel }}:</label>\n    <iu-datepicker #endDate (selectedChanged)=\"changeEndDate($event)\" [value]=\"endDateValue\"></iu-datepicker>\n  </div>\n</div>\n",
                        styles: [".daterange{display:inline-block;line-height:18px;padding:0 10px;border-radius:3px}.daterange .date{display:flex;padding:6px}.daterange .inline-date{display:inline-flex;padding:0}.daterange .inline-date.end-date{margin-left:32px}.daterange .lbl-date{width:76px;display:inline-block;font-size:14px;padding-top:22px}"],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [DATERANGE_ACCESSOR]
                    },] },
        ];
        /** @nocollapse */
        DaterangeComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef }
            ];
        };
        DaterangeComponent.propDecorators = {
            inline: [{ type: i0.Input }],
            min: [{ type: i0.Input }],
            max: [{ type: i0.Input }],
            startAt: [{ type: i0.Input }],
            startLabel: [{ type: i0.Input }],
            endLabel: [{ type: i0.Input }],
            startView: [{ type: i0.Input }],
            touchUi: [{ type: i0.Input }],
            startDateChanged: [{ type: i0.Output }],
            endDateChanged: [{ type: i0.Output }],
            startDatepicker: [{ type: i0.ViewChild, args: ['startDate',] }],
            endDatepicker: [{ type: i0.ViewChild, args: ['endDate',] }],
            value: [{ type: i0.Input }]
        };
        return DaterangeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DatepickerModule = (function () {
        function DatepickerModule() {
        }
        DatepickerModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            SharedModule,
                            material.MatDatepickerModule,
                            material.MatNativeDateModule,
                            material.MatInputModule,
                        ],
                        declarations: [
                            DatepickerComponent,
                            DaterangeComponent,
                        ],
                        exports: [
                            DatepickerComponent,
                            DaterangeComponent,
                        ]
                    },] },
        ];
        return DatepickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DialogModel = (function () {
        function DialogModel() {
            this.title = ' ';
            this.actions = [];
            /**
             * Whether the dialog has a backdrop.
             */
            this.hasBackdrop = true;
            /**
             * Whether the user can use escape or clicking outside to close a modal.
             */
            this.disableClose = false;
        }
        Object.defineProperty(DialogModel.prototype, "config", {
            get: /**
             * @return {?}
             */ function () {
                return {
                    viewContainerRef: this.viewContainerRef,
                    role: this.role,
                    panelClass: this.panelClass,
                    hasBackdrop: this.hasBackdrop,
                    backdropClass: this.backdropClass,
                    disableClose: this.disableClose,
                    width: this.width,
                    height: this.height,
                    position: this.position,
                    data: this.data,
                    direction: this.direction
                };
            },
            enumerable: true,
            configurable: true
        });
        return DialogModel;
    }());
    var DialogAction = (function () {
        function DialogAction() {
            this.value = null;
            this.label = '';
            this.color = 'accent';
        }
        return DialogAction;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DialogComponent = (function () {
        function DialogComponent() {
            this.model = new DialogModel();
            this.showActions = true;
            this.showCloseAction = false;
            this.showCloseIcon = true;
            this.defaultActionColor = 'accent';
        }
        Object.defineProperty(DialogComponent.prototype, "actions", {
            get: /**
             * @return {?}
             */ function () {
                return this.model.actions;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DialogComponent.prototype, "actionWidth", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ actionsCount = Math.max(this.actions.length, 1);
                return 100 / actionsCount + "%";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DialogComponent.prototype, "title", {
            get: /**
             * @return {?}
             */ function () {
                return this.model.title;
            },
            enumerable: true,
            configurable: true
        });
        DialogComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-dialog',
                        template: "<mat-toolbar color=\"primary\" mat-dialog-title>\n  <span class=\"dialog-title\">\n    {{ title }}\n    <button *ngIf=\"showCloseIcon\" mat-button [mat-dialog-close]=\"null\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </span>\n</mat-toolbar>\n<mat-dialog-content class=\"scrollable\">\n  <ng-content></ng-content>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"showActions && actions.length > 0\">\n  <button *ngFor=\"let action of actions\" mat-raised-button [mat-dialog-close]=\"action.value\" [style.width]=\"actionWidth\" [style.color]=\"action.color\">{{ action.label }}</button>\n</mat-dialog-actions>\n<mat-dialog-actions *ngIf=\"showCloseAction && actions.length === 0\">\n  <button mat-raised-button mat-dialog-close=\"close\" [style.width]=\"actionWidth\" [style.color]=\"defaultActionColor\">Close</button>\n</mat-dialog-actions>\n",
                        styles: ["iu-dialog .mat-toolbar{margin:-24px -24px 0;width:calc(100% + 48px);min-height:32px}iu-dialog .mat-toolbar .dialog-title{position:relative;height:calc(100% - 8px);width:100%;margin-top:8px}iu-dialog .mat-toolbar .dialog-title button{cursor:pointer;position:absolute;right:0;top:-5px;border-radius:100%;height:42px;width:42px;min-width:36px}iu-dialog .mat-toolbar .dialog-title button:hover,iu-dialog .mat-toolbar .dialog-title button:hover mat-icon{font-weight:700}iu-dialog .mat-toolbar .dialog-title mat-icon{position:absolute;top:9px;right:8px;z-index:1}iu-dialog .mat-toolbar-row{height:48px}iu-dialog .mat-dialog-actions{margin-left:-24px;margin-right:-24px;color:#fff;padding:0}iu-dialog .mat-dialog-actions button{padding:12px 0}iu-dialog .mat-dialog-actions .mat-accent{color:#fff!important}"],
                        encapsulation: i0.ViewEncapsulation.None
                    },] },
        ];
        /** @nocollapse */
        DialogComponent.ctorParameters = function () { return []; };
        DialogComponent.propDecorators = {
            model: [{ type: i0.Input }],
            showActions: [{ type: i0.Input }],
            showCloseAction: [{ type: i0.Input }],
            showCloseIcon: [{ type: i0.Input }],
            defaultActionColor: [{ type: i0.Input }]
        };
        return DialogComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DialogModule = (function () {
        function DialogModule() {
        }
        DialogModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            SharedModule,
                            material.MatDialogModule,
                            material.MatIconModule,
                            material.MatToolbarModule,
                        ],
                        declarations: [
                            DialogComponent,
                        ],
                        exports: [
                            DialogComponent,
                        ]
                    },] },
        ];
        return DialogModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FileUpload = (function () {
        function FileUpload() {
            this.lastModified = 0;
            this.lastModifiedDate = new Date();
            this.name = '';
            this.size = 0;
            this.type = '';
            this.webkitRelativePath = '';
            this.order = 0;
            this.readyState = 'EMPTY';
            this.src = '';
        }
        /**
         * @param {?} file
         * @return {?}
         */
        FileUpload.BuildFromFile = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                return build(FileUpload, {
                    name: file.fileName,
                    size: file.fileSize,
                    type: file.mimeType,
                    src: file.src,
                    order: file.order
                });
            };
        /**
         * @param {?} reader
         * @return {?}
         */
        FileUpload.GetReadyState = /**
         * @param {?} reader
         * @return {?}
         */
            function (reader) {
                switch (reader.readyState) {
                    case 0:
                        return 'EMPTY';
                    case 1:
                        return 'LOADING';
                    case 2:
                        return 'DONE';
                    default:
                        return 'EMPTY';
                }
            };
        Object.defineProperty(FileUpload.prototype, "extension", {
            get: /**
             * @return {?}
             */ function () {
                return this.name.split('.').pop();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUpload.prototype, "isImage", {
            get: /**
             * @return {?}
             */ function () {
                return this.type.split('/')[0] === 'image';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUpload.prototype, "loading", {
            get: /**
             * @return {?}
             */ function () {
                return this.readyState === 'LOADING';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUpload.prototype, "file", {
            get: /**
             * @return {?}
             */ function () {
                return File.BuildFromFileUpload(this);
            },
            enumerable: true,
            configurable: true
        });
        return FileUpload;
    }());
    /**
     * @param {?} reader
     * @return {?}
     */
    function getReadyState(reader) {
        switch (reader.readyState) {
            case 0:
                return 'EMPTY';
            case 1:
                return 'LOADING';
            case 2:
                return 'DONE';
            default:
                return 'EMPTY';
        }
    }
    var File = (function () {
        function File() {
            this.id = 0;
            this.fileBinary = [];
            this.fileExtension = '';
            this.fileName = '';
            this.fileSize = 0;
            this.mimeType = '';
            this.order = 0;
        }
        /**
         * @param {?} upload
         * @return {?}
         */
        File.BuildFromFileUpload = /**
         * @param {?} upload
         * @return {?}
         */
            function (upload) {
                return build(File, {
                    fileBinary: upload.src.replace(File.GetSrcPrefix(upload.type), ''),
                    fileExtension: upload.extension,
                    fileName: upload.name,
                    fileSize: upload.size,
                    mimeType: upload.type,
                    order: upload.order
                });
            };
        /**
         * @param {?} img
         * @param {?=} defaultSrc
         * @return {?}
         */
        File.GetImageBinarySrc = /**
         * @param {?} img
         * @param {?=} defaultSrc
         * @return {?}
         */
            function (img, defaultSrc) {
                if (defaultSrc === void 0) {
                    defaultSrc = '';
                }
                if (Array.isArray(img)) {
                    if (img.length > 0) {
                        return "data:" + img[0].mimeType + ";base64," + img[0].fileBinary;
                    }
                    else {
                        return defaultSrc;
                    }
                }
                return img && img.mimeType && img.fileBinary ? "data:" + img.mimeType + ";base64," + img.fileBinary : defaultSrc;
            };
        /**
         * @param {?} mimeType
         * @return {?}
         */
        File.GetSrcPrefix = /**
         * @param {?} mimeType
         * @return {?}
         */
            function (mimeType) {
                return "data:" + mimeType + ";base64,";
            };
        Object.defineProperty(File.prototype, "src", {
            // get fileUpload(): FileUpload {
            //     return FileUpload.BuildFromFile(this);
            // }
            get: /**
             * @return {?}
             */ function () {
                return File.GetImageBinarySrc(this);
            },
            enumerable: true,
            configurable: true
        });
        return File;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var /**
     * @template T
     */ Permutation = (function () {
        function Permutation(order) {
            this.order = order;
            this._timestamp = new Date();
        }
        Object.defineProperty(Permutation.prototype, "ranks", {
            get: /**
             * @return {?}
             */ function () {
                return this.order.sort(function (a, b) { return a.order - b.order; })
                    .map(function (x, index) { return Object.assign(/** @type {?} */ ({}), x, { rank: index + 1 }); });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Permutation.prototype, "timestamp", {
            get: /**
             * @return {?}
             */ function () {
                return this._timestamp;
            },
            enumerable: true,
            configurable: true
        });
        return Permutation;
    }());
    /**
     * @template T
     */
    var /**
     * @template T
     */ OrderedItem = (function () {
        function OrderedItem(item) {
            this.item = item;
        }
        return OrderedItem;
    }());
    /**
     * @template T
     */
    var /**
     * @template T
     */ Ordering = (function () {
        function Ordering(_items, ctor, orderKey, idKey) {
            if (idKey === void 0) {
                idKey = 'id';
            }
            this._items = _items;
            this.ctor = ctor;
            this.orderKey = orderKey;
            this.idKey = idKey;
            this._history = [];
        }
        Object.defineProperty(Ordering.prototype, "count", {
            get: /**
             * @return {?}
             */ function () {
                return this.items.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Ordering.prototype, "history", {
            get: /**
             * @return {?}
             */ function () {
                return this._history;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Ordering.prototype, "instance", {
            get: /**
             * @return {?}
             */ function () {
                return new this.ctor();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Ordering.prototype, "items", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                return this._items.sort(function (a, b) { return _this.getItemOrder(a) - _this.getItemOrder(b); });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Ordering.prototype, "maxIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this.count === 0 ? 0 : Math.max.apply(Math, __spread(this.order.map(function (x) { return x.order; })));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Ordering.prototype, "order", {
            get: /**
             * @return {?}
             */ function () {
                return this.permutation.ranks;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Ordering.prototype, "permutation", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                return new Permutation(this.items.map(function (item) {
                    return ({
                        id: _this.getItemId(item),
                        order: _this.getItemOrder(item)
                    });
                }));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Ordering.prototype, "nextPosition", {
            get: /**
             * @return {?}
             */ function () {
                return this.maxIndex + 1;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} item
         * @return {?}
         */
        Ordering.prototype.addItem = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.addItemAtPosition(item, this.nextPosition);
            };
        /**
         * @param {?} item
         * @param {?} pos
         * @return {?}
         */
        Ordering.prototype.addItemAtPosition = /**
         * @param {?} item
         * @param {?} pos
         * @return {?}
         */
            function (item, pos) {
                var _this = this;
                var /** @type {?} */ newItemId = this.getItemId(item);
                return __spread(this.items, [build(this.ctor, item, { order: pos })]).map(function (x) {
                    var /** @type {?} */ order = _this.getItemOrder(x);
                    var /** @type {?} */ id = _this.getItemId(x);
                    return (order <= pos || id === newItemId) ? x : build(_this.ctor, x, { order: order + 1 });
                });
            };
        /**
         * @param {?=} items
         * @return {?}
         */
        Ordering.prototype.archive = /**
         * @param {?=} items
         * @return {?}
         */
            function (items) {
                var /** @type {?} */ permutation = items ? this.getPermutation(items) : this.permutation;
                this._history = __spread(this._history, [permutation]);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        Ordering.prototype.getItemId = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return item[this.idKey];
            };
        /**
         * @param {?} item
         * @return {?}
         */
        Ordering.prototype.getItemOrder = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return item[this.orderKey];
            };
        /**
         * @param {?} items
         * @return {?}
         */
        Ordering.prototype.getPermutation = /**
         * @param {?} items
         * @return {?}
         */
            function (items) {
                var _this = this;
                return new Permutation(items.map(function (item) {
                    return ({
                        id: _this.getItemId(item),
                        order: _this.getItemOrder(item)
                    });
                }));
            };
        /**
         * @param {?} item
         * @param {?} to
         * @return {?}
         */
        Ordering.prototype.move = /**
         * @param {?} item
         * @param {?} to
         * @return {?}
         */
            function (item, to) {
                var _this = this;
                var /** @type {?} */ from = this.getItemOrder(item);
                var /** @type {?} */ itemId = this.getItemId(item);
                if (to === from) {
                    return __spread(this.items);
                }
                else if (to < from) {
                    return this.items.map(function (x) {
                        var /** @type {?} */ order = _this.getItemOrder(x);
                        var /** @type {?} */ id = _this.getItemId(x);
                        return id === itemId ? build(_this.ctor, x, { order: to })
                            : (order < to || order > from) ? x : build(_this.ctor, x, { order: order + 1 });
                    });
                }
                else {
                    // to > from
                    return this.items.map(function (x) {
                        var /** @type {?} */ order = _this.getItemOrder(x);
                        var /** @type {?} */ id = _this.getItemId(x);
                        return id === itemId ? build(_this.ctor, x, { order: to })
                            : (order < from || order > to) ? x : build(_this.ctor, x, { order: order - 1 });
                    });
                }
            };
        /**
         * @param {?} item
         * @return {?}
         */
        Ordering.prototype.moveDown = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.move(item, this.getItemOrder(item) + 1);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        Ordering.prototype.moveUp = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.move(item, this.getItemOrder(item) - 1);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        Ordering.prototype.removeItem = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.removeItemAtPosition(this.getItemOrder(item));
            };
        /**
         * @param {?} pos
         * @return {?}
         */
        Ordering.prototype.removeItemAtPosition = /**
         * @param {?} pos
         * @return {?}
         */
            function (pos) {
                var _this = this;
                return this.items.filter(function (item) { return _this.getItemOrder(item) !== pos; })
                    .map(function (x) {
                    var /** @type {?} */ order = _this.getItemOrder(x);
                    return order < pos ? x : build(_this.ctor, x, { order: order - 1 });
                });
            };
        /**
         * @param {?} items
         * @return {?}
         */
        Ordering.prototype.updateItems = /**
         * @param {?} items
         * @return {?}
         */
            function (items) {
                this.archive();
                this._items = items;
            };
        return Ordering;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ FILE_UPLOAD_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return FileUploadComponent; }),
        multi: true
    };
    var FileUploadComponent = (function () {
        function FileUploadComponent(ref) {
            this.ref = ref;
            this.id = "files-" + guid();
            this.multiple = false;
            this.ordered = true;
            this.preview = true;
            this.upload = new i0.EventEmitter();
            this.changes$ = new rxjs.BehaviorSubject(new FileUpload());
            this.ordering = new Ordering([], FileUpload, 'order', 'name');
        }
        Object.defineProperty(FileUploadComponent.prototype, "activeFile", {
            get: /**
             * @return {?}
             */ function () {
                return this.hasUploads ? this.uploads[0] : new FileUpload();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUploadComponent.prototype, "hasUploads", {
            get: /**
             * @return {?}
             */ function () {
                return this.uploads.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUploadComponent.prototype, "showMultiple", {
            get: /**
             * @return {?}
             */ function () {
                return this.preview && this.multiple;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUploadComponent.prototype, "uploads", {
            get: /**
             * @return {?}
             */ function () {
                return this.ordering.items.filter(function (upload) { return upload.name !== ''; });
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.ordering.updateItems(value.filter(function (upload) { return upload.name !== ''; }));
                this.onChange(this.uploads);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileUploadComponent.prototype, "orderedUploads", {
            get: /**
             * @return {?}
             */ function () {
                return this.uploads;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FileUploadComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.changes$.subscribe(function (upload) {
                    _this.onUpload(upload);
                });
            };
        /**
         * @param {?} f
         * @return {?}
         */
        FileUploadComponent.prototype.add = /**
         * @param {?} f
         * @return {?}
         */
            function (f) {
                if (!this.multiple && this.hasUploads) {
                    this.remove();
                }
                this.uploads = this.ordering.addItem(f);
            };
        /**
         * @return {?}
         */
        FileUploadComponent.prototype.emit = /**
         * @return {?}
         */
            function () {
                if (this.value.length > 0) {
                    if (this.multiple) {
                        this.upload.emit(this.value);
                    }
                    else {
                        this.upload.emit(this.value[0]);
                    }
                }
            };
        /**
         * @param {?} f
         * @return {?}
         */
        FileUploadComponent.prototype.moveUp = /**
         * @param {?} f
         * @return {?}
         */
            function (f) {
                this.uploads = this.ordering.moveUp(f);
            };
        /**
         * @param {?} f
         * @return {?}
         */
        FileUploadComponent.prototype.moveDown = /**
         * @param {?} f
         * @return {?}
         */
            function (f) {
                this.uploads = this.ordering.moveDown(f);
            };
        /**
         * @param {?=} f
         * @return {?}
         */
        FileUploadComponent.prototype.remove = /**
         * @param {?=} f
         * @return {?}
         */
            function (f) {
                var /** @type {?} */ removeFile = f || this.activeFile;
                this.uploads = this.ordering.removeItem(removeFile);
            };
        /**
         * @param {?} f
         * @return {?}
         */
        FileUploadComponent.prototype.update = /**
         * @param {?} f
         * @return {?}
         */
            function (f) {
                var /** @type {?} */ index = this.uploads.findIndex(function (item) { return item['name'] === f.name; });
                if (index === -1) {
                    this.add(f);
                }
                else {
                    this.uploads = this.uploads.map(function (x, i) { return i === index ? build(FileUpload, f, { order: x.order }) : x; });
                    this.ref.detectChanges();
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        FileUploadComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        FileUploadComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouch = fn;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FileUploadComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
                this.uploadAll(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FileUploadComponent.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (!equals(this.value, value)) {
                    this.value = value;
                    if (value.every(function (x) { return x.readyState === 'DONE'; })) {
                        this.emit();
                    }
                    if (this.onModelChange) {
                        this.onModelChange(value);
                    }
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        FileUploadComponent.prototype.onInputChange = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var /** @type {?} */ input = event.target;
                var /** @type {?} */ files = input['files'];
                if (files && files.length > 0) {
                    for (var /** @type {?} */ i = 0; i < files.length; i++) {
                        this.setupReader(files[i]);
                    }
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FileUploadComponent.prototype.onBlur = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.focused = [];
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FileUploadComponent.prototype.onFocus = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.focused = value;
                this.onTouch();
            };
        /**
         * @param {?} upload
         * @return {?}
         */
        FileUploadComponent.prototype.onUpload = /**
         * @param {?} upload
         * @return {?}
         */
            function (upload) {
                var /** @type {?} */ f = build(FileUpload, upload);
                this.update(f);
            };
        /**
         * @param {?} file
         * @return {?}
         */
        FileUploadComponent.prototype.setupReader = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                var /** @type {?} */ reader = new FileReader();
                var /** @type {?} */ changes$ = this.changes$;
                var /** @type {?} */ upload = build(FileUpload, {
                    lastModified: file['lastModified'],
                    lastModifiedDate: file['lastModifiedDate'],
                    name: file['name'],
                    size: file['size'],
                    type: file['type'],
                    webkitRelativePath: file['webkitRelativePath']
                });
                reader.onload = function (e) {
                    var /** @type {?} */ src = reader.result;
                    var /** @type {?} */ readyState = FileUpload.GetReadyState(reader);
                    changes$.next(Object.assign(upload, { src: src, readyState: readyState }));
                };
                reader.readAsDataURL(file);
                this.onUpload(build(FileUpload, upload, { readyState: FileUpload.GetReadyState(reader) }));
            };
        /**
         * @param {?} uploads
         * @return {?}
         */
        FileUploadComponent.prototype.uploadAll = /**
         * @param {?} uploads
         * @return {?}
         */
            function (uploads) {
                var _this = this;
                uploads.forEach(function (upload) {
                    _this.onUpload(upload);
                });
            };
        FileUploadComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-file-upload',
                        template: "<div class=\"file-upload\">\n  <div class=\"box\" fxLayout=\"row\" fxLayoutAlign=\"center end\">\n    <p id=\"dragdrop-message\" *ngIf=\"showMultiple\">\n      <strong>Choose files</strong>\n      <span class=\"dragndrop\"> or drag them here</span>.\n    </p>\n    <input id=\"file-upload\" *ngIf=\"showMultiple\" type=\"file\" (change)=\"onInputChange($event)\" [id]=\"id\" multiple/>\n    <p id=\"dragdrop-message\" *ngIf=\"!multiple\">\n      <strong>Choose a file</strong>\n      <span class=\"dragndrop\"> or drag it here</span>.\n    </p>\n    <input id=\"file-upload\" *ngIf=\"!multiple\" type=\"file\" (change)=\"onInputChange($event)\" [id]=\"id\" />\n    <label [for]=\"id\" class=\"custom-file-upload\">\n      <figure>\n        <mat-icon>cloud_upload</mat-icon>\n      </figure>\n    </label>\n  </div>\n  <iu-uploads *ngIf=\"multiple\" [uploads]=\"uploads\" [ordered]=\"ordered\" (moveUp)=\"moveUp($event)\" (moveDown)=\"moveDown($event)\"\n    (remove)=\"remove($event)\"></iu-uploads>\n  <iu-upload *ngIf=\"preview && !multiple && hasUploads\" [upload]=\"activeFile\" [height]=\"200\" (remove)=\"remove()\"></iu-upload>\n</div>\n",
                        styles: [".file-upload{margin:10px;padding:10px}.file-upload input[type=file]{width:.1px;height:.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.file-upload .box{padding:100px 20px;margin:10px;display:flex;outline:-webkit-focus-ring-color auto 5px;outline-offset:-10px;position:relative}.file-upload .box #dragdrop-message{position:absolute;top:60px;max-width:80%;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;display:inline-block;overflow:hidden;font-size:24px}.file-upload .box #dragdrop-message span{display:inline}.file-upload .custom-file-upload{box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12);max-width:80%;font-size:20px;font-weight:700;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;display:inline-block;overflow:hidden;padding:10px 20px;margin-top:50px}.file-upload .custom-file-upload figure{width:50px;height:70px;display:flex;position:relative;padding:30px;margin:0 auto 10px}.file-upload .custom-file-upload figure mat-icon{font-size:50px;height:50px;width:50px}.file-upload .custom-file-upload figure::after,.file-upload .custom-file-upload figure::before{width:0;height:0;content:'';position:absolute;top:0;right:0}.file-upload .custom-file-upload figure::before{border-left:20px solid transparent}.file-upload .custom-file-upload figure::after{border-right:20px solid transparent}"],
                        providers: [FILE_UPLOAD_ACCESSOR],
                        encapsulation: i0.ViewEncapsulation.None
                    },] },
        ];
        /** @nocollapse */
        FileUploadComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef }
            ];
        };
        FileUploadComponent.propDecorators = {
            id: [{ type: i0.Input }],
            multiple: [{ type: i0.Input }],
            ordered: [{ type: i0.Input }],
            preview: [{ type: i0.Input }],
            upload: [{ type: i0.Output }]
        };
        return FileUploadComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FilePreviewComponent = (function () {
        function FilePreviewComponent() {
            this.file = new FileUpload();
            this.ordered = true;
            this.first = false;
            this.last = false;
            this.moveUp = new i0.EventEmitter();
            this.moveDown = new i0.EventEmitter();
            this.remove = new i0.EventEmitter();
        }
        Object.defineProperty(FilePreviewComponent.prototype, "cursorStyle", {
            get: /**
             * @return {?}
             */ function () {
                return this.ordered ? 'move' : 'default';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePreviewComponent.prototype, "graphic", {
            get: /**
             * @return {?}
             */ function () {
                if (this.file.loading) {
                    return 'cloud_upload';
                }
                else if (this.file.isImage) {
                    return 'image';
                }
                else {
                    switch (this.file.extension) {
                        case 'pdf':
                            return 'picture_as_pdf';
                        default:
                            return 'cloud_done';
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePreviewComponent.prototype, "showImage", {
            get: /**
             * @return {?}
             */ function () {
                return this.graphic === 'image';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePreviewComponent.prototype, "showUpArrow", {
            get: /**
             * @return {?}
             */ function () {
                return this.ordered && !this.first;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePreviewComponent.prototype, "showDownArrow", {
            get: /**
             * @return {?}
             */ function () {
                return this.ordered && !this.last;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FilePreviewComponent.prototype.onMoveUp = /**
         * @return {?}
         */
            function () {
                this.moveUp.emit(this.file);
            };
        /**
         * @return {?}
         */
        FilePreviewComponent.prototype.onMoveDown = /**
         * @return {?}
         */
            function () {
                this.moveDown.emit(this.file);
            };
        /**
         * @return {?}
         */
        FilePreviewComponent.prototype.onRemove = /**
         * @return {?}
         */
            function () {
                this.remove.emit(this.file);
            };
        FilePreviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-file-preview',
                        template: "<mat-card class=\"file-preview\" [style.cursor]=\"cursorStyle\">\n  <div class=\"graphic\">\n    <img *ngIf=\"showImage\" [src]=\"file.src\" [style.height]=\"height\" [style.width]=\"width\">\n    <mat-icon *ngIf=\"!showImage\" class=\"icon-graphic\">{{ graphic }}</mat-icon>\n  </div>\n  <mat-progress-bar mode=\"indeterminate\" *ngIf=\"file.loading\"></mat-progress-bar>\n  <div class=\"file-info\">\n    <span class=\"file-name\">{{ file.name }}</span>\n  </div>\n  <mat-icon *ngIf=\"showUpArrow\" class=\"up-arrow\" (click)=\"onMoveUp()\">keyboard_arrow_up</mat-icon>\n  <mat-icon *ngIf=\"showDownArrow\" class=\"down-arrow\" (click)=\"onMoveDown()\">keyboard_arrow_down</mat-icon>\n  <mat-icon class=\"remove-upload\" (click)=\"onRemove()\">cancel</mat-icon>\n</mat-card>\n",
                        styles: [".file-preview{height:80px;margin:2px 0;position:relative}.mat-card{padding:0}.file-preview img{max-height:72px}.graphic{position:absolute;left:50px;height:72px;max-width:200px;text-align:center;padding-left:20px;overflow:hidden}.icon-graphic{font-size:72px;height:72px;width:72px}.mat-progress-bar{position:absolute;left:0;top:73px}.file-info{position:absolute;left:250px;height:72px;max-width:300px;text-align:center}.file-name{margin:18px 6px;display:inline-block;line-height:36px;font-size:16px;height:36px;font-weight:700;color:#000}.arrow,.down-arrow,.up-arrow{cursor:pointer}.up-arrow{position:absolute;left:6px;top:0;font-size:36px;height:36px;width:36px;font-weight:700}.down-arrow{position:absolute;left:6px;top:36px;font-size:36px;height:36px;width:36px;font-weight:700}.remove-upload{cursor:pointer;position:absolute;right:10px;top:20px;font-size:40px;height:40px;width:40px}.down-arrow:hover,.up-arrow:hover{color:#fff}"]
                    },] },
        ];
        /** @nocollapse */
        FilePreviewComponent.ctorParameters = function () { return []; };
        FilePreviewComponent.propDecorators = {
            file: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            ordered: [{ type: i0.Input }],
            first: [{ type: i0.Input }],
            last: [{ type: i0.Input }],
            moveUp: [{ type: i0.Output }],
            moveDown: [{ type: i0.Output }],
            remove: [{ type: i0.Output }]
        };
        return FilePreviewComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UploadComponent = (function () {
        function UploadComponent() {
            this.upload = new FileUpload();
            this.height = 200;
            this.width = 600;
            this.remove = new i0.EventEmitter();
        }
        Object.defineProperty(UploadComponent.prototype, "graphic", {
            get: /**
             * @return {?}
             */ function () {
                if (this.upload.loading) {
                    return 'cloud_upload';
                }
                else if (this.upload.isImage) {
                    return 'image';
                }
                else {
                    switch (this.upload.extension) {
                        case 'pdf':
                            return 'picture_as_pdf';
                        default:
                            return 'cloud_done';
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UploadComponent.prototype, "showImage", {
            get: /**
             * @return {?}
             */ function () {
                return this.graphic === 'image';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        UploadComponent.prototype.onRemove = /**
         * @return {?}
         */
            function () {
                this.remove.emit(this.upload);
            };
        UploadComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-upload',
                        template: "<div class=\"upload\" [style.height]=\"img?.style?.height\">\n  <div class=\"graphic\" #img>\n    <img *ngIf=\"showImage\" [src]=\"upload.src\" [style.max-height.px]=\"height\" [style.max-width.px]=\"width\">\n    <mat-icon *ngIf=\"!showImage\" class=\"icon-graphic\" [style.max-height.px]=\"height\" [style.max-width.px]=\"width\">{{ graphic }}</mat-icon>\n    <mat-icon *ngIf=\"!upload.loading\" class=\"remove-upload\" (click)=\"onRemove()\">cancel</mat-icon>\n  </div>\n  <mat-spinner mode=\"indeterminate\" *ngIf=\"upload.loading\"></mat-spinner>\n  <div class=\"file-info\" *ngIf=\"!upload.loading\">\n    <span class=\"file-name\">{{ upload.name }}</span>\n  </div>\n</div>\n",
                        styles: [".upload{max-height:420px;max-width:600px;margin:10px 20px;position:relative;display:flex}.upload img{max-height:400px}.graphic{padding:0!important;float:left;margin:10px;position:relative}.icon-graphic{font-size:72px;height:72px;width:72px}.mat-progress-bar{position:absolute;left:0;top:73px}.file-info{float:right}.file-name{margin:18px 6px;display:inline-block;line-height:36px;font-size:20px;height:36px;font-weight:700;color:#000}.remove-upload{color:red;cursor:pointer;position:absolute;right:-20px;top:-20px;font-size:40px;height:40px;width:40px}"]
                    },] },
        ];
        /** @nocollapse */
        UploadComponent.ctorParameters = function () { return []; };
        UploadComponent.propDecorators = {
            upload: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            remove: [{ type: i0.Output }]
        };
        return UploadComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UploadsComponent = (function () {
        function UploadsComponent() {
            this.uploads = [];
            this.ordered = true;
            this.moveUp = new i0.EventEmitter();
            this.moveDown = new i0.EventEmitter();
            this.remove = new i0.EventEmitter();
        }
        /**
         * @param {?} f
         * @return {?}
         */
        UploadsComponent.prototype.onMoveUp = /**
         * @param {?} f
         * @return {?}
         */
            function (f) {
                this.moveUp.emit(f);
            };
        /**
         * @param {?} f
         * @return {?}
         */
        UploadsComponent.prototype.onMoveDown = /**
         * @param {?} f
         * @return {?}
         */
            function (f) {
                this.moveDown.emit(f);
            };
        /**
         * @param {?} f
         * @return {?}
         */
        UploadsComponent.prototype.onRemove = /**
         * @param {?} f
         * @return {?}
         */
            function (f) {
                this.remove.emit(f);
            };
        UploadsComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-uploads',
                        template: "<div class=\"uploads\" [style.height]=\"height\" [style.width]=\"width\">\n  <iu-file-preview *ngFor=\"let upload of uploads; let first = first; let last = last;\" [file]=\"upload\" [first]=\"first\" [last]=\"last\"\n    [ordered]=\"ordered\" (moveUp)=\"onMoveUp($event)\" (moveDown)=\"onMoveDown($event)\" (remove)=\"onRemove($event)\"></iu-file-preview>\n</div>\n",
                        styles: [".uploads{max-height:420px;max-width:600px;overflow-y:scroll;margin:10px 20px}.uploads::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);border-radius:10px;background-color:#424242}.uploads::-webkit-scrollbar{width:12px;background-color:#424242}.uploads::-webkit-scrollbar-thumb{border-radius:10px;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3)}.uploads .dragging{background-color:#424242}"],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        UploadsComponent.ctorParameters = function () { return []; };
        UploadsComponent.propDecorators = {
            uploads: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            ordered: [{ type: i0.Input }],
            moveUp: [{ type: i0.Output }],
            moveDown: [{ type: i0.Output }],
            remove: [{ type: i0.Output }]
        };
        return UploadsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FileUploadModule = (function () {
        function FileUploadModule() {
        }
        FileUploadModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            SharedModule,
                            material.MatCardModule,
                            material.MatIconModule,
                            material.MatProgressBarModule,
                            material.MatProgressSpinnerModule,
                        ],
                        declarations: [
                            FileUploadComponent,
                            FilePreviewComponent,
                            UploadComponent,
                            UploadsComponent,
                        ],
                        exports: [
                            FileUploadComponent,
                            FilePreviewComponent,
                            UploadComponent,
                            UploadsComponent,
                        ]
                    },] },
        ];
        return FileUploadModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var /**
     * @template T
     */ Collection = (function () {
        function Collection(ctor) {
            this.activeId = 0;
            this.metadata = {};
            this._items = {};
            if (ctor) {
                this.ctor = ctor;
            }
        }
        /**
         * @template T
         * @param {?} state
         * @param {?} key
         * @param {?} item
         * @return {?}
         */
        Collection.AddItem = /**
         * @template T
         * @param {?} state
         * @param {?} key
         * @param {?} item
         * @return {?}
         */
            function (state, key, item) {
                var /** @type {?} */ newState = {};
                Object.keys(state)
                    .forEach(function (k) {
                    newState[k] = state[k];
                });
                newState[key] = item;
                return newState;
            };
        /**
         * @template T
         * @param {?} items
         * @param {?=} findByKey
         * @return {?}
         */
        Collection.BuildCollection = /**
         * @template T
         * @param {?} items
         * @param {?=} findByKey
         * @return {?}
         */
            function (items, findByKey) {
                if (findByKey === void 0) {
                    findByKey = 'id';
                }
                var /** @type {?} */ dictionary = Collection.BuildItems(items, findByKey);
                return Object.assign(new Collection(), { items: dictionary });
            };
        /**
         * @template T
         * @param {?} value
         * @param {?=} key
         * @return {?}
         */
        Collection.BuildDictionaryFromArray = /**
         * @template T
         * @param {?} value
         * @param {?=} key
         * @return {?}
         */
            function (value, key) {
                if (key === void 0) {
                    key = 'id';
                }
                var /** @type {?} */ obj = {};
                value.forEach(function (item) {
                    obj[item[key]] = item;
                });
                return obj;
            };
        /**
         * @template T
         * @param {?} items
         * @param {?=} findByKey
         * @return {?}
         */
        Collection.BuildFromArray = /**
         * @template T
         * @param {?} items
         * @param {?=} findByKey
         * @return {?}
         */
            function (items, findByKey) {
                if (findByKey === void 0) {
                    findByKey = 'id';
                }
                var /** @type {?} */ dictionary = Collection.BuildItems(items, findByKey);
                return Object.assign(new Collection(), { items: dictionary });
            };
        /**
         * @template T
         * @param {?} items
         * @param {?=} findByKey
         * @return {?}
         */
        Collection.BuildItems = /**
         * @template T
         * @param {?} items
         * @param {?=} findByKey
         * @return {?}
         */
            function (items, findByKey) {
                if (findByKey === void 0) {
                    findByKey = 'id';
                }
                var /** @type {?} */ dictionary = {};
                items.forEach(function (item) {
                    var /** @type {?} */ key = item[findByKey];
                    dictionary[key] = item;
                });
                return dictionary;
            };
        /**
         * @template T
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
        Collection.Filter = /**
         * @template T
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
            function (item, path) {
                return Array.isArray(item['matches']) && inArray(item['matches'], path);
            };
        /**
         * @template T
         * @param {?} item
         * @param {?} paths
         * @return {?}
         */
        Collection.FilterAnd = /**
         * @template T
         * @param {?} item
         * @param {?} paths
         * @return {?}
         */
            function (item, paths) {
                return Array.isArray(item['matches']) && paths.every(function (path) { return inArray(item['matches'], path); });
            };
        /**
         * @template T
         * @param {?} item
         * @param {?} paths
         * @return {?}
         */
        Collection.FilterOr = /**
         * @template T
         * @param {?} item
         * @param {?} paths
         * @return {?}
         */
            function (item, paths) {
                return Array.isArray(item['matches']) && paths.some(function (path) { return inArray(item['matches'], path); });
            };
        /**
         * @template T
         * @param {?} state
         * @param {?} key
         * @return {?}
         */
        Collection.RemoveItem = /**
         * @template T
         * @param {?} state
         * @param {?} key
         * @return {?}
         */
            function (state, key) {
                var /** @type {?} */ newState = {};
                Object.keys(state)
                    .filter(function (k) { return k !== key; })
                    .forEach(function (k) {
                    newState[k] = state[k];
                });
                return newState;
            };
        Object.defineProperty(Collection.prototype, "active", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ item = this.items[this.activeId] || /** @type {?} */ ({});
                return this.ctor ? build(this.ctor, item) : item;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collection.prototype, "ctor", {
            get: /**
             * @return {?}
             */ function () {
                return this._ctor;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._ctor = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collection.prototype, "count", {
            get: /**
             * @return {?}
             */ function () {
                return this.toArray().length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collection.prototype, "defaultItem", {
            get: /**
             * @return {?}
             */ function () {
                return this.ctor ? new this.ctor() : /** @type {?} */ ({});
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collection.prototype, "empty", {
            get: /**
             * @return {?}
             */ function () {
                return this.toArray().length === 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collection.prototype, "instance", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ activeId = this.activeId;
                var /** @type {?} */ ctor = this.ctor;
                var /** @type {?} */ lastUpdated = this.lastUpdated;
                var /** @type {?} */ metadata = this.metadata;
                // const collection = this.constructor();
                var /** @type {?} */ collection = new Collection();
                collection.activeId = activeId;
                collection.ctor = ctor;
                collection.lastUpdated = lastUpdated;
                collection.metadata = metadata;
                return collection;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collection.prototype, "items", {
            get: /**
             * @return {?}
             */ function () {
                return this._items;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._items = value;
                this.lastUpdated = new Date();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collection.prototype, "keys", {
            get: /**
             * @return {?}
             */ function () {
                return Object.keys(this.items);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collection.prototype, "asArray", {
            get: /**
             * @return {?}
             */ function () {
                return this.toArray();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Collection.prototype, "itemsArray", {
            get: /**
             * @return {?}
             */ function () {
                return this.asArray;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        Collection.prototype.toArray = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return Object.keys(this.items).map(function (key) { return (_this.items[key]); });
            };
        /**
         * @param {?} id
         * @param {?=} key
         * @return {?}
         */
        Collection.prototype.activate = /**
         * @param {?} id
         * @param {?=} key
         * @return {?}
         */
            function (id, key) {
                if (key === void 0) {
                    key = 'id';
                }
                var /** @type {?} */ items = this.items[id] ? this.copyItems() : Object.assign(this.copyItems(), (_a = {}, _a[id] = (_b = {}, _b[key] = id, _b), _a));
                return Object.assign(new Collection(), this, { activeId: id, items: items });
                var _a, _b;
            };
        /**
         * @param {?} item
         * @param {?=} key
         * @return {?}
         */
        Collection.prototype.addItem = /**
         * @param {?} item
         * @param {?=} key
         * @return {?}
         */
            function (item, key) {
                var /** @type {?} */ items = this.copyItems();
                return Object.assign(this.constructor(), this, {
                    items: Object.assign(items, (_a = {}, _a[key] = item, _a))
                });
                var _a;
            };
        /**
         * @param {?} items
         * @param {?=} key
         * @return {?}
         */
        Collection.prototype.addItems = /**
         * @param {?} items
         * @param {?=} key
         * @return {?}
         */
            function (items, key) {
                var _this = this;
                if (key === void 0) {
                    key = 'id';
                }
                var /** @type {?} */ newItems = {};
                this.toArray().forEach(function (item) {
                    newItems[item[key]] = item;
                });
                items.forEach(function (item) {
                    var /** @type {?} */ existingItem = newItems[item[key]] ? newItems[item[key]] : /** @type {?} */ ({});
                    var /** @type {?} */ existingMatches = existingItem['matches'] || [];
                    var /** @type {?} */ newMatches = item['matches'] || [];
                    var /** @type {?} */ matches = arrayUnion(existingMatches, newMatches);
                    var /** @type {?} */ newItem = _this.buildItem(item, { matches: matches });
                    newItems[item[key]] = _this.buildItem(existingItem, newItem);
                });
                this.items = newItems;
                return Object.assign(new Collection(), this);
            };
        /**
         * @param {?} items
         * @param {?=} ctor
         * @return {?}
         */
        Collection.prototype.build = /**
         * @param {?} items
         * @param {?=} ctor
         * @return {?}
         */
            function (items, ctor) {
                return ctor ? build(ctor, { items: items })
                    : /** @type {?} */ (Object.assign(this.instance, { items: items }));
            };
        /**
         * @param {?} existingItem
         * @param {?} newItem
         * @param {?=} ctor
         * @return {?}
         */
        Collection.prototype.buildItem = /**
         * @param {?} existingItem
         * @param {?} newItem
         * @param {?=} ctor
         * @return {?}
         */
            function (existingItem, newItem, ctor) {
                var /** @type {?} */ existing = existingItem || {};
                var /** @type {?} */ item = ctor ? build(ctor, existing, newItem)
                    : this.ctor ? build(this.ctor, existing, newItem)
                        : Object.assign({}, existing, newItem);
                return item;
            };
        /**
         * @param {?} items
         * @param {?=} ctor
         * @return {?}
         */
        Collection.prototype.buildItems = /**
         * @param {?} items
         * @param {?=} ctor
         * @return {?}
         */
            function (items, ctor) {
                var /** @type {?} */ factory = ctor ? ctor : this.ctor;
                return items.map(function (x) { return factory ? build(factory, x) : Object.assign(/** @type {?} */ ({}), x); });
            };
        /**
         * @return {?}
         */
        Collection.prototype.copyItems = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return Object.keys(this.items)
                    .reduce(function (acc, key) {
                    acc[key] = _this.get(key);
                    return acc;
                }, {});
            };
        /**
         * @param {?} key
         * @return {?}
         */
        Collection.prototype.delete = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this.removeAt(key);
            };
        /**
         * @param {?} f
         * @return {?}
         */
        Collection.prototype.filter = /**
         * @param {?} f
         * @return {?}
         */
            function (f) {
                var /** @type {?} */ items = Collection.BuildDictionaryFromArray(this.toArray().filter(f));
                return Object.assign(new Collection(), this, { items: items });
            };
        /**
         * @param {?} f
         * @return {?}
         */
        Collection.prototype.filterBy = /**
         * @param {?} f
         * @return {?}
         */
            function (f) {
                return this.filterItems(f);
            };
        /**
         * @param {?} f
         * @return {?}
         */
        Collection.prototype.filterItems = /**
         * @param {?} f
         * @return {?}
         */
            function (f) {
                return this.toArray().filter(f);
            };
        /**
         * @param {?} f
         * @return {?}
         */
        Collection.prototype.findBy = /**
         * @param {?} f
         * @return {?}
         */
            function (f) {
                return this.asArray.find(f) || this.defaultItem;
            };
        /**
         * @param {?} id
         * @return {?}
         */
        Collection.prototype.get = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                var /** @type {?} */ existing = this.items[id];
                return this.ctor ? build(this.ctor, existing)
                    : Object.assign(/** @type {?} */ ({}), existing);
            };
        /**
         * @param {?} f
         * @return {?}
         */
        Collection.prototype.map = /**
         * @param {?} f
         * @return {?}
         */
            function (f) {
                var /** @type {?} */ items = Collection.BuildDictionaryFromArray(this.toArray().map(f));
                return Object.assign(new Collection(), this, { items: items });
            };
        /**
         * @param {?} path
         * @return {?}
         */
        Collection.prototype.query = /**
         * @param {?} path
         * @return {?}
         */
            function (path) {
                return this.toArray().filter(function (item) { return Collection.Filter(item, path); });
            };
        /**
         * @param {?} paths
         * @return {?}
         */
        Collection.prototype.queryAnd = /**
         * @param {?} paths
         * @return {?}
         */
            function (paths) {
                return this.toArray().filter(function (item) { return Collection.FilterAnd(item, paths); });
            };
        /**
         * @param {?} paths
         * @return {?}
         */
        Collection.prototype.queryOr = /**
         * @param {?} paths
         * @return {?}
         */
            function (paths) {
                return this.toArray().filter(function (item) { return Collection.FilterOr(item, paths); });
            };
        /**
         * @param {?} key
         * @return {?}
         */
        Collection.prototype.removeAt = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                var _this = this;
                var /** @type {?} */ keys = Object.keys(this.items);
                var /** @type {?} */ items = Collection.BuildDictionaryFromArray(keys.filter(function (x) { return x.toString() !== key.toString(); }).map(function (y) { return _this.items[y]; }));
                return Object.assign(new Collection(), this, { items: items });
            };
        /**
         * @param {?} key
         * @return {?}
         */
        Collection.prototype.removeItem = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                var _this = this;
                var /** @type {?} */ collection = this.constructor();
                var /** @type {?} */ keys = Object.keys(this.items).filter(function (k) { return k !== key; });
                keys.forEach(function (k) {
                    collection.items[k] = /** @type {?} */ (Object.assign({}, _this.items[k]));
                });
                return collection;
            };
        /**
         * @param {?} filter
         * @param {?=} key
         * @return {?}
         */
        Collection.prototype.removeItems = /**
         * @param {?} filter
         * @param {?=} key
         * @return {?}
         */
            function (filter, key) {
                if (key === void 0) {
                    key = 'id';
                }
                var /** @type {?} */ keys = this.toArray().filter(filter).map(function (x) { return x[key]; });
                this.removeKeys(keys);
            };
        /**
         * @param {?} keys
         * @return {?}
         */
        Collection.prototype.removeKeys = /**
         * @param {?} keys
         * @return {?}
         */
            function (keys) {
                var _this = this;
                keys.forEach(function (key) {
                    _this.removeItem(key);
                });
            };
        /**
         * @param {?} itemsArray
         * @return {?}
         */
        Collection.prototype.replace = /**
         * @param {?} itemsArray
         * @return {?}
         */
            function (itemsArray) {
                var /** @type {?} */ items = Collection.BuildDictionaryFromArray(this.buildItems(itemsArray));
                return Object.assign(new Collection(), this, { items: items });
            };
        /**
         * @param {?} items
         * @param {?=} filter
         * @return {?}
         */
        Collection.prototype.replaceItems = /**
         * @param {?} items
         * @param {?=} filter
         * @return {?}
         */
            function (items, filter) {
                if (filter) {
                    var /** @type {?} */ f = function (x) { return !filter(x); };
                    return this.replaceItems(__spread(this.filterItems(f), items));
                }
                return Object.assign(new Collection(), this, { items: items });
            };
        /**
         * @param {?} value
         * @return {?}
         */
        Collection.prototype.setValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return Object.assign(new Collection(), this, value);
            };
        /**
         * @param {?} value
         * @param {?=} ctor
         * @param {?=} key
         * @return {?}
         */
        Collection.prototype.update = /**
         * @param {?} value
         * @param {?=} ctor
         * @param {?=} key
         * @return {?}
         */
            function (value, ctor, key) {
                if (key === void 0) {
                    key = 'id';
                }
                if (Array.isArray(value)) {
                    return this.updateItems(value, ctor, key);
                }
                return this.updateItem(value, value[key], ctor);
            };
        /**
         * @param {?} item
         * @param {?} key
         * @param {?=} ctor
         * @return {?}
         */
        Collection.prototype.updateItem = /**
         * @param {?} item
         * @param {?} key
         * @param {?=} ctor
         * @return {?}
         */
            function (item, key, ctor) {
                var /** @type {?} */ items = this.copyItems();
                var /** @type {?} */ updatedItem = this.buildItem(items[key], item, ctor);
                return this.build(Object.assign(items, (_a = {}, _a[key] = updatedItem, _a)));
                var _a;
            };
        /**
         * @param {?} items
         * @param {?=} ctor
         * @param {?=} key
         * @return {?}
         */
        Collection.prototype.updateItems = /**
         * @param {?} items
         * @param {?=} ctor
         * @param {?=} key
         * @return {?}
         */
            function (items, ctor, key) {
                var _this = this;
                if (key === void 0) {
                    key = 'id';
                }
                var /** @type {?} */ existingItems = this.copyItems();
                var /** @type {?} */ updatedItems = items.reduce(function (acc, item) {
                    var /** @type {?} */ existingItem = acc[item[key]];
                    acc[item[key]] = _this.buildItem(existingItem, item, ctor);
                    return acc;
                }, existingItems);
                return this.build(updatedItems);
            };
        return Collection;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var /**
     * @template T
     */ Grid = (function () {
        function Grid(data) {
            this.data = data;
            this.query = new QueryModel();
            this.style = new StyleModel();
            this.filterable = true;
            this.sortable = { mode: 'multiple' };
        }
        /**
         * @param {?} acc
         * @param {?} operator
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        Grid.ApplyFilter = /**
         * @param {?} acc
         * @param {?} operator
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
            function (acc, operator, field, value) {
                switch (operator) {
                    case 'contains':
                        return acc.filter(function (row) { return Grid.Contains(row[field], value); });
                    case 'gte':
                        return acc.filter(function (row) { return Grid.MatchDate(row[field], value); });
                }
            };
        /**
         * @template T
         * @param {?} items
         * @return {?}
         */
        Grid.Build = /**
         * @template T
         * @param {?} items
         * @return {?}
         */
            function (items) {
                var /** @type {?} */ data = Object.assign(new Collection(), { items: items });
                return new Grid(data);
            };
        /**
         * @param {?} field
         * @param {?=} dir
         * @return {?}
         */
        Grid.BuildSort = /**
         * @param {?} field
         * @param {?=} dir
         * @return {?}
         */
            function (field, dir) {
                if (dir === void 0) {
                    dir = 'asc';
                }
                return /** @type {?} */ ({ dir: dir, field: field });
            };
        /**
         * @param {?} str
         * @param {?} substr
         * @return {?}
         */
        Grid.Contains = /**
         * @param {?} str
         * @param {?} substr
         * @return {?}
         */
            function (str, substr) {
                if (typeof (str) === 'string' && typeof (substr) === 'string') {
                    return str.toLowerCase().includes(substr.toLowerCase());
                }
                return true;
            };
        /**
         * @param {?} rows
         * @param {?} filters
         * @return {?}
         */
        Grid.FilterRows = /**
         * @param {?} rows
         * @param {?} filters
         * @return {?}
         */
            function (rows, filters) {
                return filters.reduce(function (acc, filter) {
                    var /** @type {?} */ operator = filter['operator'];
                    var /** @type {?} */ field = filter['field'];
                    var /** @type {?} */ value = filter['value'];
                    return Grid.ApplyFilter(rows, operator, field, value);
                }, rows);
            };
        /**
         * @param {?} date1
         * @param {?} date2
         * @return {?}
         */
        Grid.MatchDate = /**
         * @param {?} date1
         * @param {?} date2
         * @return {?}
         */
            function (date1, date2) {
                return DateHelper.IsSameDay(date1, date2);
            };
        /**
         * @param {?} rows
         * @param {?} skip
         * @param {?} take
         * @return {?}
         */
        Grid.PageRows = /**
         * @param {?} rows
         * @param {?} skip
         * @param {?} take
         * @return {?}
         */
            function (rows, skip, take) {
                return rows.filter(function (row, index) { return index >= skip && index < skip + take; });
            };
        /**
         * @param {?} rows
         * @param {?} sort
         * @return {?}
         */
        Grid.SortRows = /**
         * @param {?} rows
         * @param {?} sort
         * @return {?}
         */
            function (rows, sort) {
                return kendoDataQuery.orderBy(rows, sort);
            };
        /**
         * @param {?} grid
         * @return {?}
         */
        Grid.prototype.update = /**
         * @param {?} grid
         * @return {?}
         */
            function (grid) {
            };
        return Grid;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GridColumnComponent = (function () {
        function GridColumnComponent(view) {
            this.view = view;
            this.editable = true;
            this.field = '';
            this.filter = 'text';
            this.filterable = true;
            this.hidden = false;
            this.locked = false;
            this.sortable = true;
        }
        Object.defineProperty(GridColumnComponent.prototype, "colField", {
            get: /**
             * @return {?}
             */ function () {
                return this.model.metadata.name;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumnComponent.prototype, "colTitle", {
            get: /**
             * @return {?}
             */ function () {
                return this.model.title;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumnComponent.prototype, "colWidth", {
            get: /**
             * @return {?}
             */ function () {
                return this.model.width;
            },
            enumerable: true,
            configurable: true
        });
        GridColumnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-grid-column',
                        template: "<kendo-grid-column [field]=\"colField\" [title]=\"colTitle\" [width]=\"colWidth\" #kendoGridColumn>\n  <span #content>\n    <ng-content></ng-content>\n  </span>\n</kendo-grid-column>\n",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        GridColumnComponent.ctorParameters = function () {
            return [
                { type: i0.ViewContainerRef }
            ];
        };
        GridColumnComponent.propDecorators = {
            model: [{ type: i0.Input }],
            templateRef: [{ type: i0.Input }],
            class: [{ type: i0.Input }],
            editable: [{ type: i0.Input }],
            editor: [{ type: i0.Input }],
            field: [{ type: i0.Input }],
            filter: [{ type: i0.Input }],
            filterable: [{ type: i0.Input }],
            footerClass: [{ type: i0.Input }],
            footerStyle: [{ type: i0.Input }],
            format: [{ type: i0.Input }],
            headerClass: [{ type: i0.Input }],
            headerStyle: [{ type: i0.Input }],
            hidden: [{ type: i0.Input }],
            locked: [{ type: i0.Input }],
            media: [{ type: i0.Input }],
            sortable: [{ type: i0.Input }],
            style: [{ type: i0.Input }],
            title: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            content: [{ type: i0.ViewChild, args: ['content',] }]
        };
        return GridColumnComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GridComponent = (function () {
        function GridComponent(_elementRef, _renderer) {
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this.advancedFilter = false;
            this.autoCalculateHeight = true;
            this.buttonColor = '#fff';
            this.buttonCount = 5;
            this.buttonClass = 'toolbar-button';
            this.pagerInfo = true;
            this.pagerType = 'numeric';
            this.pageSizes = true;
            this.previousNext = true;
            this.export = false;
            this.fileName = 'export';
            this.filter = { logic: 'and', filters: [] };
            this.filterable = true;
            this.pageSize = 20;
            this.pager = {
                pageSizes: [10, 20, 50, 100]
            };
            this.pdfHeader = '';
            this.skip = 0;
            this.sortable = { mode: 'multiple' };
            this.sort = [];
            this.total = 0;
            this.changes = new i0.EventEmitter();
            this.columns = [];
            this.filtering = true;
        }
        Object.defineProperty(GridComponent.prototype, "color", {
            /** The color of the toolbar. Can be primary, accent, or warn. */
            get: /**
             * The color of the toolbar. Can be primary, accent, or warn.
             * @return {?}
             */ function () {
                return this._color;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._updateColor(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} newColor
         * @return {?}
         */
        GridComponent.prototype._updateColor = /**
         * @param {?} newColor
         * @return {?}
         */
            function (newColor) {
                this._setElementColor(this._color, false);
                this._setElementColor(newColor, true);
                this._color = newColor;
            };
        /**
         * @param {?} color
         * @param {?} isAdd
         * @return {?}
         */
        GridComponent.prototype._setElementColor = /**
         * @param {?} color
         * @param {?} isAdd
         * @return {?}
         */
            function (color, isAdd) {
                if (color != null && color !== '') {
                    var /** @type {?} */ element = this._elementRef.nativeElement;
                    if (isAdd) {
                        this._renderer.addClass(element, "mat-" + color);
                    }
                    else {
                        this._renderer.removeClass(element, "mat-" + color);
                    }
                }
            };
        Object.defineProperty(GridComponent.prototype, "activeRows", {
            get: /**
             * @return {?}
             */ function () {
                return this.pageRows(this.filterRows(this.sortRows(this.rows)));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "computedRowHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this.rowHeightMax || 32;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "dynamicHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this.autoCalculateHeight ? (this.activeRows.length === 0 || !this.numericHeight) ?
                    null : Math.max(96 + this.headerHeight + this.pagerHeight + this.toolbarHeight, Math.min(this.computedRowHeight * this.activeRows.length + this.headerHeight + this.pagerHeight + this.toolbarHeight, this.numericHeight))
                    : this.numericHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "excelFileName", {
            get: /**
             * @return {?}
             */ function () {
                return this.fileName + ".xlsx";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "filters", {
            get: /**
             * @return {?}
             */ function () {
                return this.filter.filters;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "gridData", {
            get: /**
             * @return {?}
             */ function () {
                return {
                    data: this.activeRows,
                    total: this.total ? this.total : this.rows.length
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "headerHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this.filterable ? 66 : 27;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "numericHeight", {
            get: /**
             * @return {?}
             */ function () {
                return typeof (this.height) === 'string' ? str2int(this.height) : this.height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "pagerHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this.pageable ? 46 : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "pagerSettings", {
            get: /**
             * @return {?}
             */ function () {
                return this.pager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "pdfFileName", {
            get: /**
             * @return {?}
             */ function () {
                return this.fileName + ".pdf";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "rows", {
            get: /**
             * @return {?}
             */ function () {
                return this.model.data ? this.model.data.toArray() : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "showFilters", {
            get: /**
             * @return {?}
             */ function () {
                return this.filterable && this.filtering;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "take", {
            get: /**
             * @return {?}
             */ function () {
                return this.pageSize || 20;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridComponent.prototype, "toolbarHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this.export ? 53 : 0;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        GridComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.model.update(this);
            };
        /**
         * @return {?}
         */
        GridComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.pageable = {
                    buttonCount: this.buttonCount,
                    info: this.pagerInfo,
                    type: this.pagerType,
                    pageSizes: this.pageSizes,
                    previousNext: this.previousNext
                };
            };
        /**
         * @return {?}
         */
        GridComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.contentChildren.forEach(function (x) {
                    _this.columns.push(x);
                });
            };
        /**
         * @param {?} state
         * @return {?}
         */
        GridComponent.prototype.dataStateChange = /**
         * @param {?} state
         * @return {?}
         */
            function (state) {
                this.filterChange(state['filter']);
                this.pageChange({ skip: state['skip'], take: state['take'] });
                this.sortChange(state['sort']);
                this.changes.emit(state);
            };
        /**
         * @param {?} component
         * @return {?}
         */
        GridComponent.prototype.save = /**
         * @param {?} component
         * @return {?}
         */
            function (component) {
                var /** @type {?} */ options = component.workbookOptions();
                var /** @type {?} */ rows = options.sheets[0].rows;
                var /** @type {?} */ altIdx = 0;
                rows.forEach(function (row) {
                    if (row.type === 'data') {
                        if (altIdx % 2 !== 0) {
                            row.cells.forEach(function (cell) {
                                cell.background = '#aabbcc';
                            });
                        }
                        altIdx++;
                    }
                });
                component.save(options);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        GridComponent.prototype.filterChange = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.filter = e;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        GridComponent.prototype.pageChange = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.skip = e.skip;
                this.pageSize = str2int(e.take.toString());
            };
        /**
         * @param {?} sort
         * @return {?}
         */
        GridComponent.prototype.sortChange = /**
         * @param {?} sort
         * @return {?}
         */
            function (sort) {
                this.sort = sort;
            };
        /**
         * @param {?} rows
         * @return {?}
         */
        GridComponent.prototype.filterRows = /**
         * @param {?} rows
         * @return {?}
         */
            function (rows) {
                return Grid.FilterRows(rows, this.filters);
            };
        /**
         * @param {?} rows
         * @return {?}
         */
        GridComponent.prototype.pageRows = /**
         * @param {?} rows
         * @return {?}
         */
            function (rows) {
                return this.pager ? Grid.PageRows(rows, this.skip, this.take) : rows;
            };
        /**
         * @param {?} rows
         * @return {?}
         */
        GridComponent.prototype.sortRows = /**
         * @param {?} rows
         * @return {?}
         */
            function (rows) {
                return Grid.SortRows(rows, this.sort);
            };
        GridComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-grid',
                        template: "<mat-card class=\"grid mat-primary\" [class.mat-card]=\"!export\">\n  <kendo-grid [data]=\"gridData\" [filter]=\"filter\" [filterable]=\"showFilters\" [groupable]=\"groupable\" [height]=\"dynamicHeight\"\n    [pageSize]=\"pageSize\" [pageable]=\"pagerSettings\" [rowHeight]=\"rowHeight\" [scrollable]=\"scrollable\" [selectable]=\"selectable\"\n    [skip]=\"skip\" [sortable]=\"sortable\" [group]=\"group\" [sort]=\"sort\" (dataStateChange)=\"dataStateChange($event)\" #kendoGridInstance=\"kendoGrid\">\n\n    <!-- Toolbar Template -->\n    <ng-template kendoGridToolbarTemplate *ngIf=\"export\">\n      <button mat-raised-button class=\"toolbar-button pdf-button\" kendoGridPDFCommand>\n        <mat-icon>picture_as_pdf</mat-icon>Export to PDF</button>\n      <button mat-raised-button class=\"toolbar-button excel-button\" (click)=\"save(excelexport)\">\n        <mat-icon>import_export</mat-icon>Export To Excel</button>\n    </ng-template>\n\n    <!-- Grid Columns -->\n    <kendo-grid-column *ngFor=\"let col of columns\" [class]=\"col.class\" [editable]=\"col.editable\" [editor]=\"col.editor\" [field]=\"col.colField\"\n      [filter]=\"col.filter\" [filterable]=\"col.filterable\" [footerClass]=\"col.footerClass\" [footerStyle]=\"col.footerStyle\" [format]=\"col.format\"\n      [headerClass]=\"col.headerClass\" [headerStyle]=\"col.headerStyle\" [hidden]=\"col.hidden\" [locked]=\"col.locked\" [media]=\"col.media\"\n      [sortable]=\"col.sortable\" [style]=\"col.style\" [title]=\"col.colTitle\" [width]=\"col.width\">\n      <ng-template *ngIf=\"col.templateRef\" kendoGridCellTemplate let-dataItem>\n        <iu-grid-cell [templateRef]=\"col.templateRef\" [dataItem]=\"dataItem\"></iu-grid-cell>\n      </ng-template>\n    </kendo-grid-column>\n\n    <!-- Export to PDF -->\n    <kendo-grid-pdf *ngIf=\"export\" [fileName]=\"pdfFileName\" [allPages]=\"true\" paperSize=\"A4\" [repeatHeaders]=\"true\" [landscape]=\"true\">\n      <kendo-grid-pdf-margin top=\"2cm\" left=\"1cm\" right=\"1cm\" bottom=\"2cm\"></kendo-grid-pdf-margin>\n      <ng-template kendoGridPDFTemplate let-pageNum=\"pageNum\" let-totalPages=\"totalPages\">\n        <div class=\"page-template\">\n          <div class=\"header\">\n            <div style=\"float: right\">Page {{ pageNum }} of {{ totalPages }}</div>\n            {{ pdfHeader }}\n          </div>\n          <div class=\"footer\">\n            Page {{ pageNum }} of {{ totalPages }}\n          </div>\n        </div>\n      </ng-template>\n    </kendo-grid-pdf>\n\n    <!-- Export to Excel -->\n    <kendo-excelexport [data]=\"activeRows\" [fileName]=\"excelFileName\" [filterable]=\"true\" #excelexport>\n      <kendo-excelexport-column *ngFor=\"let col of columns\" [field]=\"col.colField\" [title]=\"col.colTitle\">\n      </kendo-excelexport-column>\n    </kendo-excelexport>\n\n  </kendo-grid>\n</mat-card>\n",
                        styles: [".mat-card.grid{padding:0}.grid .k-grid-header{padding-right:13px}.grid th.k-grid-header:first-child{padding-left:6px}.grid .mat-raised-button{color:#fff}.k-grid-header .k-header>.k-link{font-size:16px;padding:2px 12px}.k-grid td{border:none;padding:6px 12px}.k-widget{border:none}.k-filter-row>th{padding:4px;max-width:190px;border-width:0 0 1px 1px;border-style:solid}.k-input.k-textbox,.k-textbox{height:calc(1em + (4px * 2) + (1px * 2))!important;min-width:80px}.k-filtercell .k-filtercell-wrapper,.k-filtercell>span{padding-right:calc(1.5em + 8px + 2px + 4px)}.k-filtercell .k-dropdown-operator{display:none}.k-picker-wrap.k-state-default{border-bottom-width:1px}.page-template{font-family:\"DejaVu Sans\",Arial,sans-serif;position:absolute;width:100%;height:100%;top:0;left:0}.page-template .header{position:absolute;top:30px;left:30px;right:30px;border-bottom:1px solid #888;color:#888}.page-template .footer{position:absolute;bottom:30px;left:30px;right:30px;border-top:1px solid #888;text-align:center;color:#888}.toolbar-button{color:#fff;background-image:none;vertical-align:middle}"],
                        encapsulation: i0.ViewEncapsulation.None
                    },] },
        ];
        /** @nocollapse */
        GridComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 }
            ];
        };
        GridComponent.propDecorators = {
            model: [{ type: i0.Input }],
            advancedFilter: [{ type: i0.Input }],
            autoCalculateHeight: [{ type: i0.Input }],
            buttonColor: [{ type: i0.Input }],
            buttonCount: [{ type: i0.Input }],
            buttonClass: [{ type: i0.Input }],
            pagerInfo: [{ type: i0.Input }],
            pagerType: [{ type: i0.Input }],
            pageSizes: [{ type: i0.Input }],
            previousNext: [{ type: i0.Input }],
            detailRowHeight: [{ type: i0.Input }],
            export: [{ type: i0.Input }],
            fileName: [{ type: i0.Input }],
            filter: [{ type: i0.Input }],
            filterable: [{ type: i0.Input }],
            groupable: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            pageSize: [{ type: i0.Input }],
            pageable: [{ type: i0.Input }],
            pager: [{ type: i0.Input }],
            pdfHeader: [{ type: i0.Input }],
            rowHeight: [{ type: i0.Input }],
            rowHeightMax: [{ type: i0.Input }],
            scrollable: [{ type: i0.Input }],
            selectable: [{ type: i0.Input }],
            skip: [{ type: i0.Input }],
            sortable: [{ type: i0.Input }],
            group: [{ type: i0.Input }],
            rowClass: [{ type: i0.Input }],
            sort: [{ type: i0.Input }],
            total: [{ type: i0.Input }],
            changes: [{ type: i0.Output }],
            grid: [{ type: i0.ViewChild, args: ['kendoGridInstance',] }],
            contentChildren: [{ type: i0.ContentChildren, args: [GridColumnComponent,] }],
            color: [{ type: i0.Input }]
        };
        return GridComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GridCellComponent = (function () {
        function GridCellComponent(viewContainerRef) {
            this.viewContainerRef = viewContainerRef;
        }
        /**
         * @return {?}
         */
        GridCellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.viewContainerRef.createEmbeddedView(this.templateRef, this.dataItem);
            };
        GridCellComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-grid-cell',
                        template: "<div></div>",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        GridCellComponent.ctorParameters = function () {
            return [
                { type: i0.ViewContainerRef }
            ];
        };
        GridCellComponent.propDecorators = {
            dataItem: [{ type: i0.Input }],
            templateRef: [{ type: i0.Input }]
        };
        return GridCellComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var /**
     * @template T
     */ GridColumn = (function () {
        function GridColumn(name, label) {
            this.name = name;
            this.label = label;
            this.styleModel = new StyleModel();
            this.editable = true;
            this.editor = 'text';
            this.filter = 'text';
            this.filterable = true;
            this.hidden = false;
            this.locked = false;
            this.sortable = true;
            this.metadata = { name: name, label: label };
            this.title = label;
        }
        Object.defineProperty(GridColumn.prototype, "class", {
            get: /**
             * @return {?}
             */ function () {
                return this._class;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._class = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "field", {
            get: /**
             * @return {?}
             */ function () {
                return this._field ? this._field : this.metadata.name;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._field = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "title", {
            get: /**
             * @return {?}
             */ function () {
                return this._title ? this._title : this.metadata.label;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._title = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumn.prototype, "width", {
            get: /**
             * @return {?}
             */ function () {
                return this._width;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._width = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} col
         * @return {?}
         */
        GridColumn.prototype.update = /**
         * @param {?} col
         * @return {?}
         */
            function (col) {
                this.class = col.class;
                this.editable = col.editable;
                this.editor = col.editor;
                this.field = col.field;
                this.filter = col.filter;
                this.filterable = col.filterable;
                this.footerClass = col.footerClass;
                this.footerStyle = col.footerStyle;
                this.format = col.format;
                this.headerClass = col.headerClass;
                this.headerStyle = col.headerStyle;
                this.hidden = col.hidden;
                this.locked = col.locked;
                this.media = col.media;
                this.sortable = col.sortable;
                this.style = col.style;
                this.title = col.title;
                this.width = col.width;
            };
        return GridColumn;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SimpleGridComponent = (function () {
        function SimpleGridComponent() {
            this.data = [];
            this.export = false;
            this.filterable = false;
            this.fileName = 'export';
            this.height = 600;
            this.pageSize = 30;
        }
        Object.defineProperty(SimpleGridComponent.prototype, "metadata", {
            get: /**
             * @return {?}
             */ function () {
                return this._metadata ? this._metadata : (toArray(this.data).length > 0 ? toArray(this.data)[0].metadata : null);
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._metadata = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleGridComponent.prototype, "columns", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                return this.metadata ? this.columnKeys.map(function (key) { return new GridColumn(key, _this.metadata[key].columnLabel); }) : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleGridComponent.prototype, "columnKeys", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                return this.metadata ? Object.keys(this.metadata).filter(function (key) { return _this.metadata[key].columnLabel ? true : false; }) : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleGridComponent.prototype, "columnLabels", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                return this.metadata ? this.columnKeys.map(function (key) { return _this.metadata[key].columnLabel; }) : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleGridComponent.prototype, "gridData", {
            get: /**
             * @return {?}
             */ function () {
                return Grid.Build(toArray(this.data));
            },
            enumerable: true,
            configurable: true
        });
        SimpleGridComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-simple-grid',
                        template: "<iu-grid [model]=\"gridData\" [export]=\"export\" [filterable]=\"filterable\" [fileName]=\"fileName\" [pageSize]=\"pageSize\" [height]=\"height\">\n  <iu-grid-column *ngFor=\"let column of columns\" [model]=\"column\"></iu-grid-column>\n</iu-grid>\n",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        SimpleGridComponent.ctorParameters = function () { return []; };
        SimpleGridComponent.propDecorators = {
            data: [{ type: i0.Input }],
            export: [{ type: i0.Input }],
            filterable: [{ type: i0.Input }],
            fileName: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            pageSize: [{ type: i0.Input }],
            metadata: [{ type: i0.Input }]
        };
        return SimpleGridComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GridModule = (function () {
        function GridModule() {
        }
        GridModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            SharedModule,
                            kendoAngularExcelExport.ExcelExportModule,
                            kendoAngularGrid.GridModule,
                            kendoAngularGrid.PDFModule,
                            material.MatCardModule,
                            material.MatIconModule
                        ],
                        declarations: [
                            GridComponent,
                            GridColumnComponent,
                            SimpleGridComponent,
                            GridCellComponent,
                        ],
                        exports: [
                            kendoAngularGrid.GridModule,
                            GridComponent,
                            GridColumnComponent,
                            SimpleGridComponent,
                        ]
                    },] },
        ];
        return GridModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NotFoundComponent = (function () {
        function NotFoundComponent() {
        }
        /**
         * @return {?}
         */
        NotFoundComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        NotFoundComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-not-found',
                        template: "<p>\n  not-found works!\n</p>\n",
                        styles: [""]
                    },] },
        ];
        /** @nocollapse */
        NotFoundComponent.ctorParameters = function () { return []; };
        return NotFoundComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NotFoundModule = (function () {
        function NotFoundModule() {
        }
        NotFoundModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            SharedModule,
                        ],
                        declarations: [NotFoundComponent],
                        exports: [NotFoundComponent]
                    },] },
        ];
        return NotFoundModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WallpaperComponent = (function () {
        function WallpaperComponent(elementRef) {
            this.elementRef = elementRef;
            this.images = [];
            this.windowHeight = 0;
            this.windowWidth = 0;
        }
        Object.defineProperty(WallpaperComponent.prototype, "canvasHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this.windowWidth * 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WallpaperComponent.prototype, "canvasWidth", {
            get: /**
             * @return {?}
             */ function () {
                return this.windowWidth - 100;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WallpaperComponent.prototype, "elementHeight", {
            get: /**
             * @return {?}
             */ function () {
                return this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.style ?
                    this.elementRef.nativeElement.style.height : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WallpaperComponent.prototype, "elementHeightPx", {
            get: /**
             * @return {?}
             */ function () {
                return toPx(this.elementHeight);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WallpaperComponent.prototype, "elementWidth", {
            get: /**
             * @return {?}
             */ function () {
                return this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.style ?
                    this.elementRef.nativeElement.style.width : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WallpaperComponent.prototype, "elementWidthPx", {
            get: /**
             * @return {?}
             */ function () {
                return toPx(this.elementWidth);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WallpaperComponent.prototype, "maxColumns", {
            get: /**
             * @return {?}
             */ function () {
                return 3;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WallpaperComponent.prototype, "maxRows", {
            get: /**
             * @return {?}
             */ function () {
                return 3;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WallpaperComponent.prototype, "totalColumns", {
            get: /**
             * @return {?}
             */ function () {
                return 12;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WallpaperComponent.prototype, "totalRows", {
            get: /**
             * @return {?}
             */ function () {
                return 24;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        WallpaperComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        WallpaperComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-wallpaper',
                        template: "<div class=\"wallpaper\" [style.height.px]=\"windowHeight\" [style.width.px]=\"windowWidth\">\n  <iu-collage [images]=\"images\" [canvasHeight]=\"canvasHeight\" [canvasWidth]=\"canvasWidth\" [totalRows]=\"totalRows\" [totalColumns]=\"totalColumns\"\n    [maxRows]=\"maxRows\" [maxColumns]=\"maxColumns\"></iu-collage>\n</div>",
                        styles: [".wallpaper{height:100%;width:100%}"],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        WallpaperComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        WallpaperComponent.propDecorators = {
            images: [{ type: i0.Input }],
            windowHeight: [{ type: i0.Input }],
            windowWidth: [{ type: i0.Input }]
        };
        return WallpaperComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WallpaperModule = (function () {
        function WallpaperModule() {
        }
        WallpaperModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            SharedModule,
                            CollageModule,
                        ],
                        declarations: [
                            WallpaperComponent,
                        ],
                        exports: [
                            WallpaperComponent,
                        ]
                    },] },
        ];
        return WallpaperModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ListPipe = (function () {
        function ListPipe() {
        }
        /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
        ListPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
            function (value, args) {
                return Array.isArray(value) ? value.reduce(function (acc, x) { return acc ? acc + ", " + x : x; }, '') : '';
            };
        ListPipe.decorators = [
            { type: i0.Pipe, args: [{
                        name: 'list'
                    },] },
        ];
        return ListPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PhoneNumberPipe = (function () {
        function PhoneNumberPipe() {
        }
        /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
        PhoneNumberPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
            function (value, args) {
                return value.length !== 10 ? value
                    : "(" + value[0] + value[1] + value[2] + ") " + value[3] + value[4] + value[5] + "-" + value[6] + value[7] + value[8] + value[9];
            };
        PhoneNumberPipe.decorators = [
            { type: i0.Pipe, args: [{
                        name: 'phone'
                    },] },
        ];
        return PhoneNumberPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TimeAgoPipe = (function () {
        function TimeAgoPipe() {
        }
        /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
        TimeAgoPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
            function (value, args) {
                return DateHelper.TimeAgo(value);
            };
        TimeAgoPipe.decorators = [
            { type: i0.Pipe, args: [{
                        name: 'timeago'
                    },] },
        ];
        return TimeAgoPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var YesNoPipe = (function () {
        function YesNoPipe() {
        }
        /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
        YesNoPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
            function (value, args) {
                return value ? 'Yes' : 'No';
            };
        YesNoPipe.decorators = [
            { type: i0.Pipe, args: [{
                        name: 'yesno'
                    },] },
        ];
        return YesNoPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LibraryModule = (function () {
        function LibraryModule() {
        }
        LibraryModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            SharedModule,
                            AccordionModule,
                            DatepickerModule,
                            DialogModule,
                            FileUploadModule,
                            GridModule,
                            NotFoundModule,
                            material.MatButtonModule,
                            material.MatCardModule,
                            material.MatCheckboxModule,
                            icon.MatIconModule,
                            material.MatInputModule,
                            material.MatProgressBarModule,
                            material.MatProgressSpinnerModule,
                            material.MatRadioModule,
                            material.MatSelectModule,
                            material.MatTabsModule,
                            material.MatToolbarModule,
                        ],
                        declarations: [
                            LibraryComponent,
                            ListPipe,
                            PhoneNumberPipe,
                            TimeAgoPipe,
                            YesNoPipe,
                        ],
                        exports: [
                            LibraryComponent,
                            SharedModule,
                            AccordionModule,
                            CollageModule,
                            DatepickerModule,
                            DialogModule,
                            FileUploadModule,
                            ListPipe,
                            NotFoundModule,
                            PhoneNumberPipe,
                            TileModule,
                            TimeAgoPipe,
                            WallpaperModule,
                            YesNoPipe,
                            material.MatButtonModule,
                            material.MatCardModule,
                            material.MatCheckboxModule,
                            icon.MatIconModule,
                            material.MatInputModule,
                            material.MatProgressBarModule,
                            material.MatProgressSpinnerModule,
                            material.MatRadioModule,
                            material.MatSelectModule,
                            material.MatTabsModule,
                            material.MatToolbarModule,
                        ]
                    },] },
        ];
        return LibraryModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AnimationsModule = (function () {
        function AnimationsModule() {
        }
        AnimationsModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: []
                    },] },
        ];
        return AnimationsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EditorWindowComponent = (function () {
        function EditorWindowComponent(data, dialogRef) {
            this.data = data;
            this.dialogRef = dialogRef;
            this.actionWidth = '100%';
        }
        Object.defineProperty(EditorWindowComponent.prototype, "actions", {
            get: /**
             * @return {?}
             */ function () {
                return [
                    build(DialogAction, { value: this.data, label: 'Save and Close' }),
                ];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorWindowComponent.prototype, "dialog", {
            get: /**
             * @return {?}
             */ function () {
                return build(DialogModel, {
                    title: this.title,
                    actions: this.actions
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorWindowComponent.prototype, "title", {
            get: /**
             * @return {?}
             */ function () {
                return 'Editor';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        EditorWindowComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.dialogRef.close(this.data);
            };
        /**
         * @param {?} data
         * @return {?}
         */
        EditorWindowComponent.prototype.update = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.data = data;
            };
        EditorWindowComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-editor-window',
                        template: "<span id=\"editor-window\">\n  <mat-toolbar color=\"primary\" mat-dialog-title>\n    <span class=\"dialog-title\">\n      {{ title }}\n      <button mat-button [mat-dialog-close]=\"null\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </span>\n  </mat-toolbar>\n  <mat-dialog-content>\n    <div id=\"expanded-editor\">\n      <iu-editor [value]=\"data\" [expanded]=\"true\" [height]=\"380\" (changes)=\"update($event)\"></iu-editor>\n    </div>\n  </mat-dialog-content>\n  <mat-dialog-actions>\n    <button mat-raised-button (click)=\"close()\" [style.width]=\"actionWidth\" color=\"accent\">Save and Close</button>\n  </mat-dialog-actions>\n</span>\n",
                        styles: ["#editor-window #expanded-editor{margin:0;padding:0;height:60vh}#editor-window .mat-toolbar{margin:-24px -24px 0;width:calc(100% + 48px);min-height:32px!important}#editor-window .mat-toolbar .mat-toolbar-row{height:48px}#editor-window .mat-toolbar .dialog-title{position:relative;height:calc(100% - 8px);width:100%;margin-top:8px}#editor-window .mat-toolbar .dialog-title button{cursor:pointer;position:absolute;right:0;top:-5px;border-radius:100%;height:42px;width:42px;min-width:36px}#editor-window .mat-toolbar .dialog-title button:hover,#editor-window .mat-toolbar .dialog-title button:hover mat-icon{font-weight:700}#editor-window .mat-toolbar .dialog-title mat-icon{position:absolute;top:9px;right:8px;z-index:1}#editor-window .mat-toolbar-row{height:48px}#editor-window .mat-dialog-actions{margin-left:-24px;margin-right:-24px;color:#fff;padding:0}#editor-window .mat-dialog-actions button{padding:12px 0}#editor-window .mat-dialog-actions .mat-accent{color:#fff!important}"],
                        encapsulation: i0.ViewEncapsulation.None
                    },] },
        ];
        /** @nocollapse */
        EditorWindowComponent.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [material.MAT_DIALOG_DATA,] }] },
                { type: material.MatDialogRef }
            ];
        };
        return EditorWindowComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ EDITOR_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return EditorComponent; }),
        multi: true
    };
    var EditorComponent = (function () {
        function EditorComponent(dialog, ref) {
            this.dialog = dialog;
            this.ref = ref;
            this.type = 'full';
            this.expanded = false;
            this.height = 100;
            this.plugins = [
                'advlist autolink lists link image charmap print preview hr anchor pagebreak',
                'searchreplace wordcount visualblocks visualchars code fullscreen',
                'insertdatetime media nonbreaking save table contextmenu directionality',
                'emoticons template paste textcolor colorpicker textpattern imagetools toc help'
            ];
            this.skinUrl = '/assets/skins/lightgray-gradient';
            this.templates = [
                { title: 'Test template 1', content: 'Test 1' },
                { title: 'Test template 2', content: 'Test 2' }
            ];
            this.changes = new i0.EventEmitter();
        }
        Object.defineProperty(EditorComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._value = val;
                this.setContent(this._value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "basic", {
            get: /**
             * @return {?}
             */ function () {
                return this.type === 'basic';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "full", {
            get: /**
             * @return {?}
             */ function () {
                return this.type === 'full';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "config", {
            get: /**
             * @return {?}
             */ function () {
                switch (this.type) {
                    case 'basic':
                        return this.configBasic;
                    case 'full':
                        return this.configFull;
                    default:
                        return this.configFull;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "configBasic", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                return {
                    height: this.height,
                    selector: '#' + this.elementId,
                    menubar: false,
                    skin_url: this.skinUrl,
                    theme: 'modern',
                    plugins: [
                        'advlist autolink lists link image charmap print preview anchor',
                        'searchreplace visualblocks code fullscreen',
                        'insertdatetime media table contextmenu paste code'
                    ],
                    toolbar: "undo redo | insert | styleselect | bold italic |\n       alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link",
                    content_css: [
                        '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
                        '//www.tinymce.com/css/codepen.min.css'
                    ],
                    setup: function (editor) {
                        _this.editorRef = editor;
                        editor.on('keyup', function (e) {
                            e.preventDefault();
                            var /** @type {?} */ content = editor.getContent();
                            _this.onKeyup(content);
                        });
                        editor.on('change', function (e) {
                            e.preventDefault();
                            var /** @type {?} */ content = editor.getContent();
                            _this.onChange(content);
                        });
                        editor.on('viewcontentloaded', function (e) {
                            editor.setContent('');
                        });
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "configFull", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                return {
                    height: this.height,
                    selector: '#' + this.elementId,
                    plugins: this.plugins,
                    skin_url: this.skinUrl,
                    templates: this.templates,
                    theme: 'modern',
                    toolbar1: "undo redo | insert | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent",
                    toolbar2: 'print preview | forecolor backcolor | link',
                    setup: function (editor) {
                        _this.editorRef = editor;
                        editor.on('keyup', function (e) {
                            e.preventDefault();
                            var /** @type {?} */ content = editor.getContent();
                            _this.onKeyup(content);
                        });
                        editor.on('change', function (e) {
                            e.preventDefault();
                            var /** @type {?} */ content = editor.getContent();
                            _this.onChange(content);
                        });
                        editor.on('viewcontentloaded', function (e) {
                            editor.setContent('');
                        });
                    },
                    image_advtab: true,
                    content_css: [
                        '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
                        '//www.tinymce.com/css/codepen.min.css'
                    ]
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "hasValue", {
            get: /**
             * @return {?}
             */ function () {
                return this.value ? true : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "showExpand", {
            get: /**
             * @return {?}
             */ function () {
                return this.full && !this.expanded;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        EditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        EditorComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                tinymce.init(this.config);
            };
        /**
         * @return {?}
         */
        EditorComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                tinymce.remove(this.editorRef);
            };
        /**
         * @return {?}
         */
        EditorComponent.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.value = '';
            };
        /**
         * @param {?} e
         * @return {?}
         */
        EditorComponent.prototype.expand = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (e && e.preventDefault) {
                    e.preventDefault();
                }
                var /** @type {?} */ config = {
                    data: this.editorRef.getContent(),
                    width: '1200px'
                };
                this.openDialog(config);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        EditorComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        EditorComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouch = fn;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        EditorComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        EditorComponent.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
                this.changes.emit(value);
                if (this.onModelChange) {
                    this.onModelChange(value);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        EditorComponent.prototype.onUpdate = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.onChange(value);
                this.setContent(this.value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        EditorComponent.prototype.onKeyup = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.onChange(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        EditorComponent.prototype.onBlur = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.focused = '';
            };
        /**
         * @param {?} value
         * @return {?}
         */
        EditorComponent.prototype.onFocus = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.focused = value;
                if (this.onTouch) {
                    this.onTouch();
                }
            };
        /**
         * @param {?} config
         * @return {?}
         */
        EditorComponent.prototype.openDialog = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var _this = this;
                var /** @type {?} */ dialogRef = this.dialog.open(EditorWindowComponent, config);
                this.dialogRef = dialogRef.afterClosed().subscribe(function (result) {
                    _this.closeDialog(result);
                });
            };
        /**
         * @param {?} value
         * @return {?}
         */
        EditorComponent.prototype.closeDialog = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value) {
                    this.onChange(value);
                }
                this.dialogRef.unsubscribe();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        EditorComponent.prototype.setContent = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.editorRef && this.editorRef.getContent) {
                    var /** @type {?} */ content = this.editorRef.getContent();
                    if (value && content != value) {
                        this.editorRef.setContent(value);
                    }
                }
            };
        EditorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'iu-editor',
                        template: "<mat-card class=\"editor\">\n  <textarea [id]=\"elementId\">\n    <ng-content *ngIf=\"!hasValue\"></ng-content>\n    <span *ngIf=\"hasValue\">{{ value }}</span>\n  </textarea>\n  <button *ngIf=\"showExpand\" id=\"expand-editor\" (click)=\"expand($event)\" mat-button>\n    <mat-icon>fullscreen</mat-icon>\n  </button>\n</mat-card>\n",
                        styles: [".mat-card{display:block;clear:both;padding:1px 3px 1px 1px;border-radius:2px}#expand-editor{font-size:36px;position:absolute;right:3px;top:3px;color:#fff;text-align:center;min-width:36px;line-height:24px;padding:2px}.mat-icon{font-size:36px;position:relative;left:-6px;top:-7px}"],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [EDITOR_ACCESSOR]
                    },] },
        ];
        /** @nocollapse */
        EditorComponent.ctorParameters = function () {
            return [
                { type: material.MatDialog },
                { type: i0.ChangeDetectorRef }
            ];
        };
        EditorComponent.propDecorators = {
            type: [{ type: i0.Input }],
            elementId: [{ type: i0.Input }],
            expanded: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            plugins: [{ type: i0.Input }],
            skinUrl: [{ type: i0.Input }],
            templates: [{ type: i0.Input }],
            changes: [{ type: i0.Output }],
            value: [{ type: i0.Input }]
        };
        return EditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EditorModule = (function () {
        function EditorModule() {
        }
        EditorModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            SharedModule,
                            forms.FormsModule,
                            DialogModule,
                            material.MatButtonModule,
                            material.MatCardModule,
                            material.MatDialogModule,
                            material.MatIconModule,
                            material.MatToolbarModule,
                        ],
                        declarations: [
                            EditorComponent,
                            EditorWindowComponent,
                        ],
                        entryComponents: [
                            EditorWindowComponent,
                        ],
                        exports: [
                            EditorComponent,
                            EditorWindowComponent,
                        ],
                    },] },
        ];
        return EditorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EffectsModule = (function () {
        function EffectsModule() {
        }
        /**
         * @param {?} featureEffects
         * @return {?}
         */
        EffectsModule.forFeature = /**
         * @param {?} featureEffects
         * @return {?}
         */
            function (featureEffects) {
                return effects.EffectsModule.forFeature(featureEffects);
            };
        /**
         * @param {?} rootEffects
         * @return {?}
         */
        EffectsModule.forRoot = /**
         * @param {?} rootEffects
         * @return {?}
         */
            function (rootEffects) {
                return effects.EffectsModule.forRoot(rootEffects);
            };
        EffectsModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            effects.EffectsModule
                        ],
                        declarations: []
                    },] },
        ];
        return EffectsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ErrorActions = (function () {
        function ErrorActions() {
        }
        /**
         * @param {?} e
         * @param {?} outlet
         * @return {?}
         */
        ErrorActions.addAtOutlet = /**
         * @param {?} e
         * @param {?} outlet
         * @return {?}
         */
            function (e, outlet) {
                var /** @type {?} */ payload = {
                    key: outlet.key,
                    error: outlet.handler ? outlet.handler(e) : e
                };
                return ErrorActions.add(payload);
            };
        /**
         * @param {?} key
         * @param {?} e
         * @return {?}
         */
        ErrorActions.addError = /**
         * @param {?} key
         * @param {?} e
         * @return {?}
         */
            function (key, e) {
                var /** @type {?} */ payload = {
                    key: key,
                    error: e
                };
                return ErrorActions.add(payload);
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        ErrorActions.add = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return {
                    type: ErrorActions.ADD,
                    payload: payload
                };
            };
        /**
         * @param {?} key
         * @return {?}
         */
        ErrorActions.remove = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return {
                    type: ErrorActions.REMOVE,
                    payload: key
                };
            };
        ErrorActions.ADD = '[Error] Add Error';
        ErrorActions.REMOVE = '[Error] Remove Error';
        ErrorActions.HANDLE_ERROR = '[Error Handler] Handle Error';
        ErrorActions.THROW_ERROR = '[Error Handler] Throw Error';
        return ErrorActions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ErrorsService = (function () {
        function ErrorsService() {
        }
        ErrorsService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        ErrorsService.ctorParameters = function () { return []; };
        /** @nocollapse */ ErrorsService.ngInjectableDef = i0.defineInjectable({ factory: function ErrorsService_Factory() { return new ErrorsService(); }, token: ErrorsService, providedIn: "root" });
        return ErrorsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ErrorEffects = (function () {
        function ErrorEffects(actions$, service) {
            this.actions$ = actions$;
            this.service = service;
            /**
             * Listens for thrown errors and handles them accordingly
             */
            this.handleError$ = this.actions$.pipe(operators.filter(function (action) { return action.type === ErrorActions.THROW_ERROR; }), operators.map(function (data) {
                return /** @type {?} */ ({ type: ErrorActions.HANDLE_ERROR });
            }));
        }
        ErrorEffects.decorators = [
            { type: i0.Injectable },
        ];
        /** @nocollapse */
        ErrorEffects.ctorParameters = function () {
            return [
                { type: effects.Actions },
                { type: ErrorsService }
            ];
        };
        __decorate([
            effects.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], ErrorEffects.prototype, "handleError$", void 0);
        return ErrorEffects;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GlobalErrorsService = (function () {
        function GlobalErrorsService() {
        }
        /**
         * @param {?} error
         * @return {?}
         */
        GlobalErrorsService.prototype.handleError = /**
         * @param {?} error
         * @return {?}
         */
            function (error) {
                alert(error);
                // IMPORTANT: Rethrow the error otherwise it gets swallowed
                throw error;
            };
        GlobalErrorsService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        GlobalErrorsService.ctorParameters = function () { return []; };
        /** @nocollapse */ GlobalErrorsService.ngInjectableDef = i0.defineInjectable({ factory: function GlobalErrorsService_Factory() { return new GlobalErrorsService(); }, token: GlobalErrorsService, providedIn: "root" });
        return GlobalErrorsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ErrorsModule = (function () {
        function ErrorsModule() {
        }
        /**
         * @return {?}
         */
        ErrorsModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: ErrorsModule,
                    providers: [
                        ErrorsService,
                        ErrorEffects,
                        {
                            provide: i0.ErrorHandler,
                            useClass: GlobalErrorsService
                        }
                    ]
                };
            };
        ErrorsModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: []
                    },] },
        ];
        return ErrorsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Error = (function () {
        function Error() {
            this.message = '';
            this.statusCode = 0;
        }
        return Error;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function errorsReducer(state, action) {
        if (state === void 0) {
            state = {};
        }
        switch (action.type) {
            case ErrorActions.ADD:
                var /** @type {?} */ newState = Collection.AddItem(state, 'lastError', action.payload.error);
                if (action.payload.key === 'lastError') {
                    return newState;
                }
                return Collection.AddItem(state, action.payload.key, action.payload.error);
            case ErrorActions.REMOVE:
                return Collection.RemoveItem(state, action.payload);
            default:
                return state;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} store
     * @return {?}
     */
    function errorsSelector(store) {
        return store.select(function (s) { return s['errors']; });
    }
    /**
     * @param {?} store
     * @param {?} key
     * @return {?}
     */
    function errorSelector(store, key) {
        return errorsSelector(store).pipe(operators.map(function (errors) { return errors[key]; }));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Event = (function () {
        function Event() {
            this.emittedCount = 0;
            this.key = '';
            this.onAction = '';
            this.value = null;
        }
        return Event;
    }());
    var Events = (function (_super) {
        __extends(Events, _super);
        function Events() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Events.prototype, "actions", {
            get: /**
             * @return {?}
             */ function () {
                return this.toArray().reduce(function (acc, event) {
                    var /** @type {?} */ addValues = !event.onAction ?
                        [] : typeof event.onAction === 'string' ?
                        acc.indexOf(event.onAction) === -1 ? [event.onAction] : []
                        : event.onAction.filter(function (x) { return acc.indexOf(x) === -1; });
                    return __spread(acc, addValues);
                }, []);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Events.prototype, "eventsByAction", {
            get: /**
             * @return {?}
             */ function () {
                return this.toArray().reduce(function (acc, event) {
                    if (typeof event.onAction === 'string') {
                        var /** @type {?} */ val = acc[event.onAction] || [];
                        acc[event.onAction] = __spread(val, [event]);
                    }
                    else {
                        event.onAction.forEach(function (actionType) {
                            var /** @type {?} */ val = acc[actionType] || [];
                            acc[actionType] = __spread(val, [event]);
                        });
                    }
                    return acc;
                }, {});
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} payload
         * @return {?}
         */
        Events.prototype.addEvent = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return build(Events, this.addItem(payload, payload.key));
            };
        /**
         * @param {?} actionType
         * @return {?}
         */
        Events.prototype.getActionEvents = /**
         * @param {?} actionType
         * @return {?}
         */
            function (actionType) {
                return this.eventsByAction[actionType];
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        Events.prototype.removeEvent = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return build(Events, this.removeItem(payload));
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        Events.prototype.replaceEvents = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                var /** @type {?} */ events = this.copyItems();
                payload.forEach(function (e) {
                    events[e.key] = e;
                });
                return build(Events, this, { items: events });
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        Events.prototype.triggerEvent = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                var /** @type {?} */ events = this.getActionEvents(payload.type)
                    .map(function (e) { return build(Event, e, { value: e.handler ? e.handler(payload) : payload }); });
                return this.replaceEvents(events);
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        Events.prototype.updateValue = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                var /** @type {?} */ event = build(Event, this.items[payload.key], { value: payload.value });
                return build(Events, this.updateItem(event, payload.key, Event));
            };
        return Events;
    }(Collection));
    var UpdateValuePayload = (function () {
        function UpdateValuePayload() {
        }
        return UpdateValuePayload;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EventActions = (function () {
        function EventActions() {
        }
        /**
         * @param {?} onAction
         * @param {?=} handler
         * @param {?=} value
         * @return {?}
         */
        EventActions.addEvent = /**
         * @param {?} onAction
         * @param {?=} handler
         * @param {?=} value
         * @return {?}
         */
            function (onAction, handler, value) {
                if (value === void 0) {
                    value = null;
                }
                var /** @type {?} */ e = build(Event, {
                    onAction: onAction,
                    handler: handler,
                    value: value,
                    key: guid()
                });
                return {
                    type: EventActions.ADD_EVENT,
                    payload: e,
                    key: e.key
                };
            };
        /**
         * @param {?} key
         * @return {?}
         */
        EventActions.removeEvent = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return {
                    type: EventActions.REMOVE_EVENT,
                    payload: key
                };
            };
        /**
         * @param {?} action
         * @return {?}
         */
        EventActions.triggerEvent = /**
         * @param {?} action
         * @return {?}
         */
            function (action) {
                return {
                    type: EventActions.TRIGGER_EVENT,
                    payload: action
                };
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        EventActions.updateValue = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                var /** @type {?} */ payload = build(UpdateValuePayload, {
                    key: key,
                    value: value
                });
                return {
                    type: EventActions.UPDATE_VALUE,
                    payload: payload
                };
            };
        EventActions.ADD_EVENT = '[Events] Add Event';
        EventActions.REMOVE_EVENT = '[Events] Remove Event';
        EventActions.TRIGGER_EVENT = '[Events] Trigger Event';
        EventActions.UPDATE_VALUE = '[Events] Update Value';
        return EventActions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EventEffects = (function () {
        function EventEffects(actions$, store) {
            var _this = this;
            this.actions$ = actions$;
            this.store = store;
            this.events = new Events();
            /**
             * Trigger event if action is a registered trigger.
             */
            this.onTriggerEvent = this.actions$.pipe(operators.filter(function (action) { return _this.events.actions.indexOf(action.type) !== -1; }), operators.map(this.trigger));
            this.store.select(function (s) { return s['events']; })
                .subscribe(function (events) {
                _this.events = events;
            });
        }
        /**
         * @param {?} action
         * @return {?}
         */
        EventEffects.prototype.trigger = /**
         * @param {?} action
         * @return {?}
         */
            function (action) {
                return EventActions.triggerEvent(action);
            };
        EventEffects.decorators = [
            { type: i0.Injectable },
        ];
        /** @nocollapse */
        EventEffects.ctorParameters = function () {
            return [
                { type: effects.Actions },
                { type: i1$1.Store }
            ];
        };
        __decorate([
            effects.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], EventEffects.prototype, "onTriggerEvent", void 0);
        return EventEffects;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} store
     * @return {?}
     */
    function eventsSelector(store) {
        return store.select(function (s) { return s['events']; }).pipe(operators.map(function (events) { return events.items; }));
    }
    /**
     * @param {?} store
     * @param {?} key
     * @return {?}
     */
    function eventSelector(store, key) {
        return eventsSelector(store).pipe(operators.map(function (events) { return events[key]; }));
    }
    /**
     * @param {?} store
     * @param {?} key
     * @return {?}
     */
    function eventValueSelector(store, key) {
        return eventSelector(store, key).pipe(operators.map(function (e) { return e ? e.value : null; }));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EventsService = (function () {
        function EventsService(store) {
            this.store = store;
            this.eventIndex = 0;
            this.events = [];
        }
        Object.defineProperty(EventsService.prototype, "eventKey", {
            get: /**
             * @return {?}
             */ function () {
                this.eventIndex++;
                return "event-" + this.eventIndex;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} actionType
         * @param {?=} handler
         * @return {?}
         */
        EventsService.prototype.addEvent = /**
         * @param {?} actionType
         * @param {?=} handler
         * @return {?}
         */
            function (actionType, handler) {
                var /** @type {?} */ f = handler ? handler : function (action) { return true; };
                var /** @type {?} */ actionWithKey = EventActions.addEvent(actionType, f, false);
                this.store.dispatch(actionWithKey);
                return actionWithKey.key;
            };
        /**
         * @param {?} action
         * @param {?=} handler
         * @return {?}
         */
        EventsService.prototype.dispatch = /**
         * @param {?} action
         * @param {?=} handler
         * @return {?}
         */
            function (action, handler) {
                return this.dispatchHttpAction(action, handler);
            };
        /**
         * @param {?} action
         * @param {?=} handler
         * @return {?}
         */
        EventsService.prototype.dispatchHttpAction = /**
         * @param {?} action
         * @param {?=} handler
         * @return {?}
         */
            function (action, handler) {
                var /** @type {?} */ successAction = action.payload.onSuccess;
                var /** @type {?} */ errorAction = typeof (action.payload.onError) === 'string' ? action.payload.onError : null;
                var /** @type {?} */ success = this.takeOne(successAction, handler);
                var /** @type {?} */ obs = errorAction ? success.pipe(operators.combineLatest(this.takeOne(errorAction, handler), function (x, y) { return true; })) : success;
                this.store.dispatch(action);
                return obs;
            };
        /**
         * @param {?} eventKey
         * @return {?}
         */
        EventsService.prototype.removeEvent = /**
         * @param {?} eventKey
         * @return {?}
         */
            function (eventKey) {
                this.store.dispatch(EventActions.removeEvent(eventKey));
            };
        /**
         * @param {?} action
         * @param {?} handler
         * @return {?}
         */
        EventsService.prototype.subscribe = /**
         * @param {?} action
         * @param {?} handler
         * @return {?}
         */
            function (action, handler) {
                return this.take(1, action).subscribe(handler);
            };
        /**
         * @param {?=} n
         * @param {?=} actionType
         * @param {?=} handler
         * @return {?}
         */
        EventsService.prototype.take = /**
         * @param {?=} n
         * @param {?=} actionType
         * @param {?=} handler
         * @return {?}
         */
            function (n, actionType, handler) {
                if (n === void 0) {
                    n = 1;
                }
                var /** @type {?} */ key = this.addEvent(actionType, handler);
                return eventValueSelector(this.store, key).pipe(operators.skip(1), operators.take(n));
            };
        /**
         * @param {?=} n
         * @param {?=} actions
         * @param {?=} handler
         * @return {?}
         */
        EventsService.prototype.takeFrom = /**
         * @param {?=} n
         * @param {?=} actions
         * @param {?=} handler
         * @return {?}
         */
            function (n, actions, handler) {
                var _this = this;
                if (n === void 0) {
                    n = 1;
                }
                var /** @type {?} */ keys = actions.map(function (action) { return _this.addEvent(action, handler); });
                return keys.map(function (key) { return eventValueSelector(_this.store, key); })
                    .reduce(function (acc, obs) {
                    return acc.pipe(operators.combineLatest(obs, function (x, y) { return true; }));
                }, rxjs.of(false)).pipe(operators.skip(1), operators.take(n));
            };
        /**
         * @param {?} actionType
         * @param {?=} handler
         * @return {?}
         */
        EventsService.prototype.takeOne = /**
         * @param {?} actionType
         * @param {?=} handler
         * @return {?}
         */
            function (actionType, handler) {
                return this.take(1, actionType, handler);
            };
        EventsService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        EventsService.ctorParameters = function () {
            return [
                { type: i1$1.Store }
            ];
        };
        /** @nocollapse */ EventsService.ngInjectableDef = i0.defineInjectable({ factory: function EventsService_Factory() { return new EventsService(i0.inject(i1$1.Store)); }, token: EventsService, providedIn: "root" });
        return EventsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EventsModule = (function () {
        function EventsModule() {
        }
        EventsModule.decorators = [
            { type: i0.NgModule, args: [{
                        providers: [
                            EventEffects,
                            EventsService,
                        ],
                        exports: []
                    },] },
        ];
        return EventsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function eventsReducer(state, action) {
        if (state === void 0) {
            state = new Events();
        }
        switch (action.type) {
            case EventActions.ADD_EVENT:
                return state.addEvent(action.payload);
            case EventActions.REMOVE_EVENT:
                return state.removeEvent(action.payload);
            case EventActions.TRIGGER_EVENT:
                return state.triggerEvent(action.payload);
            case EventActions.UPDATE_VALUE:
                return state.updateValue(action.payload);
            default:
                return state;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormsModule = (function () {
        function FormsModule() {
        }
        /**
         * @return {?}
         */
        FormsModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: FormsModule,
                    providers: []
                };
            };
        FormsModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                        ],
                        exports: [
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                        ]
                    },] },
        ];
        return FormsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormActions = (function () {
        function FormActions() {
        }
        /**
         * @param {?} control
         * @return {?}
         */
        FormActions.addForm = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                return {
                    type: FormActions.ADD,
                    payload: control
                };
            };
        /**
         * @param {?} control
         * @param {?} changes
         * @return {?}
         */
        FormActions.changeStatus = /**
         * @param {?} control
         * @param {?} changes
         * @return {?}
         */
            function (control, changes) {
                return {
                    type: FormActions.STATUS_CHANGES,
                    payload: {
                        control: control,
                        changes: changes
                    }
                };
            };
        /**
         * @param {?} control
         * @param {?} changes
         * @return {?}
         */
        FormActions.changeValue = /**
         * @param {?} control
         * @param {?} changes
         * @return {?}
         */
            function (control, changes) {
                return {
                    type: FormActions.VALUE_CHANGES,
                    payload: {
                        control: control,
                        changes: changes
                    }
                };
            };
        /**
         * @param {?} route
         * @return {?}
         */
        FormActions.navigateToForm = /**
         * @param {?} route
         * @return {?}
         */
            function (route) {
                return {
                    type: FormActions.NAVIGATE,
                    payload: route
                };
            };
        /**
         * @param {?} forms
         * @return {?}
         */
        FormActions.resetForms = /**
         * @param {?} forms
         * @return {?}
         */
            function (forms$$1) {
                return {
                    type: FormActions.RESET,
                    payload: forms$$1
                };
            };
        FormActions.ADD = '[forms] Add Form';
        FormActions.RESET = '[forms] Reset Forms';
        FormActions.NAVIGATE = '[forms] Navigate to Form';
        FormActions.STATUS_CHANGES = '[form] Status Changes';
        FormActions.VALUE_CHANGES = '[form] Value Changes';
        return FormActions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormArray = (function (_super) {
        __extends(FormArray, _super);
        function FormArray(fb, controls, validator, asyncValidator) {
            var _this = _super.call(this, controls, validator, asyncValidator) || this;
            _this.fb = fb;
            return _this;
        }
        /**
         * @template T
         * @param {?} fb
         * @param {?} controls
         * @param {?=} validator
         * @param {?=} asyncValidator
         * @return {?}
         */
        FormArray.Build = /**
         * @template T
         * @param {?} fb
         * @param {?} controls
         * @param {?=} validator
         * @param {?=} asyncValidator
         * @return {?}
         */
            function (fb, controls, validator, asyncValidator) {
                return new FormArray(fb, controls, validator, asyncValidator);
            };
        /**
         * @template T
         * @param {?} ctor
         * @param {?} fb
         * @param {?=} controls
         * @param {?=} validator
         * @param {?=} asyncValidator
         * @return {?}
         */
        FormArray.BuildWithType = /**
         * @template T
         * @param {?} ctor
         * @param {?} fb
         * @param {?=} controls
         * @param {?=} validator
         * @param {?=} asyncValidator
         * @return {?}
         */
            function (ctor, fb, controls, validator, asyncValidator) {
                if (controls === void 0) {
                    controls = [];
                }
                var /** @type {?} */ fa = new FormArray(fb, controls, validator, asyncValidator);
                fa.ctor = ctor;
                return fa;
            };
        /**
         * @template T
         * @param {?} ctor
         * @param {?} value
         * @param {?} fb
         * @param {?=} controls
         * @param {?=} validator
         * @param {?=} asyncValidator
         * @return {?}
         */
        FormArray.BuildWithTypeAndValue = /**
         * @template T
         * @param {?} ctor
         * @param {?} value
         * @param {?} fb
         * @param {?=} controls
         * @param {?=} validator
         * @param {?=} asyncValidator
         * @return {?}
         */
            function (ctor, value, fb, controls, validator, asyncValidator) {
                if (controls === void 0) {
                    controls = [];
                }
                var /** @type {?} */ fa = new FormArray(fb, controls, validator, asyncValidator);
                fa.ctor = ctor;
                fa.setValue(value);
                return fa;
            };
        /**
         * @template T
         * @param {?} value
         * @param {?} fb
         * @param {?=} controls
         * @param {?=} validator
         * @param {?=} asyncValidator
         * @return {?}
         */
        FormArray.BuildWithValue = /**
         * @template T
         * @param {?} value
         * @param {?} fb
         * @param {?=} controls
         * @param {?=} validator
         * @param {?=} asyncValidator
         * @return {?}
         */
            function (value, fb, controls, validator, asyncValidator) {
                if (controls === void 0) {
                    controls = [];
                }
                var /** @type {?} */ fa = new FormArray(fb, controls, validator, asyncValidator);
                fa.setValue(value);
                return fa;
            };
        /**
         * @param {?} value
         * @param {?} ctor
         * @return {?}
         */
        FormArray.GetValue = /**
         * @param {?} value
         * @param {?} ctor
         * @return {?}
         */
            function (value, ctor) {
                return toArray(value).map(function (x) { return getValue(build(ctor, x)); });
            };
        Object.defineProperty(FormArray.prototype, "maxIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this.length - 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArray.prototype, "values", {
            get: /**
             * @return {?}
             */ function () {
                return __spread(this.value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} n
         * @return {?}
         */
        FormArray.prototype.buildControls = /**
         * @param {?} n
         * @return {?}
         */
            function (n) {
                var _this = this;
                return this.buildItems(n).map(function (x) { return buildAbstractControl(_this.fb, x); });
            };
        /**
         * @param {?} n
         * @return {?}
         */
        FormArray.prototype.buildItems = /**
         * @param {?} n
         * @return {?}
         */
            function (n) {
                var _this = this;
                return Array.from(Array(n).keys()).map(function (x) { return _this.ctor ? getValue(new _this.ctor()) : {}; });
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FormArray.prototype.getValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                return this.ctor ? toArray(value).map(function (x) { return getValue(build(_this.ctor, x)); }) : value;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FormArray.prototype.resetValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.removeAll();
                this.addControls(value);
                this.setValue(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FormArray.prototype.setLength = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.length < value) {
                    this.add(value - this.length);
                }
                else if (this.length > value) {
                    this.remove(this.length - value);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FormArray.prototype.setValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.setLength(value.length);
                _super.prototype.setValue.call(this, this.getValue(value));
            };
        /**
         * @param {?} id
         * @return {?}
         */
        FormArray.prototype.findControlById = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.controls.find(function (control) { return control.value && control.value['id'] && control.value['id'] === id; });
            };
        /**
         * @return {?}
         */
        FormArray.prototype.removeAll = /**
         * @return {?}
         */
            function () {
                this.controls = [];
            };
        /**
         * @param {?} indexes
         * @return {?}
         */
        FormArray.prototype.removeIndexes = /**
         * @param {?} indexes
         * @return {?}
         */
            function (indexes) {
                var _this = this;
                indexes.forEach(function (index) {
                    _this.removeAt(index);
                });
            };
        /**
         * @param {?} n
         * @return {?}
         */
        FormArray.prototype.add = /**
         * @param {?} n
         * @return {?}
         */
            function (n) {
                var _this = this;
                this.buildControls(n).forEach(function (x) {
                    _this.push(x);
                });
            };
        /**
         * @param {?} n
         * @return {?}
         */
        FormArray.prototype.remove = /**
         * @param {?} n
         * @return {?}
         */
            function (n) {
                var _this = this;
                var /** @type {?} */ k = Math.min(n, this.length);
                Array.from(Array(k).keys()).forEach(function (x) {
                    _this.removeAt(_this.maxIndex);
                });
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FormArray.prototype.addControls = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                var /** @type {?} */ controls = value.map(function (x) { return _this.fb.group(buildControlsConfig(x, _this.fb)); });
                controls.forEach(function (control) {
                    _this.push(control);
                });
            };
        /**
         * Set value of each control.
         * @param ctor Class constructor
         * @param props Values to assign to props of each control
         */
        /**
         * Set value of each control.
         * @param {?} ctor Class constructor
         * @param {?} props Values to assign to props of each control
         * @return {?}
         */
        FormArray.prototype.setAll = /**
         * Set value of each control.
         * @param {?} ctor Class constructor
         * @param {?} props Values to assign to props of each control
         * @return {?}
         */
            function (ctor, props) {
                this.controls.forEach(function (control) {
                    control.setValue(build(new ctor(), control.value, props));
                });
            };
        return FormArray;
    }(forms.FormArray));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} fb
     * @param {?} value
     * @return {?}
     */
    function buildAbstractControl(fb, value) {
        return isGroupValue(value) ? fb.group(buildControlsConfig(value, fb)) : fb.control(value);
    }
    /**
     * Construct form builder and initialize new form array
     * @template T
     * @param {?} ctor
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    function buildArrayFromType(ctor, validator, asyncValidator) {
        var /** @type {?} */ fb = new forms.FormBuilder();
        return FormArray.BuildWithType(ctor, fb, [], validator, asyncValidator);
    }
    /**
     * @param {?} fb
     * @param {?} model
     * @param {?} key
     * @return {?}
     */
    function buildControl(fb, model, key) {
        return isFormGroup(model, key) ?
            fb.group(buildControlsConfig(model[key], fb))
            : (isFormArray(model, key) ? buildFormArray(fb, model, key)
                : (hasValidators(model, key) ? [model[key], model['metadata'][key]['validators']]
                    : [model[key]]));
    }
    /**
     * Construct form builder and initialize new form group.
     * @template T
     * @param {?} model
     * @return {?}
     */
    function buildControlFromModel(model) {
        var /** @type {?} */ fb = new forms.FormBuilder();
        var /** @type {?} */ controlsConfig = buildControlsConfig(model, fb);
        return hasGroupValidators(model) ? fb.group(controlsConfig, model['metadata']['validators']) : fb.group(controlsConfig);
    }
    /**
     * Function to recursively construct form control config object.
     * @param {?} model
     * @param {?} fb
     * @return {?}
     */
    function buildControlsConfig(model, fb) {
        var /** @type {?} */ keys = getAllProps(model);
        return keys.filter(function (key) { return key !== 'metadata' && !ignoreKey(model, key); })
            .reduce(function (acc, key) {
            return Object.assign({}, acc, (_a = {}, _a[key] = buildControl(fb, model, key), _a));
            var _a;
        }, {});
    }
    /**
     * Initialize new form array.
     * @template T
     * @param {?} fb
     * @param {?} model
     * @param {?} key
     * @return {?}
     */
    function buildFormArray(fb, model, key) {
        var /** @type {?} */ ctor = findFormArrayType(model, key);
        var /** @type {?} */ value = model[key];
        var /** @type {?} */ controls = buildFormArrayControls(fb, value, ctor);
        return ctor ? FormArray.BuildWithType(ctor, fb, controls) : FormArray.Build(fb, []);
    }
    /**
     * @template T
     * @param {?} fb
     * @param {?} value
     * @param {?=} ctor
     * @return {?}
     */
    function buildFormArrayControls(fb, value, ctor) {
        return ctor ? value.map(function (x) { return buildAbstractControl(fb, getValue(build(ctor, x))); })
            : value.map(function (x) { return buildAbstractControl(fb, x); });
    }
    /**
     * @param {?} model
     * @param {?} key
     * @return {?}
     */
    function findFormArrayType(model, key) {
        return model['metadata'] && model['metadata'][key] ? /** @type {?} */ (model['metadata'][key]['type']) : null;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    function hasGroupValidators(model) {
        return model['metadata'] && model['metadata']['validators'];
    }
    /**
     * @param {?} model
     * @param {?} key
     * @return {?}
     */
    function hasValidators(model, key) {
        return model['metadata'] && model['metadata'][key] && model['metadata'][key]['validators'];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isArrayValue(value) {
        return Array.isArray(value);
    }
    /**
     * @param {?} model
     * @param {?} key
     * @return {?}
     */
    function isFormArray(model, key) {
        return Array.isArray(model[key]) && model['metadata'] && model['metadata'][key] && model['metadata'][key]['isFormArray'];
    }
    /**
     * @param {?} model
     * @param {?} key
     * @return {?}
     */
    function isFormControl(model, key) {
        return model['metadata'] && model['metadata']['controls'] && inArray(model['metadata']['controls'], key);
    }
    /**
     * @param {?} model
     * @param {?} key
     * @return {?}
     */
    function isFormGroup(model, key) {
        return model[key]
            && typeof model[key] === 'object'
            && !Array.isArray(model[key])
            && Object.keys(model[key]).length > 0
            && !isFormControl(model, key)
            && !isFormArray(model, key);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isGroupValue(value) {
        return typeof value === 'object' && Object.keys(value).length > 0 && !isArrayValue(value);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Decorates an abstract control property built using form builder.
     * @template T
     * @param {?} ctor
     * @return {?}
     */
    function Control(ctor) {
        var /** @type {?} */ propertyDecorator = function (target, propertySignature) {
            var /** @type {?} */ decoratedProperty = buildControlFromModel(new ctor());
            target[propertySignature] = decoratedProperty;
            return target;
        };
        return propertyDecorator;
    }
    /**
     * Decorates an abstract control property built using form builder.
     * @template T
     * @param {?} ctor
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    function ArrayControl(ctor, validator, asyncValidator) {
        var /** @type {?} */ propertyDecorator = function (target, propertySignature) {
            var /** @type {?} */ decoratedProperty = buildArrayFromType(ctor, validator, asyncValidator);
            target[propertySignature] = decoratedProperty;
            return target;
        };
        return propertyDecorator;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var /**
     * @template T
     */ HttpDeletePayload = (function () {
        function HttpDeletePayload() {
            this.path = '';
            this.options = new HttpOptions();
            this.headers = undefined;
            this.onSuccess = '';
        }
        return HttpDeletePayload;
    }());
    /**
     * @template T
     */
    var /**
     * @template T
     */ HttpGetPayload = (function () {
        function HttpGetPayload() {
            this.path = '';
            this.options = new HttpOptions();
            this.headers = undefined;
            this.onSuccess = '';
        }
        return HttpGetPayload;
    }());
    /**
     * @template T
     */
    var /**
     * @template T
     */ HttpPutPayload = (function () {
        function HttpPutPayload() {
            this.path = '';
            this.model = null;
            this.options = new HttpOptions();
            this.headers = undefined;
            this.onSuccess = '';
        }
        return HttpPutPayload;
    }());
    /**
     * @template T
     */
    var /**
     * @template T
     */ HttpPostPayload = (function () {
        function HttpPostPayload() {
            this.path = '';
            this.model = null;
            this.options = new HttpOptions();
            this.headers = undefined;
            this.onSuccess = '';
        }
        return HttpPostPayload;
    }());
    /** @enum {number} */
    var HTTP_REQUEST_STATUS = {
        PENDING: 0,
        ERROR: 1,
        SUCCESS: 2,
    };
    HTTP_REQUEST_STATUS[HTTP_REQUEST_STATUS.PENDING] = "PENDING";
    HTTP_REQUEST_STATUS[HTTP_REQUEST_STATUS.ERROR] = "ERROR";
    HTTP_REQUEST_STATUS[HTTP_REQUEST_STATUS.SUCCESS] = "SUCCESS";
    /** @enum {number} */
    var HTTP_STATUS_CODES = {
        CONTINUE: 100,
        SWITCHING_PROTOCOLS: 101,
        OK: 200,
        CREATED: 201,
        ACCEPTED: 202,
        NON_AUTHORITATIVE_INFORMATION: 203,
        NO_CONTENT: 204,
        RESET_CONTENT: 205,
        PARTIAL_CONTENT: 206,
        MULTIPLE_CHOICES: 300,
        MOVED_PERMANENTLY: 301,
        FOUND: 302,
        SEE_OTHER: 303,
        NOT_MODIFIED: 304,
        USE_PROXY: 305,
        TEMPORARY_REDIRECT: 307,
        BAD_REQUEST: 400,
        UNAUTHORIZED: 401,
        PAYMENT_REQUIRED: 402,
        FORBIDDEN: 403,
        NOT_FOUND: 404,
        METHOD_NOT_ALLOWED: 405,
        NOT_ACCEPTABLE: 406,
        PROXY_AUTHENTICATION_REQUIRED: 407,
        REQUEST_TIMEOUT: 408,
        CONFLICT: 409,
        GONE: 410,
        LENGTH_REQUIRED: 411,
        PRECONDITION_FAILED: 412,
        REQUEST_ENTITY_TOO_LARGE: 413,
        REQUEST_URI_TOO_LONG: 414,
        UNSUPPORTED_MEDIA_TYPE: 415,
        REQUESTED_RANGE_NOT_SATISFIABLE: 416,
        EXPECTATION_FAILED: 417,
        UNPROCESSABLE_ENTITY: 422,
        TOO_MANY_REQUESTS: 429,
        INTERNAL_SERVER_ERROR: 500,
        NOT_IMPLEMENTED: 501,
        BAD_GATEWAY: 502,
        SERVICE_UNAVAILABLE: 503,
        GATEWAY_TIMEOUT: 504,
        HTTP_VERSION_NOT_SUPPORTED: 505,
    };
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.CONTINUE] = "CONTINUE";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.SWITCHING_PROTOCOLS] = "SWITCHING_PROTOCOLS";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.OK] = "OK";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.CREATED] = "CREATED";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.ACCEPTED] = "ACCEPTED";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.NON_AUTHORITATIVE_INFORMATION] = "NON_AUTHORITATIVE_INFORMATION";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.NO_CONTENT] = "NO_CONTENT";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.RESET_CONTENT] = "RESET_CONTENT";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.PARTIAL_CONTENT] = "PARTIAL_CONTENT";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.MULTIPLE_CHOICES] = "MULTIPLE_CHOICES";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.MOVED_PERMANENTLY] = "MOVED_PERMANENTLY";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.FOUND] = "FOUND";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.SEE_OTHER] = "SEE_OTHER";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.NOT_MODIFIED] = "NOT_MODIFIED";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.USE_PROXY] = "USE_PROXY";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.TEMPORARY_REDIRECT] = "TEMPORARY_REDIRECT";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.BAD_REQUEST] = "BAD_REQUEST";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.UNAUTHORIZED] = "UNAUTHORIZED";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.PAYMENT_REQUIRED] = "PAYMENT_REQUIRED";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.FORBIDDEN] = "FORBIDDEN";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.NOT_FOUND] = "NOT_FOUND";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.METHOD_NOT_ALLOWED] = "METHOD_NOT_ALLOWED";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.NOT_ACCEPTABLE] = "NOT_ACCEPTABLE";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.PROXY_AUTHENTICATION_REQUIRED] = "PROXY_AUTHENTICATION_REQUIRED";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.REQUEST_TIMEOUT] = "REQUEST_TIMEOUT";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.CONFLICT] = "CONFLICT";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.GONE] = "GONE";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.LENGTH_REQUIRED] = "LENGTH_REQUIRED";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.PRECONDITION_FAILED] = "PRECONDITION_FAILED";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.REQUEST_ENTITY_TOO_LARGE] = "REQUEST_ENTITY_TOO_LARGE";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.REQUEST_URI_TOO_LONG] = "REQUEST_URI_TOO_LONG";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.UNSUPPORTED_MEDIA_TYPE] = "UNSUPPORTED_MEDIA_TYPE";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.REQUESTED_RANGE_NOT_SATISFIABLE] = "REQUESTED_RANGE_NOT_SATISFIABLE";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.EXPECTATION_FAILED] = "EXPECTATION_FAILED";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.UNPROCESSABLE_ENTITY] = "UNPROCESSABLE_ENTITY";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.TOO_MANY_REQUESTS] = "TOO_MANY_REQUESTS";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.INTERNAL_SERVER_ERROR] = "INTERNAL_SERVER_ERROR";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.NOT_IMPLEMENTED] = "NOT_IMPLEMENTED";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.BAD_GATEWAY] = "BAD_GATEWAY";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.SERVICE_UNAVAILABLE] = "SERVICE_UNAVAILABLE";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.GATEWAY_TIMEOUT] = "GATEWAY_TIMEOUT";
    HTTP_STATUS_CODES[HTTP_STATUS_CODES.HTTP_VERSION_NOT_SUPPORTED] = "HTTP_VERSION_NOT_SUPPORTED";
    var HttpOptions = (function () {
        function HttpOptions() {
            this.prependBaseUrl = true;
        }
        return HttpOptions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var HttpActions = (function () {
        function HttpActions() {
        }
        /**
         * @param {?} path
         * @param {?} target
         * @return {?}
         */
        HttpActions.addPath = /**
         * @param {?} path
         * @param {?} target
         * @return {?}
         */
            function (path, target) {
                var /** @type {?} */ existingMatches = target['matches'] || [];
                var /** @type {?} */ matches = inArray(existingMatches, path) ? existingMatches : __spread(existingMatches, [path]);
                return Object.assign(target, { matches: matches });
            };
        /**
         * @param {?} path
         * @param {?} payload
         * @return {?}
         */
        HttpActions.matchPath = /**
         * @param {?} path
         * @param {?} payload
         * @return {?}
         */
            function (path, payload) {
                if (payload && payload['results']) {
                    return Object.assign(payload, { results: HttpActions.matchPath(path, payload['results']) });
                }
                if (Array.isArray(payload)) {
                    return payload.map(function (x) { return HttpActions.addPath(path, x); });
                }
                return HttpActions.addPath(path, payload);
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpActions.buildError = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return ErrorActions.add(payload);
            };
        /**
         * @param {?} key
         * @param {?} e
         * @return {?}
         */
        HttpActions.buildErrorPayload = /**
         * @param {?} key
         * @param {?} e
         * @return {?}
         */
            function (key, e) {
                return {
                    key: key,
                    error: e
                };
            };
        /**
         * @param {?} e
         * @param {?} onError
         * @return {?}
         */
        HttpActions.handleError = /**
         * @param {?} e
         * @param {?} onError
         * @return {?}
         */
            function (e, onError) {
                return {
                    type: onError,
                    payload: e
                };
            };
        /**
         * @param {?} e
         * @param {?} outlet
         * @return {?}
         */
        HttpActions.handleErrorOutlet = /**
         * @param {?} e
         * @param {?} outlet
         * @return {?}
         */
            function (e, outlet) {
                return ErrorActions.addAtOutlet(e, outlet);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        HttpActions.handleErrorDefault = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return {
                    type: HttpActions.DELETE_ERROR,
                    payload: HttpActions.buildErrorPayload('lastError', e)
                };
            };
        /**
         * @param {?} path
         * @param {?} onSuccessPayload
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
        HttpActions.delete = /**
         * @param {?} path
         * @param {?} onSuccessPayload
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
            function (path, onSuccessPayload, onSuccess, onError) {
                var /** @type {?} */ payload = Object.assign(new HttpDeletePayload(), {
                    path: path,
                    onSuccess: onSuccess || HttpActions.DELETE_SUCCESS,
                    onSuccessPayload: onSuccessPayload,
                    onError: onError || HttpActions.DELETE_ERROR
                });
                return HttpActions.httpDelete(payload);
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpActions.httpDelete = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return {
                    type: HttpActions.DELETE,
                    payload: payload
                };
            };
        /**
         * @param {?} model
         * @param {?=} actionType
         * @return {?}
         */
        HttpActions.deleteSuccess = /**
         * @param {?} model
         * @param {?=} actionType
         * @return {?}
         */
            function (model, actionType) {
                return {
                    type: actionType || HttpActions.DELETE_SUCCESS,
                    payload: model
                };
            };
        /**
         * @param {?} e
         * @param {?=} onError
         * @return {?}
         */
        HttpActions.deleteError = /**
         * @param {?} e
         * @param {?=} onError
         * @return {?}
         */
            function (e, onError) {
                if (typeof onError === 'string') {
                    return HttpActions.handleError(e, onError);
                }
                // else if (typeof onError === 'ErrorOutlet') {
                //     return HttpActions.handleErrorOutlet(e, onError);
                // }
                return HttpActions.handleErrorDefault(e);
            };
        /**
         * @param {?} path
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
        HttpActions.get = /**
         * @param {?} path
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
            function (path, onSuccess, onError) {
                var /** @type {?} */ payload = Object.assign(new HttpGetPayload(), {
                    path: path,
                    onSuccess: onSuccess || HttpActions.GET_SUCCESS,
                    onError: onError || HttpActions.GET_ERROR
                });
                return HttpActions.httpGet(payload);
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpActions.httpGet = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return {
                    type: HttpActions.GET,
                    payload: payload
                };
            };
        /**
         * @param {?} response
         * @param {?=} actionType
         * @return {?}
         */
        HttpActions.getSuccess = /**
         * @param {?} response
         * @param {?=} actionType
         * @return {?}
         */
            function (response, actionType) {
                return {
                    type: actionType || HttpActions.GET_SUCCESS,
                    payload: response
                };
            };
        /**
         * @param {?} e
         * @param {?=} onError
         * @return {?}
         */
        HttpActions.getError = /**
         * @param {?} e
         * @param {?=} onError
         * @return {?}
         */
            function (e, onError) {
                if (typeof onError === 'string') {
                    return HttpActions.handleError(e, onError);
                }
                // else if (typeof onError === 'ErrorOutlet') {
                //     return HttpActions.handleErrorOutlet(e, onError);
                // }
                return HttpActions.handleErrorDefault(e);
            };
        /**
         * @param {?} path
         * @param {?} model
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
        HttpActions.post = /**
         * @param {?} path
         * @param {?} model
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
            function (path, model, onSuccess, onError) {
                var /** @type {?} */ payload = Object.assign(new HttpPostPayload(), {
                    path: path,
                    model: model,
                    onSuccess: onSuccess || HttpActions.POST_SUCCESS,
                    onError: onError || HttpActions.POST_ERROR
                });
                return HttpActions.httpPost(payload);
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpActions.httpPost = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return {
                    type: HttpActions.POST,
                    payload: payload
                };
            };
        /**
         * @param {?} path
         * @param {?} model
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
        HttpActions.postFormUrlEncoded = /**
         * @param {?} path
         * @param {?} model
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
            function (path, model, onSuccess, onError) {
                var /** @type {?} */ payload = Object.assign(new HttpPostPayload(), {
                    path: path,
                    model: model,
                    onSuccess: onSuccess || HttpActions.GET_SUCCESS,
                    onError: onError || HttpActions.GET_ERROR
                });
                return {
                    type: HttpActions.POST_FORM_URL_ENCODED,
                    payload: payload
                };
            };
        /**
         * @param {?} model
         * @param {?=} actionType
         * @return {?}
         */
        HttpActions.postSuccess = /**
         * @param {?} model
         * @param {?=} actionType
         * @return {?}
         */
            function (model, actionType) {
                return {
                    type: actionType || HttpActions.POST_SUCCESS,
                    payload: model
                };
            };
        /**
         * @param {?} e
         * @param {?=} onError
         * @return {?}
         */
        HttpActions.postError = /**
         * @param {?} e
         * @param {?=} onError
         * @return {?}
         */
            function (e, onError) {
                if (typeof onError === 'string') {
                    return HttpActions.handleError(e, onError);
                }
                else if (typeof onError === 'object') {
                    return HttpActions.handleErrorOutlet(e, onError);
                }
                return HttpActions.handleErrorDefault(e);
            };
        /**
         * @param {?} path
         * @param {?} model
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
        HttpActions.put = /**
         * @param {?} path
         * @param {?} model
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
            function (path, model, onSuccess, onError) {
                var /** @type {?} */ payload = Object.assign(new HttpPutPayload(), {
                    path: path,
                    model: model,
                    onSuccess: onSuccess || HttpActions.PUT_SUCCESS,
                    onError: onError || HttpActions.PUT_ERROR
                });
                return HttpActions.httpPut(payload);
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpActions.httpPut = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return {
                    type: HttpActions.PUT,
                    payload: payload
                };
            };
        /**
         * @param {?} model
         * @param {?=} actionType
         * @return {?}
         */
        HttpActions.putSuccess = /**
         * @param {?} model
         * @param {?=} actionType
         * @return {?}
         */
            function (model, actionType) {
                return {
                    type: actionType || HttpActions.PUT_SUCCESS,
                    payload: model
                };
            };
        /**
         * @param {?} e
         * @param {?=} onError
         * @return {?}
         */
        HttpActions.putError = /**
         * @param {?} e
         * @param {?=} onError
         * @return {?}
         */
            function (e, onError) {
                if (typeof onError === 'string') {
                    return HttpActions.handleError(e, onError);
                }
                // else if (typeof onError === 'ErrorOutlet') {
                //     return HttpActions.handleErrorOutlet(e, onError);
                // }
                return HttpActions.handleErrorDefault(e);
            };
        /**
         * @param {?} path
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
        HttpActions.search = /**
         * @param {?} path
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
            function (path, onSuccess, onError) {
                var /** @type {?} */ payload = Object.assign(new HttpGetPayload(), {
                    path: path,
                    onSuccess: onSuccess || HttpActions.SEARCH_SUCCESS,
                    onError: onError || HttpActions.SEARCH_ERROR
                });
                return {
                    type: HttpActions.SEARCH,
                    payload: payload
                };
            };
        /**
         * @param {?} response
         * @param {?=} actionType
         * @param {?=} path
         * @return {?}
         */
        HttpActions.searchSuccess = /**
         * @param {?} response
         * @param {?=} actionType
         * @param {?=} path
         * @return {?}
         */
            function (response, actionType, path) {
                var /** @type {?} */ payload = path ? HttpActions.matchPath(path, response) : response;
                return {
                    type: actionType || HttpActions.SEARCH_SUCCESS,
                    payload: payload
                };
            };
        HttpActions.DELETE = "[Http] DELETE";
        HttpActions.DELETE_SUCCESS = "[Http] DELETE Success";
        HttpActions.DELETE_ERROR = "[Http] DELETE Error";
        HttpActions.GET = "[Http] GET";
        HttpActions.GET_SUCCESS = "[Http] GET Success";
        HttpActions.GET_ERROR = "[Http] GET Error";
        HttpActions.POST = "[Http] POST";
        HttpActions.POST_SUCCESS = "[Http] POST Success";
        HttpActions.POST_ERROR = "[Http] POST Error";
        HttpActions.POST_FORM_URL_ENCODED = "[Http] POST Form URL Encoded";
        HttpActions.PUT = "[Http] PUT";
        HttpActions.PUT_SUCCESS = "[Http] PUT Success";
        HttpActions.PUT_ERROR = "[Http] PUT Error";
        HttpActions.SEARCH = "[Http] SEARCH";
        HttpActions.SEARCH_SUCCESS = "[Http] SEARCH Success";
        HttpActions.SEARCH_ERROR = "[Http] SEARCH Error";
        return HttpActions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var HttpService = (function () {
        function HttpService(http, baseUrl$, authToken$) {
            var _this = this;
            this.http = http;
            this.baseUrl$ = baseUrl$;
            this.authToken$ = authToken$;
            this._authToken = '';
            this._baseUrl = '';
            this.headers = {};
            this.logEvents = true;
            this.useDefaultHeaders = true;
            this.authTokenChanges = this.authToken$.subscribe(function (x) {
                _this.authToken = x;
            });
            this.baseUrlChanges = this.baseUrl$.subscribe(function (x) {
                _this.baseUrl = x;
            });
        }
        Object.defineProperty(HttpService.prototype, "authToken", {
            get: /**
             * @return {?}
             */ function () {
                return this._authToken;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._authToken = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpService.prototype, "baseUrl", {
            get: /**
             * @return {?}
             */ function () {
                return this._baseUrl;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._baseUrl = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpService.prototype, "defaultHeaders", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ headers = new i1$2.HttpHeaders();
                headers = headers.append('Content-type', 'application/json');
                if (this.authToken) {
                    headers = headers.append('Authorization', 'Bearer ' + this.authToken);
                }
                return headers;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpService.prototype, "requestHeaders", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                var /** @type {?} */ headers = this.useDefaultHeaders ? this.defaultHeaders : new i1$2.HttpHeaders();
                Object.keys(this.headers).forEach(function (key) {
                    headers = headers.append(key, _this.headers[key]);
                });
                return headers;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?=} headers
         * @return {?}
         */
        HttpService.prototype.appendHeaders = /**
         * @param {?=} headers
         * @return {?}
         */
            function (headers) {
                var _this = this;
                if (headers === void 0) {
                    headers = {};
                }
                var /** @type {?} */ requestHeaders = this.requestHeaders;
                Object.keys(headers).forEach(function (key) {
                    requestHeaders = requestHeaders.append(key, _this.headers[key]);
                });
                return requestHeaders;
            };
        /**
         * Make a DELETE request.
         * @param relativePath
         * @param headers
         * @param options
         */
        /**
         * Make a DELETE request.
         * @param {?} relativePath
         * @param {?=} headers
         * @param {?=} options
         * @return {?}
         */
        HttpService.prototype.delete = /**
         * Make a DELETE request.
         * @param {?} relativePath
         * @param {?=} headers
         * @param {?=} options
         * @return {?}
         */
            function (relativePath, headers, options) {
                var _this = this;
                if (headers === void 0) {
                    headers = {};
                }
                if (options === void 0) {
                    options = new HttpOptions();
                }
                var /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
                var /** @type {?} */ httpHeaders = this.appendHeaders(headers);
                var /** @type {?} */ obs = this.http.delete(url, {
                    headers: httpHeaders
                });
                return obs.pipe(operators.map(function (res) { return res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res; }), operators.catchError(function (err) { return _this.onError(err); }), operators.finalize(function () {
                    _this.onComplete('DELETE', url);
                }));
            };
        /**
         * Make a GET request.
         * @param relativePath
         * @param headers
         * @param options
         */
        /**
         * Make a GET request.
         * @param {?} relativePath
         * @param {?=} headers
         * @param {?=} options
         * @return {?}
         */
        HttpService.prototype.get = /**
         * Make a GET request.
         * @param {?} relativePath
         * @param {?=} headers
         * @param {?=} options
         * @return {?}
         */
            function (relativePath, headers, options) {
                var _this = this;
                if (headers === void 0) {
                    headers = {};
                }
                if (options === void 0) {
                    options = new HttpOptions();
                }
                var /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
                var /** @type {?} */ httpHeaders = this.appendHeaders(headers);
                var /** @type {?} */ obs = this.http.get(url, {
                    headers: httpHeaders
                });
                return obs.pipe(operators.map(function (res) { return res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res; }), operators.catchError(function (err) { return _this.onError(err); }), operators.finalize(function () {
                    _this.onComplete('GET', url);
                }));
            };
        /**
         * Make an autocomplete GET request.
         * @param relativePath
         * @param headers
         * @param options
         */
        /**
         * Make an autocomplete GET request.
         * @param {?} relativePath
         * @param {?} query
         * @param {?=} headers
         * @param {?=} options
         * @return {?}
         */
        HttpService.prototype.autocomplete = /**
         * Make an autocomplete GET request.
         * @param {?} relativePath
         * @param {?} query
         * @param {?=} headers
         * @param {?=} options
         * @return {?}
         */
            function (relativePath, query, headers, options) {
                var _this = this;
                if (headers === void 0) {
                    headers = {};
                }
                if (options === void 0) {
                    options = new HttpOptions();
                }
                if (!query.term || query.term.length < 1) {
                    return rxjs.of([]);
                }
                var /** @type {?} */ path = relativePath + "/" + QueryModel.BuildQueryString(query);
                var /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
                var /** @type {?} */ httpHeaders = this.appendHeaders(headers);
                var /** @type {?} */ obs = this.http.get(url, {
                    headers: httpHeaders
                });
                return obs.pipe(operators.map(function (res) { return res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res; }), operators.debounceTime(500), operators.distinctUntilChanged(), operators.map(function (json) { return HttpActions.matchPath(path, json); }), operators.catchError(function (err) { return _this.onError(err); }), operators.finalize(function () {
                    _this.onComplete('GET', url);
                }));
            };
        /**
         * Make a POST request.
         * @param relativePath
         * @param body
         * @param headers
         * @param options
         */
        /**
         * Make a POST request.
         * @param {?} relativePath
         * @param {?} body
         * @param {?=} headers
         * @param {?=} options
         * @return {?}
         */
        HttpService.prototype.post = /**
         * Make a POST request.
         * @param {?} relativePath
         * @param {?} body
         * @param {?=} headers
         * @param {?=} options
         * @return {?}
         */
            function (relativePath, body, headers, options) {
                var _this = this;
                if (headers === void 0) {
                    headers = {};
                }
                if (options === void 0) {
                    options = new HttpOptions();
                }
                var /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
                var /** @type {?} */ httpHeaders = this.appendHeaders(headers);
                var /** @type {?} */ obs = this.http.post(url, serialize(body), {
                    headers: httpHeaders
                });
                return obs.pipe(operators.map(function (res) { return res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res; }), operators.catchError(function (err) { return _this.onError(err); }), operators.finalize(function () {
                    _this.onComplete('POST', url);
                }));
            };
        /**
         * Make a POST request with form url-encoded content type.
         * @param relativePath
         * @param body
         * @param headers
         * @param options
         */
        /**
         * Make a POST request with form url-encoded content type.
         * @param {?} relativePath
         * @param {?} body
         * @param {?=} headers
         * @param {?=} options
         * @return {?}
         */
        HttpService.prototype.postFormUrlEncoded = /**
         * Make a POST request with form url-encoded content type.
         * @param {?} relativePath
         * @param {?} body
         * @param {?=} headers
         * @param {?=} options
         * @return {?}
         */
            function (relativePath, body, headers, options) {
                var _this = this;
                if (headers === void 0) {
                    headers = {};
                }
                if (options === void 0) {
                    options = new HttpOptions();
                }
                var /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
                var /** @type {?} */ httpHeaders = new i1$2.HttpHeaders({ 'content-type': 'application/x-www-form-urlencoded' });
                var /** @type {?} */ obs = this.http.post(url, body, {
                    headers: httpHeaders
                });
                return obs.pipe(operators.map(function (res) { return res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res; }), operators.catchError(function (err) { return _this.onError(err); }), operators.finalize(function () {
                    _this.onComplete('POST FORM URL-ENCODED', url);
                }));
            };
        /**
         * Make a PUT request.
         * @param relativePath
         * @param body
         * @param headers
         * @param options
         */
        /**
         * Make a PUT request.
         * @param {?} relativePath
         * @param {?} body
         * @param {?=} headers
         * @param {?=} options
         * @return {?}
         */
        HttpService.prototype.put = /**
         * Make a PUT request.
         * @param {?} relativePath
         * @param {?} body
         * @param {?=} headers
         * @param {?=} options
         * @return {?}
         */
            function (relativePath, body, headers, options) {
                var _this = this;
                if (headers === void 0) {
                    headers = {};
                }
                if (options === void 0) {
                    options = new HttpOptions();
                }
                var /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
                var /** @type {?} */ httpHeaders = this.appendHeaders(headers);
                var /** @type {?} */ obs = this.http.put(url, serialize(body), {
                    headers: httpHeaders
                });
                return obs.pipe(operators.map(function (res) { return res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res; }), operators.catchError(function (err) { return _this.onError(err); }), operators.finalize(function () {
                    _this.onComplete('PUT', url);
                }));
            };
        /**
         * This method will be used to format URLs for all cross-origin requests.
         */
        /**
         * This method will be used to format URLs for all cross-origin requests.
         * @param {?} path
         * @return {?}
         */
        HttpService.prototype.formatUrl = /**
         * This method will be used to format URLs for all cross-origin requests.
         * @param {?} path
         * @return {?}
         */
            function (path) {
                return this.baseUrl + "/" + path;
            };
        /**
         * Use this method when a promise is preferred over an observable.
         */
        /**
         * Use this method when a promise is preferred over an observable.
         * @param {?} url
         * @return {?}
         */
        HttpService.prototype.getPromise = /**
         * Use this method when a promise is preferred over an observable.
         * @param {?} url
         * @return {?}
         */
            function (url) {
                return this.get(url)
                    .toPromise()
                    .then(function (res) { return res.json(); });
            };
        /**
         * @param {?} error
         * @return {?}
         */
        HttpService.prototype.onError = /**
         * @param {?} error
         * @return {?}
         */
            function (error) {
                var /** @type {?} */ errorBody;
                try {
                    errorBody = (error._body) ? JSON.parse(error._body) : { message: 'Internal server error', statusCode: error.status };
                }
                catch (e) {
                    if (error.status <= 0) {
                        errorBody = { message: 'Internal server error.', statusCode: 500 };
                    }
                }
                if (errorBody.message) {
                    errorBody.message = errorBody.message.replace('An error has occured in the api.System.Exception: ', '');
                    errorBody.message = errorBody.message.substring(0, errorBody.message.indexOf(' at'));
                }
                return rxjs.throwError(errorBody);
            };
        /**
         * @param {?} method
         * @param {?} url
         * @return {?}
         */
        HttpService.prototype.onComplete = /**
         * @param {?} method
         * @param {?} url
         * @return {?}
         */
            function (method, url) {
                if (this.logEvents) {
                    console.log("Completed " + method + " request to " + url);
                }
            };
        HttpService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        HttpService.ctorParameters = function () {
            return [
                { type: i1$2.HttpClient },
                { type: rxjs.Observable },
                { type: rxjs.Observable }
            ];
        };
        /** @nocollapse */ HttpService.ngInjectableDef = i0.defineInjectable({ factory: function HttpService_Factory() { return new HttpService(i0.inject(i1$2.HttpClient), i0.inject(i2.Observable), i0.inject(i2.Observable)); }, token: HttpService, providedIn: "root" });
        return HttpService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var BaseEntity = (function () {
        function BaseEntity() {
            this.createdBy = null;
            this.createdById = 0;
            this.createdDate = new Date();
            this.formId = 0;
            this.lastModifiedBy = null;
            this.lastModifiedById = 0;
            this.lastModifiedDate = new Date();
            this.matches = [];
            this.ignore = [
                '_metadata',
                'metadata',
                'ignore',
                'createdBy',
                'createdById',
                'createdDate',
                'formId',
                'lastModifiedBy',
                'lastModifiedById',
                'lastModifiedDate',
                'lastModifiedOn',
                'lastUpdated',
                'matches',
            ];
            this._metadata = new Metadata();
        }
        Object.defineProperty(BaseEntity.prototype, "metadata", {
            get: /**
             * @return {?}
             */ function () {
                return build(Metadata, this._metadata, {
                    ignore: this.ignore
                });
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._metadata = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BaseEntity.getGetters = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return Object.keys(this.prototype).filter(function (name) {
                    return typeof Object.getOwnPropertyDescriptor(_this.prototype, name)['get'] === 'function';
                });
            };
        /**
         * @return {?}
         */
        BaseEntity.getSetters = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return Object.keys(this.prototype).filter(function (name) {
                    return typeof Object.getOwnPropertyDescriptor(_this.prototype, name)['set'] === 'function';
                });
            };
        /**
         * @return {?}
         */
        BaseEntity.prototype.getGetters = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return Object.keys(this.constructor.prototype).filter(function (name) {
                    return typeof Object.getOwnPropertyDescriptor(_this.constructor.prototype, name)['get'] === 'function';
                });
            };
        /**
         * @return {?}
         */
        BaseEntity.prototype.getSetters = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return Object.keys(this.constructor.prototype).filter(function (name) {
                    return typeof Object.getOwnPropertyDescriptor(_this.constructor.prototype, name)['set'] === 'function';
                });
            };
        /**
         * @param {?} value
         * @return {?}
         */
        BaseEntity.prototype.update = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return Object.assign(new BaseEntity(), value);
            };
        return BaseEntity;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ ActionCreator = function (actionType) {
        return function (target, propertySignature) {
            var /** @type {?} */ method = target[propertySignature];
            var /** @type {?} */ decoratedMethod = function () {
                var /** @type {?} */ $this = this;
                var /** @type {?} */ action = method.apply($this, arguments);
                action.actionType = actionType;
                return action;
            };
            target[propertySignature] = decoratedMethod;
            return target;
        };
    };
    var /** @type {?} */ ActionType = function () {
        return function (target, propertySignature) {
            return target;
        };
    };
    /**
     * Class Decorator Factory
     * Decorates a class.
     */
    var /** @type {?} */ Class = function (metadata) {
        var /** @type {?} */ classDecorator = function (target) {
            return target;
        };
        return classDecorator;
    };
    var /** @type {?} */ Command = function () {
        return function (target, propertySignature) {
            return target;
        };
    };
    var /** @type {?} */ Dispatcher = function () {
        return function (target, propertySignature) {
            return target;
        };
    };
    /**
     * Decorates a class with properties from BaseEntity
     */
    var /** @type {?} */ Entity = function (metadata) {
        /**
         * @template TFunction
         * @param {?} target
         * @return {?}
         */
        function classDecorator(target) {
            var /** @type {?} */ ctor = function () {
                Object.assign(this, new BaseEntity(), { metadata: metadata || {} });
            };
            ctor.prototype = Object.create(target.prototype);
            ctor.prototype.constructor = target;
            return /** @type {?} */ (ctor);
        }
        return classDecorator;
    };
    var /** @type {?} */ EventHandler = function () {
        return function (target, propertySignature) {
            return target;
        };
    };
    var /** @type {?} */ LifecycleHook = function () {
        return function (target, propertySignature) {
            return target;
        };
    };
    /**
     * Method Decorator Factory
     * Decorates a method.
     */
    var /** @type {?} */ Method = function (metadata) {
        var /** @type {?} */ methodDecorator = function (target, propertySignature, descriptor) {
            return target;
        };
        return methodDecorator;
    };
    /**
     * Parameter Decorator Factory
     * Decorates a parameter.
     */
    var /** @type {?} */ Parameter = function (metadata) {
        var /** @type {?} */ parameterDecorator = function (target, propertySignature, parameterIndex) {
            return target;
        };
        return parameterDecorator;
    };
    /**
     * Property Decorator Factory
     * Decorates a Property.
     */
    var /** @type {?} */ Property = function (metadata) {
        var /** @type {?} */ propertyDecorator = function (target, propertySignature) {
            if (!target.metadata) {
                target.metadata = {};
            }
            target.metadata[propertySignature] = Object.assign(metadata, { propertyName: propertySignature });
            return target;
        };
        return propertyDecorator;
    };
    /**
     * Static Method Decorator Factory
     * Decorates a static method.
     */
    var /** @type {?} */ StaticMethod = function (metadata) {
        var /** @type {?} */ staticMethodDecorator = function (target, propertySignature) {
            return target;
        };
        return staticMethodDecorator;
    };
    /**
     *  Static Property Decorator Factory
     * Decorates a static property.
     */
    var /** @type {?} */ StaticProperty = function (metadata) {
        var /** @type {?} */ staticPropertyDecorator = function (target, propertySignature) {
            return target;
        };
        return staticPropertyDecorator;
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var HttpCommands = (function () {
        function HttpCommands(http) {
            this.http = http;
        }
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpCommands.prototype.delete$ = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return this.http.delete(payload.path, payload.headers, payload.options);
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpCommands.prototype.get$ = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return this.http.get(payload.path, payload.headers, payload.options);
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpCommands.prototype.post$ = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return this.http.post(payload.path, payload.model, payload.headers, payload.options);
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpCommands.prototype.postFormUrlEncoded$ = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return this.http.postFormUrlEncoded(payload.path, payload.model, payload.headers, payload.options);
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpCommands.prototype.put$ = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return this.http.put(payload.path, payload.model, payload.headers, payload.options);
            };
        HttpCommands.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        HttpCommands.ctorParameters = function () {
            return [
                { type: HttpService }
            ];
        };
        /** @nocollapse */ HttpCommands.ngInjectableDef = i0.defineInjectable({ factory: function HttpCommands_Factory() { return new HttpCommands(i0.inject(HttpService)); }, token: HttpCommands, providedIn: "root" });
        __decorate([
            Command(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [HttpDeletePayload]),
            __metadata("design:returntype", rxjs.Observable)
        ], HttpCommands.prototype, "delete$", null);
        __decorate([
            Command(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [HttpGetPayload]),
            __metadata("design:returntype", rxjs.Observable)
        ], HttpCommands.prototype, "get$", null);
        __decorate([
            Command(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [HttpPostPayload]),
            __metadata("design:returntype", rxjs.Observable)
        ], HttpCommands.prototype, "post$", null);
        __decorate([
            Command(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [HttpPostPayload]),
            __metadata("design:returntype", rxjs.Observable)
        ], HttpCommands.prototype, "postFormUrlEncoded$", null);
        __decorate([
            Command(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [HttpPutPayload]),
            __metadata("design:returntype", rxjs.Observable)
        ], HttpCommands.prototype, "put$", null);
        return HttpCommands;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var HttpEffects = (function () {
        function HttpEffects(actions$, commands) {
            var _this = this;
            this.actions$ = actions$;
            this.commands = commands;
            this.onDelete$ = this.actions$.pipe(effects.ofType(HttpActions.DELETE), operators.mergeMap(function (action) { return _this.delete$(action.payload); }));
            this.onGet$ = this.actions$.pipe(effects.ofType(HttpActions.GET), operators.mergeMap(function (action) { return _this.get$(action.payload); }));
            this.onPost$ = this.actions$.pipe(effects.ofType(HttpActions.POST), operators.mergeMap(function (action) { return _this.post$(action.payload); }));
            this.onPostFormUrlEncoded$ = this.actions$.pipe(effects.ofType(HttpActions.POST_FORM_URL_ENCODED), operators.mergeMap(function (action) { return _this.postFormUrlEncoded$(action.payload); }));
            this.onPut$ = this.actions$.pipe(effects.ofType(HttpActions.PUT), operators.mergeMap(function (action) { return _this.put$(action.payload); }));
            this.onSearch$ = this.actions$.pipe(effects.ofType(HttpActions.SEARCH), operators.mergeMap(function (action) { return _this.search$(action.payload); }));
        }
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpEffects.prototype.delete$ = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                // console.log('DELETE:\t', payload.onSuccess);
                return this.commands.delete$(payload).pipe(operators.map(function (model) { return HttpActions.deleteSuccess(payload.onSuccessPayload || model, payload.onSuccess); }), operators.catchError(function (e) { return rxjs.of(HttpActions.deleteError(e, payload.onError)); }));
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpEffects.prototype.get$ = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                // console.log('GET:\t', payload.onSuccess);
                return this.commands.get$(payload).pipe(operators.map(function (model) { return HttpActions.getSuccess(model, payload.onSuccess); }), operators.catchError(function (e) { return rxjs.of(HttpActions.getError(e, payload.onError)); }));
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpEffects.prototype.post$ = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                // console.log('POST:\t', payload.onSuccess);
                return this.commands.post$(payload).pipe(operators.map(function (model) { return HttpActions.postSuccess(model, payload.onSuccess); }), operators.catchError(function (e) { return rxjs.of(HttpActions.postError(e, payload.onError)); }));
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpEffects.prototype.postFormUrlEncoded$ = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                // console.log('POST:\t', payload.onSuccess);
                return this.commands.postFormUrlEncoded$(payload).pipe(operators.map(function (model) { return HttpActions.postSuccess(model, payload.onSuccess); }), operators.catchError(function (e) { return rxjs.of(HttpActions.postError(e, payload.onError)); }));
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpEffects.prototype.put$ = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                // console.log('PUT:\t', payload.onSuccess);
                return this.commands.put$(payload).pipe(operators.map(function (model) { return HttpActions.putSuccess(model, payload.onSuccess); }), operators.catchError(function (e) { return rxjs.of(HttpActions.putError(e, payload.onError)); }));
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        HttpEffects.prototype.search$ = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                // console.log('SEARCH:\t', payload.onSuccess);
                return this.commands.get$(payload).pipe(operators.map(function (model) { return HttpActions.searchSuccess(model, payload.onSuccess, payload.path); }), operators.catchError(function (e) { return rxjs.of(HttpActions.getError(e, payload.onError)); }));
            };
        HttpEffects.decorators = [
            { type: i0.Injectable },
        ];
        /** @nocollapse */
        HttpEffects.ctorParameters = function () {
            return [
                { type: effects.Actions },
                { type: HttpCommands }
            ];
        };
        __decorate([
            effects.Effect(),
            __metadata("design:type", Object)
        ], HttpEffects.prototype, "onDelete$", void 0);
        __decorate([
            effects.Effect(),
            __metadata("design:type", Object)
        ], HttpEffects.prototype, "onGet$", void 0);
        __decorate([
            effects.Effect(),
            __metadata("design:type", Object)
        ], HttpEffects.prototype, "onPost$", void 0);
        __decorate([
            effects.Effect(),
            __metadata("design:type", Object)
        ], HttpEffects.prototype, "onPostFormUrlEncoded$", void 0);
        __decorate([
            effects.Effect(),
            __metadata("design:type", Object)
        ], HttpEffects.prototype, "onPut$", void 0);
        __decorate([
            effects.Effect(),
            __metadata("design:type", Object)
        ], HttpEffects.prototype, "onSearch$", void 0);
        return HttpEffects;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ BASE_URL$ = new i0.InjectionToken('API Base URL');
    var /** @type {?} */ AUTH_TOKEN$ = new i0.InjectionToken('API Auth Token');
    /**
     * @param {?} store
     * @param {?} baseUrlSelector
     * @return {?}
     */
    function baseUrlFactory(store, baseUrlSelector) {
        return store.pipe(baseUrlSelector);
    }
    /**
     * @param {?} store
     * @param {?} authTokenSelector
     * @return {?}
     */
    function authTokenFactory(store, authTokenSelector) {
        return store.pipe(authTokenSelector);
    }
    /**
     * @param {?} http
     * @param {?} baseUrl$
     * @param {?} authToken$
     * @return {?}
     */
    function httpServiceFactory(http, baseUrl$, authToken$) {
        return new HttpService(http, baseUrl$, authToken$);
    }
    /**
     * @param {?} urlSelector
     * @param {?} authTokenSelector
     * @return {?}
     */
    function provideHttpContext(urlSelector, authTokenSelector) {
        return [
            HttpEffects,
            HttpCommands,
            { provide: HttpService, useFactory: httpServiceFactory, deps: [i1$2.HttpClient, 'BASE_URL$', 'AUTH_TOKEN$'] },
            { provide: 'URL_SELECTOR', useValue: urlSelector },
            { provide: 'BASE_URL$', useFactory: baseUrlFactory, deps: [i1$1.Store, 'URL_SELECTOR'] },
            { provide: 'TOKEN_SELECTOR', useValue: authTokenSelector },
            { provide: 'AUTH_TOKEN$', useFactory: authTokenFactory, deps: [i1$1.Store, 'TOKEN_SELECTOR'] },
        ];
    }
    var HttpModule = (function () {
        function HttpModule() {
        }
        /**
         * @param {?} baseUrlSelector
         * @param {?} authTokenSelector
         * @return {?}
         */
        HttpModule.forRoot = /**
         * @param {?} baseUrlSelector
         * @param {?} authTokenSelector
         * @return {?}
         */
            function (baseUrlSelector, authTokenSelector) {
                return {
                    ngModule: HttpModule,
                    providers: provideHttpContext(baseUrlSelector, authTokenSelector)
                };
            };
        HttpModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            i1$2.HttpClientModule,
                        ],
                        exports: [
                            i1$2.HttpClientModule,
                        ]
                    },] },
        ];
        return HttpModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LookupActions = (function () {
        function LookupActions() {
        }
        /**
         * @param {?} payload
         * @return {?}
         */
        LookupActions.addKey = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return {
                    type: LookupActions.ADD_KEY,
                    payload: payload
                };
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        LookupActions.addValues = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return {
                    type: LookupActions.ADD_VALUES,
                    payload: payload
                };
            };
        /**
         * @param {?} key
         * @return {?}
         */
        LookupActions.removeKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return {
                    type: LookupActions.REMOVE_KEY,
                    payload: key
                };
            };
        LookupActions.ADD_KEYS = '[Lookup] Add keys';
        LookupActions.ADD_KEY = '[Lookup] Add key';
        LookupActions.ADD_VALUES = '[Lookup] Add values';
        LookupActions.REMOVE_KEY = '[Lookup] Remove key';
        return LookupActions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Lookup = (function () {
        function Lookup() {
            this.typeName = '';
            this.values = [];
            this._key = '';
        }
        Object.defineProperty(Lookup.prototype, "key", {
            get: /**
             * @return {?}
             */ function () {
                return this._key || this.typeName;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._key = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Lookup.prototype, "name", {
            get: /**
             * @return {?}
             */ function () {
                return this.key;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.key = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Lookup.prototype, "names", {
            get: /**
             * @return {?}
             */ function () {
                return this.values.map(function (x) { return x.name; });
            },
            enumerable: true,
            configurable: true
        });
        return Lookup;
    }());
    var LookupValue = (function () {
        function LookupValue() {
            this.id = 0;
            this.active = true;
            this.description = '';
            this.name = '';
            this.sort = 0;
            this.tooltip = '';
            this._label = '';
        }
        Object.defineProperty(LookupValue.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value || this.id;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LookupValue.prototype, "label", {
            get: /**
             * @return {?}
             */ function () {
                return this._label || this.description;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._label = value;
            },
            enumerable: true,
            configurable: true
        });
        return LookupValue;
    }());
    var Lookups = (function () {
        function Lookups() {
        }
        /**
         * @param {?} state
         * @param {?} lookups
         * @return {?}
         */
        Lookups.AddLookups = /**
         * @param {?} state
         * @param {?} lookups
         * @return {?}
         */
            function (state, lookups) {
                return lookups.reduce(function (acc, lookup) {
                    return build(Lookups, acc, (_a = {}, _a[lookup.key] = build(Lookup, lookup), _a));
                    var _a;
                }, state);
            };
        /**
         * @param {?} state
         * @param {?} lookup
         * @return {?}
         */
        Lookups.AddLookup = /**
         * @param {?} state
         * @param {?} lookup
         * @return {?}
         */
            function (state, lookup) {
                return build(Lookups, state, (_a = {},
                    _a[lookup.key] = build(Lookup, lookup),
                    _a));
                var _a;
            };
        /**
         * @param {?} values
         * @param {?} names
         * @return {?}
         */
        Lookups.BuildLookupValues = /**
         * @param {?} values
         * @param {?} names
         * @return {?}
         */
            function (values, names) {
                return names.reduce(function (acc, name) {
                    var /** @type {?} */ value = values.find(function (x) { return x.name === name; });
                    return value ? __spread(acc, [value]) : __spread(acc);
                }, []);
            };
        /**
         * @param {?} values
         * @param {?} name
         * @return {?}
         */
        Lookups.FindLookupIdByName = /**
         * @param {?} values
         * @param {?} name
         * @return {?}
         */
            function (values, name) {
                var /** @type {?} */ lkp = build(LookupValue, values.find(function (x) { return x.name === name; }));
                return lkp.id;
            };
        /**
         * @param {?} values
         * @param {?} id
         * @return {?}
         */
        Lookups.FindLookupNameById = /**
         * @param {?} values
         * @param {?} id
         * @return {?}
         */
            function (values, id) {
                var /** @type {?} */ lkp = build(LookupValue, values.find(function (x) { return x.id === id; }));
                return lkp.name;
            };
        /**
         * @param {?} state
         * @param {?} removeKey
         * @return {?}
         */
        Lookups.RemoveLookup = /**
         * @param {?} state
         * @param {?} removeKey
         * @return {?}
         */
            function (state, removeKey) {
                var /** @type {?} */ newState = new Lookups();
                var /** @type {?} */ keys = Object.keys(state).filter(function (key) { return key !== removeKey; });
                keys.forEach(function (key) {
                    newState[key] = Object.assign({}, state[key]);
                });
                return newState;
            };
        return Lookups;
    }());
    var AddLookupPayload = (function () {
        function AddLookupPayload() {
            this.key = '';
        }
        return AddLookupPayload;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LookupService = (function () {
        function LookupService(store, lookupPath, lookupKeys) {
            if (lookupPath === void 0) {
                lookupPath = 'lookup';
            }
            if (lookupKeys === void 0) {
                lookupKeys = [];
            }
            this.store = store;
            this._keys = [];
            this.path = 'lookup';
            this.path = lookupPath;
            this.keys = lookupKeys;
        }
        Object.defineProperty(LookupService.prototype, "keys", {
            get: /**
             * @return {?}
             */ function () {
                return this._keys;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._keys = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} keys
         * @param {?=} values
         * @return {?}
         */
        LookupService.prototype.load = /**
         * @param {?} keys
         * @param {?=} values
         * @return {?}
         */
            function (keys, values) {
                if (values) {
                    this.loadValues(values);
                }
                this.loadKeys(keys);
            };
        /**
         * @param {?} keys
         * @return {?}
         */
        LookupService.prototype.loadKeys = /**
         * @param {?} keys
         * @return {?}
         */
            function (keys) {
                this.keys = keys;
                this.store.dispatch(HttpActions.get("" + this.path + this.buildQueryString(), LookupActions.ADD_KEYS));
            };
        /**
         * @param {?} values
         * @return {?}
         */
        LookupService.prototype.loadValues = /**
         * @param {?} values
         * @return {?}
         */
            function (values) {
                this.store.dispatch(LookupActions.addValues(values));
            };
        /**
         * @param {?} key
         * @return {?}
         */
        LookupService.prototype.lookup = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this.store.select('lookup').pipe(operators.map(function (s) { return s[key]; }));
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        LookupService.prototype.addKey = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                this.store.dispatch(LookupActions.addKey(build(AddLookupPayload, {
                    key: key,
                    value: value
                })));
            };
        /**
         * @param {?} key
         * @return {?}
         */
        LookupService.prototype.removeKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                this.store.dispatch(LookupActions.removeKey(key));
            };
        /**
         * @return {?}
         */
        LookupService.prototype.buildQueryString = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ query = this.keys.length > 0 ? "?keys=" + this.keys[0] : '';
                this.keys.filter(function (key, index) { return index !== 0; })
                    .forEach(function (key) {
                    query += "&keys=" + key;
                });
                return query;
            };
        LookupService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        LookupService.ctorParameters = function () {
            return [
                { type: i1$1.Store },
                { type: undefined, decorators: [{ type: i0.Inject, args: [LOOKUP_PATH,] }] },
                { type: Array, decorators: [{ type: i0.Inject, args: [LOOKUP_KEYS,] }] }
            ];
        };
        /** @nocollapse */ LookupService.ngInjectableDef = i0.defineInjectable({ factory: function LookupService_Factory() { return new LookupService(i0.inject(i1$1.Store), i0.inject(LOOKUP_PATH), i0.inject(LOOKUP_KEYS)); }, token: LookupService, providedIn: "root" });
        return LookupService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ LOOKUP_PATH = new i0.InjectionToken('API lookup endpoint');
    var /** @type {?} */ LOOKUP_KEYS = new i0.InjectionToken('API lookup keys');
    /**
     * @param {?} store
     * @param {?=} LOOKUP_PATH
     * @param {?=} LOOKUP_KEYS
     * @return {?}
     */
    function lookupServiceFactory(store, LOOKUP_PATH, LOOKUP_KEYS) {
        if (LOOKUP_PATH === void 0) {
            LOOKUP_PATH = 'lookup';
        }
        if (LOOKUP_KEYS === void 0) {
            LOOKUP_KEYS = [];
        }
        return new LookupService(store, LOOKUP_PATH, LOOKUP_KEYS);
    }
    /**
     * @param {?=} path
     * @param {?=} keys
     * @return {?}
     */
    function provideLookup(path, keys) {
        if (path === void 0) {
            path = '';
        }
        if (keys === void 0) {
            keys = [];
        }
        return [
            { provide: LookupService, useFactory: lookupServiceFactory, deps: [i1$1.Store, LOOKUP_PATH, LOOKUP_KEYS] },
            { provide: LOOKUP_PATH, useValue: path },
            { provide: LOOKUP_KEYS, useValue: keys },
        ];
    }
    var LookupModule = (function () {
        function LookupModule() {
        }
        /**
         * @return {?}
         */
        LookupModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: LookupModule,
                    providers: provideLookup('lookup', [])
                };
            };
        /**
         * @param {?=} path
         * @return {?}
         */
        LookupModule.forRootWithPath = /**
         * @param {?=} path
         * @return {?}
         */
            function (path) {
                if (path === void 0) {
                    path = '';
                }
                return {
                    ngModule: LookupModule,
                    providers: provideLookup(path, [])
                };
            };
        /**
         * @param {?} keys
         * @return {?}
         */
        LookupModule.forRootWithKeys = /**
         * @param {?} keys
         * @return {?}
         */
            function (keys) {
                return {
                    ngModule: LookupModule,
                    providers: provideLookup('lookup', keys)
                };
            };
        /**
         * @param {?=} path
         * @param {?=} keys
         * @return {?}
         */
        LookupModule.forRootWithPathAndKeys = /**
         * @param {?=} path
         * @param {?=} keys
         * @return {?}
         */
            function (path, keys) {
                if (path === void 0) {
                    path = '';
                }
                return {
                    ngModule: LookupModule,
                    providers: provideLookup(path, keys)
                };
            };
        LookupModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: []
                    },] },
        ];
        return LookupModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AppActions = (function () {
        function AppActions() {
        }
        /**
         * @return {?}
         */
        AppActions.noAction = /**
         * @return {?}
         */
            function () {
                return {
                    type: AppActions.NO_ACTION
                };
            };
        AppActions.INIT_STORE = '[Storage] Init Store';
        AppActions.NO_ACTION = '[App] No Action';
        return AppActions;
    }());
    var ConfigActions = (function () {
        function ConfigActions() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        ConfigActions.initialize = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return {
                    type: ConfigActions.INITIALIZE,
                    payload: config
                };
            };
        ConfigActions.INITIALIZE = '[Config] Initialize Configuration';
        return ConfigActions;
    }());
    var SidenavActions = (function () {
        function SidenavActions() {
        }
        /**
         * @return {?}
         */
        SidenavActions.close = /**
         * @return {?}
         */
            function () {
                return {
                    type: SidenavActions.CLOSE
                };
            };
        /**
         * @return {?}
         */
        SidenavActions.open = /**
         * @return {?}
         */
            function () {
                return {
                    type: SidenavActions.OPEN
                };
            };
        /**
         * @return {?}
         */
        SidenavActions.toggle = /**
         * @return {?}
         */
            function () {
                return {
                    type: SidenavActions.TOGGLE
                };
            };
        SidenavActions.CLOSE = '[Sidenav] Close';
        SidenavActions.OPEN = '[Sidenav] Open';
        SidenavActions.TOGGLE = '[Sidenav] Toggle';
        return SidenavActions;
    }());
    var WindowActions = (function () {
        function WindowActions() {
        }
        /**
         * @param {?} payload
         * @return {?}
         */
        WindowActions.resize = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return {
                    type: WindowActions.RESIZE,
                    payload: payload
                };
            };
        WindowActions.RESIZE = '[Window] Resize';
        return WindowActions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function lookupReducer(state, action) {
        if (state === void 0) {
            state = new Lookups();
        }
        switch (action.type) {
            case LookupActions.ADD_KEYS:
                return Lookups.AddLookups(state, toArray(action.payload).map(function (x) { return build(Lookup, x); }));
            case LookupActions.ADD_KEY:
                return Lookups.AddLookup(state, action.payload);
            case LookupActions.ADD_VALUES:
                return Lookups.AddLookups(state, action.payload);
            case LookupActions.REMOVE_KEY:
                return Lookups.RemoveLookup(state, action.payload);
            case AppActions.INIT_STORE:
                return build(Lookups, action.payload['lookup']);
            default:
                return state;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} store
     * @return {?}
     */
    function lookupSelector(store) {
        return store.select(function (s) { return s['lookup']; });
    }
    /**
     * @param {?} store
     * @param {?} key
     * @return {?}
     */
    function lookupKeySelector(store, key) {
        return lookupSelector(store).pipe(operators.map(function (lookup) { return lookup[key] || new Lookup(); }));
    }
    /**
     * @param {?} store
     * @param {?} key
     * @return {?}
     */
    function lookupValuesSelector(store, key) {
        return lookupKeySelector(store, key).pipe(operators.map(function (lookup) { return lookup.values; }));
    }
    /**
     * @param {?} store
     * @param {?} key
     * @param {?} f
     * @return {?}
     */
    function lookupValueSelector(store, key, f) {
        var /** @type {?} */ values$ = lookupValuesSelector(store, key);
        return values$.pipe(operators.map(function (values) { return values.find(f) || new LookupValue(); }));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RouterActions = (function () {
        function RouterActions() {
        }
        /**
         * @param {?} routeName
         * @param {?=} parent
         * @return {?}
         */
        RouterActions.activate = /**
         * @param {?} routeName
         * @param {?=} parent
         * @return {?}
         */
            function (routeName, parent) {
                var /** @type {?} */ payload = {
                    routeName: routeName,
                    parent: parent
                };
                return {
                    type: RouterActions.ACTIVATE,
                    payload: payload
                };
            };
        /**
         * @param {?} r
         * @return {?}
         */
        RouterActions.navigate = /**
         * @param {?} r
         * @return {?}
         */
            function (r) {
                return {
                    type: RouterActions.NAVIGATE,
                    payload: r
                };
            };
        /**
         * @return {?}
         */
        RouterActions.navigateSuccess = /**
         * @return {?}
         */
            function () {
                return {
                    type: RouterActions.NAVIGATE_SUCCESS
                };
            };
        /**
         * @return {?}
         */
        RouterActions.navigateError = /**
         * @return {?}
         */
            function () {
                return {
                    type: RouterActions.NAVIGATE_ERROR
                };
            };
        /**
         * @param {?} e
         * @return {?}
         */
        RouterActions.navCancel = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return {
                    type: RouterActions.NAVIGATION_CANCEL,
                    payload: e
                };
            };
        /**
         * @param {?} e
         * @return {?}
         */
        RouterActions.navEnd = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return {
                    type: RouterActions.NAVIGATION_END,
                    payload: e
                };
            };
        /**
         * @param {?} e
         * @return {?}
         */
        RouterActions.navError = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return {
                    type: RouterActions.NAVIGATION_ERROR,
                    payload: e
                };
            };
        /**
         * @param {?} e
         * @return {?}
         */
        RouterActions.navStart = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return {
                    type: RouterActions.NAVIGATION_START,
                    payload: e
                };
            };
        /**
         * @param {?} e
         * @return {?}
         */
        RouterActions.routesRecognized = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                return {
                    type: RouterActions.ROUTES_RECOGNIZED,
                    payload: e
                };
            };
        RouterActions.ACTIVATE = '[Router] Activate Route';
        RouterActions.NAVIGATE = '[Router] Navigate';
        RouterActions.NAVIGATE_SUCCESS = '[Router] Navigate Success';
        RouterActions.NAVIGATE_ERROR = '[Router] Navigate Error';
        RouterActions.NAVIGATION_CANCEL = '[Router] Cancel Navigation';
        RouterActions.NAVIGATION_END = '[Router] End Navigation';
        RouterActions.NAVIGATION_ERROR = '[Router] Error Navigation';
        RouterActions.NAVIGATION_START = '[Router] Start Navigation';
        RouterActions.ROUTES_RECOGNIZED = '[Router] Routes Recognized';
        return RouterActions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RouterService = (function () {
        function RouterService(_router, _route, store) {
            var _this = this;
            this._router = _router;
            this._route = _route;
            this.store = store;
            this.navigationCancel = new i0.EventEmitter();
            this.navigationEnd = new i0.EventEmitter();
            this.navigationError = new i0.EventEmitter();
            this.navigationStart = new i0.EventEmitter();
            this.routesRecognized = new i0.EventEmitter();
            _router.events.subscribe(function (e) {
                if (e instanceof i1.NavigationCancel) {
                    _this.onNavigationCancel(e);
                }
                else if (e instanceof i1.NavigationEnd) {
                    _this.onNavigationEnd(e);
                }
                else if (e instanceof i1.NavigationError) {
                    _this.onNavigationError(e);
                }
                else if (e instanceof i1.NavigationStart) {
                    _this.onNavigationStart(e);
                }
                else if (e instanceof i1.RoutesRecognized) {
                    _this.onRoutesRecognized(e);
                }
            });
        }
        /**
         * @param {?} e
         * @return {?}
         */
        RouterService.prototype.onNavigationCancel = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.store.dispatch(RouterActions.navCancel(e));
            };
        /**
         * @param {?} e
         * @return {?}
         */
        RouterService.prototype.onNavigationEnd = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.store.dispatch(RouterActions.navEnd(e));
            };
        /**
         * @param {?} e
         * @return {?}
         */
        RouterService.prototype.onNavigationError = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.store.dispatch(RouterActions.navError(e));
            };
        /**
         * @param {?} e
         * @return {?}
         */
        RouterService.prototype.onNavigationStart = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.store.dispatch(RouterActions.navStart(e));
            };
        /**
         * @param {?} e
         * @return {?}
         */
        RouterService.prototype.onRoutesRecognized = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.store.dispatch(RouterActions.routesRecognized(e));
            };
        Object.defineProperty(RouterService.prototype, "activatedRoute", {
            get: /**
             * @return {?}
             */ function () {
                return this._route;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterService.prototype, "routeData$", {
            get: /**
             * @return {?}
             */ function () {
                return this.activatedRoute.data;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterService.prototype, "routeParams$", {
            get: /**
             * @return {?}
             */ function () {
                return this.activatedRoute.params;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterService.prototype, "router", {
            get: /**
             * @return {?}
             */ function () {
                return this._router;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterService.prototype, "url$", {
            get: /**
             * @return {?}
             */ function () {
                return this.store.select(function (s) { return s.router.url; });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} commands
         * @param {?=} extras
         * @return {?}
         */
        RouterService.prototype.navigate = /**
         * @param {?} commands
         * @param {?=} extras
         * @return {?}
         */
            function (commands, extras) {
                var /** @type {?} */ promise = this.router.navigate(commands, extras);
                return rxjs.from(promise);
            };
        /**
         * @param {?} url
         * @param {?=} extras
         * @return {?}
         */
        RouterService.prototype.navigateByUrl = /**
         * @param {?} url
         * @param {?=} extras
         * @return {?}
         */
            function (url, extras) {
                var /** @type {?} */ promise = this.router.navigateByUrl(url, extras);
                return rxjs.from(promise);
            };
        RouterService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        RouterService.ctorParameters = function () {
            return [
                { type: i1.Router },
                { type: i1.ActivatedRoute },
                { type: i1$1.Store }
            ];
        };
        /** @nocollapse */ RouterService.ngInjectableDef = i0.defineInjectable({ factory: function RouterService_Factory() { return new RouterService(i0.inject(i1.Router), i0.inject(i1.ActivatedRoute), i0.inject(i1$1.Store)); }, token: RouterService, providedIn: "root" });
        return RouterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RouterEffects = (function () {
        function RouterEffects(actions$, router) {
            var _this = this;
            this.actions$ = actions$;
            this.router = router;
            /**
             * All imperative navigation should be performed using this effects
             * so that the state is aware of the navigation.
             */
            this.navigate = this.actions$.pipe(effects.ofType(RouterActions.NAVIGATE), operators.switchMap(function (action) { return _this.navigate$(action.payload); }));
        }
        /**
         * @param {?} r
         * @return {?}
         */
        RouterEffects.prototype.navigate$ = /**
         * @param {?} r
         * @return {?}
         */
            function (r) {
                var /** @type {?} */ nav$ = typeof (r) === 'string' ? this.router.navigateByUrl(r) : this.router.navigate(r);
                return nav$.pipe(operators.map(function () { return RouterActions.navigateSuccess(); }), operators.catchError(function (e) {
                    return rxjs.of(RouterActions.navigateError());
                }));
            };
        RouterEffects.decorators = [
            { type: i0.Injectable },
        ];
        /** @nocollapse */
        RouterEffects.ctorParameters = function () {
            return [
                { type: effects.Actions },
                { type: RouterService }
            ];
        };
        __decorate([
            effects.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], RouterEffects.prototype, "navigate", void 0);
        return RouterEffects;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RouterModule = (function () {
        function RouterModule() {
        }
        /**
         * @return {?}
         */
        RouterModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: RouterModule,
                    providers: [RouterService, RouterEffects]
                };
            };
        RouterModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i1.RouterModule],
                        exports: [i1.RouterModule]
                    },] },
        ];
        return RouterModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ActivatedRoutePayload = (function () {
        function ActivatedRoutePayload() {
            this.routeName = '';
        }
        return ActivatedRoutePayload;
    }());
    var Breadcrumbs = (function () {
        function Breadcrumbs(segments) {
            this.segments = segments;
        }
        return Breadcrumbs;
    }());
    var CustomRoute = (function () {
        function CustomRoute(props) {
            this.children = [];
            this.lazyChildren = [];
            this._path = '';
            assignProps(this, props);
        }
        Object.defineProperty(CustomRoute.prototype, "path", {
            get: /**
             * @return {?}
             */ function () {
                return this._path;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._path = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomRoute.prototype, "route", {
            get: /**
             * @return {?}
             */ function () {
                return {
                    component: this.component,
                    children: __spread(this.children, this.lazyChildren)
                };
            },
            enumerable: true,
            configurable: true
        });
        return CustomRoute;
    }());
    var LazyRoute = (function (_super) {
        __extends(LazyRoute, _super);
        function LazyRoute(props) {
            var _this = _super.call(this, props) || this;
            _this.path = '';
            return _this;
        }
        return LazyRoute;
    }(CustomRoute));
    /** @enum {number} */
    var NavigationStatus = {
        Default: 0,
        NavigationStart: 1,
        NavigationCancel: 2,
        NavigationError: 3,
        RoutesRecognized: 4,
        NavigationEnd: 5,
    };
    NavigationStatus[NavigationStatus.Default] = "Default";
    NavigationStatus[NavigationStatus.NavigationStart] = "NavigationStart";
    NavigationStatus[NavigationStatus.NavigationCancel] = "NavigationCancel";
    NavigationStatus[NavigationStatus.NavigationError] = "NavigationError";
    NavigationStatus[NavigationStatus.RoutesRecognized] = "RoutesRecognized";
    NavigationStatus[NavigationStatus.NavigationEnd] = "NavigationEnd";
    var RouteSegment = (function () {
        function RouteSegment() {
            /**
             * The URL fragment shared by all the routes
             */
            this.fragment = '';
            /**
             * The order of the segment in the route
             */
            this.order = 0;
            /**
             * The outlet name of the route
             */
            this.outlet = '';
            /**
             * The label to pass to the anchor tag
             */
            this.routeLabel = '';
            /**
             * The unique identifier for the route segment
             */
            this.routeName = '';
        }
        Object.defineProperty(RouteSegment.prototype, "routerLink", {
            /** The link to pass to the anchor tag */
            get: /**
             * The link to pass to the anchor tag
             * @return {?}
             */ function () {
                return this.pathFromRoot
                    .map(function (r) { return r.url; })
                    .reduce(function (acc, x) {
                    var /** @type {?} */ segment = RouterState.BuildUrlSegment(x);
                    return segment && segment !== '/' ? "" + acc + segment : acc;
                }, '');
            },
            enumerable: true,
            configurable: true
        });
        return RouteSegment;
    }());
    var RouterState = (function () {
        function RouterState() {
            this.id = 0;
            this.error = undefined;
            this.events = [];
            this.history = [];
            this.navigationStatus = NavigationStatus.Default;
            this.reason = '';
            this.state = undefined;
            this.url = '';
            this.urlAfterRedirects = '';
        }
        /**
         * @param {?} props
         * @return {?}
         */
        RouterState.BuildRoute = /**
         * @param {?} props
         * @return {?}
         */
            function (props) {
                var /** @type {?} */ r = new CustomRoute(props);
                return /** @type {?} */ (r);
            };
        /**
         * @param {?} props
         * @return {?}
         */
        RouterState.BuildLazyRoute = /**
         * @param {?} props
         * @return {?}
         */
            function (props) {
                var /** @type {?} */ r = new LazyRoute(props);
                return /** @type {?} */ (r);
            };
        /**
         * @param {?} url
         * @return {?}
         */
        RouterState.BuildUrlSegment = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                return url.reduce(function (acc, segment) { return segment.path && segment.path !== '/' ? acc + "/" + segment.path : acc; }, '');
            };
        /**
         * @param {?} root
         * @param {?=} index
         * @return {?}
         */
        RouterState.GetActivatedOutlets = /**
         * @param {?} root
         * @param {?=} index
         * @return {?}
         */
            function (root, index) {
                if (index === void 0) {
                    index = 0;
                }
                return root ? root.children.reduce(function (acc, r, currentIndex) {
                    var /** @type {?} */ i = index + currentIndex;
                    var /** @type {?} */ routeName = RouterState.GetRouteName(r);
                    var /** @type {?} */ existing = build(RouteSegment, acc[routeName]);
                    var /** @type {?} */ outlet = RouterState.GetRouteSegment(r, existing, i);
                    return routeName ? Object.assign(acc, RouterState.GetActivatedOutlets(r, i + 1), (_a = {}, _a[routeName] = outlet, _a))
                        : Object.assign(acc, RouterState.GetActivatedOutlets(r, i + 1));
                    var _a;
                }, {}) : {};
            };
        /**
         * @param {?} root
         * @return {?}
         */
        RouterState.GetActivatedRoute = /**
         * @param {?} root
         * @return {?}
         */
            function (root) {
                return root.children.reduce(function (acc, r) {
                    return RouterState.GetActivatedRoute(r);
                }, root);
            };
        /**
         * @param {?} route
         * @return {?}
         */
        RouterState.GetAllParams = /**
         * @param {?} route
         * @return {?}
         */
            function (route) {
                return route ? route.children.reduce(function (acc, r) {
                    return Object.assign({}, acc, RouterState.GetAllParams(r));
                }, Object.assign({}, route.params, route.queryParams)) : {};
            };
        /**
         * @param {?} route
         * @return {?}
         */
        RouterState.GetRouteData = /**
         * @param {?} route
         * @return {?}
         */
            function (route) {
                return route.data;
            };
        /**
         * @param {?} route
         * @param {?=} existing
         * @param {?=} index
         * @return {?}
         */
        RouterState.GetRouteSegment = /**
         * @param {?} route
         * @param {?=} existing
         * @param {?=} index
         * @return {?}
         */
            function (route, existing, index) {
                if (existing === void 0) {
                    existing = new RouteSegment();
                }
                if (index === void 0) {
                    index = 0;
                }
                var /** @type {?} */ routeName = RouterState.GetRouteName(route);
                return build(RouteSegment, existing, {
                    data: route.data,
                    fragment: route.fragment,
                    order: index,
                    outlet: route.outlet,
                    pathFromRoot: route.pathFromRoot,
                    params: route.params,
                    routeName: routeName,
                    routeLabel: RouterState.GetRouteData(route)['routeLabel'] || existing.routeLabel
                });
            };
        /**
         * @param {?} route
         * @return {?}
         */
        RouterState.GetRouteName = /**
         * @param {?} route
         * @return {?}
         */
            function (route) {
                return route ? RouterState.GetRouteData(route)['routeName'] : '';
            };
        Object.defineProperty(RouterState.prototype, "activatedOutlets", {
            get: /**
             * @return {?}
             */ function () {
                return RouterState.GetActivatedOutlets(this.rootRoute);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterState.prototype, "lastEvent", {
            get: /**
             * @return {?}
             */ function () {
                return this.events[-1];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterState.prototype, "params", {
            get: /**
             * @return {?}
             */ function () {
                return RouterState.GetAllParams(this.rootRoute);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterState.prototype, "routeName", {
            get: /**
             * @return {?}
             */ function () {
                return RouterState.GetRouteName(this.activatedRoute);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterState.prototype, "visited", {
            get: /**
             * @return {?}
             */ function () {
                return this.history.map(function (x) { return x.link; });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} e
         * @param {?} eventType
         * @return {?}
         */
        RouterState.prototype.addRouterEvent = /**
         * @param {?} e
         * @param {?} eventType
         * @return {?}
         */
            function (e, eventType) {
                var /** @type {?} */ newEvent = ({ eventType: eventType, event: e });
                return __spread(this.events, [
                    newEvent
                ]);
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        RouterState.prototype.navigationCancel = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return build(RouterState, this, {
                    navigationStatus: NavigationStatus.NavigationCancel,
                    events: this.addRouterEvent(payload, NavigationStatus.NavigationCancel),
                    id: payload.id,
                    url: payload.url,
                    reason: payload.reason
                });
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        RouterState.prototype.navigationEnd = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                var /** @type {?} */ history = __spread([payload.toString()], this.history);
                return build(RouterState, this, {
                    history: history,
                    navigationStatus: NavigationStatus.NavigationEnd,
                    events: this.addRouterEvent(payload, NavigationStatus.NavigationEnd),
                    id: payload.id,
                    url: payload.url,
                    urlAfterRedirects: payload.urlAfterRedirects
                });
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        RouterState.prototype.navigationError = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return build(RouterState, this, {
                    navigationStatus: NavigationStatus.NavigationError,
                    events: this.addRouterEvent(payload, NavigationStatus.NavigationError),
                    id: payload.id,
                    url: payload.url,
                    error: payload.error
                });
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        RouterState.prototype.navigationStart = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                return build(RouterState, this, {
                    navigationStatus: NavigationStatus.NavigationStart,
                    events: this.addRouterEvent(payload, NavigationStatus.NavigationStart),
                    id: payload.id,
                    url: payload.url
                });
            };
        /**
         * @param {?} payload
         * @return {?}
         */
        RouterState.prototype.routesRecognized = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                var /** @type {?} */ rootRoute = payload.state.root;
                var /** @type {?} */ activatedRoute = RouterState.GetActivatedRoute(rootRoute);
                return build(RouterState, this, {
                    activatedRoute: activatedRoute,
                    rootRoute: rootRoute,
                    navigationStatus: NavigationStatus.RoutesRecognized,
                    events: this.addRouterEvent(payload, NavigationStatus.RoutesRecognized),
                    id: payload.id,
                    state: payload.state,
                    url: payload.url,
                    urlAfterRedirects: payload.urlAfterRedirects
                });
            };
        return RouterState;
    }());
    var VisitedRoute = (function () {
        function VisitedRoute() {
            this.label = '';
            this.link = '';
            this.name = '';
            this.visitTime = new Date();
        }
        return VisitedRoute;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function routerReducer(state, action) {
        if (state === void 0) {
            state = new RouterState();
        }
        switch (action.type) {
            case RouterActions.ACTIVATE:
                return state;
            case RouterActions.NAVIGATION_CANCEL:
                // console.log(RouterActions.NAVIGATION_CANCEL, action.payload);
                return state.navigationCancel(action.payload);
            case RouterActions.NAVIGATION_END:
                // console.log(RouterActions.NAVIGATION_END, action.payload);
                return state.navigationEnd(action.payload);
            case RouterActions.NAVIGATION_ERROR:
                // console.log(RouterActions.NAVIGATION_ERROR, action.payload);
                return state.navigationError(action.payload);
            case RouterActions.NAVIGATION_START:
                // console.log(RouterActions.NAVIGATION_START, action.payload);
                return state.navigationStart(action.payload);
            case RouterActions.ROUTES_RECOGNIZED:
                // console.log(RouterActions.ROUTES_RECOGNIZED, action.payload);
                // console.log(getAllParams(action.payload.state.root));
                return state.routesRecognized(action.payload);
            default:
                return state;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} store
     * @return {?}
     */
    function routeSelector(store) {
        return store.select('route');
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function breadcrumbsSelector(store) {
        return routeSelector(store).pipe(operators.map(function (r) {
            var /** @type {?} */ outlets = r.activatedOutlets;
            return new Breadcrumbs(Object.keys(outlets).map(function (key) { return outlets[key]; }));
        }));
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function routeNameSelector(store) {
        return routeSelector(store).pipe(operators.map(function (r) { return r.routeName; }), operators.distinctUntilChanged());
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function routeParamsSelector(store) {
        return routeSelector(store).pipe(operators.map(function (r) { return r.params; }), operators.distinctUntilChanged());
    }
    /**
     * @param {?} store
     * @param {?} key
     * @return {?}
     */
    function lazyRouteParamsSelector(store, key) {
        return routeParamsSelector(store).pipe(operators.map(function (params) { return params[key]; }), operators.distinctUntilChanged());
    }
    /**
     * @param {?} store
     * @param {?} key
     * @param {?=} defaultValue
     * @return {?}
     */
    function routeParamSelector(store, key, defaultValue) {
        if (defaultValue === void 0) {
            defaultValue = null;
        }
        return rxjs.combineLatest(rxjs.of(defaultValue), lazyRouteParamsSelector(store, key), function (x, y) {
            return y || x;
        });
    }
    /**
     * @param {?} store
     * @param {?} key
     * @return {?}
     */
    function routeParamArraySelector(store, key) {
        return routeParamSelector(store, key, []).pipe(operators.map(function (x) { return toArray(x); }));
    }
    /**
     * @param {?} store
     * @param {?} key
     * @return {?}
     */
    function routeParamIdSelector(store, key) {
        return routeParamIntSelector(store, key);
    }
    /**
     * @param {?} store
     * @param {?} key
     * @return {?}
     */
    function routeParamIntSelector(store, key) {
        return routeParamSelector(store, key, 0).pipe(operators.map(function (x) { return toInt(x); }));
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function urlSelector(store) {
        return routeSelector(store).pipe(operators.map(function (r) { return r.url; }), operators.distinctUntilChanged());
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function querySelector(store) {
        var /** @type {?} */ skip$ = routeParamIntSelector(store, 'skip');
        var /** @type {?} */ take$ = routeParamIntSelector(store, 'take');
        var /** @type {?} */ term$ = routeParamSelector(store, 'term');
        return rxjs.combineLatest(skip$, take$, term$, function (skip, take, term) {
            return (Object.assign(new QueryModel(), {
                skip: skip,
                take: take,
                term: term
            }));
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Token = (function () {
        function Token() {
            this.access_token = '';
            this.expiresIn = 0;
        }
        Object.defineProperty(Token.prototype, "authenticated", {
            get: /**
             * @return {?}
             */ function () {
                return !this.expired;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Token.prototype, "expires_in", {
            get: /**
             * @return {?}
             */ function () {
                return this.expiresIn;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.expiresIn = value;
                this.expiresInDate = new Date();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Token.prototype, "expirationDate", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ t = new Date(this.expiresInDate);
                t.setSeconds(t.getSeconds() + this.expiresIn);
                return t;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Token.prototype, "expired", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ now = new Date();
                return this.access_token && this.expiresIn && this.expiresInDate ? now > this.expirationDate : true;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        Token.prototype.toString = /**
         * @return {?}
         */
            function () {
                return this.expired ? '' : this.access_token;
            };
        return Token;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Window = (function () {
        function Window() {
            this.windowHeight = 0;
            this.windowWidth = 0;
        }
        Object.defineProperty(Window.prototype, "windowWidthSmall", {
            get: /**
             * @return {?}
             */ function () {
                return this.windowWidth < 1200;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Window.prototype, "windowWidthMedium", {
            get: /**
             * @return {?}
             */ function () {
                return !this.windowWidthSmall && this.windowWidth < 1300;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Window.prototype, "windowWidthLarge", {
            get: /**
             * @return {?}
             */ function () {
                return this.windowWidth >= 1300;
            },
            enumerable: true,
            configurable: true
        });
        return Window;
    }());
    var WindowResize = (function () {
        function WindowResize() {
            this.windowHeight = 0;
            this.windowWidth = 0;
        }
        return WindowResize;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} store
     * @return {?}
     */
    function allSelector(store) {
        return store.pipe(operators.map(function (x) { return x; }));
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function emptySelector(store) {
        return rxjs.of({});
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function currentUserSelector(store) {
        return store.select('currentUser');
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function authenticatedSelector(store) {
        return currentUserSelector(store).pipe(operators.map(function (user) { return user.authenticated; }), operators.distinctUntilChanged());
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function configSelector(store) {
        return store.select('config');
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function windowSelector(store) {
        return store.select('window').pipe(operators.map(function (w) { return build(Window, w); }));
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function windowHeightSelector(store) {
        return windowSelector(store).pipe(operators.map(function (window) { return window.windowHeight; }), operators.distinctUntilChanged());
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function windowWidthSelector(store) {
        return windowSelector(store).pipe(operators.map(function (window) { return window.windowWidth; }), operators.distinctUntilChanged());
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function containerHeightSelector(store) {
        return windowHeightSelector(store).pipe(operators.map(function (h) { return h === 0 ? 700 : h; }));
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function containerWidthSelector(store) {
        return windowWidthSelector(store).pipe(operators.map(function (w) { return w === 0 ? 1200 : w; }));
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function contentHeightSelector(store) {
        return windowHeightSelector(store).pipe(operators.map(function (h) { return h === 0 ? 700 : h; }));
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function contentWidthSelector(store) {
        return windowWidthSelector(store).pipe(operators.map(function (w) { return w === 0 ? 1200 : w; }));
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function sidenavOpenedSelector(store) {
        return ((store.select('sidenav'))).pipe(operators.distinctUntilChanged());
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function apiBaseUrlSelector(store) {
        return configSelector(store).pipe(operators.map(function (config) { return config.apiBaseUrl; }));
    }
    /**
     * @param {?} store
     * @return {?}
     */
    function authTokenSelector(store) {
        return currentUserSelector(store).pipe(operators.map(function (user) {
            var /** @type {?} */ token = user && user.token ? build(Token, user.token) : new Token();
            return token.toString();
        }));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AuthenticatedGuard = (function () {
        function AuthenticatedGuard(store) {
            this.store = store;
            this.authenticated$ = authenticatedSelector(this.store);
        }
        /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        AuthenticatedGuard.prototype.canActivate = /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
            function (route, state) {
                return this.authenticated$;
            };
        AuthenticatedGuard.decorators = [
            { type: i0.Injectable },
        ];
        /** @nocollapse */
        AuthenticatedGuard.ctorParameters = function () {
            return [
                { type: i1$1.Store }
            ];
        };
        return AuthenticatedGuard;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DumbComponent = (function () {
        function DumbComponent() {
            this.requestState = 'DEFAULT';
            this.subscriptions = [];
        }
        Object.defineProperty(DumbComponent.prototype, "inErrorState", {
            get: /**
             * @return {?}
             */ function () {
                return this.requestState === 'ERROR';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DumbComponent.prototype, "inSuccessState", {
            get: /**
             * @return {?}
             */ function () {
                return this.requestState === 'SUCCESS';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DumbComponent.prototype, "message", {
            get: /**
             * @return {?}
             */ function () {
                return this.inErrorState ? "An error has occurred. Please try again later."
                    : this.inSuccessState ? "Saved successfully!" : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DumbComponent.prototype, "showMessage", {
            get: /**
             * @return {?}
             */ function () {
                return this.inErrorState || this.inSuccessState;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DumbComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.removeSubscriptions();
            };
        /**
         * @param {?} subscription
         * @return {?}
         */
        DumbComponent.prototype.addSubscription = /**
         * @param {?} subscription
         * @return {?}
         */
            function (subscription) {
                this.subscriptions.push(subscription);
            };
        /**
         * @param {?} result
         * @return {?}
         */
        DumbComponent.prototype.closeDialog = /**
         * @param {?} result
         * @return {?}
         */
            function (result) {
                this.dialogRef.unsubscribe();
            };
        /**
         * @param {?} component
         * @param {?=} config
         * @return {?}
         */
        DumbComponent.prototype.openDialog = /**
         * @param {?} component
         * @param {?=} config
         * @return {?}
         */
            function (component, config) {
                var _this = this;
                if (config === void 0) {
                    config = {};
                }
                var /** @type {?} */ dialogRef = this.dialog.open(component, config);
                this.dialogRef = dialogRef.afterClosed().subscribe(function (result) {
                    _this.closeDialog(result);
                });
            };
        /**
         * @return {?}
         */
        DumbComponent.prototype.removeSubscriptions = /**
         * @return {?}
         */
            function () {
                this.subscriptions.forEach(function (s) {
                    s.unsubscribe();
                });
            };
        /**
         * @param {?} subscriptions
         * @return {?}
         */
        DumbComponent.prototype.subscribe = /**
         * @param {?} subscriptions
         * @return {?}
         */
            function (subscriptions) {
                var _this = this;
                subscriptions.forEach(function (s) {
                    _this.addSubscription(s);
                });
            };
        /**
         * @param {?=} duration
         * @return {?}
         */
        DumbComponent.prototype.flashErrorMessage = /**
         * @param {?=} duration
         * @return {?}
         */
            function (duration) {
                var _this = this;
                if (duration === void 0) {
                    duration = 5000;
                }
                this.toErrorState();
                setTimeout(function () {
                    _this.resetRequestState();
                }, duration);
            };
        /**
         * @param {?=} duration
         * @return {?}
         */
        DumbComponent.prototype.flashSuccessMessage = /**
         * @param {?=} duration
         * @return {?}
         */
            function (duration) {
                var _this = this;
                if (duration === void 0) {
                    duration = 5000;
                }
                this.toSucessState();
                setTimeout(function () {
                    _this.resetRequestState();
                }, duration);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        DumbComponent.prototype.onError = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.flashErrorMessage();
            };
        /**
         * @param {?} e
         * @return {?}
         */
        DumbComponent.prototype.onSuccess = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.flashSuccessMessage();
            };
        /**
         * @return {?}
         */
        DumbComponent.prototype.resetRequestState = /**
         * @return {?}
         */
            function () {
                this.requestState = 'DEFAULT';
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DumbComponent.prototype.setValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.form && this.form.setValue) {
                    this.form.setValue(getValue(value));
                }
            };
        /**
         * @return {?}
         */
        DumbComponent.prototype.toErrorState = /**
         * @return {?}
         */
            function () {
                this.requestState = 'ERROR';
            };
        /**
         * @return {?}
         */
        DumbComponent.prototype.toSucessState = /**
         * @return {?}
         */
            function () {
                this.requestState = 'SUCCESS';
            };
        return DumbComponent;
    }());
    var FormComponent = (function (_super) {
        __extends(FormComponent, _super);
        function FormComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FormComponent.prototype, "editing", {
            get: /**
             * @return {?}
             */ function () {
                return truthy(this.id);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormComponent.prototype, "id", {
            get: /**
             * @return {?}
             */ function () {
                return this.model.id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormComponent.prototype, "isValid", {
            get: /**
             * @return {?}
             */ function () {
                return this.form.valid;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FormComponent.prototype.markAsSubmitted = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.form.markAsTouched();
                Object.keys(this.form.controls).forEach(function (key) {
                    _this.form.controls[key].markAsTouched();
                });
            };
        return FormComponent;
    }(DumbComponent));
    var SmartComponent = (function (_super) {
        __extends(SmartComponent, _super);
        function SmartComponent(store) {
            var _this = _super.call(this) || this;
            _this.store = store;
            return _this;
        }
        /**
         * @param {?} action
         * @return {?}
         */
        SmartComponent.prototype.dispatch = /**
         * @param {?} action
         * @return {?}
         */
            function (action) {
                this.store.dispatch(action);
            };
        /**
         * @param {?} action
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
        SmartComponent.prototype.dispatchAndSubscribe = /**
         * @param {?} action
         * @param {?=} onSuccess
         * @param {?=} onError
         * @return {?}
         */
            function (action, onSuccess, onError) {
                var _this = this;
                var /** @type {?} */ f1 = onSuccess ? onSuccess : function (e) {
                    _this.flashSuccessMessage();
                };
                var /** @type {?} */ f2 = onError ? onError : function (e) {
                    _this.flashErrorMessage();
                };
                if (this.events && this.events.dispatch) {
                    this.addSubscription(this.events.dispatch(action).subscribe(f1, f2));
                }
                else {
                    this.store.dispatch(action);
                }
            };
        return SmartComponent;
    }(DumbComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Config = (function () {
        function Config() {
            this.dev = false;
            this.test = false;
            this.staging = false;
            this.production = false;
            this.apiBaseUrl = '';
        }
        return Config;
    }());
    var ViewConfig = (function (_super) {
        __extends(ViewConfig, _super);
        function ViewConfig() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.viewMode = 'Default';
            return _this;
        }
        return ViewConfig;
    }(Config));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Question = (function () {
        function Question() {
            this.question = '';
            this.title = '';
        }
        return Question;
    }());
    var Questions = (function (_super) {
        __extends(Questions, _super);
        function Questions() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} questions
         * @param {?} answers
         * @return {?}
         */
        Questions.AnswerQuestions = /**
         * @param {?} questions
         * @param {?} answers
         * @return {?}
         */
            function (questions, answers) {
                return questions.map(function (question) { return Questions.AnswerQuestion(question, answers[question.key]); });
            };
        /**
         * @param {?} question
         * @param {?} answerData
         * @return {?}
         */
        Questions.AnswerQuestion = /**
         * @param {?} question
         * @param {?} answerData
         * @return {?}
         */
            function (question, answerData) {
                var /** @type {?} */ answer = answerData;
                switch (question.type) {
                    case 'date':
                        answer = answerData;
                        break;
                    case 'monthyear':
                        answer = DateHelper.ToMonthYearName(answerData);
                        break;
                    case 'yesno':
                        answer = answerData ? 'Yes' : 'No';
                        break;
                }
                return build(Question, question, { answer: answer });
            };
        /**
         * @param {?} answers
         * @return {?}
         */
        Questions.prototype.answerQuestions = /**
         * @param {?} answers
         * @return {?}
         */
            function (answers) {
                return Questions.AnswerQuestions(this.toArray(), answers);
            };
        return Questions;
    }(Collection));
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ QuestionsModel = (function () {
        function QuestionsModel() {
            this.ignore = ['isAdd', 'questions'];
        }
        Object.defineProperty(QuestionsModel.prototype, "answers", {
            get: /**
             * @return {?}
             */ function () {
                return Questions.AnswerQuestions(this.questions, this);
            },
            enumerable: true,
            configurable: true
        });
        return QuestionsModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @template T
     */
    var /**
     * @template T
     */ TreeItem = (function () {
        function TreeItem(item, parent) {
            this.item = item;
            this.parent = parent;
            this.id = 0;
            this.order = 0;
            this.parentId = 0;
            this.treeId = 0;
            this.index = 0;
        }
        /**
         * @template T
         * @param {?} item
         * @return {?}
         */
        TreeItem.Build = /**
         * @template T
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return /** @type {?} */ ({
                    item: item,
                    id: item['id'],
                    order: item['order'],
                    parentId: item['parentId']
                });
            };
        Object.defineProperty(TreeItem.prototype, "hasParent", {
            get: /**
             * @return {?}
             */ function () {
                return this.parentId ? true : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeItem.prototype, "sortOrder", {
            get: /**
             * @return {?}
             */ function () {
                return this.parentId ? this.treeId + (.1 * this.order) : this.treeId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeItem.prototype, "treeOrder", {
            get: /**
             * @return {?}
             */ function () {
                return this.parentId ? this.order : 0;
            },
            enumerable: true,
            configurable: true
        });
        return TreeItem;
    }());
    /**
     * @template T
     */
    var /**
     * @template T
     */ Tree = (function () {
        function Tree(_treeItems, ctor) {
            this._treeItems = _treeItems;
            this.ctor = ctor;
            this._activeId = 0;
            this._activeIndex = -1;
        }
        /**
         * @template T
         * @param {?} items
         * @param {?} item
         * @return {?}
         */
        Tree.FindParent = /**
         * @template T
         * @param {?} items
         * @param {?} item
         * @return {?}
         */
            function (items, item) {
                return items.find(function (x) { return x.id === item.parentId; }) || new TreeItem(/** @type {?} */ ({}));
            };
        /**
         * @template T
         * @param {?} items
         * @param {?} item
         * @return {?}
         */
        Tree.FindParentOrder = /**
         * @template T
         * @param {?} items
         * @param {?} item
         * @return {?}
         */
            function (items, item) {
                var /** @type {?} */ parent = Tree.FindParent(items, item);
                return parent.order;
            };
        /**
         * @template T
         * @param {?} items
         * @param {?} ctor
         * @return {?}
         */
        Tree.Build = /**
         * @template T
         * @param {?} items
         * @param {?} ctor
         * @return {?}
         */
            function (items, ctor) {
                var /** @type {?} */ treeItems = items.reduce(function (acc, item) {
                    item.treeId = item.parentId ? Tree.FindParentOrder(items, item) : item.order;
                    var /** @type {?} */ treeItem = Object.assign(new TreeItem(/** @type {?} */ ({})), item);
                    return __spread(acc, [treeItem]);
                }, []);
                var /** @type {?} */ orderedItems = items.sort(function (a, b) { return compareNumbers(a.sortOrder, b.sortOrder); })
                    .reduce(function (acc, treeItem, index) {
                    var /** @type {?} */ item = treeItem.item;
                    var /** @type {?} */ parent = treeItem.parent;
                    return __spread(acc, [/** @type {?} */ (Object.assign(new TreeItem(item, parent), treeItem, { index: index + 1 }))]);
                }, []);
                return new Tree(orderedItems, ctor);
            };
        Object.defineProperty(Tree.prototype, "activeId", {
            get: /**
             * @return {?}
             */ function () {
                return this._activeId;
            },
            set: /**
             * @param {?} id
             * @return {?}
             */ function (id) {
                this._activeId = id;
                this._activeIndex = this.getIndexById(id);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "activeIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this._activeIndex;
            },
            set: /**
             * @param {?} index
             * @return {?}
             */ function (index) {
                this._activeIndex = index;
                this._activeId = this.getIdByIndex(index);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "copy", {
            get: /**
             * @return {?}
             */ function () {
                return Object.assign(new Tree(this._treeItems, this.ctor), this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "instance", {
            get: /**
             * @return {?}
             */ function () {
                return new this.ctor() || /** @type {?} */ ({});
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "next", {
            get: /**
             * @return {?}
             */ function () {
                return this.getNext(this.activeIndex);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "nextId", {
            get: /**
             * @return {?}
             */ function () {
                return this.next.id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "nextIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this.activeIndex + 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "previous", {
            get: /**
             * @return {?}
             */ function () {
                return this.getPrevious(this.activeIndex);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "previousId", {
            get: /**
             * @return {?}
             */ function () {
                return this.previous.id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "previousIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this.activeIndex - 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "items", {
            get: /**
             * @return {?}
             */ function () {
                return this._treeItems.map(function (x) { return x.item; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "treeItems", {
            get: /**
             * @return {?}
             */ function () {
                return this._treeItems;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "orderedItems", {
            get: /**
             * @return {?}
             */ function () {
                return this.treeItems.sort(function (a, b) { return compareNumbers(a.index, b.index); });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "subtrees", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                var /** @type {?} */ trees = this.treeItems.reduce(function (acc, item) {
                    var /** @type {?} */ treeId = item.treeId;
                    var /** @type {?} */ subitems = acc[treeId] || [];
                    acc[treeId] = __spread(subitems, [item]);
                    return acc;
                }, {});
                return Object.keys(trees).map(function (key) { return Tree.Build(trees[key], _this.ctor); });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "subtreeItems", {
            get: /**
             * @return {?}
             */ function () {
                return this.subtrees.map(function (tree) { return tree.treeItems.sort(function (a, b) { return compareNumbers(a.index, b.index); }); });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} index
         * @return {?}
         */
        Tree.prototype.getIdByIndex = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                var /** @type {?} */ item = this.getItemByIndex(index);
                return item.id;
            };
        /**
         * @param {?} id
         * @return {?}
         */
        Tree.prototype.getIndexById = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.getItemById(id).index;
            };
        /**
         * @param {?} id
         * @return {?}
         */
        Tree.prototype.getItemById = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.treeItems.find(function (item) { return item.id === id; }) || new TreeItem(this.instance);
            };
        /**
         * @param {?} index
         * @return {?}
         */
        Tree.prototype.getItemByIndex = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return this.treeItems.find(function (item) { return item.index === index; }) || new TreeItem(this.instance);
            };
        /**
         * @param {?} index
         * @return {?}
         */
        Tree.prototype.getNext = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return this.getItemByIndex(index + 1);
            };
        /**
         * @param {?} index
         * @return {?}
         */
        Tree.prototype.getNextId = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return this.getNext(index).id;
            };
        /**
         * @param {?} index
         * @return {?}
         */
        Tree.prototype.getPrevious = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return this.getItemByIndex(index - 1);
            };
        /**
         * @param {?} index
         * @return {?}
         */
        Tree.prototype.getPreviousId = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return this.getPrevious(index).id;
            };
        return Tree;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var User = (function () {
        function User() {
            this.email = '';
            this.firstName = '';
            this.lastName = '';
            this.fullName = '';
            this.password = '';
            this.confirmPassword = '';
            this.userName = '';
        }
        return User;
    }());
    var CurrentUser = (function (_super) {
        __extends(CurrentUser, _super);
        function CurrentUser() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.token = new Token();
            return _this;
        }
        /**
         * @param {?} data
         * @return {?}
         */
        CurrentUser.Build = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var /** @type {?} */ token = data && data.token ? build(Token, data.token) : new Token();
                return build(CurrentUser, data, { token: token });
            };
        Object.defineProperty(CurrentUser.prototype, "authenticated", {
            get: /**
             * @return {?}
             */ function () {
                return this.token && this.token.authenticated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CurrentUser.prototype, "userRoles", {
            get: /**
             * @return {?}
             */ function () {
                return new UserRoles(this);
            },
            enumerable: true,
            configurable: true
        });
        return CurrentUser;
    }(User));
    var UserRoles = (function () {
        function UserRoles(user) {
            if (user === void 0) {
                user = new CurrentUser();
            }
            this.user = user;
        }
        return UserRoles;
    }());
    var Login = (function () {
        function Login() {
            this.grant_type = 'password';
            this.userName = '';
            this.password = '';
        }
        return Login;
    }());
    var ResetPassword = (function () {
        function ResetPassword() {
            this.passwordResetCode = '';
            this.password = '';
            this.confirmPassword = '';
        }
        return ResetPassword;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var StorageActions = (function () {
        function StorageActions() {
        }
        /**
         * @param {?} localStore
         * @param {?} sessionStore
         * @return {?}
         */
        StorageActions.initStore = /**
         * @param {?} localStore
         * @param {?} sessionStore
         * @return {?}
         */
            function (localStore, sessionStore) {
                return {
                    type: StorageActions.INIT_STORE,
                    payload: { localStore: localStore, sessionStore: sessionStore }
                };
            };
        StorageActions.UPDATE_LOCAL_STORAGE = '[Storage] Update Local Storage';
        StorageActions.UPDATE_SESSION_STORAGE = '[Storage] Update Session Storage';
        StorageActions.INIT_STORE = '[Storage] Init Store';
        return StorageActions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ActionStore = (function () {
        function ActionStore(lastAction) {
            this.lastAction = lastAction;
        }
        return ActionStore;
    }());
    var Storage$1 = (function () {
        function Storage() {
            this.localStore = {};
            this.sessionStore = {};
        }
        return Storage;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var StorageService = (function () {
        function StorageService(store, storeKey) {
            this.store = store;
            this.storeKey = storeKey;
            this.localStorageActions = [];
            this.sessionStorageActions = [];
            this.localStorageMapper = function (s) { return s; };
            this.sessionStorageMapper = function (s) { return s; };
        }
        Object.defineProperty(StorageService.prototype, "localStore", {
            get: /**
             * @return {?}
             */ function () {
                return localStorage.getItem(this.storeKey);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StorageService.prototype, "sessionStore", {
            get: /**
             * @return {?}
             */ function () {
                return sessionStorage.getItem(this.storeKey);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StorageService.prototype, "storage", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ localStore = this.localStore;
                var /** @type {?} */ sessionStore = this.sessionStore;
                return build(Storage, Object.assign({}, localStore, sessionStore), {
                    localStore: localStore,
                    sessionStore: sessionStore
                });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Initialize the use of local storage and/or session storage
         * @param localStorageMapper Mapper function for mapping state to local store
         * @param sessionStorageMapper Mapper function for mapping state to session store
         * @param localStorageActions Actions after which to save to local storage
         * @param sessionStorageActions Actions after which to save to session storage
         */
        /**
         * Initialize the use of local storage and/or session storage
         * @param {?=} localStorageMapper Mapper function for mapping state to local store
         * @param {?=} sessionStorageMapper Mapper function for mapping state to session store
         * @param {?=} localStorageActions Actions after which to save to local storage
         * @param {?=} sessionStorageActions Actions after which to save to session storage
         * @return {?}
         */
        StorageService.prototype.init = /**
         * Initialize the use of local storage and/or session storage
         * @param {?=} localStorageMapper Mapper function for mapping state to local store
         * @param {?=} sessionStorageMapper Mapper function for mapping state to session store
         * @param {?=} localStorageActions Actions after which to save to local storage
         * @param {?=} sessionStorageActions Actions after which to save to session storage
         * @return {?}
         */
            function (localStorageMapper, sessionStorageMapper, localStorageActions, sessionStorageActions) {
                if (localStorageMapper === void 0) {
                    localStorageMapper = function (s) { return s; };
                }
                if (sessionStorageMapper === void 0) {
                    sessionStorageMapper = function (s) { return s; };
                }
                if (localStorageActions === void 0) {
                    localStorageActions = [];
                }
                if (sessionStorageActions === void 0) {
                    sessionStorageActions = [];
                }
                var /** @type {?} */ localStore = this.initLocalStore(localStorageMapper, localStorageActions);
                var /** @type {?} */ sessionStore = this.initSessionStore(sessionStorageMapper, sessionStorageActions);
                this.store.dispatch(StorageActions.initStore(localStore, sessionStore));
            };
        /**
         * Initialize the use of local storage
         * @param localStorageMapper Mapper function for mapping state to local store
         * @param localStorageActions Actions after which to save to local storage
         */
        /**
         * Initialize the use of local storage
         * @param {?=} localStorageMapper Mapper function for mapping state to local store
         * @param {?=} localStorageActions Actions after which to save to local storage
         * @return {?}
         */
        StorageService.prototype.initLocalStore = /**
         * Initialize the use of local storage
         * @param {?=} localStorageMapper Mapper function for mapping state to local store
         * @param {?=} localStorageActions Actions after which to save to local storage
         * @return {?}
         */
            function (localStorageMapper, localStorageActions) {
                if (localStorageMapper === void 0) {
                    localStorageMapper = function (s) { return s; };
                }
                if (localStorageActions === void 0) {
                    localStorageActions = [];
                }
                this.localStorageMapper = localStorageMapper;
                this.localStorageActions = localStorageActions;
                var /** @type {?} */ ls = this.localStore;
                var /** @type {?} */ localStore = ls ? JSON.parse(ls) : {};
                return localStore;
            };
        /**
         * Initialize the use of session storage
         * @param sessionStorageMapper Mapper function for mapping state to session store
         * @param sessionStorageActions Actions after which to save to session storage
         */
        /**
         * Initialize the use of session storage
         * @param {?=} sessionStorageMapper Mapper function for mapping state to session store
         * @param {?=} sessionStorageActions Actions after which to save to session storage
         * @return {?}
         */
        StorageService.prototype.initSessionStore = /**
         * Initialize the use of session storage
         * @param {?=} sessionStorageMapper Mapper function for mapping state to session store
         * @param {?=} sessionStorageActions Actions after which to save to session storage
         * @return {?}
         */
            function (sessionStorageMapper, sessionStorageActions) {
                if (sessionStorageMapper === void 0) {
                    sessionStorageMapper = function (s) { return s; };
                }
                if (sessionStorageActions === void 0) {
                    sessionStorageActions = [];
                }
                this.sessionStorageMapper = sessionStorageMapper;
                this.sessionStorageActions = sessionStorageActions;
                var /** @type {?} */ ss = this.sessionStore;
                var /** @type {?} */ sessionStore = ss ? JSON.parse(ss) : {};
                return sessionStorage;
            };
        /**
         * @param {?} actionType
         * @return {?}
         */
        StorageService.prototype.inLocalStorage = /**
         * @param {?} actionType
         * @return {?}
         */
            function (actionType) {
                return inArray(this.localStorageActions, actionType);
            };
        /**
         * @param {?} actionType
         * @return {?}
         */
        StorageService.prototype.inSessionStorage = /**
         * @param {?} actionType
         * @return {?}
         */
            function (actionType) {
                return inArray(this.sessionStorageActions, actionType);
            };
        /**
         * Store state to local storage.
         */
        /**
         * Store state to local storage.
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
        StorageService.prototype.storeLocal = /**
         * Store state to local storage.
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
            function (state, action) {
                try {
                    // const filteredState = new ActionStore(action, this.filterState(Object.assign({}, state)));
                    var /** @type {?} */ filteredState = Object.assign(filterState(new ActionStore(action)), filterState(Object.assign({}, this.localStorageMapper(state))));
                    var /** @type {?} */ serializedState = JSON.stringify(filteredState);
                    localStorage.removeItem(this.storeKey);
                    localStorage.setItem(this.storeKey, serializedState);
                }
                catch (err) {
                    console.error("ERROR SAVING LOCAL STATE!\nAction:\t" + action.actionType + "\n", err);
                }
            };
        /**
         * Store state to session storage.
         */
        /**
         * Store state to session storage.
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
        StorageService.prototype.storeSession = /**
         * Store state to session storage.
         * @param {?} state
         * @param {?} action
         * @return {?}
         */
            function (state, action) {
                try {
                    // const filteredState = new ActionStore(action, this.filterState(Object.assign({}, state)));
                    // const filteredState = this.filterState(Object.assign({}, state));
                    var /** @type {?} */ filteredState = Object.assign(filterState(new ActionStore(action)), filterState(Object.assign({}, this.sessionStorageMapper(state))));
                    var /** @type {?} */ serializedState = JSON.stringify(filteredState);
                    localStorage.removeItem(this.storeKey);
                    sessionStorage.setItem(this.storeKey, serializedState);
                }
                catch (err) {
                    console.error("ERROR SAVING SESSION STATE!\nAction:\t" + action.actionType + "\n", err);
                }
            };
        StorageService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        StorageService.ctorParameters = function () {
            return [
                { type: i1$1.Store },
                { type: String, decorators: [{ type: i0.Inject, args: [STORE_KEY,] }] }
            ];
        };
        /** @nocollapse */ StorageService.ngInjectableDef = i0.defineInjectable({ factory: function StorageService_Factory() { return new StorageService(i0.inject(i1$1.Store), i0.inject(STORE_KEY)); }, token: StorageService, providedIn: "root" });
        return StorageService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var StorageEffects = (function () {
        function StorageEffects(actions$, service, state$) {
            var _this = this;
            this.actions$ = actions$;
            this.service = service;
            this.state$ = state$;
            /**
             * Listens for dispatched actions, updates local storage in response.
             */
            this.onSyncLocalStorage = this.actions$.pipe(operators.filter(function (action) { return _this.service.inLocalStorage(action.type); }), operators.map(function (action) {
                return ({
                    type: StorageActions.UPDATE_LOCAL_STORAGE,
                    payload: action
                });
            }));
            /**
             * Listens for dispatched actions, updates session storage in response.
             */
            this.onSyncSessionStorage = this.actions$.pipe(operators.filter(function (action) { return _this.service.inSessionStorage(action.type); }), operators.map(function (action) {
                return ({
                    type: StorageActions.UPDATE_SESSION_STORAGE,
                    payload: action
                });
            }));
            /**
             * Stores state to local storage after each action.
             */
            this.onStoreLocal = this.actions$.pipe(effects.ofType(StorageActions.UPDATE_LOCAL_STORAGE), operators.map(toPayload), operators.withLatestFrom(this.state$, function (action, state) {
                _this.service.storeLocal(state, action);
            }));
            /**
             * Stores state to local storage after each action.
             */
            this.onStoreSession = this.actions$.pipe(effects.ofType(StorageActions.UPDATE_SESSION_STORAGE), operators.map(toPayload), operators.withLatestFrom(this.state$, function (action, state) {
                _this.service.storeSession(state, action);
            }));
        }
        StorageEffects.decorators = [
            { type: i0.Injectable },
        ];
        /** @nocollapse */
        StorageEffects.ctorParameters = function () {
            return [
                { type: effects.Actions },
                { type: StorageService },
                { type: i1$1.Store }
            ];
        };
        __decorate([
            effects.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], StorageEffects.prototype, "onSyncLocalStorage", void 0);
        __decorate([
            effects.Effect(),
            __metadata("design:type", rxjs.Observable)
        ], StorageEffects.prototype, "onSyncSessionStorage", void 0);
        __decorate([
            effects.Effect({ dispatch: false }),
            __metadata("design:type", rxjs.Observable)
        ], StorageEffects.prototype, "onStoreLocal", void 0);
        __decorate([
            effects.Effect({ dispatch: false }),
            __metadata("design:type", rxjs.Observable)
        ], StorageEffects.prototype, "onStoreSession", void 0);
        return StorageEffects;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ STORE_KEY = new i0.InjectionToken('Local/Session Storage Key');
    /**
     * @param {?} store
     * @param {?} storeKey
     * @return {?}
     */
    function storageServiceFactory(store, storeKey) {
        return new StorageService(store, storeKey);
    }
    /**
     * @param {?} storeKey
     * @return {?}
     */
    function provideStorage(storeKey) {
        return [
            StorageEffects,
            { provide: StorageService, useFactory: storageServiceFactory, deps: [i1$1.Store, STORE_KEY] },
            { provide: STORE_KEY, useValue: storeKey },
        ];
    }
    var StorageModule = (function () {
        function StorageModule() {
        }
        /**
         * Provides StorageModule with storage service and effects.
         * @param storeKey - The name of the key containing the store in storage.
         */
        /**
         * Provides StorageModule with storage service and effects.
         * @param {?} storeKey - The name of the key containing the store in storage.
         * @return {?}
         */
        StorageModule.forRoot = /**
         * Provides StorageModule with storage service and effects.
         * @param {?} storeKey - The name of the key containing the store in storage.
         * @return {?}
         */
            function (storeKey) {
                return {
                    ngModule: StorageModule,
                    providers: provideStorage(storeKey)
                };
            };
        StorageModule.decorators = [
            { type: i0.NgModule },
        ];
        return StorageModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var StoreModule = (function () {
        function StoreModule() {
        }
        /**
         * @template T, V
         * @param {?} reducers
         * @param {?=} config
         * @return {?}
         */
        StoreModule.forRoot = /**
         * @template T, V
         * @param {?} reducers
         * @param {?=} config
         * @return {?}
         */
            function (reducers, config) {
                return i1$1.StoreModule.forRoot(reducers, config);
            };
        /**
         * @template T, V
         * @param {?} featureName
         * @param {?} reducers
         * @param {?=} config
         * @return {?}
         */
        StoreModule.forFeatures = /**
         * @template T, V
         * @param {?} featureName
         * @param {?} reducers
         * @param {?=} config
         * @return {?}
         */
            function (featureName, reducers, config) {
                return i1$1.StoreModule.forFeature(featureName, reducers, config);
            };
        /**
         * @template T, V
         * @param {?} featureName
         * @param {?} reducer
         * @param {?=} config
         * @return {?}
         */
        StoreModule.forFeature = /**
         * @template T, V
         * @param {?} featureName
         * @param {?} reducer
         * @param {?=} config
         * @return {?}
         */
            function (featureName, reducer, config) {
                return i1$1.StoreModule.forFeature(featureName, reducer, config);
            };
        StoreModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            i1$1.StoreModule,
                        ],
                        declarations: [],
                        exports: [
                            i1$1.StoreModule,
                        ]
                    },] },
        ];
        return StoreModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {number} */
    var ActionTypes = {
        DEFAULT: 0,
        GET: 1,
        GET_SUCCESS: 2,
        GET_ERROR: 3,
        POST: 4,
        POST_SUCCESS: 5,
        POST_ERROR: 6,
        PUT: 7,
        PUT_SUCCESS: 8,
        PUT_ERROR: 9,
        DELETE: 10,
        DELETE_SUCCESS: 11,
        DELETE_ERROR: 12,
        SAVE: 13,
    };
    ActionTypes[ActionTypes.DEFAULT] = "DEFAULT";
    ActionTypes[ActionTypes.GET] = "GET";
    ActionTypes[ActionTypes.GET_SUCCESS] = "GET_SUCCESS";
    ActionTypes[ActionTypes.GET_ERROR] = "GET_ERROR";
    ActionTypes[ActionTypes.POST] = "POST";
    ActionTypes[ActionTypes.POST_SUCCESS] = "POST_SUCCESS";
    ActionTypes[ActionTypes.POST_ERROR] = "POST_ERROR";
    ActionTypes[ActionTypes.PUT] = "PUT";
    ActionTypes[ActionTypes.PUT_SUCCESS] = "PUT_SUCCESS";
    ActionTypes[ActionTypes.PUT_ERROR] = "PUT_ERROR";
    ActionTypes[ActionTypes.DELETE] = "DELETE";
    ActionTypes[ActionTypes.DELETE_SUCCESS] = "DELETE_SUCCESS";
    ActionTypes[ActionTypes.DELETE_ERROR] = "DELETE_ERROR";
    ActionTypes[ActionTypes.SAVE] = "SAVE";

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function configReducer(state, action) {
        if (state === void 0) {
            state = new Config();
        }
        switch (action.type) {
            case ConfigActions.INITIALIZE:
                return build(Config, state, action.payload);
            default:
                return state;
        }
    }
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function sidenavReducer(state, action) {
        if (state === void 0) {
            state = true;
        }
        switch (action.type) {
            case SidenavActions.CLOSE:
                return false;
            case SidenavActions.OPEN:
                return true;
            case SidenavActions.TOGGLE:
                return !state;
            default:
                return state;
        }
    }
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function windowReducer(state, action) {
        if (state === void 0) {
            state = new Window();
        }
        switch (action.type) {
            case WindowActions.RESIZE:
                return build(Window, state, /** @type {?} */ (action.payload));
            default:
                return state;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.LibraryService = LibraryService;
    exports.LibraryComponent = LibraryComponent;
    exports.LibraryModule = LibraryModule;
    exports.AnimationsModule = AnimationsModule;
    exports.AccordionModule = AccordionModule;
    exports.AccordionComponent = AccordionComponent;
    exports.CollageModule = CollageModule;
    exports.CollageComponent = CollageComponent;
    exports.Collage = Collage;
    exports.DatepickerModule = DatepickerModule;
    exports.DATEPICKER_ACCESSOR = DATEPICKER_ACCESSOR;
    exports.DatepickerComponent = DatepickerComponent;
    exports.DATERANGE_ACCESSOR = DATERANGE_ACCESSOR;
    exports.DaterangeComponent = DaterangeComponent;
    exports.DialogModule = DialogModule;
    exports.DialogComponent = DialogComponent;
    exports.DialogModel = DialogModel;
    exports.DialogAction = DialogAction;
    exports.EditorModule = EditorModule;
    exports.EDITOR_ACCESSOR = EDITOR_ACCESSOR;
    exports.EditorComponent = EditorComponent;
    exports.EditorWindowComponent = EditorWindowComponent;
    exports.FileUploadModule = FileUploadModule;
    exports.FILE_UPLOAD_ACCESSOR = FILE_UPLOAD_ACCESSOR;
    exports.FileUploadComponent = FileUploadComponent;
    exports.FileUpload = FileUpload;
    exports.getReadyState = getReadyState;
    exports.File = File;
    exports.FilePreviewComponent = FilePreviewComponent;
    exports.UploadComponent = UploadComponent;
    exports.UploadsComponent = UploadsComponent;
    exports.GridModule = GridModule;
    exports.Grid = Grid;
    exports.GridColumn = GridColumn;
    exports.NotFoundModule = NotFoundModule;
    exports.NotFoundComponent = NotFoundComponent;
    exports.TileModule = TileModule;
    exports.TileComponent = TileComponent;
    exports.Tile = Tile;
    exports.WallpaperModule = WallpaperModule;
    exports.WallpaperComponent = WallpaperComponent;
    exports.EffectsModule = EffectsModule;
    exports.ErrorsModule = ErrorsModule;
    exports.ErrorActions = ErrorActions;
    exports.ErrorEffects = ErrorEffects;
    exports.Error = Error;
    exports.errorsReducer = errorsReducer;
    exports.errorsSelector = errorsSelector;
    exports.errorSelector = errorSelector;
    exports.ErrorsService = ErrorsService;
    exports.GlobalErrorsService = GlobalErrorsService;
    exports.EventsModule = EventsModule;
    exports.EventActions = EventActions;
    exports.EventEffects = EventEffects;
    exports.Event = Event;
    exports.Events = Events;
    exports.UpdateValuePayload = UpdateValuePayload;
    exports.eventsReducer = eventsReducer;
    exports.eventsSelector = eventsSelector;
    exports.eventSelector = eventSelector;
    exports.eventValueSelector = eventValueSelector;
    exports.EventsService = EventsService;
    exports.FormsModule = FormsModule;
    exports.FormActions = FormActions;
    exports.Control = Control;
    exports.ArrayControl = ArrayControl;
    exports.FormArray = FormArray;
    exports.buildAbstractControl = buildAbstractControl;
    exports.buildArrayFromType = buildArrayFromType;
    exports.buildControl = buildControl;
    exports.buildControlFromModel = buildControlFromModel;
    exports.buildControlsConfig = buildControlsConfig;
    exports.buildFormArray = buildFormArray;
    exports.buildFormArrayControls = buildFormArrayControls;
    exports.findFormArrayType = findFormArrayType;
    exports.hasGroupValidators = hasGroupValidators;
    exports.hasValidators = hasValidators;
    exports.isArrayValue = isArrayValue;
    exports.isFormArray = isFormArray;
    exports.isFormControl = isFormControl;
    exports.isFormGroup = isFormGroup;
    exports.isGroupValue = isGroupValue;
    exports.baseUrlFactory = baseUrlFactory;
    exports.authTokenFactory = authTokenFactory;
    exports.httpServiceFactory = httpServiceFactory;
    exports.provideHttpContext = provideHttpContext;
    exports.HttpModule = HttpModule;
    exports.HttpActions = HttpActions;
    exports.HttpCommands = HttpCommands;
    exports.HttpEffects = HttpEffects;
    exports.HttpDeletePayload = HttpDeletePayload;
    exports.HttpGetPayload = HttpGetPayload;
    exports.HttpPutPayload = HttpPutPayload;
    exports.HttpPostPayload = HttpPostPayload;
    exports.HTTP_REQUEST_STATUS = HTTP_REQUEST_STATUS;
    exports.HTTP_STATUS_CODES = HTTP_STATUS_CODES;
    exports.HttpOptions = HttpOptions;
    exports.HttpService = HttpService;
    exports.LOOKUP_PATH = LOOKUP_PATH;
    exports.LOOKUP_KEYS = LOOKUP_KEYS;
    exports.lookupServiceFactory = lookupServiceFactory;
    exports.provideLookup = provideLookup;
    exports.LookupModule = LookupModule;
    exports.LookupActions = LookupActions;
    exports.Lookup = Lookup;
    exports.LookupValue = LookupValue;
    exports.Lookups = Lookups;
    exports.AddLookupPayload = AddLookupPayload;
    exports.lookupReducer = lookupReducer;
    exports.lookupSelector = lookupSelector;
    exports.lookupKeySelector = lookupKeySelector;
    exports.lookupValuesSelector = lookupValuesSelector;
    exports.lookupValueSelector = lookupValueSelector;
    exports.LookupService = LookupService;
    exports.ListPipe = ListPipe;
    exports.PhoneNumberPipe = PhoneNumberPipe;
    exports.TimeAgoPipe = TimeAgoPipe;
    exports.YesNoPipe = YesNoPipe;
    exports.RouterModule = RouterModule;
    exports.RouterActions = RouterActions;
    exports.RouterEffects = RouterEffects;
    exports.ActivatedRoutePayload = ActivatedRoutePayload;
    exports.Breadcrumbs = Breadcrumbs;
    exports.CustomRoute = CustomRoute;
    exports.LazyRoute = LazyRoute;
    exports.NavigationStatus = NavigationStatus;
    exports.RouteSegment = RouteSegment;
    exports.RouterState = RouterState;
    exports.VisitedRoute = VisitedRoute;
    exports.routerReducer = routerReducer;
    exports.routeSelector = routeSelector;
    exports.breadcrumbsSelector = breadcrumbsSelector;
    exports.routeNameSelector = routeNameSelector;
    exports.routeParamsSelector = routeParamsSelector;
    exports.lazyRouteParamsSelector = lazyRouteParamsSelector;
    exports.routeParamSelector = routeParamSelector;
    exports.routeParamArraySelector = routeParamArraySelector;
    exports.routeParamIdSelector = routeParamIdSelector;
    exports.routeParamIntSelector = routeParamIntSelector;
    exports.urlSelector = urlSelector;
    exports.querySelector = querySelector;
    exports.RouterService = RouterService;
    exports.AuthenticatedGuard = AuthenticatedGuard;
    exports.SharedModule = SharedModule;
    exports.BaseEntity = BaseEntity;
    exports.Collection = Collection;
    exports.DumbComponent = DumbComponent;
    exports.FormComponent = FormComponent;
    exports.SmartComponent = SmartComponent;
    exports.Config = Config;
    exports.ViewConfig = ViewConfig;
    exports.DateRange = DateRange;
    exports.DateHelper = DateHelper;
    exports.ActionCreator = ActionCreator;
    exports.ActionType = ActionType;
    exports.Class = Class;
    exports.Command = Command;
    exports.Dispatcher = Dispatcher;
    exports.Entity = Entity;
    exports.EventHandler = EventHandler;
    exports.LifecycleHook = LifecycleHook;
    exports.Method = Method;
    exports.Parameter = Parameter;
    exports.Property = Property;
    exports.StaticMethod = StaticMethod;
    exports.StaticProperty = StaticProperty;
    exports.Address = Address;
    exports.Alert = Alert;
    exports.Coordinates = Coordinates;
    exports.Dimensions = Dimensions;
    exports.Email = Email;
    exports.EMAIL_REGEX = EMAIL_REGEX;
    exports.Filters = Filters;
    exports.Image = Image;
    exports.Metadata = Metadata;
    exports.MetadataType = MetadataType;
    exports.PropertyMetadata = PropertyMetadata;
    exports.QueryItem = QueryItem;
    exports.QueryModel = QueryModel;
    exports.Search = Search;
    exports.StyleModel = StyleModel;
    exports.Permutation = Permutation;
    exports.OrderedItem = OrderedItem;
    exports.Ordering = Ordering;
    exports.Question = Question;
    exports.Questions = Questions;
    exports.QuestionsModel = QuestionsModel;
    exports.Token = Token;
    exports.TreeItem = TreeItem;
    exports.Tree = Tree;
    exports.User = User;
    exports.CurrentUser = CurrentUser;
    exports.UserRoles = UserRoles;
    exports.Login = Login;
    exports.ResetPassword = ResetPassword;
    exports.applyDecorators = applyDecorators;
    exports.applyMixins = applyMixins;
    exports.arrayUnion = arrayUnion;
    exports.assignProps = assignProps;
    exports.build = build;
    exports.compareDates = compareDates;
    exports.compareNumbers = compareNumbers;
    exports.compareStrings = compareStrings;
    exports.distinct = distinct;
    exports.equals = equals;
    exports.extendObject = extendObject;
    exports.falsy = falsy;
    exports.filterState = filterState;
    exports.findMetadata = findMetadata;
    exports.findSchoolYear = findSchoolYear;
    exports.flattenKeys = flattenKeys;
    exports.formatPhoneNumber = formatPhoneNumber;
    exports.format7DigitPhoneNumber = format7DigitPhoneNumber;
    exports.format10DigitPhoneNumber = format10DigitPhoneNumber;
    exports.formatPrice = formatPrice;
    exports.getTypeNameForDebugging = getTypeNameForDebugging;
    exports.getAllProps = getAllProps;
    exports.getGetters = getGetters;
    exports.getKeyValues = getKeyValues;
    exports.getSetters = getSetters;
    exports.getStyle = getStyle;
    exports.getValue = getValue;
    exports.guid = guid;
    exports.hasChanged = hasChanged;
    exports.idChanged = idChanged;
    exports.ignoreKey = ignoreKey;
    exports.inArray = inArray;
    exports.inArrayByKey = inArrayByKey;
    exports.integerArray = integerArray;
    exports.isBetweenDates = isBetweenDates;
    exports.isCyclic = isCyclic;
    exports.nextState = nextState;
    exports.positiveIntegerArray = positiveIntegerArray;
    exports.removeCycles = removeCycles;
    exports.removeProps = removeProps;
    exports.serialize = serialize;
    exports.stringify = stringify;
    exports.str2CharCode = str2CharCode;
    exports.str2Id = str2Id;
    exports.str2int = str2int;
    exports.strArray2Id = strArray2Id;
    exports.throwException = throwException;
    exports.throwNotImplementedException = throwNotImplementedException;
    exports.toArray = toArray;
    exports.toInt = toInt;
    exports.toPayload = toPayload;
    exports.toPx = toPx;
    exports.truthy = truthy;
    exports.tryCast = tryCast;
    exports.valueChanged = valueChanged;
    exports.valueEquals = valueEquals;
    exports.Window = Window;
    exports.WindowResize = WindowResize;
    exports.STORE_KEY = STORE_KEY;
    exports.storageServiceFactory = storageServiceFactory;
    exports.provideStorage = provideStorage;
    exports.StorageModule = StorageModule;
    exports.StorageActions = StorageActions;
    exports.StorageEffects = StorageEffects;
    exports.ActionStore = ActionStore;
    exports.Storage = Storage$1;
    exports.StorageService = StorageService;
    exports.StoreModule = StoreModule;
    exports.AppActions = AppActions;
    exports.ConfigActions = ConfigActions;
    exports.SidenavActions = SidenavActions;
    exports.WindowActions = WindowActions;
    exports.ActionTypes = ActionTypes;
    exports.configReducer = configReducer;
    exports.sidenavReducer = sidenavReducer;
    exports.windowReducer = windowReducer;
    exports.allSelector = allSelector;
    exports.emptySelector = emptySelector;
    exports.currentUserSelector = currentUserSelector;
    exports.authenticatedSelector = authenticatedSelector;
    exports.configSelector = configSelector;
    exports.windowSelector = windowSelector;
    exports.windowHeightSelector = windowHeightSelector;
    exports.windowWidthSelector = windowWidthSelector;
    exports.containerHeightSelector = containerHeightSelector;
    exports.containerWidthSelector = containerWidthSelector;
    exports.contentHeightSelector = contentHeightSelector;
    exports.contentWidthSelector = contentWidthSelector;
    exports.sidenavOpenedSelector = sidenavOpenedSelector;
    exports.apiBaseUrlSelector = apiBaseUrlSelector;
    exports.authTokenSelector = authTokenSelector;
    exports.ɵd = GridCellComponent;
    exports.ɵb = GridColumnComponent;
    exports.ɵa = GridComponent;
    exports.ɵc = SimpleGridComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,