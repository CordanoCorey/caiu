/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { Store } from '@ngrx/store';
import { HttpCommands } from './http.commands';
import { HttpEffects } from './http.effects';
import { HttpService } from './http.service';
import { HttpClient } from '@angular/common/http';
const /** @type {?} */ BASE_URL$ = new InjectionToken('API Base URL');
const /** @type {?} */ AUTH_TOKEN$ = new InjectionToken('API Auth Token');
/**
 * @param {?} store
 * @param {?} baseUrlSelector
 * @return {?}
 */
export function baseUrlFactory(store, baseUrlSelector) {
    return store.pipe(baseUrlSelector);
}
/**
 * @param {?} store
 * @param {?} authTokenSelector
 * @return {?}
 */
export function authTokenFactory(store, authTokenSelector) {
    return store.pipe(authTokenSelector);
}
/**
 * @param {?} http
 * @param {?} baseUrl$
 * @param {?} authToken$
 * @return {?}
 */
export function httpServiceFactory(http, baseUrl$, authToken$) {
    return new HttpService(http, baseUrl$, authToken$);
}
/**
 * @param {?} urlSelector
 * @param {?} authTokenSelector
 * @return {?}
 */
export function provideHttpContext(urlSelector, authTokenSelector) {
    return [
        HttpEffects,
        HttpCommands,
        { provide: HttpService, useFactory: httpServiceFactory, deps: [HttpClient, 'BASE_URL$', 'AUTH_TOKEN$'] },
        { provide: 'URL_SELECTOR', useValue: urlSelector },
        { provide: 'BASE_URL$', useFactory: baseUrlFactory, deps: [Store, 'URL_SELECTOR'] },
        { provide: 'TOKEN_SELECTOR', useValue: authTokenSelector },
        { provide: 'AUTH_TOKEN$', useFactory: authTokenFactory, deps: [Store, 'TOKEN_SELECTOR'] },
    ];
}
export class HttpModule {
    /**
     * @param {?} baseUrlSelector
     * @param {?} authTokenSelector
     * @return {?}
     */
    static forRoot(baseUrlSelector, authTokenSelector) {
        return {
            ngModule: HttpModule,
            providers: provideHttpContext(baseUrlSelector, authTokenSelector)
        };
    }
}
HttpModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    HttpClientModule,
                ],
                exports: [
                    HttpClientModule,
                ]
            },] },
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2h0dHAvaHR0cC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXBDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUdsRCx1QkFBTSxTQUFTLEdBQUcsSUFBSSxjQUFjLENBQXFCLGNBQWMsQ0FBQyxDQUFDO0FBQ3pFLHVCQUFNLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBcUIsZ0JBQWdCLENBQUMsQ0FBQzs7Ozs7O0FBRTdFLE1BQU0seUJBQXlCLEtBQWlCLEVBQUUsZUFBaUM7SUFDakYsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7Q0FDcEM7Ozs7OztBQUVELE1BQU0sMkJBQTJCLEtBQWlCLEVBQUUsaUJBQW1DO0lBQ3JGLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7Q0FDdEM7Ozs7Ozs7QUFFRCxNQUFNLDZCQUE2QixJQUFnQixFQUFFLFFBQTRCLEVBQUUsVUFBOEI7SUFDL0csTUFBTSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7Q0FDcEQ7Ozs7OztBQUVELE1BQU0sNkJBQTZCLFdBQTZCLEVBQUUsaUJBQW1DO0lBQ25HLE1BQU0sQ0FBQztRQUNMLFdBQVc7UUFDWCxZQUFZO1FBQ1osRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUUsV0FBVyxFQUFFLGFBQWEsQ0FBQyxFQUFFO1FBQ3hHLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFO1FBQ2xELEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsRUFBRTtRQUNuRixFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUU7UUFDMUQsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsRUFBRTtLQUMxRixDQUFDO0NBQ0g7QUFVRCxNQUFNOzs7Ozs7SUFFSixNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWlDLEVBQUUsaUJBQW1DO1FBQ25GLE1BQU0sQ0FBQztZQUNMLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxlQUFlLEVBQUUsaUJBQWlCLENBQUM7U0FDbEUsQ0FBQztLQUNIOzs7WUFmRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLGdCQUFnQjtpQkFDakI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLGdCQUFnQjtpQkFDakI7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuXG5pbXBvcnQgeyBIdHRwQ29tbWFuZHMgfSBmcm9tICcuL2h0dHAuY29tbWFuZHMnO1xuaW1wb3J0IHsgSHR0cEVmZmVjdHMgfSBmcm9tICcuL2h0dHAuZWZmZWN0cyc7XG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJy4vaHR0cC5zZXJ2aWNlJztcbmltcG9ydCB7IFNlbGVjdG9yIH0gZnJvbSAnLi4vc3RvcmUvbW9kZWxzJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmNvbnN0IEJBU0VfVVJMJCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxPYnNlcnZhYmxlPHN0cmluZz4+KCdBUEkgQmFzZSBVUkwnKTtcbmNvbnN0IEFVVEhfVE9LRU4kID0gbmV3IEluamVjdGlvblRva2VuPE9ic2VydmFibGU8c3RyaW5nPj4oJ0FQSSBBdXRoIFRva2VuJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBiYXNlVXJsRmFjdG9yeShzdG9yZTogU3RvcmU8YW55PiwgYmFzZVVybFNlbGVjdG9yOiBTZWxlY3RvcjxzdHJpbmc+KTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgcmV0dXJuIHN0b3JlLnBpcGUoYmFzZVVybFNlbGVjdG9yKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF1dGhUb2tlbkZhY3Rvcnkoc3RvcmU6IFN0b3JlPGFueT4sIGF1dGhUb2tlblNlbGVjdG9yOiBTZWxlY3RvcjxzdHJpbmc+KTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgcmV0dXJuIHN0b3JlLnBpcGUoYXV0aFRva2VuU2VsZWN0b3IpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHR0cFNlcnZpY2VGYWN0b3J5KGh0dHA6IEh0dHBDbGllbnQsIGJhc2VVcmwkOiBPYnNlcnZhYmxlPHN0cmluZz4sIGF1dGhUb2tlbiQ6IE9ic2VydmFibGU8c3RyaW5nPik6IEh0dHBTZXJ2aWNlIHtcbiAgcmV0dXJuIG5ldyBIdHRwU2VydmljZShodHRwLCBiYXNlVXJsJCwgYXV0aFRva2VuJCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlSHR0cENvbnRleHQodXJsU2VsZWN0b3I6IFNlbGVjdG9yPHN0cmluZz4sIGF1dGhUb2tlblNlbGVjdG9yOiBTZWxlY3RvcjxzdHJpbmc+KTogYW55W10ge1xuICByZXR1cm4gW1xuICAgIEh0dHBFZmZlY3RzLFxuICAgIEh0dHBDb21tYW5kcyxcbiAgICB7IHByb3ZpZGU6IEh0dHBTZXJ2aWNlLCB1c2VGYWN0b3J5OiBodHRwU2VydmljZUZhY3RvcnksIGRlcHM6IFtIdHRwQ2xpZW50LCAnQkFTRV9VUkwkJywgJ0FVVEhfVE9LRU4kJ10gfSxcbiAgICB7IHByb3ZpZGU6ICdVUkxfU0VMRUNUT1InLCB1c2VWYWx1ZTogdXJsU2VsZWN0b3IgfSxcbiAgICB7IHByb3ZpZGU6ICdCQVNFX1VSTCQnLCB1c2VGYWN0b3J5OiBiYXNlVXJsRmFjdG9yeSwgZGVwczogW1N0b3JlLCAnVVJMX1NFTEVDVE9SJ10gfSxcbiAgICB7IHByb3ZpZGU6ICdUT0tFTl9TRUxFQ1RPUicsIHVzZVZhbHVlOiBhdXRoVG9rZW5TZWxlY3RvciB9LFxuICAgIHsgcHJvdmlkZTogJ0FVVEhfVE9LRU4kJywgdXNlRmFjdG9yeTogYXV0aFRva2VuRmFjdG9yeSwgZGVwczogW1N0b3JlLCAnVE9LRU5fU0VMRUNUT1InXSB9LFxuICBdO1xufVxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgSHR0cENsaWVudE1vZHVsZSxcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIEh0dHBDbGllbnRNb2R1bGUsXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgSHR0cE1vZHVsZSB7XG5cbiAgc3RhdGljIGZvclJvb3QoYmFzZVVybFNlbGVjdG9yOiBTZWxlY3RvcjxzdHJpbmc+LCBhdXRoVG9rZW5TZWxlY3RvcjogU2VsZWN0b3I8c3RyaW5nPik6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogSHR0cE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogcHJvdmlkZUh0dHBDb250ZXh0KGJhc2VVcmxTZWxlY3RvciwgYXV0aFRva2VuU2VsZWN0b3IpXG4gICAgfTtcbiAgfVxuXG59XG4iXX0=