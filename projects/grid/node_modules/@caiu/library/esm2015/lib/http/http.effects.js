/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { map, mergeMap, catchError } from 'rxjs/operators';
import { HttpActions } from './http.actions';
import { HttpCommands } from './http.commands';
/**
 * @template T
 */
export class HttpEffects {
    /**
     * @param {?} actions$
     * @param {?} commands
     */
    constructor(actions$, commands) {
        this.actions$ = actions$;
        this.commands = commands;
        this.onDelete$ = this.actions$.pipe(ofType(HttpActions.DELETE), mergeMap((action) => this.delete$(action.payload)));
        this.onGet$ = this.actions$.pipe(ofType(HttpActions.GET), mergeMap((action) => this.get$(action.payload)));
        this.onPost$ = this.actions$.pipe(ofType(HttpActions.POST), mergeMap((action) => this.post$(action.payload)));
        this.onPostFormUrlEncoded$ = this.actions$.pipe(ofType(HttpActions.POST_FORM_URL_ENCODED), mergeMap((action) => this.postFormUrlEncoded$(action.payload)));
        this.onPut$ = this.actions$.pipe(ofType(HttpActions.PUT), mergeMap((action) => this.put$(action.payload)));
        this.onSearch$ = this.actions$.pipe(ofType(HttpActions.SEARCH), mergeMap((action) => this.search$(action.payload)));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    delete$(payload) {
        // console.log('DELETE:\t', payload.onSuccess);
        return this.commands.delete$(payload).pipe(map((model) => HttpActions.deleteSuccess(payload.onSuccessPayload || model, payload.onSuccess)), catchError((e) => of(HttpActions.deleteError(e, payload.onError))));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    get$(payload) {
        // console.log('GET:\t', payload.onSuccess);
        return this.commands.get$(payload).pipe(map((model) => HttpActions.getSuccess(model, payload.onSuccess)), catchError((e) => of(HttpActions.getError(e, payload.onError))));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    post$(payload) {
        // console.log('POST:\t', payload.onSuccess);
        return this.commands.post$(payload).pipe(map((model) => HttpActions.postSuccess(model, payload.onSuccess)), catchError((e) => of(HttpActions.postError(e, payload.onError))));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    postFormUrlEncoded$(payload) {
        // console.log('POST:\t', payload.onSuccess);
        return this.commands.postFormUrlEncoded$(payload).pipe(map((model) => HttpActions.postSuccess(model, payload.onSuccess)), catchError((e) => of(HttpActions.postError(e, payload.onError))));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    put$(payload) {
        // console.log('PUT:\t', payload.onSuccess);
        return this.commands.put$(payload).pipe(map((model) => HttpActions.putSuccess(model, payload.onSuccess)), catchError((e) => of(HttpActions.putError(e, payload.onError))));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    search$(payload) {
        // console.log('SEARCH:\t', payload.onSuccess);
        return this.commands.get$(payload).pipe(map((model) => HttpActions.searchSuccess(model, payload.onSuccess, payload.path)), catchError((e) => of(HttpActions.getError(e, payload.onError))));
    }
}
HttpEffects.decorators = [
    { type: Injectable },
];
/** @nocollapse */
HttpEffects.ctorParameters = () => [
    { type: Actions },
    { type: HttpCommands }
];
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], HttpEffects.prototype, "onDelete$", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], HttpEffects.prototype, "onGet$", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], HttpEffects.prototype, "onPost$", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], HttpEffects.prototype, "onPostFormUrlEncoded$", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], HttpEffects.prototype, "onPut$", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], HttpEffects.prototype, "onSearch$", void 0);
function HttpEffects_tsickle_Closure_declarations() {
    /** @type {?} */
    HttpEffects.prototype.onDelete$;
    /** @type {?} */
    HttpEffects.prototype.onGet$;
    /** @type {?} */
    HttpEffects.prototype.onPost$;
    /** @type {?} */
    HttpEffects.prototype.onPostFormUrlEncoded$;
    /** @type {?} */
    HttpEffects.prototype.onPut$;
    /** @type {?} */
    HttpEffects.prototype.onSearch$;
    /** @type {?} */
    HttpEffects.prototype.actions$;
    /** @type {?} */
    HttpEffects.prototype.commands;
}

//# sourceMappingURL=data:application/json;base64,