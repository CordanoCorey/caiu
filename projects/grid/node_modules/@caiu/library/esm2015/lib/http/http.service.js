/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, of, throwError } from 'rxjs';
import { catchError, debounceTime, distinctUntilChanged, finalize, map } from 'rxjs/operators';
import { HttpActions } from './http.actions';
import { HttpOptions } from './http.models';
import { QueryModel } from '../shared/models';
import { serialize } from '../shared/utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "rxjs/internal/Observable";
export class HttpService {
    /**
     * @param {?} http
     * @param {?} baseUrl$
     * @param {?} authToken$
     */
    constructor(http, baseUrl$, authToken$) {
        this.http = http;
        this.baseUrl$ = baseUrl$;
        this.authToken$ = authToken$;
        this._authToken = '';
        this._baseUrl = '';
        this.headers = {};
        this.logEvents = true;
        this.useDefaultHeaders = true;
        this.authTokenChanges = this.authToken$.subscribe(x => {
            this.authToken = x;
        });
        this.baseUrlChanges = this.baseUrl$.subscribe(x => {
            this.baseUrl = x;
        });
    }
    /**
     * @return {?}
     */
    get authToken() {
        return this._authToken;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set authToken(value) {
        this._authToken = value;
    }
    /**
     * @return {?}
     */
    get baseUrl() {
        return this._baseUrl;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set baseUrl(value) {
        this._baseUrl = value;
    }
    /**
     * @return {?}
     */
    get defaultHeaders() {
        let /** @type {?} */ headers = new HttpHeaders();
        headers = headers.append('Content-type', 'application/json');
        if (this.authToken) {
            headers = headers.append('Authorization', 'Bearer ' + this.authToken);
        }
        return headers;
    }
    /**
     * @return {?}
     */
    get requestHeaders() {
        let /** @type {?} */ headers = this.useDefaultHeaders ? this.defaultHeaders : new HttpHeaders();
        Object.keys(this.headers).forEach(key => {
            headers = headers.append(key, this.headers[key]);
        });
        return headers;
    }
    /**
     * @param {?=} headers
     * @return {?}
     */
    appendHeaders(headers = {}) {
        let /** @type {?} */ requestHeaders = this.requestHeaders;
        Object.keys(headers).forEach(key => {
            requestHeaders = requestHeaders.append(key, this.headers[key]);
        });
        return requestHeaders;
    }
    /**
     * Make a DELETE request.
     * @param {?} relativePath
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    delete(relativePath, headers = {}, options = new HttpOptions()) {
        const /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        const /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        const /** @type {?} */ obs = this.http.delete(url, {
            headers: httpHeaders
        });
        return obs.pipe(map(res => res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res), catchError(err => this.onError(err)), finalize(() => {
            this.onComplete('DELETE', url);
        }));
    }
    /**
     * Make a GET request.
     * @param {?} relativePath
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    get(relativePath, headers = {}, options = new HttpOptions()) {
        const /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        const /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        const /** @type {?} */ obs = this.http.get(url, {
            headers: httpHeaders
        });
        return obs.pipe(map(res => res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res), catchError(err => this.onError(err)), finalize(() => {
            this.onComplete('GET', url);
        }));
    }
    ;
    /**
     * Make an autocomplete GET request.
     * @param {?} relativePath
     * @param {?} query
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    autocomplete(relativePath, query, headers = {}, options = new HttpOptions()) {
        if (!query.term || query.term.length < 1) {
            return of([]);
        }
        const /** @type {?} */ path = `${relativePath}/${QueryModel.BuildQueryString(query)}`;
        const /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        const /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        const /** @type {?} */ obs = this.http.get(url, {
            headers: httpHeaders
        });
        return obs.pipe(map(res => res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res), debounceTime(500), distinctUntilChanged(), map(json => HttpActions.matchPath(path, json)), catchError(err => this.onError(err)), finalize(() => {
            this.onComplete('GET', url);
        }));
    }
    ;
    /**
     * Make a POST request.
     * @param {?} relativePath
     * @param {?} body
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    post(relativePath, body, headers = {}, options = new HttpOptions()) {
        const /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        const /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        const /** @type {?} */ obs = this.http.post(url, serialize(body), {
            headers: httpHeaders
        });
        return obs.pipe(map(res => res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res), catchError(err => this.onError(err)), finalize(() => {
            this.onComplete('POST', url);
        }));
    }
    /**
     * Make a POST request with form url-encoded content type.
     * @param {?} relativePath
     * @param {?} body
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    postFormUrlEncoded(relativePath, body, headers = {}, options = new HttpOptions()) {
        const /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        const /** @type {?} */ httpHeaders = new HttpHeaders({ 'content-type': 'application/x-www-form-urlencoded' });
        const /** @type {?} */ obs = this.http.post(url, body, {
            headers: httpHeaders
        });
        return obs.pipe(map(res => res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res), catchError(err => this.onError(err)), finalize(() => {
            this.onComplete('POST FORM URL-ENCODED', url);
        }));
    }
    /**
     * Make a PUT request.
     * @param {?} relativePath
     * @param {?} body
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    put(relativePath, body, headers = {}, options = new HttpOptions()) {
        const /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        const /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        const /** @type {?} */ obs = this.http.put(url, serialize(body), {
            headers: httpHeaders
        });
        return obs.pipe(map(res => res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res), catchError(err => this.onError(err)), finalize(() => {
            this.onComplete('PUT', url);
        }));
    }
    /**
     * This method will be used to format URLs for all cross-origin requests.
     * @param {?} path
     * @return {?}
     */
    formatUrl(path) {
        return `${this.baseUrl}/${path}`;
    }
    /**
     * Use this method when a promise is preferred over an observable.
     * @param {?} url
     * @return {?}
     */
    getPromise(url) {
        return this.get(url)
            .toPromise()
            .then(res => res.json());
    }
    /**
     * @param {?} error
     * @return {?}
     */
    onError(error) {
        let /** @type {?} */ errorBody;
        try {
            errorBody = (error._body) ? JSON.parse(error._body) : { message: 'Internal server error', statusCode: error.status };
        }
        catch (/** @type {?} */ e) {
            if (error.status <= 0) {
                errorBody = { message: 'Internal server error.', statusCode: 500 };
            }
        }
        if (errorBody.message) {
            errorBody.message = errorBody.message.replace('An error has occured in the api.System.Exception: ', '');
            errorBody.message = errorBody.message.substring(0, errorBody.message.indexOf(' at'));
        }
        return throwError(errorBody);
    }
    /**
     * @param {?} method
     * @param {?} url
     * @return {?}
     */
    onComplete(method, url) {
        if (this.logEvents) {
            console.log(`Completed ${method} request to ${url}`);
        }
    }
}
HttpService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
HttpService.ctorParameters = () => [
    { type: HttpClient },
    { type: Observable },
    { type: Observable }
];
/** @nocollapse */ HttpService.ngInjectableDef = i0.defineInjectable({ factory: function HttpService_Factory() { return new HttpService(i0.inject(i1.HttpClient), i0.inject(i2.Observable), i0.inject(i2.Observable)); }, token: HttpService, providedIn: "root" });
function HttpService_tsickle_Closure_declarations() {
    /** @type {?} */
    HttpService.prototype._authToken;
    /** @type {?} */
    HttpService.prototype._baseUrl;
    /** @type {?} */
    HttpService.prototype.authTokenChanges;
    /** @type {?} */
    HttpService.prototype.baseUrlChanges;
    /** @type {?} */
    HttpService.prototype.headers;
    /** @type {?} */
    HttpService.prototype.logEvents;
    /** @type {?} */
    HttpService.prototype.useDefaultHeaders;
    /** @type {?} */
    HttpService.prototype.http;
    /** @type {?} */
    HttpService.prototype.baseUrl$;
    /** @type {?} */
    HttpService.prototype.authToken$;
}

//# sourceMappingURL=data:application/json;base64,