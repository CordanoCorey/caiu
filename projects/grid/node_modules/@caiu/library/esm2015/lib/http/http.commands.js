/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpService } from './http.service';
import { HttpGetPayload, HttpPostPayload, HttpPutPayload, HttpDeletePayload } from './http.models';
import { Command } from '../shared/decorators';
import * as i0 from "@angular/core";
import * as i1 from "./http.service";
/**
 * @template T
 */
export class HttpCommands {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    delete$(payload) {
        return this.http.delete(payload.path, payload.headers, payload.options);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    get$(payload) {
        return this.http.get(payload.path, payload.headers, payload.options);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    post$(payload) {
        return this.http.post(payload.path, payload.model, payload.headers, payload.options);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    postFormUrlEncoded$(payload) {
        return this.http.postFormUrlEncoded(payload.path, payload.model, payload.headers, payload.options);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    put$(payload) {
        return this.http.put(payload.path, payload.model, payload.headers, payload.options);
    }
}
HttpCommands.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
HttpCommands.ctorParameters = () => [
    { type: HttpService }
];
/** @nocollapse */ HttpCommands.ngInjectableDef = i0.defineInjectable({ factory: function HttpCommands_Factory() { return new HttpCommands(i0.inject(i1.HttpService)); }, token: HttpCommands, providedIn: "root" });
tslib_1.__decorate([
    Command(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [HttpDeletePayload]),
    tslib_1.__metadata("design:returntype", Observable)
], HttpCommands.prototype, "delete$", null);
tslib_1.__decorate([
    Command(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [HttpGetPayload]),
    tslib_1.__metadata("design:returntype", Observable)
], HttpCommands.prototype, "get$", null);
tslib_1.__decorate([
    Command(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [HttpPostPayload]),
    tslib_1.__metadata("design:returntype", Observable)
], HttpCommands.prototype, "post$", null);
tslib_1.__decorate([
    Command(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [HttpPostPayload]),
    tslib_1.__metadata("design:returntype", Observable)
], HttpCommands.prototype, "postFormUrlEncoded$", null);
tslib_1.__decorate([
    Command(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [HttpPutPayload]),
    tslib_1.__metadata("design:returntype", Observable)
], HttpCommands.prototype, "put$", null);
function HttpCommands_tsickle_Closure_declarations() {
    /** @type {?} */
    HttpCommands.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5jb21tYW5kcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvaHR0cC9odHRwLmNvbW1hbmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRWxDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7Ozs7QUFLL0MsTUFBTTs7OztJQUVKLFlBQW9CLElBQWlCO1FBQWpCLFNBQUksR0FBSixJQUFJLENBQWE7S0FDcEM7Ozs7O0lBR0QsT0FBTyxDQUFDLE9BQTZCO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3pFOzs7OztJQUdELElBQUksQ0FBQyxPQUEwQjtRQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN0RTs7Ozs7SUFHRCxLQUFLLENBQUMsT0FBMkI7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN0Rjs7Ozs7SUFHRCxtQkFBbUIsQ0FBQyxPQUEyQjtRQUM3QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDcEc7Ozs7O0lBR0QsSUFBSSxDQUFDLE9BQTBCO1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDckY7OztZQS9CRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFOUSxXQUFXOzs7O0lBWWpCLE9BQU8sRUFBRTs7NkNBQ08saUJBQWlCOzRDQUFNLFVBQVU7MkNBRWpEOztJQUVBLE9BQU8sRUFBRTs7NkNBQ0ksY0FBYzs0Q0FBTSxVQUFVO3dDQUUzQzs7SUFFQSxPQUFPLEVBQUU7OzZDQUNLLGVBQWU7NENBQU0sVUFBVTt5Q0FFN0M7O0lBRUEsT0FBTyxFQUFFOzs2Q0FDbUIsZUFBZTs0Q0FBTSxVQUFVO3VEQUUzRDs7SUFFQSxPQUFPLEVBQUU7OzZDQUNJLGNBQWM7NENBQU0sVUFBVTt3Q0FFM0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSAnLi9odHRwLnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cEdldFBheWxvYWQsIEh0dHBQb3N0UGF5bG9hZCwgSHR0cFB1dFBheWxvYWQsIEh0dHBEZWxldGVQYXlsb2FkIH0gZnJvbSAnLi9odHRwLm1vZGVscyc7XG5pbXBvcnQgeyBDb21tYW5kIH0gZnJvbSAnLi4vc2hhcmVkL2RlY29yYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBIdHRwQ29tbWFuZHM8VD4ge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cFNlcnZpY2UpIHtcbiAgfVxuXG4gIEBDb21tYW5kKClcbiAgZGVsZXRlJChwYXlsb2FkOiBIdHRwRGVsZXRlUGF5bG9hZDxUPik6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUocGF5bG9hZC5wYXRoLCBwYXlsb2FkLmhlYWRlcnMsIHBheWxvYWQub3B0aW9ucyk7XG4gIH1cblxuICBAQ29tbWFuZCgpXG4gIGdldCQocGF5bG9hZDogSHR0cEdldFBheWxvYWQ8VD4pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHBheWxvYWQucGF0aCwgcGF5bG9hZC5oZWFkZXJzLCBwYXlsb2FkLm9wdGlvbnMpO1xuICB9XG5cbiAgQENvbW1hbmQoKVxuICBwb3N0JChwYXlsb2FkOiBIdHRwUG9zdFBheWxvYWQ8VD4pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChwYXlsb2FkLnBhdGgsIHBheWxvYWQubW9kZWwsIHBheWxvYWQuaGVhZGVycywgcGF5bG9hZC5vcHRpb25zKTtcbiAgfVxuXG4gIEBDb21tYW5kKClcbiAgcG9zdEZvcm1VcmxFbmNvZGVkJChwYXlsb2FkOiBIdHRwUG9zdFBheWxvYWQ8VD4pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdEZvcm1VcmxFbmNvZGVkKHBheWxvYWQucGF0aCwgcGF5bG9hZC5tb2RlbCwgcGF5bG9hZC5oZWFkZXJzLCBwYXlsb2FkLm9wdGlvbnMpO1xuICB9XG5cbiAgQENvbW1hbmQoKVxuICBwdXQkKHBheWxvYWQ6IEh0dHBQdXRQYXlsb2FkPFQ+KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnB1dChwYXlsb2FkLnBhdGgsIHBheWxvYWQubW9kZWwsIHBheWxvYWQuaGVhZGVycywgcGF5bG9hZC5vcHRpb25zKTtcbiAgfVxuXG59XG4iXX0=