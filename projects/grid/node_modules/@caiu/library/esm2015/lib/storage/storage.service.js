/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { Store } from '@ngrx/store';
import { StorageActions } from './storage.actions';
import { ActionStore } from './storage.models';
import { STORE_KEY } from './storage.module';
import { build, inArray, filterState } from '../shared/utils';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "./storage.module";
export class StorageService {
    /**
     * @param {?} store
     * @param {?} storeKey
     */
    constructor(store, storeKey) {
        this.store = store;
        this.storeKey = storeKey;
        this.localStorageActions = [];
        this.sessionStorageActions = [];
        this.localStorageMapper = s => s;
        this.sessionStorageMapper = s => s;
    }
    /**
     * @return {?}
     */
    get localStore() {
        return localStorage.getItem(this.storeKey);
    }
    /**
     * @return {?}
     */
    get sessionStore() {
        return sessionStorage.getItem(this.storeKey);
    }
    /**
     * @return {?}
     */
    get storage() {
        const /** @type {?} */ localStore = this.localStore;
        const /** @type {?} */ sessionStore = this.sessionStore;
        return build(Storage, Object.assign({}, localStore, sessionStore), {
            localStore,
            sessionStore
        });
    }
    /**
     * Initialize the use of local storage and/or session storage
     * @param {?=} localStorageMapper Mapper function for mapping state to local store
     * @param {?=} sessionStorageMapper Mapper function for mapping state to session store
     * @param {?=} localStorageActions Actions after which to save to local storage
     * @param {?=} sessionStorageActions Actions after which to save to session storage
     * @return {?}
     */
    init(localStorageMapper = s => s, sessionStorageMapper = s => s, localStorageActions = [], sessionStorageActions = []) {
        const /** @type {?} */ localStore = this.initLocalStore(localStorageMapper, localStorageActions);
        const /** @type {?} */ sessionStore = this.initSessionStore(sessionStorageMapper, sessionStorageActions);
        this.store.dispatch(StorageActions.initStore(localStore, sessionStore));
    }
    /**
     * Initialize the use of local storage
     * @param {?=} localStorageMapper Mapper function for mapping state to local store
     * @param {?=} localStorageActions Actions after which to save to local storage
     * @return {?}
     */
    initLocalStore(localStorageMapper = s => s, localStorageActions = []) {
        this.localStorageMapper = localStorageMapper;
        this.localStorageActions = localStorageActions;
        const /** @type {?} */ ls = this.localStore;
        const /** @type {?} */ localStore = ls ? JSON.parse(ls) : {};
        return localStore;
    }
    /**
     * Initialize the use of session storage
     * @param {?=} sessionStorageMapper Mapper function for mapping state to session store
     * @param {?=} sessionStorageActions Actions after which to save to session storage
     * @return {?}
     */
    initSessionStore(sessionStorageMapper = s => s, sessionStorageActions = []) {
        this.sessionStorageMapper = sessionStorageMapper;
        this.sessionStorageActions = sessionStorageActions;
        const /** @type {?} */ ss = this.sessionStore;
        const /** @type {?} */ sessionStore = ss ? JSON.parse(ss) : {};
        return sessionStorage;
    }
    /**
     * @param {?} actionType
     * @return {?}
     */
    inLocalStorage(actionType) {
        return inArray(this.localStorageActions, actionType);
    }
    /**
     * @param {?} actionType
     * @return {?}
     */
    inSessionStorage(actionType) {
        return inArray(this.sessionStorageActions, actionType);
    }
    /**
     * Store state to local storage.
     * @param {?} state
     * @param {?} action
     * @return {?}
     */
    storeLocal(state, action) {
        try {
            // const filteredState = new ActionStore(action, this.filterState(Object.assign({}, state)));
            const /** @type {?} */ filteredState = Object.assign(filterState(new ActionStore(action)), filterState(Object.assign({}, this.localStorageMapper(state))));
            const /** @type {?} */ serializedState = JSON.stringify(filteredState);
            localStorage.removeItem(this.storeKey);
            localStorage.setItem(this.storeKey, serializedState);
        }
        catch (/** @type {?} */ err) {
            console.error(`ERROR SAVING LOCAL STATE!\nAction:\t${action.actionType}\n`, err);
        }
    }
    /**
     * Store state to session storage.
     * @param {?} state
     * @param {?} action
     * @return {?}
     */
    storeSession(state, action) {
        try {
            // const filteredState = new ActionStore(action, this.filterState(Object.assign({}, state)));
            // const filteredState = this.filterState(Object.assign({}, state));
            const /** @type {?} */ filteredState = Object.assign(filterState(new ActionStore(action)), filterState(Object.assign({}, this.sessionStorageMapper(state))));
            const /** @type {?} */ serializedState = JSON.stringify(filteredState);
            localStorage.removeItem(this.storeKey);
            sessionStorage.setItem(this.storeKey, serializedState);
        }
        catch (/** @type {?} */ err) {
            console.error(`ERROR SAVING SESSION STATE!\nAction:\t${action.actionType}\n`, err);
        }
    }
}
StorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
StorageService.ctorParameters = () => [
    { type: Store },
    { type: String, decorators: [{ type: Inject, args: [STORE_KEY,] }] }
];
/** @nocollapse */ StorageService.ngInjectableDef = i0.defineInjectable({ factory: function StorageService_Factory() { return new StorageService(i0.inject(i1.Store), i0.inject(i2.STORE_KEY)); }, token: StorageService, providedIn: "root" });
function StorageService_tsickle_Closure_declarations() {
    /** @type {?} */
    StorageService.prototype.localStorageActions;
    /** @type {?} */
    StorageService.prototype.sessionStorageActions;
    /** @type {?} */
    StorageService.prototype.localStorageMapper;
    /** @type {?} */
    StorageService.prototype.sessionStorageMapper;
    /** @type {?} */
    StorageService.prototype.store;
    /** @type {?} */
    StorageService.prototype.storeKey;
}

//# sourceMappingURL=data:application/json;base64,