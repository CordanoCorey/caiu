/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Effect, ofType, Actions } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { map, filter, withLatestFrom } from 'rxjs/operators';
import { StorageActions } from './storage.actions';
import { StorageService } from './storage.service';
import { toPayload } from '../shared/utils';
export class StorageEffects {
    /**
     * @param {?} actions$
     * @param {?} service
     * @param {?} state$
     */
    constructor(actions$, service, state$) {
        this.actions$ = actions$;
        this.service = service;
        this.state$ = state$;
        /**
         * Listens for dispatched actions, updates local storage in response.
         */
        this.onSyncLocalStorage = this.actions$.pipe(filter((action) => this.service.inLocalStorage(action.type)), map(action => ({
            type: StorageActions.UPDATE_LOCAL_STORAGE,
            payload: action
        })));
        /**
         * Listens for dispatched actions, updates session storage in response.
         */
        this.onSyncSessionStorage = this.actions$.pipe(filter((action) => this.service.inSessionStorage(action.type)), map(action => ({
            type: StorageActions.UPDATE_SESSION_STORAGE,
            payload: action
        })));
        /**
         * Stores state to local storage after each action.
         */
        this.onStoreLocal = this.actions$.pipe(ofType(StorageActions.UPDATE_LOCAL_STORAGE), map(toPayload), withLatestFrom(this.state$, (action, state) => {
            this.service.storeLocal(state, action);
        }));
        /**
         * Stores state to local storage after each action.
         */
        this.onStoreSession = this.actions$.pipe(ofType(StorageActions.UPDATE_SESSION_STORAGE), map(toPayload), withLatestFrom(this.state$, (action, state) => {
            this.service.storeSession(state, action);
        }));
    }
}
StorageEffects.decorators = [
    { type: Injectable },
];
/** @nocollapse */
StorageEffects.ctorParameters = () => [
    { type: Actions },
    { type: StorageService },
    { type: Store }
];
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Observable)
], StorageEffects.prototype, "onSyncLocalStorage", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Observable)
], StorageEffects.prototype, "onSyncSessionStorage", void 0);
tslib_1.__decorate([
    Effect({ dispatch: false }),
    tslib_1.__metadata("design:type", Observable)
], StorageEffects.prototype, "onStoreLocal", void 0);
tslib_1.__decorate([
    Effect({ dispatch: false }),
    tslib_1.__metadata("design:type", Observable)
], StorageEffects.prototype, "onStoreSession", void 0);
function StorageEffects_tsickle_Closure_declarations() {
    /** @type {?} */
    StorageEffects.prototype.actionTypes;
    /**
     * Listens for dispatched actions, updates local storage in response.
     * @type {?}
     */
    StorageEffects.prototype.onSyncLocalStorage;
    /**
     * Listens for dispatched actions, updates session storage in response.
     * @type {?}
     */
    StorageEffects.prototype.onSyncSessionStorage;
    /**
     * Stores state to local storage after each action.
     * @type {?}
     */
    StorageEffects.prototype.onStoreLocal;
    /**
     * Stores state to local storage after each action.
     * @type {?}
     */
    StorageEffects.prototype.onStoreSession;
    /** @type {?} */
    StorageEffects.prototype.actions$;
    /** @type {?} */
    StorageEffects.prototype.service;
    /** @type {?} */
    StorageEffects.prototype.state$;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5lZmZlY3RzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNhaXUvbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9zdG9yYWdlL3N0b3JhZ2UuZWZmZWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUk1QyxNQUFNOzs7Ozs7SUFnREYsWUFDWSxVQUNBLFNBQ0E7UUFGQSxhQUFRLEdBQVIsUUFBUTtRQUNSLFlBQU8sR0FBUCxPQUFPO1FBQ1AsV0FBTSxHQUFOLE1BQU07Ozs7a0NBNUNpQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDakUsTUFBTSxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDcEUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNYLElBQUksRUFBRSxjQUFjLENBQUMsb0JBQW9CO1lBQ3pDLE9BQU8sRUFBRSxNQUFNO1NBQ2xCLENBQUMsQ0FBQyxDQUNOOzs7O29DQUtvRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDbkUsTUFBTSxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUN0RSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ1gsSUFBSSxFQUFFLGNBQWMsQ0FBQyxzQkFBc0I7WUFDM0MsT0FBTyxFQUFFLE1BQU07U0FDbEIsQ0FBQyxDQUFDLENBQ047Ozs7NEJBSzZELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUM1RSxNQUFNLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFDLEVBQzNDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFDZCxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQWMsRUFBRSxLQUFVLEVBQUUsRUFBRTtZQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDMUMsQ0FBQyxDQUNMOzs7OzhCQUsrRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDOUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxFQUM3QyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQ2QsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFjLEVBQUUsS0FBVSxFQUFFLEVBQUU7WUFDdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQzVDLENBQUMsQ0FDTDtLQU1JOzs7WUFyRFIsVUFBVTs7OztZQVhjLE9BQU87WUFNdkIsY0FBYztZQUxkLEtBQUs7OztJQWtCVCxNQUFNLEVBQUU7c0NBQXFCLFVBQVU7OztJQVd2QyxNQUFNLEVBQUU7c0NBQXVCLFVBQVU7OztJQVd6QyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7c0NBQWUsVUFBVTs7O0lBV3BELE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQztzQ0FBaUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRWZmZWN0LCBvZlR5cGUsIEFjdGlvbnMgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcclxuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCBmaWx0ZXIsIHdpdGhMYXRlc3RGcm9tIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgU3RvcmFnZUFjdGlvbnMgfSBmcm9tICcuL3N0b3JhZ2UuYWN0aW9ucyc7XHJcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9zdG9yYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuLi9zdG9yZS9tb2RlbHMnO1xyXG5pbXBvcnQgeyB0b1BheWxvYWQgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMnO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFN0b3JhZ2VFZmZlY3RzIHtcclxuXHJcbiAgICBhY3Rpb25UeXBlczogc3RyaW5nW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMaXN0ZW5zIGZvciBkaXNwYXRjaGVkIGFjdGlvbnMsIHVwZGF0ZXMgbG9jYWwgc3RvcmFnZSBpbiByZXNwb25zZS5cclxuICAgICAqL1xyXG4gICAgQEVmZmVjdCgpIG9uU3luY0xvY2FsU3RvcmFnZTogT2JzZXJ2YWJsZTxBY3Rpb24+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxyXG4gICAgICAgIGZpbHRlcigoYWN0aW9uOiBBY3Rpb24pID0+IHRoaXMuc2VydmljZS5pbkxvY2FsU3RvcmFnZShhY3Rpb24udHlwZSkpLFxyXG4gICAgICAgIG1hcChhY3Rpb24gPT4gKHtcclxuICAgICAgICAgICAgdHlwZTogU3RvcmFnZUFjdGlvbnMuVVBEQVRFX0xPQ0FMX1NUT1JBR0UsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IGFjdGlvblxyXG4gICAgICAgIH0pKVxyXG4gICAgKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExpc3RlbnMgZm9yIGRpc3BhdGNoZWQgYWN0aW9ucywgdXBkYXRlcyBzZXNzaW9uIHN0b3JhZ2UgaW4gcmVzcG9uc2UuXHJcbiAgICAgKi9cclxuICAgIEBFZmZlY3QoKSBvblN5bmNTZXNzaW9uU3RvcmFnZTogT2JzZXJ2YWJsZTxBY3Rpb24+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxyXG4gICAgICAgIGZpbHRlcigoYWN0aW9uOiBBY3Rpb24pID0+IHRoaXMuc2VydmljZS5pblNlc3Npb25TdG9yYWdlKGFjdGlvbi50eXBlKSksXHJcbiAgICAgICAgbWFwKGFjdGlvbiA9PiAoe1xyXG4gICAgICAgICAgICB0eXBlOiBTdG9yYWdlQWN0aW9ucy5VUERBVEVfU0VTU0lPTl9TVE9SQUdFLFxyXG4gICAgICAgICAgICBwYXlsb2FkOiBhY3Rpb25cclxuICAgICAgICB9KSlcclxuICAgICk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZXMgc3RhdGUgdG8gbG9jYWwgc3RvcmFnZSBhZnRlciBlYWNoIGFjdGlvbi5cclxuICAgICAqL1xyXG4gICAgQEVmZmVjdCh7IGRpc3BhdGNoOiBmYWxzZSB9KSBvblN0b3JlTG9jYWw6IE9ic2VydmFibGU8dm9pZD4gPSB0aGlzLmFjdGlvbnMkLnBpcGUoXHJcbiAgICAgICAgb2ZUeXBlKFN0b3JhZ2VBY3Rpb25zLlVQREFURV9MT0NBTF9TVE9SQUdFKSxcclxuICAgICAgICBtYXAodG9QYXlsb2FkKSxcclxuICAgICAgICB3aXRoTGF0ZXN0RnJvbSh0aGlzLnN0YXRlJCwgKGFjdGlvbjogQWN0aW9uLCBzdGF0ZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VydmljZS5zdG9yZUxvY2FsKHN0YXRlLCBhY3Rpb24pO1xyXG4gICAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RvcmVzIHN0YXRlIHRvIGxvY2FsIHN0b3JhZ2UgYWZ0ZXIgZWFjaCBhY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIEBFZmZlY3QoeyBkaXNwYXRjaDogZmFsc2UgfSkgb25TdG9yZVNlc3Npb246IE9ic2VydmFibGU8dm9pZD4gPSB0aGlzLmFjdGlvbnMkLnBpcGUoXHJcbiAgICAgICAgb2ZUeXBlKFN0b3JhZ2VBY3Rpb25zLlVQREFURV9TRVNTSU9OX1NUT1JBR0UpLFxyXG4gICAgICAgIG1hcCh0b1BheWxvYWQpLFxyXG4gICAgICAgIHdpdGhMYXRlc3RGcm9tKHRoaXMuc3RhdGUkLCAoYWN0aW9uOiBBY3Rpb24sIHN0YXRlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLnN0b3JlU2Vzc2lvbihzdGF0ZSwgYWN0aW9uKTtcclxuICAgICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zLFxyXG4gICAgICAgIHByaXZhdGUgc2VydmljZTogU3RvcmFnZVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0ZSQ6IFN0b3JlPGFueT5cclxuICAgICkgeyB9XHJcblxyXG59XHJcbiJdfQ==