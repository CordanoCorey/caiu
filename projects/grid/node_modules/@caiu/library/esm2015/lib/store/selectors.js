/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { of } from 'rxjs';
import { map, distinctUntilChanged } from 'rxjs/operators';
import { Token } from '../shared/token';
import { build } from '../shared/utils';
import { Window } from '../shared/window';
/**
 * @param {?} store
 * @return {?}
 */
export function allSelector(store) {
    return store.pipe(map(x => x));
}
/**
 * @param {?} store
 * @return {?}
 */
export function emptySelector(store) {
    return of({});
}
/**
 * @param {?} store
 * @return {?}
 */
export function currentUserSelector(store) {
    return store.select('currentUser');
}
/**
 * @param {?} store
 * @return {?}
 */
export function authenticatedSelector(store) {
    return currentUserSelector(store).pipe(map(user => user.authenticated), distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
export function configSelector(store) {
    return store.select('config');
}
/**
 * @param {?} store
 * @return {?}
 */
export function windowSelector(store) {
    return store.select('window').pipe(map(w => build(Window, w)));
}
/**
 * @param {?} store
 * @return {?}
 */
export function windowHeightSelector(store) {
    return windowSelector(store).pipe(map(window => window.windowHeight), distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
export function windowWidthSelector(store) {
    return windowSelector(store).pipe(map(window => window.windowWidth), distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
export function containerHeightSelector(store) {
    return windowHeightSelector(store).pipe(map(h => h === 0 ? 700 : h));
}
/**
 * @param {?} store
 * @return {?}
 */
export function containerWidthSelector(store) {
    return windowWidthSelector(store).pipe(map(w => w === 0 ? 1200 : w));
}
/**
 * @param {?} store
 * @return {?}
 */
export function contentHeightSelector(store) {
    return windowHeightSelector(store).pipe(map(h => h === 0 ? 700 : h));
}
/**
 * @param {?} store
 * @return {?}
 */
export function contentWidthSelector(store) {
    return windowWidthSelector(store).pipe(map(w => w === 0 ? 1200 : w));
}
/**
 * @param {?} store
 * @return {?}
 */
export function sidenavOpenedSelector(store) {
    return (/** @type {?} */ (store.select('sidenav'))).pipe(distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
export function apiBaseUrlSelector(store) {
    return configSelector(store).pipe(map(config => config.apiBaseUrl));
}
/**
 * @param {?} store
 * @return {?}
 */
export function authTokenSelector(store) {
    return currentUserSelector(store).pipe(map(user => {
        const /** @type {?} */ token = user && user.token ? build(Token, user.token) : new Token();
        return token.toString();
    }));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNhaXUvbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9zdG9yZS9zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzNELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7OztBQUUxQyxNQUFNLHNCQUFzQixLQUFpQjtJQUN6QyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDZCxDQUFDO0NBQ0w7Ozs7O0FBRUQsTUFBTSx3QkFBd0IsS0FBaUI7SUFDM0MsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNqQjs7Ozs7QUFFRCxNQUFNLDhCQUE4QixLQUFpQjtJQUNqRCxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUN0Qzs7Ozs7QUFFRCxNQUFNLGdDQUFnQyxLQUFpQjtJQUNuRCxNQUFNLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQy9CLG9CQUFvQixFQUFFLENBQ3pCLENBQUM7Q0FDTDs7Ozs7QUFFRCxNQUFNLHlCQUF5QixLQUFpQjtJQUM1QyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNqQzs7Ozs7QUFFRCxNQUFNLHlC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LENBQUM7Q0FDTCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vc2hhcmVkL2NvbmZpZyc7XHJcbmltcG9ydCB7IFRva2VuIH0gZnJvbSAnLi4vc2hhcmVkL3Rva2VuJztcclxuaW1wb3J0IHsgQ3VycmVudFVzZXIgfSBmcm9tICcuLi9zaGFyZWQvdXNlcic7XHJcbmltcG9ydCB7IGJ1aWxkIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzJztcclxuaW1wb3J0IHsgV2luZG93IH0gZnJvbSAnLi4vc2hhcmVkL3dpbmRvdyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWxsU2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHN0b3JlLnBpcGUoXHJcbiAgICAgICAgbWFwKHggPT4geClcclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlbXB0eVNlbGVjdG9yKHN0b3JlOiBTdG9yZTxhbnk+KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiBvZih7fSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjdXJyZW50VXNlclNlbGVjdG9yKHN0b3JlOiBTdG9yZTxhbnk+KTogT2JzZXJ2YWJsZTxDdXJyZW50VXNlcj4ge1xyXG4gICAgcmV0dXJuIHN0b3JlLnNlbGVjdCgnY3VycmVudFVzZXInKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWRTZWxlY3RvcihzdG9yZTogU3RvcmU8YW55Pik6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuIGN1cnJlbnRVc2VyU2VsZWN0b3Ioc3RvcmUpLnBpcGUoXHJcbiAgICAgICAgbWFwKHVzZXIgPT4gdXNlci5hdXRoZW50aWNhdGVkKSxcclxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29uZmlnU2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4pOiBPYnNlcnZhYmxlPENvbmZpZz4ge1xyXG4gICAgcmV0dXJuIHN0b3JlLnNlbGVjdCgnY29uZmlnJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3aW5kb3dTZWxlY3RvcihzdG9yZTogU3RvcmU8YW55Pik6IE9ic2VydmFibGU8V2luZG93PiB7XHJcbiAgICByZXR1cm4gc3RvcmUuc2VsZWN0KCd3aW5kb3cnKS5waXBlKFxyXG4gICAgICAgIG1hcCh3ID0+IGJ1aWxkKFdpbmRvdywgdykpXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd2luZG93SGVpZ2h0U2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4pOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuIHdpbmRvd1NlbGVjdG9yKHN0b3JlKS5waXBlKFxyXG4gICAgICAgIG1hcCh3aW5kb3cgPT4gd2luZG93LndpbmRvd0hlaWdodCksXHJcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvd1dpZHRoU2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4pOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuIHdpbmRvd1NlbGVjdG9yKHN0b3JlKS5waXBlKFxyXG4gICAgICAgIG1hcCh3aW5kb3cgPT4gd2luZG93LndpbmRvd1dpZHRoKSxcclxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbmVySGVpZ2h0U2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4pOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuIHdpbmRvd0hlaWdodFNlbGVjdG9yKHN0b3JlKS5waXBlKFxyXG4gICAgICAgIG1hcChoID0+IGggPT09IDAgPyA3MDAgOiBoKVxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5lcldpZHRoU2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4pOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuIHdpbmRvd1dpZHRoU2VsZWN0b3Ioc3RvcmUpLnBpcGUoXHJcbiAgICAgICAgbWFwKHcgPT4gdyA9PT0gMCA/IDEyMDAgOiB3KVxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRlbnRIZWlnaHRTZWxlY3RvcihzdG9yZTogU3RvcmU8YW55Pik6IE9ic2VydmFibGU8bnVtYmVyPiB7XHJcbiAgICByZXR1cm4gd2luZG93SGVpZ2h0U2VsZWN0b3Ioc3RvcmUpLnBpcGUoXHJcbiAgICAgICAgbWFwKGggPT4gaCA9PT0gMCA/IDcwMCA6IGgpXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29udGVudFdpZHRoU2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4pOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuIHdpbmRvd1dpZHRoU2VsZWN0b3Ioc3RvcmUpLnBpcGUoXHJcbiAgICAgICAgbWFwKHcgPT4gdyA9PT0gMCA/IDEyMDAgOiB3KVxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNpZGVuYXZPcGVuZWRTZWxlY3RvcihzdG9yZTogU3RvcmU8YW55Pik6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuICg8T2JzZXJ2YWJsZTxib29sZWFuPj5zdG9yZS5zZWxlY3QoJ3NpZGVuYXYnKSkucGlwZShcclxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXBpQmFzZVVybFNlbGVjdG9yKHN0b3JlOiBTdG9yZTxhbnk+KTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiBjb25maWdTZWxlY3RvcihzdG9yZSkucGlwZShcclxuICAgICAgICBtYXAoY29uZmlnID0+IGNvbmZpZy5hcGlCYXNlVXJsKVxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGF1dGhUb2tlblNlbGVjdG9yKHN0b3JlOiBTdG9yZTxhbnk+KTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiBjdXJyZW50VXNlclNlbGVjdG9yKHN0b3JlKS5waXBlKFxyXG4gICAgICAgIG1hcCh1c2VyID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdG9rZW46IFRva2VuID0gdXNlciAmJiB1c2VyLnRva2VuID8gYnVpbGQoVG9rZW4sIHVzZXIudG9rZW4pIDogbmV3IFRva2VuKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0b2tlbi50b1N0cmluZygpO1xyXG4gICAgICAgIH0pXHJcbiAgICApO1xyXG59XHJcbiJdfQ==