/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Collection } from './collection';
import { DateHelper } from './date';
import { build } from './utils';
export class Question {
    constructor() {
        this.question = '';
        this.title = '';
    }
}
function Question_tsickle_Closure_declarations() {
    /** @type {?} */
    Question.prototype.answer;
    /** @type {?} */
    Question.prototype.lookup;
    /** @type {?} */
    Question.prototype.key;
    /** @type {?} */
    Question.prototype.question;
    /** @type {?} */
    Question.prototype.title;
    /** @type {?} */
    Question.prototype.type;
}
export class Questions extends Collection {
    /**
     * @param {?} questions
     * @param {?} answers
     * @return {?}
     */
    static AnswerQuestions(questions, answers) {
        return questions.map(question => Questions.AnswerQuestion(question, answers[question.key]));
    }
    /**
     * @param {?} question
     * @param {?} answerData
     * @return {?}
     */
    static AnswerQuestion(question, answerData) {
        let /** @type {?} */ answer = answerData;
        switch (question.type) {
            case 'date':
                answer = answerData;
                break;
            case 'monthyear':
                answer = DateHelper.ToMonthYearName(answerData);
                break;
            case 'yesno':
                answer = answerData ? 'Yes' : 'No';
                break;
        }
        return build(Question, question, { answer });
    }
    /**
     * @param {?} answers
     * @return {?}
     */
    answerQuestions(answers) {
        return Questions.AnswerQuestions(this.toArray(), answers);
    }
}
/**
 * @abstract
 */
export class QuestionsModel {
    constructor() {
        this.ignore = ['isAdd', 'questions'];
    }
    /**
     * @return {?}
     */
    get answers() {
        return Questions.AnswerQuestions(this.questions, this);
    }
}
function QuestionsModel_tsickle_Closure_declarations() {
    /** @type {?} */
    QuestionsModel.prototype.ignore;
    /** @type {?} */
    QuestionsModel.prototype.questions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL3NoYXJlZC9xdWVzdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMxQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFaEMsTUFBTTs7d0JBSVMsRUFBRTtxQkFDTCxFQUFFOztDQUViOzs7Ozs7Ozs7Ozs7Ozs7QUFJRCxNQUFNLGdCQUFpQixTQUFRLFVBQW9COzs7Ozs7SUFFL0MsTUFBTSxDQUFDLGVBQWUsQ0FBQyxTQUFxQixFQUFFLE9BQVk7UUFDdEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMvRjs7Ozs7O0lBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFrQixFQUFFLFVBQWU7UUFDckQscUJBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQztRQUN4QixNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNwQixLQUFLLE1BQU07Z0JBQ1AsTUFBTSxHQUFHLFVBQVUsQ0FBQztnQkFDcEIsS0FBSyxDQUFDO1lBQ1YsS0FBSyxXQUFXO2dCQUNaLE1BQU0sR0FBRyxVQUFVLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNoRCxLQUFLLENBQUM7WUFDVixLQUFLLE9BQU87Z0JBQ1IsTUFBTSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ25DLEtBQUssQ0FBQztTQUNiO1FBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUNoRDs7Ozs7SUFFRCxlQUFlLENBQUMsT0FBWTtRQUN4QixNQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDN0Q7Q0FDSjs7OztBQUVELE1BQU07O3NCQUNPLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQzs7Ozs7SUFHL0IsSUFBSSxPQUFPO1FBQ1AsTUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUMxRDtDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4vY29sbGVjdGlvbic7XHJcbmltcG9ydCB7IERhdGVIZWxwZXIgfSBmcm9tICcuL2RhdGUnO1xyXG5pbXBvcnQgeyBidWlsZCB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFF1ZXN0aW9uIHtcclxuICAgIGFuc3dlcj86IGFueTtcclxuICAgIGxvb2t1cD86IGFueTtcclxuICAgIGtleTogc3RyaW5nIHwgbnVtYmVyO1xyXG4gICAgcXVlc3Rpb24gPSAnJztcclxuICAgIHRpdGxlPz0gJyc7XHJcbiAgICB0eXBlPzogc3RyaW5nIHwgQW5zd2VyVHlwZTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQW5zd2VyVHlwZSA9ICdkYXRlJyB8ICdtb250aHllYXInIHwgJ3llc25vJztcclxuXHJcbmV4cG9ydCBjbGFzcyBRdWVzdGlvbnMgZXh0ZW5kcyBDb2xsZWN0aW9uPFF1ZXN0aW9uPiB7XHJcblxyXG4gICAgc3RhdGljIEFuc3dlclF1ZXN0aW9ucyhxdWVzdGlvbnM6IFF1ZXN0aW9uW10sIGFuc3dlcnM6IGFueSk6IFF1ZXN0aW9uW10ge1xyXG4gICAgICAgIHJldHVybiBxdWVzdGlvbnMubWFwKHF1ZXN0aW9uID0+IFF1ZXN0aW9ucy5BbnN3ZXJRdWVzdGlvbihxdWVzdGlvbiwgYW5zd2Vyc1txdWVzdGlvbi5rZXldKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEFuc3dlclF1ZXN0aW9uKHF1ZXN0aW9uOiBRdWVzdGlvbiwgYW5zd2VyRGF0YTogYW55KTogUXVlc3Rpb24ge1xyXG4gICAgICAgIGxldCBhbnN3ZXIgPSBhbnN3ZXJEYXRhO1xyXG4gICAgICAgIHN3aXRjaCAocXVlc3Rpb24udHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcclxuICAgICAgICAgICAgICAgIGFuc3dlciA9IGFuc3dlckRhdGE7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbW9udGh5ZWFyJzpcclxuICAgICAgICAgICAgICAgIGFuc3dlciA9IERhdGVIZWxwZXIuVG9Nb250aFllYXJOYW1lKGFuc3dlckRhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3llc25vJzpcclxuICAgICAgICAgICAgICAgIGFuc3dlciA9IGFuc3dlckRhdGEgPyAnWWVzJyA6ICdObyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkKFF1ZXN0aW9uLCBxdWVzdGlvbiwgeyBhbnN3ZXIgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYW5zd2VyUXVlc3Rpb25zKGFuc3dlcnM6IGFueSk6IFF1ZXN0aW9uW10ge1xyXG4gICAgICAgIHJldHVybiBRdWVzdGlvbnMuQW5zd2VyUXVlc3Rpb25zKHRoaXMudG9BcnJheSgpLCBhbnN3ZXJzKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFF1ZXN0aW9uc01vZGVsIHtcclxuICAgIGlnbm9yZSA9IFsnaXNBZGQnLCAncXVlc3Rpb25zJ107XHJcbiAgICBhYnN0cmFjdCBxdWVzdGlvbnM6IFF1ZXN0aW9uW107XHJcblxyXG4gICAgZ2V0IGFuc3dlcnMoKTogUXVlc3Rpb25bXSB7XHJcbiAgICAgICAgcmV0dXJuIFF1ZXN0aW9ucy5BbnN3ZXJRdWVzdGlvbnModGhpcy5xdWVzdGlvbnMsIHRoaXMpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==