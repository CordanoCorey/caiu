/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { build } from './utils';
/**
 * @template T
 */
export class Permutation {
    /**
     * @param {?} order
     */
    constructor(order) {
        this.order = order;
        this._timestamp = new Date();
    }
    /**
     * @return {?}
     */
    get ranks() {
        return this.order.sort((a, b) => a.order - b.order)
            .map((x, index) => Object.assign(/** @type {?} */ ({}), x, { rank: index + 1 }));
    }
    /**
     * @return {?}
     */
    get timestamp() {
        return this._timestamp;
    }
}
function Permutation_tsickle_Closure_declarations() {
    /** @type {?} */
    Permutation.prototype._timestamp;
    /** @type {?} */
    Permutation.prototype.order;
}
/**
 * @template T
 */
export class OrderedItem {
    /**
     * @param {?} item
     */
    constructor(item) {
        this.item = item;
    }
}
function OrderedItem_tsickle_Closure_declarations() {
    /** @type {?} */
    OrderedItem.prototype.id;
    /** @type {?} */
    OrderedItem.prototype.order;
    /** @type {?} */
    OrderedItem.prototype.rank;
    /** @type {?} */
    OrderedItem.prototype.item;
}
/**
 * @template T
 */
export class Ordering {
    /**
     * @param {?} _items
     * @param {?} ctor
     * @param {?} orderKey
     * @param {?=} idKey
     */
    constructor(_items, ctor, orderKey, idKey = 'id') {
        this._items = _items;
        this.ctor = ctor;
        this.orderKey = orderKey;
        this.idKey = idKey;
        this._history = [];
    }
    /**
     * @return {?}
     */
    get count() {
        return this.items.length;
    }
    /**
     * @return {?}
     */
    get history() {
        return this._history;
    }
    /**
     * @return {?}
     */
    get instance() {
        return new this.ctor();
    }
    /**
     * @return {?}
     */
    get items() {
        return this._items.sort((a, b) => this.getItemOrder(a) - this.getItemOrder(b));
    }
    /**
     * @return {?}
     */
    get maxIndex() {
        return this.count === 0 ? 0 : Math.max(...this.order.map(x => x.order));
    }
    /**
     * @return {?}
     */
    get order() {
        return this.permutation.ranks;
    }
    /**
     * @return {?}
     */
    get permutation() {
        return new Permutation(this.items.map(item => /** @type {?} */ ({
            id: this.getItemId(item),
            order: this.getItemOrder(item)
        })));
    }
    /**
     * @return {?}
     */
    get nextPosition() {
        return this.maxIndex + 1;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    addItem(item) {
        return this.addItemAtPosition(item, this.nextPosition);
    }
    /**
     * @param {?} item
     * @param {?} pos
     * @return {?}
     */
    addItemAtPosition(item, pos) {
        const /** @type {?} */ newItemId = this.getItemId(item);
        return [...this.items, build(this.ctor, item, { order: pos })]
            .map(x => {
            const /** @type {?} */ order = this.getItemOrder(x);
            const /** @type {?} */ id = this.getItemId(x);
            return (order <= pos || id === newItemId) ? x : build(this.ctor, x, { order: order + 1 });
        });
    }
    /**
     * @param {?=} items
     * @return {?}
     */
    archive(items) {
        const /** @type {?} */ permutation = items ? this.getPermutation(items) : this.permutation;
        this._history = [...this._history, permutation];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    getItemId(item) {
        return item[this.idKey];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    getItemOrder(item) {
        return item[this.orderKey];
    }
    /**
     * @param {?} items
     * @return {?}
     */
    getPermutation(items) {
        return new Permutation(items.map(item => /** @type {?} */ ({
            id: this.getItemId(item),
            order: this.getItemOrder(item)
        })));
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    move(item, to) {
        const /** @type {?} */ from = this.getItemOrder(item);
        const /** @type {?} */ itemId = this.getItemId(item);
        if (to === from) {
            return [...this.items];
        }
        else if (to < from) {
            return this.items.map(x => {
                const /** @type {?} */ order = this.getItemOrder(x);
                const /** @type {?} */ id = this.getItemId(x);
                return id === itemId ? build(this.ctor, x, { order: to })
                    : (order < to || order > from) ? x : build(this.ctor, x, { order: order + 1 });
            });
        }
        else {
            // to > from
            return this.items.map(x => {
                const /** @type {?} */ order = this.getItemOrder(x);
                const /** @type {?} */ id = this.getItemId(x);
                return id === itemId ? build(this.ctor, x, { order: to })
                    : (order < from || order > to) ? x : build(this.ctor, x, { order: order - 1 });
            });
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    moveDown(item) {
        return this.move(item, this.getItemOrder(item) + 1);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    moveUp(item) {
        return this.move(item, this.getItemOrder(item) - 1);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    removeItem(item) {
        return this.removeItemAtPosition(this.getItemOrder(item));
    }
    /**
     * @param {?} pos
     * @return {?}
     */
    removeItemAtPosition(pos) {
        return this.items.filter(item => this.getItemOrder(item) !== pos)
            .map(x => {
            const /** @type {?} */ order = this.getItemOrder(x);
            return order < pos ? x : build(this.ctor, x, { order: order - 1 });
        });
    }
    /**
     * @param {?} items
     * @return {?}
     */
    updateItems(items) {
        this.archive();
        this._items = items;
    }
}
function Ordering_tsickle_Closure_declarations() {
    /** @type {?} */
    Ordering.prototype._history;
    /** @type {?} */
    Ordering.prototype._items;
    /** @type {?} */
    Ordering.prototype.ctor;
    /** @type {?} */
    Ordering.prototype.orderKey;
    /** @type {?} */
    Ordering.prototype.idKey;
}

//# sourceMappingURL=data:application/json;base64,