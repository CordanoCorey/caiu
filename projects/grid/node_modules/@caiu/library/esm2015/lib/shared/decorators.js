/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { BaseEntity } from './base-entity';
export const /** @type {?} */ ActionCreator = (actionType) => {
    return (target, propertySignature) => {
        const /** @type {?} */ method = target[propertySignature];
        const /** @type {?} */ decoratedMethod = function () {
            const /** @type {?} */ $this = this;
            const /** @type {?} */ action = method.apply($this, arguments);
            action.actionType = actionType;
            return action;
        };
        target[propertySignature] = decoratedMethod;
        return target;
    };
};
export const /** @type {?} */ ActionType = () => {
    return (target, propertySignature) => {
        return target;
    };
};
/**
 * Class Decorator Factory
 * Decorates a class.
 */
export const /** @type {?} */ Class = (metadata) => {
    const /** @type {?} */ classDecorator = (target) => {
        return target;
    };
    return classDecorator;
};
export const /** @type {?} */ Command = () => {
    return (target, propertySignature) => {
        return target;
    };
};
export const /** @type {?} */ Dispatcher = () => {
    return (target, propertySignature) => {
        return target;
    };
};
/**
 * Decorates a class with properties from BaseEntity
 */
export const /** @type {?} */ Entity = (metadata) => {
    /**
     * @template TFunction
     * @param {?} target
     * @return {?}
     */
    function classDecorator(target) {
        const /** @type {?} */ ctor = function () {
            Object.assign(this, new BaseEntity(), { metadata: metadata || {} });
        };
        ctor.prototype = Object.create(target.prototype);
        ctor.prototype.constructor = target;
        return /** @type {?} */ (ctor);
    }
    ;
    return classDecorator;
};
export const /** @type {?} */ EventHandler = () => {
    return (target, propertySignature) => {
        return target;
    };
};
export const /** @type {?} */ LifecycleHook = () => {
    return (target, propertySignature) => {
        return target;
    };
};
/**
 * Method Decorator Factory
 * Decorates a method.
 */
export const /** @type {?} */ Method = (metadata) => {
    const /** @type {?} */ methodDecorator = (target, propertySignature, descriptor) => {
        return target;
    };
    return methodDecorator;
};
/**
 * Parameter Decorator Factory
 * Decorates a parameter.
 */
export const /** @type {?} */ Parameter = (metadata) => {
    const /** @type {?} */ parameterDecorator = (target, propertySignature, parameterIndex) => {
        return target;
    };
    return parameterDecorator;
};
/**
 * Property Decorator Factory
 * Decorates a Property.
 */
export const /** @type {?} */ Property = (metadata) => {
    const /** @type {?} */ propertyDecorator = (target, propertySignature) => {
        if (!target.metadata) {
            target.metadata = {};
        }
        target.metadata[propertySignature] = Object.assign(metadata, { propertyName: propertySignature });
        return target;
    };
    return propertyDecorator;
};
/**
 * Static Method Decorator Factory
 * Decorates a static method.
 */
export const /** @type {?} */ StaticMethod = (metadata) => {
    const /** @type {?} */ staticMethodDecorator = (target, propertySignature) => {
        return target;
    };
    return staticMethodDecorator;
};
/**
 *  Static Property Decorator Factory
 * Decorates a static property.
 */
export const /** @type {?} */ StaticProperty = (metadata) => {
    const /** @type {?} */ staticPropertyDecorator = (target, propertySignature) => {
        return target;
    };
    return staticPropertyDecorator;
};

//# sourceMappingURL=data:application/json;base64,