/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { build, toInt } from './utils';
export class DateRange {
    constructor() {
        this.startDate = new Date();
        this.endDate = new Date();
    }
}
function DateRange_tsickle_Closure_declarations() {
    /** @type {?} */
    DateRange.prototype.startDate;
    /** @type {?} */
    DateRange.prototype.endDate;
}
export class DateHelper {
    /**
     * @param {?} startDate
     * @param {?} startHours
     * @param {?} startMinutes
     * @param {?} startMeridian
     * @return {?}
     */
    static BuildStartTime(startDate, startHours, startMinutes, startMeridian) {
        const /** @type {?} */ startTime = new Date(startDate);
        const /** @type {?} */ hours = startMeridian === 'AM' ? startHours : startHours + 12;
        startTime.setHours(hours);
        startTime.setMinutes(startMinutes);
        return startTime;
    }
    /**
     * @param {?} startTime
     * @param {?} dHours
     * @param {?} dMinutes
     * @return {?}
     */
    static BuildEndTime(startTime, dHours, dMinutes) {
        const /** @type {?} */ endTime = new Date(startTime);
        endTime.setHours(endTime.getHours() + dHours);
        endTime.setMinutes(endTime.getMinutes() + dMinutes);
        return endTime;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static FormatDate(date) {
        const /** @type {?} */ d = new Date(date);
        const /** @type {?} */ month = '' + (d.getMonth() + 1);
        const /** @type {?} */ day = '' + d.getDate();
        const /** @type {?} */ year = d.getFullYear();
        return month && day && year ? [month, day, year].join('/') : null;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static FormatDateDashes(date) {
        const /** @type {?} */ d = new Date(date);
        let /** @type {?} */ month = '' + (d.getMonth() + 1);
        let /** @type {?} */ day = '' + d.getDate();
        const /** @type {?} */ year = d.getFullYear();
        if (month.length < 2) {
            month = '0' + month;
        }
        if (day.length < 2) {
            day = '0' + day;
        }
        return [year, month, day].join('-');
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static FormatDateSlashes(date) {
        const /** @type {?} */ d = new Date(date);
        let /** @type {?} */ month = '' + (d.getMonth() + 1);
        let /** @type {?} */ day = '' + d.getDate();
        const /** @type {?} */ year = d.getFullYear();
        if (month.length < 2) {
            month = '0' + month;
        }
        if (day.length < 2) {
            day = '0' + day;
        }
        return [month, day, year].join('/');
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static TimeAgo(date) {
        if (!date) {
            return '';
        }
        const /** @type {?} */ seconds = Math.floor(((new Date()).getTime() - (new Date(date)).getTime()) / 1000);
        let /** @type {?} */ interval = Math.floor(seconds / 31536000);
        if (interval > 1) {
            return interval + ' years';
        }
        interval = Math.floor(seconds / 2592000);
        if (interval > 1) {
            return interval + ' months';
        }
        interval = Math.floor(seconds / 86400);
        if (interval > 1) {
            return interval + ' days';
        }
        interval = Math.floor(seconds / 3600);
        if (interval > 1) {
            return interval + ' hours';
        }
        interval = Math.floor(seconds / 60);
        if (interval > 1) {
            return interval + ' minutes';
        }
        return Math.floor(seconds) + ' seconds';
    }
    /**
     * @param {?} d
     * @return {?}
     */
    static ToMonthName(d) {
        const /** @type {?} */ date = new Date(d);
        return DateHelper.MonthNames[date.getMonth()];
    }
    /**
     * @param {?} d
     * @return {?}
     */
    static ToMonthNumber(d) {
        const /** @type {?} */ date = new Date(d);
        return date.getMonth() + 1;
    }
    /**
     * @param {?} monthYear
     * @return {?}
     */
    static ToMonthNumberFromMonthYear(monthYear) {
        const /** @type {?} */ month = monthYear.substr(monthYear.length - 2);
        return toInt(month) - 1;
    }
    /**
     * @param {?} monthYear
     * @return {?}
     */
    static ToMonthNumberFromMonthYearName(monthYear) {
        const /** @type {?} */ parts = monthYear.split(/\s*,\s*/);
        const /** @type {?} */ month = DateHelper.MonthNumbers[parts[0]];
        return month;
    }
    /**
     * @param {?} d
     * @return {?}
     */
    static ToMonthYear(d) {
        const /** @type {?} */ date = new Date(d);
        const /** @type {?} */ monthNumber = DateHelper.ToMonthNumber(date);
        const /** @type {?} */ month = monthNumber < 10 ? `0${monthNumber}` : monthNumber;
        return `${date.getFullYear()}-${month}`;
    }
    /**
     * @param {?} d
     * @return {?}
     */
    static ToMonthYearName(d) {
        const /** @type {?} */ date = new Date(d);
        const /** @type {?} */ month = DateHelper.ToMonthName(date);
        const /** @type {?} */ year = date.getFullYear();
        return month && year ? `${month} ${year}` : '';
    }
    /**
     * @param {?} monthYear
     * @return {?}
     */
    static ToYearNumberFromMonthYear(monthYear) {
        const /** @type {?} */ year = monthYear.substring(0, 4);
        return toInt(year);
    }
    /**
     * @param {?} monthYear
     * @return {?}
     */
    static FromMonthYear(monthYear) {
        const /** @type {?} */ year = DateHelper.ToYearNumberFromMonthYear(monthYear);
        const /** @type {?} */ month = DateHelper.ToMonthNumberFromMonthYear(monthYear);
        return year && month ? new Date(year, month) : new Date();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static IsDate(date) {
        return Object.prototype.toString.call(date) === '[object Date]';
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static IsValidDate(date) {
        const /** @type {?} */ dateWrapper = new Date(date);
        return !isNaN(dateWrapper.getDate());
    }
    /**
     * @return {?}
     */
    static get Today() {
        return new Date();
    }
    /**
     * @return {?}
     */
    static get Month() {
        return DateHelper.Today.getMonth();
    }
    /**
     * @return {?}
     */
    static get MonthNumbers() {
        return DateHelper.MonthNames.reduce((acc, x, i) => Object.assign({}, acc, { [x]: i }));
    }
    /**
     * @return {?}
     */
    static get Year() {
        return DateHelper.Today.getFullYear();
    }
    /**
     * @return {?}
     */
    static get NextSchoolYear() {
        return DateHelper.Month < 7 ? DateHelper.Year : DateHelper.Year + 1;
    }
    /**
     * @return {?}
     */
    static get NextSchoolYearStartDate() {
        return new Date(DateHelper.SchoolYearStart(DateHelper.NextSchoolYear));
    }
    /**
     * @return {?}
     */
    static get PreviousSchoolYear() {
        return DateHelper.Month < 7 ? DateHelper.Year : DateHelper.Year + 1;
    }
    /**
     * @return {?}
     */
    static get PreviousSchoolYearEndDate() {
        return new Date(DateHelper.SchoolYearEnd(DateHelper.PreviousSchoolYear));
    }
    /**
     * @return {?}
     */
    static get FutureDate() {
        const /** @type {?} */ date = DateHelper.Today;
        return DateHelper.AddDays(date, 100000);
    }
    /**
     * @return {?}
     */
    static get PastDate() {
        const /** @type {?} */ date = DateHelper.Today;
        return DateHelper.SubtractDays(date, 100000);
    }
    /**
     * @param {?} d
     * @param {?} days
     * @return {?}
     */
    static AddDays(d, days) {
        const /** @type {?} */ date = new Date(d);
        date.setDate(date.getDate() + days);
        return date;
    }
    /**
     * @param {?} d
     * @param {?} days
     * @return {?}
     */
    static SubtractDays(d, days) {
        const /** @type {?} */ date = new Date(d);
        date.setDate(date.getDate() - days);
        return date;
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    static BuildDate(year, month, day) {
        const /** @type {?} */ date = new Date();
        date.setFullYear(year);
        date.setMonth(month);
        date.setDate(day);
        return date;
    }
    /**
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    static DateChanged(d1, d2) {
        const /** @type {?} */ date1 = new Date(d1);
        const /** @type {?} */ date2 = new Date(d2);
        return date1.getDate() !== date2.getDate() || date1.getMonth() !== date2.getMonth() || date1.getFullYear() !== date2.getFullYear();
    }
    /**
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    static IsSameDay(d1, d2) {
        return !DateHelper.DateChanged(d1, d2);
    }
    /**
     * @return {?}
     */
    static get YearStartDate() {
        if (DateHelper.Month < 7) {
            return DateHelper.BuildDate(DateHelper.Year - 1, 6, 1);
        }
        else {
            return DateHelper.BuildDate(DateHelper.Year, 6, 1);
        }
    }
    /**
     * @return {?}
     */
    static get PreviousYearStartDate() {
        if (DateHelper.Month < 7) {
            return DateHelper.BuildDate(DateHelper.Year - 2, 6, 1);
        }
        else {
            return DateHelper.BuildDate(DateHelper.Year - 1, 6, 1);
        }
    }
    /**
     * @param {?} year
     * @return {?}
     */
    static SchoolYearStart(year) {
        return DateHelper.BuildDate(year, 6, 1);
    }
    /**
     * @return {?}
     */
    static get YearEndDate() {
        if (DateHelper.Month < 7) {
            return DateHelper.BuildDate(DateHelper.Year, 5, 30);
        }
        else {
            return DateHelper.BuildDate(DateHelper.Year + 1, 5, 30);
        }
    }
    /**
     * @return {?}
     */
    static get PreviousYearEndDate() {
        if (DateHelper.Month < 7) {
            return DateHelper.BuildDate(DateHelper.Year - 1, 5, 30);
        }
        else {
            return DateHelper.BuildDate(DateHelper.Year, 5, 30);
        }
    }
    /**
     * @param {?=} year
     * @return {?}
     */
    static SchoolYearEnd(year) {
        return DateHelper.BuildDate(year - 1, 5, 30);
    }
    /**
     * @param {?} dateRangeId
     * @return {?}
     */
    static BuildDateRange(dateRangeId) {
        let /** @type {?} */ startDate;
        let /** @type {?} */ endDate;
        switch (dateRangeId) {
            case 0:
                break;
            case 1:
                break;
            case 2:
                // Today
                startDate = DateHelper.Today;
                endDate = startDate;
                break;
            case 3:
                // Next 15
                startDate = DateHelper.Today;
                endDate = DateHelper.AddDays(startDate, 15);
                break;
            case 4:
                // Next 30
                startDate = DateHelper.Today;
                endDate = DateHelper.AddDays(startDate, 30);
                break;
            case 5:
                // Next 60
                startDate = DateHelper.Today;
                endDate = DateHelper.AddDays(startDate, 60);
                break;
            case 6:
                // Previous 15
                endDate = DateHelper.Today;
                startDate = DateHelper.SubtractDays(endDate, 15);
                break;
            case 7:
                // Previous 30
                endDate = DateHelper.Today;
                startDate = DateHelper.SubtractDays(endDate, 30);
                break;
            case 8:
                // Previous 60
                endDate = DateHelper.Today;
                startDate = DateHelper.SubtractDays(endDate, 60);
                break;
            case 9:
                // School Year - Runs from July 1st Thru June 30th
                startDate = DateHelper.YearStartDate;
                endDate = DateHelper.YearEndDate;
                break;
            case 10:
                // Number of meetings = 10
                startDate = DateHelper.Today;
                endDate = DateHelper.FutureDate;
                break;
            case 11:
                // Previous School Year
                startDate = DateHelper.PreviousYearStartDate;
                endDate = DateHelper.PreviousYearEndDate;
                break;
        }
        return build(DateRange, { startDate, endDate });
    }
}
DateHelper.MonthNames = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December'
];
function DateHelper_tsickle_Closure_declarations() {
    /** @type {?} */
    DateHelper.MonthNames;
}

//# sourceMappingURL=data:application/json;base64,