/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Metadata } from './models';
import { build } from './utils';
export class BaseEntity {
    constructor() {
        this.createdBy = null;
        this.createdById = 0;
        this.createdDate = new Date();
        this.formId = 0;
        this.lastModifiedBy = null;
        this.lastModifiedById = 0;
        this.lastModifiedDate = new Date();
        this.matches = [];
        this.ignore = [
            '_metadata',
            'metadata',
            'ignore',
            'createdBy',
            'createdById',
            'createdDate',
            'formId',
            'lastModifiedBy',
            'lastModifiedById',
            'lastModifiedDate',
            'lastModifiedOn',
            'lastUpdated',
            'matches',
        ];
        this._metadata = new Metadata();
    }
    /**
     * @return {?}
     */
    get metadata() {
        return build(Metadata, this._metadata, {
            ignore: this.ignore
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set metadata(value) {
        this._metadata = value;
    }
    /**
     * @return {?}
     */
    static getGetters() {
        return Object.keys(this.prototype).filter(name => {
            return typeof Object.getOwnPropertyDescriptor(this.prototype, name)['get'] === 'function';
        });
    }
    /**
     * @return {?}
     */
    static getSetters() {
        return Object.keys(this.prototype).filter(name => {
            return typeof Object.getOwnPropertyDescriptor(this.prototype, name)['set'] === 'function';
        });
    }
    /**
     * @return {?}
     */
    getGetters() {
        return Object.keys(this.constructor.prototype).filter(name => {
            return typeof Object.getOwnPropertyDescriptor(this.constructor.prototype, name)['get'] === 'function';
        });
    }
    /**
     * @return {?}
     */
    getSetters() {
        return Object.keys(this.constructor.prototype).filter(name => {
            return typeof Object.getOwnPropertyDescriptor(this.constructor.prototype, name)['set'] === 'function';
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    update(value) {
        return Object.assign(new BaseEntity(), value);
    }
}
function BaseEntity_tsickle_Closure_declarations() {
    /** @type {?} */
    BaseEntity.prototype.createdBy;
    /** @type {?} */
    BaseEntity.prototype.createdById;
    /** @type {?} */
    BaseEntity.prototype.createdDate;
    /** @type {?} */
    BaseEntity.prototype.formId;
    /** @type {?} */
    BaseEntity.prototype.lastModifiedBy;
    /** @type {?} */
    BaseEntity.prototype.lastModifiedById;
    /** @type {?} */
    BaseEntity.prototype.lastModifiedDate;
    /** @type {?} */
    BaseEntity.prototype.matches;
    /** @type {?} */
    BaseEntity.prototype.ignore;
    /** @type {?} */
    BaseEntity.prototype._metadata;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1lbnRpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL3NoYXJlZC9iYXNlLWVudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNwQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDLE1BQU07O3lCQUNVLElBQUk7MkJBQ0YsQ0FBQzsyQkFDSyxJQUFJLElBQUksRUFBRTtzQkFDckIsQ0FBQzs4QkFDTyxJQUFJO2dDQUNGLENBQUM7Z0NBQ0ssSUFBSSxJQUFJLEVBQUU7dUJBQ2YsRUFBRTtzQkFDYjtZQUNMLFdBQVc7WUFDWCxVQUFVO1lBQ1YsUUFBUTtZQUNSLFdBQVc7WUFDWCxhQUFhO1lBQ2IsYUFBYTtZQUNiLFFBQVE7WUFDUixnQkFBZ0I7WUFDaEIsa0JBQWtCO1lBQ2xCLGtCQUFrQjtZQUNsQixnQkFBZ0I7WUFDaEIsYUFBYTtZQUNiLFNBQVM7U0FDWjt5QkFDcUIsSUFBSSxRQUFRLEVBQUU7Ozs7O0lBRXBDLElBQUksUUFBUTtRQUNSLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQ3RCLENBQUMsQ0FBQztLQUNOOzs7OztJQUVELElBQUksUUFBUSxDQUFDLEtBQWU7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7S0FDMUI7Ozs7SUFFRCxNQUFNLENBQUMsVUFBVTtRQUNiLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDN0MsTUFBTSxDQUFDLE9BQU8sTUFBTSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssVUFBVSxDQUFDO1NBQzdGLENBQUMsQ0FBQztLQUNOOzs7O0lBRUQsTUFBTSxDQUFDLFVBQVU7UUFDYixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdDLE1BQU0sQ0FBQyxPQUFPLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLFVBQVUsQ0FBQztTQUM3RixDQUFDLENBQUM7S0FDTjs7OztJQUVELFVBQVU7UUFDTixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6RCxNQUFNLENBQUMsT0FBTyxNQUFNLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssVUFBVSxDQUFDO1NBQ3pHLENBQUMsQ0FBQztLQUNOOzs7O0lBRUQsVUFBVTtRQUNOLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pELE1BQU0sQ0FBQyxPQUFPLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxVQUFVLENBQUM7U0FDekcsQ0FBQyxDQUFDO0tBQ047Ozs7O0lBRUQsTUFBTSxDQUFDLEtBQVU7UUFDYixNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ2pEO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXRhZGF0YSB9IGZyb20gJy4vbW9kZWxzJztcclxuaW1wb3J0IHsgYnVpbGQgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCYXNlRW50aXR5IHtcclxuICAgIGNyZWF0ZWRCeSA9IG51bGw7XHJcbiAgICBjcmVhdGVkQnlJZCA9IDA7XHJcbiAgICBjcmVhdGVkRGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBmb3JtSWQgPSAwO1xyXG4gICAgbGFzdE1vZGlmaWVkQnkgPSBudWxsO1xyXG4gICAgbGFzdE1vZGlmaWVkQnlJZCA9IDA7XHJcbiAgICBsYXN0TW9kaWZpZWREYXRlOiBEYXRlID0gbmV3IERhdGUoKTtcclxuICAgIG1hdGNoZXM6IHN0cmluZ1tdID0gW107XHJcbiAgICBpZ25vcmUgPSBbXHJcbiAgICAgICAgJ19tZXRhZGF0YScsXHJcbiAgICAgICAgJ21ldGFkYXRhJyxcclxuICAgICAgICAnaWdub3JlJyxcclxuICAgICAgICAnY3JlYXRlZEJ5JyxcclxuICAgICAgICAnY3JlYXRlZEJ5SWQnLFxyXG4gICAgICAgICdjcmVhdGVkRGF0ZScsXHJcbiAgICAgICAgJ2Zvcm1JZCcsXHJcbiAgICAgICAgJ2xhc3RNb2RpZmllZEJ5JyxcclxuICAgICAgICAnbGFzdE1vZGlmaWVkQnlJZCcsXHJcbiAgICAgICAgJ2xhc3RNb2RpZmllZERhdGUnLFxyXG4gICAgICAgICdsYXN0TW9kaWZpZWRPbicsXHJcbiAgICAgICAgJ2xhc3RVcGRhdGVkJyxcclxuICAgICAgICAnbWF0Y2hlcycsXHJcbiAgICBdO1xyXG4gICAgX21ldGFkYXRhOiBNZXRhZGF0YSA9IG5ldyBNZXRhZGF0YSgpO1xyXG5cclxuICAgIGdldCBtZXRhZGF0YSgpOiBNZXRhZGF0YSB7XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkKE1ldGFkYXRhLCB0aGlzLl9tZXRhZGF0YSwge1xyXG4gICAgICAgICAgICBpZ25vcmU6IHRoaXMuaWdub3JlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG1ldGFkYXRhKHZhbHVlOiBNZXRhZGF0YSkge1xyXG4gICAgICAgIHRoaXMuX21ldGFkYXRhID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEdldHRlcnMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnByb3RvdHlwZSkuZmlsdGVyKG5hbWUgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcy5wcm90b3R5cGUsIG5hbWUpWydnZXQnXSA9PT0gJ2Z1bmN0aW9uJztcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0U2V0dGVycygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucHJvdG90eXBlKS5maWx0ZXIobmFtZSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLnByb3RvdHlwZSwgbmFtZSlbJ3NldCddID09PSAnZnVuY3Rpb24nO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEdldHRlcnMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZSkuZmlsdGVyKG5hbWUgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIG5hbWUpWydnZXQnXSA9PT0gJ2Z1bmN0aW9uJztcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTZXR0ZXJzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUpLmZpbHRlcihuYW1lID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLCBuYW1lKVsnc2V0J10gPT09ICdmdW5jdGlvbic7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKHZhbHVlOiBhbnkpOiBCYXNlRW50aXR5IHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgQmFzZUVudGl0eSgpLCB2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuIl19