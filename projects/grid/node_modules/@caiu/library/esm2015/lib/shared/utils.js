/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Metadata } from './models';
/**
 * @param {?} derived
 * @param {?} baseCtors
 * @return {?}
 */
export function applyDecorators(derived, baseCtors) {
    baseCtors.forEach(baseCtor => {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
            derived[name] = baseCtor.prototype[name];
        });
    });
}
/**
 * @param {?} derivedCtor The clas Constructor
 * @param {?} baseCtors
 * @return {?}
 */
export function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(baseCtor => {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
            derivedCtor.prototype[name] = baseCtor.prototype[name];
        });
    });
}
/**
 * Find distinct elements in the union of 2 arrays.
 * @param {?} array1
 * @param {?} array2
 * @return {?}
 */
export function arrayUnion(array1, array2) {
    const /** @type {?} */ a = [...array1, ...array2];
    for (let /** @type {?} */ i = 0; i < a.length; ++i) {
        for (let /** @type {?} */ j = i + 1; j < a.length; ++j) {
            if (a[i] === a[j]) {
                a.splice(j--, 1);
            }
        }
    }
    return a;
}
/**
 * @param {?} target
 * @param {?} props
 * @return {?}
 */
export function assignProps(target, props) {
    Object.keys(props).forEach(key => {
        if (target[key]) {
            target[key] = props[key];
        }
    });
}
/**
 * @template T
 * @param {?} ctor
 * @param {...?} args
 * @return {?}
 */
export function build(ctor, ...args) {
    const /** @type {?} */ instance = new ctor();
    return args.reduce((acc, next) => {
        let /** @type {?} */ ret;
        try {
            ret = Object.assign(acc, next);
        }
        catch (/** @type {?} */ e) {
            console.warn(e);
            ret = acc;
        }
        finally {
            return ret;
        }
    }, instance);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function compareDates(a, b) {
    return new Date(b).getTime() - new Date(a).getTime();
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function compareNumbers(a, b) {
    return a - b;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function compareStrings(a, b) {
    const /** @type {?} */ x = a.toLowerCase();
    const /** @type {?} */ y = b.toLowerCase();
    if (x < y) {
        return -1;
    }
    else if (x > y) {
        return 1;
    }
    return 0;
}
/**
 * @param {?} arr
 * @param {?=} key
 * @return {?}
 */
export function distinct(arr, key = '') {
    return key ? arr.reduce((acc, x) => acc.findIndex(y => y[key] === x[key]) === -1 ? [...acc, x] : acc, [])
        : arr.reduce((acc, x) => acc.indexOf(x) === -1 ? [...acc, x] : acc, []);
}
/**
 * @param {?} x1
 * @param {?} x2
 * @return {?}
 */
export function equals(x1, x2) {
    // check whether x1 and x2 have the same type
    if (typeof (x1) !== typeof (x2)) {
        return false;
    }
    // check whether x1 and x2 are both null or both undefined
    if ((x1 === null && x2 === null) || (x1 === undefined && x2 === undefined)) {
        return true;
    }
    // account for non-matching null and undefined values
    if (((x1 === null || x1 === undefined) && x2 !== null && x2 !== undefined)
        || ((x2 === null || x2 === undefined) && x1 !== null && x1 !== undefined)) {
        return false;
    }
    // compare two arrays
    if (Array.isArray(x1) && Array.isArray(x2) && x1.length === x2.length) {
        return x1.findIndex((x, index) => !equals(x, x2[index])) === -1 ? true : false;
    }
    // compare two objects
    if (x1 && typeof (x1) === 'object' && typeof (x2) === 'object'
        && Object.keys(x1).length === Object.keys(x2).length
        && Object.keys(x2).length === arrayUnion(Object.keys(x1), Object.keys(x2)).length) {
        return Object.keys(x1).findIndex(key => !equals(x1[key], x2[key])) === -1;
    }
    // compare two primitives with the same type
    return x1 === x2;
}
/**
 * Extends an object with the *enumerable* and *own* properties of one or more source objects,
 * similar to Object.assign.
 *
 * @param {?} dest The object which will have properties copied to it.
 * @param {...?} sources The source objects from which properties will be copied.
 * @return {?}
 */
export function extendObject(dest, ...sources) {
    if (dest == null) {
        throw TypeError('Cannot convert undefined or null to object');
    }
    for (const /** @type {?} */ source of sources) {
        if (source != null) {
            for (const /** @type {?} */ key in source) {
                if (source.hasOwnProperty(key)) {
                    dest[key] = source[key];
                }
            }
        }
    }
    return dest;
}
/**
 * @param {?} value
 * @return {?}
 */
export function falsy(value) {
    return value === null || value === 0 || value === '' || value === undefined;
}
/**
 * Remove problematic or undesired store properties.
 * @param {?} obj
 * @return {?}
 */
export function filterState(obj) {
    return removeCycles(removeProps(obj));
}
/**
 * @param {?} ctor
 * @return {?}
 */
export function findMetadata(ctor) {
    const /** @type {?} */ instance = new ctor();
    return instance && instance.metadata ? instance.metadata : new Metadata();
}
/**
 * @return {?}
 */
export function findSchoolYear() {
    const /** @type {?} */ date = new Date();
    const /** @type {?} */ year = date.getFullYear();
    const /** @type {?} */ month = date.getMonth();
    return month >= 7 ? `${year}-${year + 1}` : `${year - 1}-${year}`;
}
/**
 * @param {?} obj
 * @param {?} parents
 * @return {?}
 */
export function flattenKeys(obj, parents) {
    return Object.keys(obj).reduce((acc, key) => {
        const /** @type {?} */ pathToRoot = [...parents, key];
        const /** @type {?} */ val = obj[key];
        if (!Array.isArray(val) && Object.keys(val).length > 0) {
            return [...acc, ...flattenKeys(val, pathToRoot)];
        }
        return [...acc, ...pathToRoot];
    }, []);
}
/**
 * @param {?=} number
 * @return {?}
 */
export function formatPhoneNumber(number = '') {
    if (!number) {
        return '000-000-0000';
    }
    const /** @type {?} */ l = number.length;
    return number && (l === 7 || l === 10) ?
        l === 7 ? format7DigitPhoneNumber(number)
            : format10DigitPhoneNumber(number)
        : '000-000-0000';
}
/**
 * @param {?=} number
 * @return {?}
 */
export function format7DigitPhoneNumber(number = '0000000') {
    const /** @type {?} */ first3 = number.substring(0, 3);
    const /** @type {?} */ last4 = number.substring(3, 7);
    return `${first3} -${last4} `;
}
/**
 * @param {?=} number
 * @return {?}
 */
export function format10DigitPhoneNumber(number = '0000000000') {
    const /** @type {?} */ first3 = number.substring(0, 3);
    const /** @type {?} */ last7 = format7DigitPhoneNumber(number.substring(3, 10));
    return `${first3} -${last7} `;
}
/**
 * @param {?} total
 * @return {?}
 */
export function formatPrice(total) {
    const /** @type {?} */ dollars = total.toFixed(2).replace(/./g, function (c, i, a) {
        return i && c !== '.' && ((a.length - i) % 3 === 0) ? ',' + c : c;
    });
    return `$${dollars}`;
}
/**
 * @param {?} type
 * @return {?}
 */
export function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
}
/**
 * @param {?} obj
 * @return {?}
 */
export function getAllProps(obj) {
    const /** @type {?} */ mapped = obj['metadata'] && obj['metadata']['include'] && Array.isArray(obj['metadata']['include']) ?
        obj['metadata']['include'].reduce((acc, key) => Object.assign({}, acc, { [key]: obj[key] }), {}) : obj;
    if (obj['metadata'] && obj['metadata']['exclude'] && Array.isArray(obj['metadata']['exclude'])) {
        obj['metadata']['exclude'].forEach(key => {
            delete mapped[key];
        });
    }
    return [...Object.keys(mapped), ...getGetters(mapped)];
}
/**
 * @param {?} obj
 * @return {?}
 */
export function getGetters(obj) {
    return Object.keys(obj.constructor.prototype).filter(name => {
        return typeof Object.getOwnPropertyDescriptor(obj.constructor.prototype, name)['get'] === 'function';
    });
}
/**
 * @param {?} model
 * @return {?}
 */
export function getKeyValues(model) {
    const /** @type {?} */ keys = getAllProps(model);
    return model['metadata'] && model['metadata']['include'] ?
        toArray(model['metadata']['include']).reduce((acc, key) => Object.assign({}, acc, { [key]: model[key] }), {})
        : keys.reduce((acc, key) => Object.assign({}, acc, { [key]: model[key] }), {});
}
/**
 * @param {?} obj
 * @return {?}
 */
export function getSetters(obj) {
    return Object.keys(obj.prototype).filter(name => {
        return typeof Object.getOwnPropertyDescriptor(obj.prototype, name)['set'] === 'function';
    });
}
/**
 * @param {?} el
 * @param {?} styleProp
 * @return {?}
 */
export function getStyle(el, styleProp) {
    let /** @type {?} */ value;
    const /** @type {?} */ defaultView = el.ownerDocument.defaultView;
    // W3C standard way:
    if (defaultView && defaultView.getComputedStyle) {
        // sanitize property name to css notation (hypen separated words eg. font-Size)
        styleProp = styleProp.replace(/([A-Z])/g, '-$1').toLowerCase();
        return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);
    }
    else if (el['currentStyle']) {
        // IE
        // sanitize property name to camelCase
        styleProp = styleProp.replace(/\-(\w)/g, function (str, letter) {
            return letter.toUpperCase();
        });
        value = el['currentStyle'][styleProp];
        return value;
    }
    return '';
}
/**
 * @param {?} model
 * @return {?}
 */
export function getValue(model) {
    if (model === null || typeof (model) === 'string' || typeof (model) === 'string' || model instanceof Date) {
        return model;
    }
    const /** @type {?} */ keys = getAllProps(model);
    const /** @type {?} */ props = keys.filter(key => key !== 'metadata' && !ignoreKey(model, key))
        .map(key => {
        const /** @type {?} */ obj = {};
        obj[key] = model[key] && typeof model[key] === 'object' ?
            (Array.isArray(model[key]) ?
                (model[key].length > 0 ?
                    model[key].map(x => (typeof x === 'object' ? getValue(x) : x)) : [])
                : getValue(model[key])) : model[key];
        return obj;
    });
    return props.reduce((acc, val) => {
        return Object.assign({}, acc, val);
    }, {});
}
/**
 * @return {?}
 */
export function guid() {
    /**
     * @return {?}
     */
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
        s4() + '-' + s4() + s4() + s4();
}
/**
 * @param {?} changes
 * @param {?} key
 * @param {?} props
 * @return {?}
 */
export function hasChanged(changes, key, props) {
    const /** @type {?} */ currentValue = changes[key] && changes[key].currentValue ? changes[key].currentValue : {};
    const /** @type {?} */ previousValue = changes[key] && changes[key].previousValue ? changes[key].previousValue : {};
    return props.reduce((acc, prop) => {
        return acc ? true : currentValue[prop] !== previousValue[prop];
    }, false);
}
/**
 * @param {?} changes
 * @param {?} key
 * @return {?}
 */
export function idChanged(changes, key) {
    const /** @type {?} */ newId = changes[key].currentValue ? changes[key].currentValue['id'] || 0 : 0;
    const /** @type {?} */ oldId = changes[key].previousValue ? changes[key].previousValue['id'] || 0 : 0;
    return newId !== oldId;
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
export function ignoreKey(model, key) {
    if (model['metadata'] && model['metadata']['ignore']) {
        return inArray(model['metadata']['ignore'], key);
    }
    return false;
}
/**
 * @param {?} arr
 * @param {?} val
 * @return {?}
 */
export function inArray(arr, val) {
    return arr.filter(item => item === val).length > 0;
}
/**
 * @param {?} arr
 * @param {?} val
 * @param {?} key
 * @return {?}
 */
export function inArrayByKey(arr, val, key) {
    return arr.findIndex(item => item[key] === val) !== -1;
}
/**
 * @param {?} n
 * @return {?}
 */
export function integerArray(n) {
    return Array.from(Array(n).keys());
}
/**
 * @param {?} dateFrom
 * @param {?} dateTo
 * @param {?} dateCheck
 * @return {?}
 */
export function isBetweenDates(dateFrom, dateTo, dateCheck) {
    const /** @type {?} */ d1 = dateFrom.toLocaleDateString().split('/');
    const /** @type {?} */ d2 = dateTo.toLocaleDateString().split('/');
    const /** @type {?} */ c = dateCheck.toLocaleDateString().split('/');
    const /** @type {?} */ from = new Date(d1[2], toInt(d1[1]) - 1, d1[0]); // -1 because months are from 0 to 11
    const /** @type {?} */ to = new Date(d2[2], toInt(d2[1]) - 1, d2[0]);
    const /** @type {?} */ check = new Date(c[2], toInt(c[1]) - 1, c[0]);
    return (check >= from && check <= to);
}
/**
 * Detects cycles in an object.
 * @param {?} obj
 * @return {?}
 */
export function isCyclic(obj) {
    const /** @type {?} */ seenObjects = [];
    const /** @type {?} */ detect = (x) => {
        if (x && typeof x === 'object') {
            if (seenObjects.indexOf(x) !== -1) {
                return true;
            }
            seenObjects.push(x);
            for (const /** @type {?} */ key in x) {
                if (x.hasOwnProperty(key) && detect(x[key])) {
                    return true;
                }
            }
        }
        return false;
    };
    return detect(obj);
}
/**
 * @param {?} fromState The last state object from the store
 * @param {?} dState A partial class containing all properties that have changed wrt fromState
 * @return {?} The current/updated state of the application (toState)
 */
export function nextState(fromState, dState) {
    const /** @type {?} */ toState = Object.assign({}, fromState, dState);
    return toState;
}
/**
 * @param {?} n
 * @return {?}
 */
export function positiveIntegerArray(n) {
    return integerArray(n).map(x => x + 1);
}
/**
 * Remove store props that contain cycles.
 * @param {?} obj
 * @return {?}
 */
export function removeCycles(obj) {
    if (obj && typeof obj === 'object') {
        for (const /** @type {?} */ key in obj) {
            if (obj.hasOwnProperty(key) && isCyclic(obj[key])) {
                delete obj[key];
            }
        }
    }
    return obj;
}
/**
 * Remove any props that should not appear in the store.
 * @param {?} obj
 * @return {?}
 */
export function removeProps(obj) {
    return obj;
}
/**
 * @param {?} model
 * @return {?}
 */
export function serialize(model) {
    if (Array.isArray(model)) {
        return model.map(x => serialize(x));
    }
    if (model.serialize && typeof model.serialize === 'function') {
        return serialize(model.serialize());
    }
    if (model === null || typeof (model) === 'number' || typeof (model) === 'string' || model instanceof Date) {
        return model;
    }
    const /** @type {?} */ keys = getAllProps(model);
    if (keys.length === 0) {
        return model;
    }
    return keys.reduce((acc, key) => {
        let /** @type {?} */ val = null;
        if (model[key] !== null && typeof (model[key]) === 'object' && !(model[key] instanceof Date)) {
            if (model[key].serialize && typeof model[key].serialize === 'function') {
                val = model[key].serialize();
            }
            else {
                val = serialize(model[key]);
            }
        }
        else {
            val = model[key];
        }
        return Object.assign({}, acc, {
            [key]: val
        });
    }, {});
}
/**
 * @param {?} token
 * @return {?}
 */
export function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return `${token.overriddenName}`;
    }
    if (token.name) {
        return `${token.name}`;
    }
    const /** @type {?} */ res = token.toString();
    const /** @type {?} */ newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
/**
 * @param {?} str
 * @return {?}
 */
export function str2CharCode(str) {
    return str.charCodeAt(0);
}
/**
 * @param {?} str
 * @return {?}
 */
export function str2Id(str) {
    const /** @type {?} */ charCodes = str ? str.split('').reduce((acc, x) => `${acc}${str2CharCode(x)}`, '') : '';
    return toInt(charCodes);
}
/**
 * @param {?} str
 * @return {?}
 */
export function str2int(str) {
    return parseInt(str, 10);
}
/**
 * @param {?} strArray
 * @return {?}
 */
export function strArray2Id(strArray) {
    const /** @type {?} */ str = strArray.reduce((acc, x) => `${acc}${x}`, '');
    return str2Id(str);
}
/**
 * @param {?} errorName
 * @param {?} errorMessage
 * @return {?}
 */
export function throwException(errorName, errorMessage) {
    throw {
        name: errorName,
        level: 'Show Stopper',
        message: errorMessage,
        htmlMessage: 'Error detected. Please contact the <a href=\'mailto:agendamanager@caiu.com\'>system administrator</a>.',
        toString: function () { return errorName + ': ' + errorMessage; }
    };
}
/**
 * @return {?}
 */
export function throwNotImplementedException() {
    throwException('Not Implemented', 'Not Implemented');
}
/**
 * @param {?} val
 * @return {?}
 */
export function toArray(val) {
    return val ? (Array.isArray(val) ? val : [val]) : [];
}
/**
 * @param {?} val
 * @return {?}
 */
export function toInt(val) {
    return val && val.toString ? str2int(val.toString()) : 0;
}
/**
 * @param {?} action
 * @return {?}
 */
export function toPayload(action) {
    return action ? action.payload : null;
}
/**
 * @param {?} n
 * @return {?}
 */
export function toPx(n) {
    return `${n}px`;
}
/**
 * @param {?} value
 * @return {?}
 */
export function truthy(value) {
    return !falsy(value);
}
/**
 * @param {?} obj
 * @param {?} type
 * @return {?}
 */
export function tryCast(obj, type) {
    const /** @type {?} */ retObj = new type();
    for (const /** @type {?} */ key in obj) {
        if (typeof (retObj[key]) !== 'undefined') {
            retObj[key] = obj[key];
        }
    }
    return retObj;
}
/**
 * @param {?} changes
 * @param {?=} key
 * @return {?}
 */
export function valueChanged(changes, key = '') {
    return key ? changes[key].currentValue !== changes[key].previousValue
        : Object.keys(changes).reduce((acc, currentKey) => {
            return acc ? true : changes[currentKey].currentValue !== changes[currentKey].previousValue;
        }, false);
}
/**
 * @param {?} value
 * @param {?} formValue
 * @return {?}
 */
export function valueEquals(value, formValue) {
    return equals(getValue(value), formValue);
}

//# sourceMappingURL=data:application/json;base64,