/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { getValue, truthy } from './utils';
export class DumbComponent {
    constructor() {
        this.requestState = 'DEFAULT';
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    get inErrorState() {
        return this.requestState === 'ERROR';
    }
    /**
     * @return {?}
     */
    get inSuccessState() {
        return this.requestState === 'SUCCESS';
    }
    /**
     * @return {?}
     */
    get message() {
        return this.inErrorState ? `An error has occurred. Please try again later.`
            : this.inSuccessState ? `Saved successfully!` : '';
    }
    /**
     * @return {?}
     */
    get showMessage() {
        return this.inErrorState || this.inSuccessState;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeSubscriptions();
    }
    /**
     * @param {?} subscription
     * @return {?}
     */
    addSubscription(subscription) {
        this.subscriptions.push(subscription);
    }
    /**
     * @param {?} result
     * @return {?}
     */
    closeDialog(result) {
        this.dialogRef.unsubscribe();
    }
    /**
     * @param {?} component
     * @param {?=} config
     * @return {?}
     */
    openDialog(component, config = {}) {
        const /** @type {?} */ dialogRef = this.dialog.open(component, config);
        this.dialogRef = dialogRef.afterClosed().subscribe(result => {
            this.closeDialog(result);
        });
    }
    /**
     * @return {?}
     */
    removeSubscriptions() {
        this.subscriptions.forEach(s => {
            s.unsubscribe();
        });
    }
    /**
     * @param {?} subscriptions
     * @return {?}
     */
    subscribe(subscriptions) {
        subscriptions.forEach(s => {
            this.addSubscription(s);
        });
    }
    /**
     * @param {?=} duration
     * @return {?}
     */
    flashErrorMessage(duration = 5000) {
        this.toErrorState();
        setTimeout(() => {
            this.resetRequestState();
        }, duration);
    }
    /**
     * @param {?=} duration
     * @return {?}
     */
    flashSuccessMessage(duration = 5000) {
        this.toSucessState();
        setTimeout(() => {
            this.resetRequestState();
        }, duration);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onError(e) {
        this.flashErrorMessage();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onSuccess(e) {
        this.flashSuccessMessage();
    }
    /**
     * @return {?}
     */
    resetRequestState() {
        this.requestState = 'DEFAULT';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValue(value) {
        if (this.form && this.form.setValue) {
            this.form.setValue(getValue(value));
        }
    }
    /**
     * @return {?}
     */
    toErrorState() {
        this.requestState = 'ERROR';
    }
    /**
     * @return {?}
     */
    toSucessState() {
        this.requestState = 'SUCCESS';
    }
}
function DumbComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    DumbComponent.prototype.dialog;
    /** @type {?} */
    DumbComponent.prototype.dialogRef;
    /** @type {?} */
    DumbComponent.prototype.form;
    /** @type {?} */
    DumbComponent.prototype.requestState;
    /** @type {?} */
    DumbComponent.prototype.subscriptions;
}
export class FormComponent extends DumbComponent {
    /**
     * @return {?}
     */
    get editing() {
        return truthy(this.id);
    }
    /**
     * @return {?}
     */
    get id() {
        return this.model.id;
    }
    /**
     * @return {?}
     */
    get isValid() {
        return this.form.valid;
    }
    /**
     * @return {?}
     */
    markAsSubmitted() {
        this.form.markAsTouched();
        Object.keys(this.form.controls).forEach(key => {
            this.form.controls[key].markAsTouched();
        });
    }
}
function FormComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    FormComponent.prototype.form;
    /** @type {?} */
    FormComponent.prototype.model;
}
export class SmartComponent extends DumbComponent {
    /**
     * @param {?} store
     */
    constructor(store) {
        super();
        this.store = store;
    }
    /**
     * @param {?} action
     * @return {?}
     */
    dispatch(action) {
        this.store.dispatch(action);
    }
    /**
     * @param {?} action
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    dispatchAndSubscribe(action, onSuccess, onError) {
        const /** @type {?} */ f1 = onSuccess ? onSuccess : e => {
            this.flashSuccessMessage();
        };
        const /** @type {?} */ f2 = onError ? onError : e => {
            this.flashErrorMessage();
        };
        if (this.events && this.events.dispatch) {
            this.addSubscription(this.events.dispatch(action).subscribe(f1, f2));
        }
        else {
            this.store.dispatch(action);
        }
    }
}
function SmartComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    SmartComponent.prototype.events;
    /** @type {?} */
    SmartComponent.prototype.store;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNhaXUvbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9zaGFyZWQvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFPQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUUzQyxNQUFNO0lBUUY7NEJBSGdELFNBQVM7NkJBQ3pCLEVBQUU7S0FHakM7Ozs7SUFFRCxJQUFJLFlBQVk7UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUM7S0FDeEM7Ozs7SUFFRCxJQUFJLGNBQWM7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksS0FBSyxTQUFTLENBQUM7S0FDMUM7Ozs7SUFFRCxJQUFJLE9BQU87UUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsZ0RBQWdEO1lBQ3ZFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQzFEOzs7O0lBRUQsSUFBSSxXQUFXO1FBQ1gsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQztLQUNuRDs7OztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztLQUM5Qjs7Ozs7SUFFRCxlQUFlLENBQUMsWUFBMEI7UUFDdEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDekM7Ozs7O0lBRUQsV0FBVyxDQUFDLE1BQVc7UUFDbkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztLQUNoQzs7Ozs7O0lBRUQsVUFBVSxDQUFDLFNBQWMsRUFBRSxNQUFNLEdBQUcsRUFBRTtRQUNsQyx1QkFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENB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USxDQUFDLE1BQWM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDL0I7Ozs7Ozs7SUFFRCxvQkFBb0IsQ0FBQyxNQUFjLEVBQUUsU0FBNEIsRUFBRSxPQUEwQjtRQUN6Rix1QkFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ25DLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQzlCLENBQUM7UUFFRix1QkFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQy9CLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQzVCLENBQUM7UUFFRixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN4RTtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDL0I7S0FDSjtDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xyXG5pbXBvcnQgeyBTdG9yZSwgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IEhhc0lkIH0gZnJvbSAnLi9tb2RlbHMnO1xyXG5pbXBvcnQgeyBnZXRWYWx1ZSwgdHJ1dGh5IH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRHVtYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcblxyXG4gICAgZGlhbG9nOiBNYXREaWFsb2c7XHJcbiAgICBkaWFsb2dSZWY6IFN1YnNjcmlwdGlvbjtcclxuICAgIGZvcm06IEZvcm1Hcm91cDtcclxuICAgIHJlcXVlc3RTdGF0ZTogJ0RFRkFVTFQnIHwgJ1NVQ0NFU1MnIHwgJ0VSUk9SJyA9ICdERUZBVUxUJztcclxuICAgIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGluRXJyb3JTdGF0ZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0U3RhdGUgPT09ICdFUlJPUic7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGluU3VjY2Vzc1N0YXRlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3RTdGF0ZSA9PT0gJ1NVQ0NFU1MnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBtZXNzYWdlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5FcnJvclN0YXRlID8gYEFuIGVycm9yIGhhcyBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5gXHJcbiAgICAgICAgICAgIDogdGhpcy5pblN1Y2Nlc3NTdGF0ZSA/IGBTYXZlZCBzdWNjZXNzZnVsbHkhYCA6ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzaG93TWVzc2FnZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbkVycm9yU3RhdGUgfHwgdGhpcy5pblN1Y2Nlc3NTdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLnJlbW92ZVN1YnNjcmlwdGlvbnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24pIHtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlRGlhbG9nKHJlc3VsdDogYW55KSB7XHJcbiAgICAgICAgdGhpcy5kaWFsb2dSZWYudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuRGlhbG9nKGNvbXBvbmVudDogYW55LCBjb25maWcgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IGRpYWxvZ1JlZiA9IHRoaXMuZGlhbG9nLm9wZW4oY29tcG9uZW50LCBjb25maWcpO1xyXG4gICAgICAgIHRoaXMuZGlhbG9nUmVmID0gZGlhbG9nUmVmLmFmdGVyQ2xvc2VkKCkuc3Vic2NyaWJlKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VEaWFsb2cocmVzdWx0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVTdWJzY3JpcHRpb25zKCkge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHMgPT4ge1xyXG4gICAgICAgICAgICBzLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3Vic2NyaWJlKHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdKSB7XHJcbiAgICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHMgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFkZFN1YnNjcmlwdGlvbihzKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmbGFzaEVycm9yTWVzc2FnZShkdXJhdGlvbiA9IDUwMDApIHtcclxuICAgICAgICB0aGlzLnRvRXJyb3JTdGF0ZSgpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0UmVxdWVzdFN0YXRlKCk7XHJcbiAgICAgICAgfSwgZHVyYXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGZsYXNoU3VjY2Vzc01lc3NhZ2UoZHVyYXRpb24gPSA1MDAwKSB7XHJcbiAgICAgICAgdGhpcy50b1N1Y2Vzc1N0YXRlKCk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRSZXF1ZXN0U3RhdGUoKTtcclxuICAgICAgICB9LCBkdXJhdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgb25FcnJvcihlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmZsYXNoRXJyb3JNZXNzYWdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25TdWNjZXNzKGU6IGFueSkge1xyXG4gICAgICAgIHRoaXMuZmxhc2hTdWNjZXNzTWVzc2FnZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0UmVxdWVzdFN0YXRlKCkge1xyXG4gICAgICAgIHRoaXMucmVxdWVzdFN0YXRlID0gJ0RFRkFVTFQnO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5mb3JtICYmIHRoaXMuZm9ybS5zZXRWYWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmZvcm0uc2V0VmFsdWUoZ2V0VmFsdWUodmFsdWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdG9FcnJvclN0YXRlKCkge1xyXG4gICAgICAgIHRoaXMucmVxdWVzdFN0YXRlID0gJ0VSUk9SJztcclxuICAgIH1cclxuXHJcbiAgICB0b1N1Y2Vzc1N0YXRlKCkge1xyXG4gICAgICAgIHRoaXMucmVxdWVzdFN0YXRlID0gJ1NVQ0NFU1MnO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZvcm1Db21wb25lbnQgZXh0ZW5kcyBEdW1iQ29tcG9uZW50IHtcclxuXHJcbiAgICBmb3JtOiBGb3JtR3JvdXA7XHJcbiAgICBtb2RlbDogSGFzSWQ7XHJcblxyXG4gICAgZ2V0IGVkaXRpbmcoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRydXRoeSh0aGlzLmlkKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaWQoKTogbnVtYmVyIHwgc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5pZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNWYWxpZCgpOiBib29sZWFuIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZm9ybS52YWxpZDtcclxuICAgIH1cclxuXHJcbiAgICBtYXJrQXNTdWJtaXR0ZWQoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JtLm1hcmtBc1RvdWNoZWQoKTtcclxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmZvcm0uY29udHJvbHMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzW2tleV0ubWFya0FzVG91Y2hlZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNtYXJ0Q29tcG9uZW50IGV4dGVuZHMgRHVtYkNvbXBvbmVudCB7XHJcblxyXG4gICAgZXZlbnRzO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBzdG9yZTogU3RvcmU8YW55Pikge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcGF0Y2goYWN0aW9uOiBBY3Rpb24pIHtcclxuICAgICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKGFjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcGF0Y2hBbmRTdWJzY3JpYmUoYWN0aW9uOiBBY3Rpb24sIG9uU3VjY2Vzcz86IChlOiBhbnkpID0+IHZvaWQsIG9uRXJyb3I/OiAoZTogYW55KSA9PiB2b2lkKSB7XHJcbiAgICAgICAgY29uc3QgZjEgPSBvblN1Y2Nlc3MgPyBvblN1Y2Nlc3MgOiBlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5mbGFzaFN1Y2Nlc3NNZXNzYWdlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgZjIgPSBvbkVycm9yID8gb25FcnJvciA6IGUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmZsYXNoRXJyb3JNZXNzYWdlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRzICYmIHRoaXMuZXZlbnRzLmRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU3Vic2NyaXB0aW9uKHRoaXMuZXZlbnRzLmRpc3BhdGNoKGFjdGlvbikuc3Vic2NyaWJlKGYxLCBmMikpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goYWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59Il19