/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { arrayUnion, build, inArray } from './utils';
/**
 * @template T
 */
export class Collection {
    /**
     * @param {?=} ctor
     */
    constructor(ctor) {
        this.activeId = 0;
        this.metadata = {};
        this._items = {};
        if (ctor) {
            this.ctor = ctor;
        }
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} key
     * @param {?} item
     * @return {?}
     */
    static AddItem(state, key, item) {
        const /** @type {?} */ newState = {};
        Object.keys(state)
            .forEach(k => {
            newState[k] = state[k];
        });
        newState[key] = item;
        return newState;
    }
    /**
     * @template T
     * @param {?} items
     * @param {?=} findByKey
     * @return {?}
     */
    static BuildCollection(items, findByKey = 'id') {
        const /** @type {?} */ dictionary = Collection.BuildItems(items, findByKey);
        return Object.assign(new Collection(), { items: dictionary });
    }
    /**
     * @template T
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    static BuildDictionaryFromArray(value, key = 'id') {
        const /** @type {?} */ obj = {};
        value.forEach(item => {
            obj[item[key]] = item;
        });
        return obj;
    }
    /**
     * @template T
     * @param {?} items
     * @param {?=} findByKey
     * @return {?}
     */
    static BuildFromArray(items, findByKey = 'id') {
        const /** @type {?} */ dictionary = Collection.BuildItems(items, findByKey);
        return Object.assign(new Collection(), { items: dictionary });
    }
    /**
     * @template T
     * @param {?} items
     * @param {?=} findByKey
     * @return {?}
     */
    static BuildItems(items, findByKey = 'id') {
        const /** @type {?} */ dictionary = {};
        items.forEach(item => {
            const /** @type {?} */ key = item[findByKey];
            dictionary[key] = item;
        });
        return dictionary;
    }
    /**
     * @template T
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    static Filter(item, path) {
        return Array.isArray(item['matches']) && inArray(item['matches'], path);
    }
    /**
     * @template T
     * @param {?} item
     * @param {?} paths
     * @return {?}
     */
    static FilterAnd(item, paths) {
        return Array.isArray(item['matches']) && paths.every(path => inArray(item['matches'], path));
    }
    /**
     * @template T
     * @param {?} item
     * @param {?} paths
     * @return {?}
     */
    static FilterOr(item, paths) {
        return Array.isArray(item['matches']) && paths.some(path => inArray(item['matches'], path));
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} key
     * @return {?}
     */
    static RemoveItem(state, key) {
        const /** @type {?} */ newState = {};
        Object.keys(state)
            .filter(k => k !== key)
            .forEach(k => {
            newState[k] = state[k];
        });
        return newState;
    }
    /**
     * @return {?}
     */
    get active() {
        const /** @type {?} */ item = this.items[this.activeId] || /** @type {?} */ ({});
        return this.ctor ? build(this.ctor, item) : item;
    }
    /**
     * @return {?}
     */
    get ctor() {
        return this._ctor;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ctor(value) {
        this._ctor = value;
    }
    /**
     * @return {?}
     */
    get count() {
        return this.toArray().length;
    }
    /**
     * @return {?}
     */
    get defaultItem() {
        return this.ctor ? new this.ctor() : /** @type {?} */ ({});
    }
    /**
     * @return {?}
     */
    get empty() {
        return this.toArray().length === 0;
    }
    /**
     * @return {?}
     */
    get instance() {
        const /** @type {?} */ activeId = this.activeId;
        const /** @type {?} */ ctor = this.ctor;
        const /** @type {?} */ lastUpdated = this.lastUpdated;
        const /** @type {?} */ metadata = this.metadata;
        // const collection = this.constructor();
        const /** @type {?} */ collection = new Collection();
        collection.activeId = activeId;
        collection.ctor = ctor;
        collection.lastUpdated = lastUpdated;
        collection.metadata = metadata;
        return collection;
    }
    /**
     * @return {?}
     */
    get items() {
        return this._items;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set items(value) {
        this._items = value;
        this.lastUpdated = new Date();
    }
    /**
     * @return {?}
     */
    get keys() {
        return Object.keys(this.items);
    }
    /**
     * @return {?}
     */
    get asArray() {
        return this.toArray();
    }
    /**
     * @return {?}
     */
    get itemsArray() {
        return this.asArray;
    }
    /**
     * @return {?}
     */
    toArray() {
        return Object.keys(this.items).map((key) => /** @type {?} */ (this.items[key]));
    }
    /**
     * @param {?} id
     * @param {?=} key
     * @return {?}
     */
    activate(id, key = 'id') {
        const /** @type {?} */ items = this.items[id] ? this.copyItems() : Object.assign(this.copyItems(), { [id]: { [key]: id } });
        return Object.assign(new Collection(), this, { activeId: id, items });
    }
    /**
     * @param {?} item
     * @param {?=} key
     * @return {?}
     */
    addItem(item, key) {
        const /** @type {?} */ items = this.copyItems();
        return Object.assign(this.constructor(), this, {
            items: Object.assign(items, { [key]: item })
        });
    }
    /**
     * @param {?} items
     * @param {?=} key
     * @return {?}
     */
    addItems(items, key = 'id') {
        const /** @type {?} */ newItems = {};
        this.toArray().forEach(item => {
            newItems[item[key]] = item;
        });
        items.forEach(item => {
            const /** @type {?} */ existingItem = newItems[item[key]] ? newItems[item[key]] : /** @type {?} */ ({});
            const /** @type {?} */ existingMatches = existingItem['matches'] || [];
            const /** @type {?} */ newMatches = item['matches'] || [];
            const /** @type {?} */ matches = arrayUnion(existingMatches, newMatches);
            const /** @type {?} */ newItem = this.buildItem(item, { matches: matches });
            newItems[item[key]] = this.buildItem(existingItem, newItem);
        });
        this.items = newItems;
        return Object.assign(new Collection(), this);
    }
    /**
     * @param {?} items
     * @param {?=} ctor
     * @return {?}
     */
    build(items, ctor) {
        return ctor ? build(ctor, { items })
            : /** @type {?} */ (Object.assign(this.instance, { items }));
    }
    /**
     * @param {?} existingItem
     * @param {?} newItem
     * @param {?=} ctor
     * @return {?}
     */
    buildItem(existingItem, newItem, ctor) {
        const /** @type {?} */ existing = existingItem || {};
        const /** @type {?} */ item = ctor ? build(ctor, existing, newItem)
            : this.ctor ? build(this.ctor, existing, newItem)
                : Object.assign({}, existing, newItem);
        return item;
    }
    /**
     * @param {?} items
     * @param {?=} ctor
     * @return {?}
     */
    buildItems(items, ctor) {
        const /** @type {?} */ factory = ctor ? ctor : this.ctor;
        return items.map(x => factory ? build(factory, x) : Object.assign(/** @type {?} */ ({}), x));
    }
    /**
     * @return {?}
     */
    copyItems() {
        return Object.keys(this.items)
            .reduce((acc, key) => {
            acc[key] = this.get(key);
            return acc;
        }, {});
    }
    /**
     * @param {?} key
     * @return {?}
     */
    delete(key) {
        return this.removeAt(key);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    filter(f) {
        const /** @type {?} */ items = Collection.BuildDictionaryFromArray(this.toArray().filter(f));
        return Object.assign(new Collection(), this, { items });
    }
    /**
     * @param {?} f
     * @return {?}
     */
    filterBy(f) {
        return this.filterItems(f);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    filterItems(f) {
        return this.toArray().filter(f);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    findBy(f) {
        return this.asArray.find(f) || this.defaultItem;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    get(id) {
        const /** @type {?} */ existing = this.items[id];
        return this.ctor ? build(this.ctor, existing)
            : Object.assign(/** @type {?} */ ({}), existing);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    map(f) {
        const /** @type {?} */ items = Collection.BuildDictionaryFromArray(this.toArray().map(f));
        return Object.assign(new Collection(), this, { items });
    }
    /**
     * @param {?} path
     * @return {?}
     */
    query(path) {
        return this.toArray().filter(item => Collection.Filter(item, path));
    }
    /**
     * @param {?} paths
     * @return {?}
     */
    queryAnd(paths) {
        return this.toArray().filter(item => Collection.FilterAnd(item, paths));
    }
    /**
     * @param {?} paths
     * @return {?}
     */
    queryOr(paths) {
        return this.toArray().filter(item => Collection.FilterOr(item, paths));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeAt(key) {
        const /** @type {?} */ keys = Object.keys(this.items);
        const /** @type {?} */ items = Collection.BuildDictionaryFromArray(keys.filter(x => x.toString() !== key.toString()).map(y => this.items[y]));
        return Object.assign(new Collection(), this, { items });
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeItem(key) {
        const /** @type {?} */ collection = this.constructor();
        const /** @type {?} */ keys = Object.keys(this.items).filter(k => k !== key);
        keys.forEach((k) => {
            collection.items[k] = /** @type {?} */ (Object.assign({}, this.items[k]));
        });
        return collection;
    }
    /**
     * @param {?} filter
     * @param {?=} key
     * @return {?}
     */
    removeItems(filter, key = 'id') {
        const /** @type {?} */ keys = this.toArray().filter(filter).map(x => x[key]);
        this.removeKeys(keys);
    }
    /**
     * @param {?} keys
     * @return {?}
     */
    removeKeys(keys) {
        keys.forEach((key) => {
            this.removeItem(key);
        });
    }
    /**
     * @param {?} itemsArray
     * @return {?}
     */
    replace(itemsArray) {
        const /** @type {?} */ items = Collection.BuildDictionaryFromArray(this.buildItems(itemsArray));
        return Object.assign(new Collection(), this, { items });
    }
    /**
     * @param {?} items
     * @param {?=} filter
     * @return {?}
     */
    replaceItems(items, filter) {
        if (filter) {
            const /** @type {?} */ f = (x) => !filter(x);
            return this.replaceItems([...this.filterItems(f), ...items]);
        }
        return Object.assign(new Collection(), this, { items });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValue(value) {
        return Object.assign(new Collection(), this, value);
    }
    /**
     * @param {?} value
     * @param {?=} ctor
     * @param {?=} key
     * @return {?}
     */
    update(value, ctor, key = 'id') {
        if (Array.isArray(value)) {
            return this.updateItems(value, ctor, key);
        }
        return this.updateItem(value, value[key], ctor);
    }
    /**
     * @param {?} item
     * @param {?} key
     * @param {?=} ctor
     * @return {?}
     */
    updateItem(item, key, ctor) {
        const /** @type {?} */ items = this.copyItems();
        const /** @type {?} */ updatedItem = this.buildItem(items[key], item, ctor);
        return this.build(Object.assign(items, { [key]: updatedItem }));
    }
    /**
     * @param {?} items
     * @param {?=} ctor
     * @param {?=} key
     * @return {?}
     */
    updateItems(items, ctor, key = 'id') {
        const /** @type {?} */ existingItems = this.copyItems();
        const /** @type {?} */ updatedItems = items.reduce((acc, item) => {
            const /** @type {?} */ existingItem = acc[item[key]];
            acc[item[key]] = this.buildItem(existingItem, item, ctor);
            return acc;
        }, existingItems);
        return this.build(updatedItems);
    }
}
function Collection_tsickle_Closure_declarations() {
    /** @type {?} */
    Collection.prototype.activeId;
    /** @type {?} */
    Collection.prototype.lastUpdated;
    /** @type {?} */
    Collection.prototype.metadata;
    /** @type {?} */
    Collection.prototype._ctor;
    /** @type {?} */
    Collection.prototype._items;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2hhcmVkL2NvbGxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLFNBQVMsQ0FBQzs7OztBQUVyRCxNQUFNOzs7O0lBa0VGLFlBQVksSUFBeUI7d0JBakVULENBQUM7d0JBRVIsRUFBRTtzQkFFQyxFQUFFO1FBOER0QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1AsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FDcEI7S0FDSjs7Ozs7Ozs7SUEvREQsTUFBTSxDQUFDLE9BQU8sQ0FBSSxLQUFvQixFQUFFLEdBQW9CLEVBQUUsSUFBTztRQUNqRSx1QkFBTSxRQUFRLEdBQWtCLEVBQUUsQ0FBQztRQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQzthQUNiLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNULFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDMUIsQ0FBQyxDQUFDO1FBQ1AsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNyQixNQUFNLENBQUMsUUFBUSxDQUFDO0tBQ25COzs7Ozs7O0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBSSxLQUFVLEVBQUUsU0FBUyxHQUFHLElBQUk7UUFDbEQsdUJBQU0sVUFBVSxHQUFrQixVQUFVLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMxRSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsRUFBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7S0FDcEU7Ozs7Ozs7SUFFRCxNQUFNLENBQUMsd0JB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QUFFO1lBQzVDLHVCQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDcEMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMxRCxNQUFNLENBQUMsR0FBRyxDQUFDO1NBQ2QsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUNuQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWV0YWRhdGEsIERpY3Rpb25hcnksIFR5cGVDb25zdHJ1Y3RvciB9IGZyb20gJy4vbW9kZWxzJztcclxuaW1wb3J0IHsgYXJyYXlVbmlvbiwgYnVpbGQsIGluQXJyYXkgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uPFQ+IHtcclxuICAgIGFjdGl2ZUlkOiBudW1iZXIgfCBzdHJpbmcgPSAwO1xyXG4gICAgbGFzdFVwZGF0ZWQ6IERhdGU7XHJcbiAgICBtZXRhZGF0YTogTWV0YWRhdGEgPSB7fTtcclxuICAgIF9jdG9yOiBUeXBlQ29uc3RydWN0b3I8VD47XHJcbiAgICBfaXRlbXM6IERpY3Rpb25hcnk8VD4gPSB7fTtcclxuXHJcbiAgICBzdGF0aWMgQWRkSXRlbTxUPihzdGF0ZTogRGljdGlvbmFyeTxUPiwga2V5OiBudW1iZXIgfCBzdHJpbmcsIGl0ZW06IFQpOiBEaWN0aW9uYXJ5PFQ+IHtcclxuICAgICAgICBjb25zdCBuZXdTdGF0ZTogRGljdGlvbmFyeTxUPiA9IHt9O1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHN0YXRlKVxyXG4gICAgICAgICAgICAuZm9yRWFjaChrID0+IHtcclxuICAgICAgICAgICAgICAgIG5ld1N0YXRlW2tdID0gc3RhdGVba107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIG5ld1N0YXRlW2tleV0gPSBpdGVtO1xyXG4gICAgICAgIHJldHVybiBuZXdTdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgQnVpbGRDb2xsZWN0aW9uPFQ+KGl0ZW1zOiBUW10sIGZpbmRCeUtleSA9ICdpZCcpOiBDb2xsZWN0aW9uPFQ+IHtcclxuICAgICAgICBjb25zdCBkaWN0aW9uYXJ5OiBEaWN0aW9uYXJ5PFQ+ID0gQ29sbGVjdGlvbi5CdWlsZEl0ZW1zKGl0ZW1zLCBmaW5kQnlLZXkpO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBDb2xsZWN0aW9uPFQ+KCksIHsgaXRlbXM6IGRpY3Rpb25hcnkgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEJ1aWxkRGljdGlvbmFyeUZyb21BcnJheTxUPih2YWx1ZTogYW55W10sIGtleSA9ICdpZCcpOiBEaWN0aW9uYXJ5PFQ+IHtcclxuICAgICAgICBjb25zdCBvYmo6IERpY3Rpb25hcnk8VD4gPSB7fTtcclxuICAgICAgICB2YWx1ZS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBvYmpbaXRlbVtrZXldXSA9IGl0ZW07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgQnVpbGRGcm9tQXJyYXk8VD4oaXRlbXM6IFRbXSwgZmluZEJ5S2V5ID0gJ2lkJyk6IENvbGxlY3Rpb248VD4ge1xyXG4gICAgICAgIGNvbnN0IGRpY3Rpb25hcnk6IERpY3Rpb25hcnk8VD4gPSBDb2xsZWN0aW9uLkJ1aWxkSXRlbXMoaXRlbXMsIGZpbmRCeUtleSk7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IENvbGxlY3Rpb248VD4oKSwgeyBpdGVtczogZGljdGlvbmFyeSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgQnVpbGRJdGVtczxUPihpdGVtczogVFtdLCBmaW5kQnlLZXkgPSAnaWQnKTogRGljdGlvbmFyeTxUPiB7XHJcbiAgICAgICAgY29uc3QgZGljdGlvbmFyeTogRGljdGlvbmFyeTxUPiA9IHt9O1xyXG4gICAgICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGl0ZW1bZmluZEJ5S2V5XTtcclxuICAgICAgICAgICAgZGljdGlvbmFyeVtrZXldID0gaXRlbTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZGljdGlvbmFyeTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgRmlsdGVyPFQ+KGl0ZW06IFQsIHBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGl0ZW1bJ21hdGNoZXMnXSkgJiYgaW5BcnJheShpdGVtWydtYXRjaGVzJ10sIHBhdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBGaWx0ZXJBbmQ8VD4oaXRlbTogVCwgcGF0aHM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaXRlbVsnbWF0Y2hlcyddKSAmJiBwYXRocy5ldmVyeShwYXRoID0+IGluQXJyYXkoaXRlbVsnbWF0Y2hlcyddLCBwYXRoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEZpbHRlck9yPFQ+KGl0ZW06IFQsIHBhdGhzOiBzdHJpbmdbXSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGl0ZW1bJ21hdGNoZXMnXSkgJiYgcGF0aHMuc29tZShwYXRoID0+IGluQXJyYXkoaXRlbVsnbWF0Y2hlcyddLCBwYXRoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIFJlbW92ZUl0ZW08VD4oc3RhdGU6IERpY3Rpb25hcnk8VD4sIGtleTogbnVtYmVyIHwgc3RyaW5nKTogRGljdGlvbmFyeTxUPiB7XHJcbiAgICAgICAgY29uc3QgbmV3U3RhdGU6IERpY3Rpb25hcnk8VD4gPSB7fTtcclxuICAgICAgICBPYmplY3Qua2V5cyhzdGF0ZSlcclxuICAgICAgICAgICAgLmZpbHRlcihrID0+IGsgIT09IGtleSlcclxuICAgICAgICAgICAgLmZvckVhY2goayA9PiB7XHJcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZVtrXSA9IHN0YXRlW2tdO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3U3RhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoY3Rvcj86IFR5cGVDb25zdHJ1Y3RvcjxUPikge1xyXG4gICAgICAgIGlmIChjdG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3RvciA9IGN0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBhY3RpdmUoKTogVCB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuaXRlbXNbdGhpcy5hY3RpdmVJZF0gfHwgPFQ+e307XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3RvciA/IGJ1aWxkKHRoaXMuY3RvciwgaXRlbSkgOiBpdGVtO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjdG9yKCk6IFR5cGVDb25zdHJ1Y3RvcjxUPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGN0b3IodmFsdWU6IFR5cGVDb25zdHJ1Y3RvcjxUPikge1xyXG4gICAgICAgIHRoaXMuX2N0b3IgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY291bnQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b0FycmF5KCkubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBkZWZhdWx0SXRlbSgpOiBUIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jdG9yID8gbmV3IHRoaXMuY3RvcigpIDogPFQ+e307XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGVtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKS5sZW5ndGggPT09IDA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGluc3RhbmNlKCk6IENvbGxlY3Rpb248VD4ge1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZUlkID0gdGhpcy5hY3RpdmVJZDtcclxuICAgICAgICBjb25zdCBjdG9yID0gdGhpcy5jdG9yO1xyXG4gICAgICAgIGNvbnN0IGxhc3RVcGRhdGVkID0gdGhpcy5sYXN0VXBkYXRlZDtcclxuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMubWV0YWRhdGE7XHJcbiAgICAgICAgLy8gY29uc3QgY29sbGVjdGlvbiA9IHRoaXMuY29uc3RydWN0b3IoKTtcclxuICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gbmV3IENvbGxlY3Rpb248VD4oKTtcclxuICAgICAgICBjb2xsZWN0aW9uLmFjdGl2ZUlkID0gYWN0aXZlSWQ7XHJcbiAgICAgICAgY29sbGVjdGlvbi5jdG9yID0gY3RvcjtcclxuICAgICAgICBjb2xsZWN0aW9uLmxhc3RVcGRhdGVkID0gbGFzdFVwZGF0ZWQ7XHJcbiAgICAgICAgY29sbGVjdGlvbi5tZXRhZGF0YSA9IG1ldGFkYXRhO1xyXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpdGVtcygpOiBEaWN0aW9uYXJ5PFQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXRlbXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGl0ZW1zKHZhbHVlOiBEaWN0aW9uYXJ5PFQ+KSB7XHJcbiAgICAgICAgdGhpcy5faXRlbXMgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmxhc3RVcGRhdGVkID0gbmV3IERhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQga2V5cygpOiBudW1iZXJbXSB8IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5pdGVtcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGFzQXJyYXkoKTogVFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b0FycmF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGl0ZW1zQXJyYXkoKTogVFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hc0FycmF5O1xyXG4gICAgfVxyXG5cclxuICAgIHRvQXJyYXkoKTogVFtdIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5pdGVtcykubWFwKChrZXk6IG51bWJlciB8IHN0cmluZykgPT4gPFQ+dGhpcy5pdGVtc1trZXldKTtcclxuICAgIH1cclxuXHJcbiAgICBhY3RpdmF0ZShpZDogbnVtYmVyLCBrZXk6IHN0cmluZyA9ICdpZCcpOiBDb2xsZWN0aW9uPFQ+IHtcclxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXNbaWRdID8gdGhpcy5jb3B5SXRlbXMoKSA6IE9iamVjdC5hc3NpZ24odGhpcy5jb3B5SXRlbXMoKSwgeyBbaWRdOiB7IFtrZXldOiBpZCB9IH0pO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBDb2xsZWN0aW9uPFQ+KCksIHRoaXMsIHsgYWN0aXZlSWQ6IGlkLCBpdGVtcyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRJdGVtKGl0ZW06IFQsIGtleT86IG51bWJlciB8IHN0cmluZyk6IENvbGxlY3Rpb248VD4ge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5jb3B5SXRlbXMoKTtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih0aGlzLmNvbnN0cnVjdG9yKCksIHRoaXMsIHtcclxuICAgICAgICAgICAgaXRlbXM6IE9iamVjdC5hc3NpZ24oaXRlbXMsIHsgW2tleV06IGl0ZW0gfSlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRJdGVtcyhpdGVtczogVFtdLCBrZXkgPSAnaWQnKTogQ29sbGVjdGlvbjxUPiB7XHJcbiAgICAgICAgY29uc3QgbmV3SXRlbXM6IERpY3Rpb25hcnk8VD4gPSB7fTtcclxuICAgICAgICB0aGlzLnRvQXJyYXkoKS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBuZXdJdGVtc1tpdGVtW2tleV1dID0gaXRlbTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0l0ZW0gPSBuZXdJdGVtc1tpdGVtW2tleV1dID8gbmV3SXRlbXNbaXRlbVtrZXldXSA6IDxUPnt9O1xyXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ01hdGNoZXMgPSBleGlzdGluZ0l0ZW1bJ21hdGNoZXMnXSB8fCBbXTtcclxuICAgICAgICAgICAgY29uc3QgbmV3TWF0Y2hlcyA9IGl0ZW1bJ21hdGNoZXMnXSB8fCBbXTtcclxuICAgICAgICAgICAgY29uc3QgbWF0Y2hlcyA9IGFycmF5VW5pb24oZXhpc3RpbmdNYXRjaGVzLCBuZXdNYXRjaGVzKTtcclxuICAgICAgICAgICAgY29uc3QgbmV3SXRlbSA9IHRoaXMuYnVpbGRJdGVtKGl0ZW0sIHsgbWF0Y2hlczogbWF0Y2hlcyB9KTtcclxuICAgICAgICAgICAgbmV3SXRlbXNbaXRlbVtrZXldXSA9IHRoaXMuYnVpbGRJdGVtKGV4aXN0aW5nSXRlbSwgbmV3SXRlbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5pdGVtcyA9IG5ld0l0ZW1zO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBDb2xsZWN0aW9uPFQ+KCksIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1aWxkKGl0ZW1zOiBEaWN0aW9uYXJ5PFQ+LCBjdG9yPzogVHlwZUNvbnN0cnVjdG9yPENvbGxlY3Rpb248VD4+KTogQ29sbGVjdGlvbjxUPiB7XHJcbiAgICAgICAgcmV0dXJuIGN0b3IgPyBidWlsZChjdG9yLCB7IGl0ZW1zIH0pXHJcbiAgICAgICAgICAgIDogPENvbGxlY3Rpb248VD4+T2JqZWN0LmFzc2lnbih0aGlzLmluc3RhbmNlLCB7IGl0ZW1zIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1aWxkSXRlbShleGlzdGluZ0l0ZW06IFQsIG5ld0l0ZW06IGFueSwgY3Rvcj86IFR5cGVDb25zdHJ1Y3RvcjxUPik6IFQge1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gZXhpc3RpbmdJdGVtIHx8IHt9O1xyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSBjdG9yID8gYnVpbGQoY3RvciwgZXhpc3RpbmcsIG5ld0l0ZW0pXHJcbiAgICAgICAgICAgIDogdGhpcy5jdG9yID8gYnVpbGQodGhpcy5jdG9yLCBleGlzdGluZywgbmV3SXRlbSlcclxuICAgICAgICAgICAgICAgIDogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIG5ld0l0ZW0pO1xyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1aWxkSXRlbXMoaXRlbXM6IFRbXSwgY3Rvcj86IFR5cGVDb25zdHJ1Y3RvcjxUPik6IFRbXSB7XHJcbiAgICAgICAgY29uc3QgZmFjdG9yeSA9IGN0b3IgPyBjdG9yIDogdGhpcy5jdG9yO1xyXG4gICAgICAgIHJldHVybiBpdGVtcy5tYXAoeCA9PiBmYWN0b3J5ID8gYnVpbGQoZmFjdG9yeSwgeCkgOiBPYmplY3QuYXNzaWduKDxUPnt9LCB4KSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29weUl0ZW1zKCk6IERpY3Rpb25hcnk8VD4ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLml0ZW1zKVxyXG4gICAgICAgICAgICAucmVkdWNlKChhY2MsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYWNjW2tleV0gPSB0aGlzLmdldChrZXkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgICAgfSwge30pO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZShrZXk6IHN0cmluZyB8IG51bWJlcik6IENvbGxlY3Rpb248VD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlbW92ZUF0KGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsdGVyKGY6IChpdGVtOiBUKSA9PiBib29sZWFuKTogQ29sbGVjdGlvbjxUPiB7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSBDb2xsZWN0aW9uLkJ1aWxkRGljdGlvbmFyeUZyb21BcnJheSh0aGlzLnRvQXJyYXkoKS5maWx0ZXIoZikpO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBDb2xsZWN0aW9uPFQ+KCksIHRoaXMsIHsgaXRlbXMgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsdGVyQnkoZjogKGl0ZW06IFQsIGluZGV4PzogbnVtYmVyKSA9PiBib29sZWFuKTogVFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJJdGVtcyhmKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWx0ZXJJdGVtcyhmOiAoaXRlbTogVCwgaW5kZXg/OiBudW1iZXIpID0+IGJvb2xlYW4pOiBUW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKS5maWx0ZXIoZik7XHJcbiAgICB9XHJcblxyXG4gICAgZmluZEJ5KGY6IChpdGVtOiBUKSA9PiBib29sZWFuKTogVCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXNBcnJheS5maW5kKGYpIHx8IHRoaXMuZGVmYXVsdEl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0KGlkOiBudW1iZXIgfCBzdHJpbmcpOiBUIHtcclxuICAgICAgICBjb25zdCBleGlzdGluZyA9IHRoaXMuaXRlbXNbaWRdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN0b3IgPyBidWlsZCh0aGlzLmN0b3IsIGV4aXN0aW5nKVxyXG4gICAgICAgICAgICA6IE9iamVjdC5hc3NpZ24oPFQ+e30sIGV4aXN0aW5nKTtcclxuICAgIH1cclxuXHJcbiAgICBtYXAoZjogKGl0ZW06IFQpID0+IFQpOiBDb2xsZWN0aW9uPFQ+IHtcclxuICAgICAgICBjb25zdCBpdGVtcyA9IENvbGxlY3Rpb24uQnVpbGREaWN0aW9uYXJ5RnJvbUFycmF5KHRoaXMudG9BcnJheSgpLm1hcChmKSk7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IENvbGxlY3Rpb248VD4oKSwgdGhpcywgeyBpdGVtcyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBxdWVyeShwYXRoOiBzdHJpbmcpOiBUW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKS5maWx0ZXIoaXRlbSA9PiBDb2xsZWN0aW9uLkZpbHRlcihpdGVtLCBwYXRoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcXVlcnlBbmQocGF0aHM6IHN0cmluZ1tdKTogVFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b0FycmF5KCkuZmlsdGVyKGl0ZW0gPT4gQ29sbGVjdGlvbi5GaWx0ZXJBbmQoaXRlbSwgcGF0aHMpKTtcclxuICAgIH1cclxuXHJcbiAgICBxdWVyeU9yKHBhdGhzOiBzdHJpbmdbXSk6IFRbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG9BcnJheSgpLmZpbHRlcihpdGVtID0+IENvbGxlY3Rpb24uRmlsdGVyT3IoaXRlbSwgcGF0aHMpKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVBdChrZXk6IG51bWJlciB8IHN0cmluZyk6IENvbGxlY3Rpb248VD4ge1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLml0ZW1zKTtcclxuICAgICAgICBjb25zdCBpdGVtcyA9IENvbGxlY3Rpb24uQnVpbGREaWN0aW9uYXJ5RnJvbUFycmF5KGtleXMuZmlsdGVyKHggPT4geC50b1N0cmluZygpICE9PSBrZXkudG9TdHJpbmcoKSkubWFwKHkgPT4gdGhpcy5pdGVtc1t5XSkpO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBDb2xsZWN0aW9uPFQ+KCksIHRoaXMsIHsgaXRlbXMgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUl0ZW0oa2V5OiBudW1iZXIgfCBzdHJpbmcpOiBDb2xsZWN0aW9uPFQ+IHtcclxuICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gdGhpcy5jb25zdHJ1Y3RvcigpO1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLml0ZW1zKS5maWx0ZXIoayA9PiBrICE9PSBrZXkpO1xyXG4gICAgICAgIGtleXMuZm9yRWFjaCgoazogbnVtYmVyIHwgc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb24uaXRlbXNba10gPSA8VD5PYmplY3QuYXNzaWduKHt9LCB0aGlzLml0ZW1zW2tdKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVJdGVtcyhmaWx0ZXI6IChpdGVtOiBUKSA9PiBib29sZWFuLCBrZXkgPSAnaWQnKSB7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IHRoaXMudG9BcnJheSgpLmZpbHRlcihmaWx0ZXIpLm1hcCh4ID0+IHhba2V5XSk7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVLZXlzKGtleXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUtleXMoa2V5czogYW55W10pIHtcclxuICAgICAgICBrZXlzLmZvckVhY2goKGtleTogbnVtYmVyIHwgc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlSXRlbShrZXkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlcGxhY2UoaXRlbXNBcnJheTogVFtdKTogQ29sbGVjdGlvbjxUPiB7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSBDb2xsZWN0aW9uLkJ1aWxkRGljdGlvbmFyeUZyb21BcnJheSh0aGlzLmJ1aWxkSXRlbXMoaXRlbXNBcnJheSkpO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBDb2xsZWN0aW9uPFQ+KCksIHRoaXMsIHsgaXRlbXMgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVwbGFjZUl0ZW1zKGl0ZW1zOiBUW10sIGZpbHRlcj86IChpdGVtOiBUKSA9PiBib29sZWFuKTogQ29sbGVjdGlvbjxUPiB7XHJcbiAgICAgICAgaWYgKGZpbHRlcikge1xyXG4gICAgICAgICAgICBjb25zdCBmID0gKHg6IFQpID0+ICFmaWx0ZXIoeCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2VJdGVtcyhbLi4udGhpcy5maWx0ZXJJdGVtcyhmKSwgLi4uaXRlbXNdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IENvbGxlY3Rpb248VD4oKSwgdGhpcywgeyBpdGVtcyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRWYWx1ZSh2YWx1ZTogQ29sbGVjdGlvbjxUPik6IENvbGxlY3Rpb248VD4ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBDb2xsZWN0aW9uPFQ+KCksIHRoaXMsIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUodmFsdWU6IGFueSB8IGFueVtdLCBjdG9yPzogVHlwZUNvbnN0cnVjdG9yPFQ+LCBrZXkgPSAnaWQnKTogQ29sbGVjdGlvbjxUPiB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUl0ZW1zKHZhbHVlLCBjdG9yLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVJdGVtKHZhbHVlLCB2YWx1ZVtrZXldLCBjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVJdGVtKGl0ZW06IGFueSwga2V5OiBudW1iZXIgfCBzdHJpbmcsIGN0b3I/OiBUeXBlQ29uc3RydWN0b3I8VD4pOiBDb2xsZWN0aW9uPFQ+IHtcclxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuY29weUl0ZW1zKCk7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlZEl0ZW0gPSB0aGlzLmJ1aWxkSXRlbShpdGVtc1trZXldLCBpdGVtLCBjdG9yKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5idWlsZChPYmplY3QuYXNzaWduKGl0ZW1zLCB7IFtrZXldOiB1cGRhdGVkSXRlbSB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlSXRlbXMoaXRlbXM6IGFueVtdLCBjdG9yPzogVHlwZUNvbnN0cnVjdG9yPFQ+LCBrZXk6IHN0cmluZyA9ICdpZCcpOiBDb2xsZWN0aW9uPFQ+IHtcclxuICAgICAgICBjb25zdCBleGlzdGluZ0l0ZW1zID0gdGhpcy5jb3B5SXRlbXMoKTtcclxuICAgICAgICBjb25zdCB1cGRhdGVkSXRlbXMgPSBpdGVtcy5yZWR1Y2UoKGFjYywgaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0l0ZW0gPSBhY2NbaXRlbVtrZXldXTtcclxuICAgICAgICAgICAgYWNjW2l0ZW1ba2V5XV0gPSB0aGlzLmJ1aWxkSXRlbShleGlzdGluZ0l0ZW0sIGl0ZW0sIGN0b3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgIH0sIGV4aXN0aW5nSXRlbXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkKHVwZGF0ZWRJdGVtcyk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==