/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { compareNumbers } from './utils';
/**
 * @template T
 */
export class TreeItem {
    /**
     * @param {?} item
     * @param {?=} parent
     */
    constructor(item, parent) {
        this.item = item;
        this.parent = parent;
        this.id = 0;
        this.order = 0;
        this.parentId = 0;
        this.treeId = 0;
        this.index = 0;
    }
    /**
     * @template T
     * @param {?} item
     * @return {?}
     */
    static Build(item) {
        return /** @type {?} */ ({
            item: item,
            id: item['id'],
            order: item['order'],
            parentId: item['parentId']
        });
    }
    /**
     * @return {?}
     */
    get hasParent() {
        return this.parentId ? true : false;
    }
    /**
     * @return {?}
     */
    get sortOrder() {
        return this.parentId ? this.treeId + (.1 * this.order) : this.treeId;
    }
    /**
     * @return {?}
     */
    get treeOrder() {
        return this.parentId ? this.order : 0;
    }
}
function TreeItem_tsickle_Closure_declarations() {
    /** @type {?} */
    TreeItem.prototype.id;
    /** @type {?} */
    TreeItem.prototype.order;
    /** @type {?} */
    TreeItem.prototype.parentId;
    /** @type {?} */
    TreeItem.prototype.treeId;
    /** @type {?} */
    TreeItem.prototype.index;
    /** @type {?} */
    TreeItem.prototype.item;
    /** @type {?} */
    TreeItem.prototype.parent;
}
/**
 * @template T
 */
export class Tree {
    /**
     * @param {?} _treeItems
     * @param {?} ctor
     */
    constructor(_treeItems, ctor) {
        this._treeItems = _treeItems;
        this.ctor = ctor;
        this._activeId = 0;
        this._activeIndex = -1;
    }
    /**
     * @template T
     * @param {?} items
     * @param {?} item
     * @return {?}
     */
    static FindParent(items, item) {
        return items.find(x => x.id === item.parentId) || new TreeItem(/** @type {?} */ ({}));
    }
    /**
     * @template T
     * @param {?} items
     * @param {?} item
     * @return {?}
     */
    static FindParentOrder(items, item) {
        const /** @type {?} */ parent = Tree.FindParent(items, item);
        return parent.order;
    }
    /**
     * @template T
     * @param {?} items
     * @param {?} ctor
     * @return {?}
     */
    static Build(items, ctor) {
        const /** @type {?} */ treeItems = items.reduce((acc, item) => {
            item.treeId = item.parentId ? Tree.FindParentOrder(items, item) : item.order;
            const /** @type {?} */ treeItem = Object.assign(new TreeItem(/** @type {?} */ ({})), item);
            return [...acc, treeItem];
        }, []);
        const /** @type {?} */ orderedItems = items.sort((a, b) => compareNumbers(a.sortOrder, b.sortOrder))
            .reduce((acc, treeItem, index) => {
            const /** @type {?} */ item = treeItem.item;
            const /** @type {?} */ parent = treeItem.parent;
            return [...acc, /** @type {?} */ (Object.assign(new TreeItem(item, parent), treeItem, { index: index + 1 }))];
        }, []);
        return new Tree(orderedItems, ctor);
    }
    /**
     * @return {?}
     */
    get activeId() {
        return this._activeId;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    set activeId(id) {
        this._activeId = id;
        this._activeIndex = this.getIndexById(id);
    }
    /**
     * @return {?}
     */
    get activeIndex() {
        return this._activeIndex;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    set activeIndex(index) {
        this._activeIndex = index;
        this._activeId = this.getIdByIndex(index);
    }
    /**
     * @return {?}
     */
    get copy() {
        return Object.assign(new Tree(this._treeItems, this.ctor), this);
    }
    /**
     * @return {?}
     */
    get instance() {
        return new this.ctor() || /** @type {?} */ ({});
    }
    /**
     * @return {?}
     */
    get next() {
        return this.getNext(this.activeIndex);
    }
    /**
     * @return {?}
     */
    get nextId() {
        return this.next.id;
    }
    /**
     * @return {?}
     */
    get nextIndex() {
        return this.activeIndex + 1;
    }
    /**
     * @return {?}
     */
    get previous() {
        return this.getPrevious(this.activeIndex);
    }
    /**
     * @return {?}
     */
    get previousId() {
        return this.previous.id;
    }
    /**
     * @return {?}
     */
    get previousIndex() {
        return this.activeIndex - 1;
    }
    /**
     * @return {?}
     */
    get items() {
        return this._treeItems.map(x => x.item);
    }
    /**
     * @return {?}
     */
    get treeItems() {
        return this._treeItems;
    }
    /**
     * @return {?}
     */
    get orderedItems() {
        return this.treeItems.sort((a, b) => compareNumbers(a.index, b.index));
    }
    /**
     * @return {?}
     */
    get subtrees() {
        const /** @type {?} */ trees = this.treeItems.reduce((acc, item) => {
            const /** @type {?} */ treeId = item.treeId;
            const /** @type {?} */ subitems = acc[treeId] || [];
            acc[treeId] = [...subitems, item];
            return acc;
        }, {});
        return Object.keys(trees).map(key => Tree.Build(trees[key], this.ctor));
    }
    /**
     * @return {?}
     */
    get subtreeItems() {
        return this.subtrees.map(tree => tree.treeItems.sort((a, b) => compareNumbers(a.index, b.index)));
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getIdByIndex(index) {
        const /** @type {?} */ item = this.getItemByIndex(index);
        return item.id;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getIndexById(id) {
        return this.getItemById(id).index;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getItemById(id) {
        return this.treeItems.find(item => item.id === id) || new TreeItem(this.instance);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getItemByIndex(index) {
        return this.treeItems.find(item => item.index === index) || new TreeItem(this.instance);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getNext(index) {
        return this.getItemByIndex(index + 1);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getNextId(index) {
        return this.getNext(index).id;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getPrevious(index) {
        return this.getItemByIndex(index - 1);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getPreviousId(index) {
        return this.getPrevious(index).id;
    }
}
function Tree_tsickle_Closure_declarations() {
    /** @type {?} */
    Tree.prototype._activeId;
    /** @type {?} */
    Tree.prototype._activeIndex;
    /** @type {?} */
    Tree.prototype._treeItems;
    /** @type {?} */
    Tree.prototype.ctor;
}

//# sourceMappingURL=data:application/json;base64,