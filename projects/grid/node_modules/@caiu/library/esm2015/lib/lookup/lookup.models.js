/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { build } from '../shared/utils';
export class Lookup {
    constructor() {
        this.typeName = '';
        this.values = [];
        this._key = '';
    }
    /**
     * @return {?}
     */
    get key() {
        return this._key || this.typeName;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set key(value) {
        this._key = value;
    }
    /**
     * @return {?}
     */
    get name() {
        return this.key;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set name(value) {
        this.key = value;
    }
    /**
     * @return {?}
     */
    get names() {
        return this.values.map(x => x.name);
    }
}
function Lookup_tsickle_Closure_declarations() {
    /** @type {?} */
    Lookup.prototype.expires;
    /** @type {?} */
    Lookup.prototype.typeName;
    /** @type {?} */
    Lookup.prototype.values;
    /** @type {?} */
    Lookup.prototype._key;
}
export class LookupValue {
    constructor() {
        this.id = 0;
        this.active = true;
        this.description = '';
        this.name = '';
        this.sort = 0;
        this.tooltip = '';
        this._label = '';
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value || this.id;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value;
    }
    /**
     * @return {?}
     */
    get label() {
        return this._label || this.description;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set label(value) {
        this._label = value;
    }
}
function LookupValue_tsickle_Closure_declarations() {
    /** @type {?} */
    LookupValue.prototype.id;
    /** @type {?} */
    LookupValue.prototype.active;
    /** @type {?} */
    LookupValue.prototype.description;
    /** @type {?} */
    LookupValue.prototype.name;
    /** @type {?} */
    LookupValue.prototype.sort;
    /** @type {?} */
    LookupValue.prototype.tooltip;
    /** @type {?} */
    LookupValue.prototype._label;
    /** @type {?} */
    LookupValue.prototype._value;
}
export class Lookups {
    /**
     * @param {?} state
     * @param {?} lookups
     * @return {?}
     */
    static AddLookups(state, lookups) {
        return lookups.reduce((acc, lookup) => build(Lookups, acc, { [lookup.key]: build(Lookup, lookup) }), state);
    }
    /**
     * @param {?} state
     * @param {?} lookup
     * @return {?}
     */
    static AddLookup(state, lookup) {
        return build(Lookups, state, {
            [lookup.key]: build(Lookup, lookup)
        });
    }
    /**
     * @param {?} values
     * @param {?} names
     * @return {?}
     */
    static BuildLookupValues(values, names) {
        return names.reduce((acc, name) => {
            const /** @type {?} */ value = values.find(x => x.name === name);
            return value ? [...acc, value] : [...acc];
        }, []);
    }
    /**
     * @param {?} values
     * @param {?} name
     * @return {?}
     */
    static FindLookupIdByName(values, name) {
        const /** @type {?} */ lkp = build(LookupValue, values.find(x => x.name === name));
        return lkp.id;
    }
    /**
     * @param {?} values
     * @param {?} id
     * @return {?}
     */
    static FindLookupNameById(values, id) {
        const /** @type {?} */ lkp = build(LookupValue, values.find(x => x.id === id));
        return lkp.name;
    }
    /**
     * @param {?} state
     * @param {?} removeKey
     * @return {?}
     */
    static RemoveLookup(state, removeKey) {
        const /** @type {?} */ newState = new Lookups();
        const /** @type {?} */ keys = Object.keys(state).filter(key => key !== removeKey);
        keys.forEach(key => {
            newState[key] = Object.assign({}, state[key]);
        });
        return newState;
    }
}
export class AddLookupPayload {
    constructor() {
        this.key = '';
    }
}
function AddLookupPayload_tsickle_Closure_declarations() {
    /** @type {?} */
    AddLookupPayload.prototype.key;
    /** @type {?} */
    AddLookupPayload.prototype.value;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLm1vZGVscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvbG9va3VwL2xvb2t1cC5tb2RlbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4QyxNQUFNOzt3QkFFUyxFQUFFO3NCQUNXLEVBQUU7b0JBQ25CLEVBQUU7Ozs7O0lBRVQsSUFBSSxHQUFHO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztLQUNyQzs7Ozs7SUFFRCxJQUFJLEdBQUcsQ0FBQyxLQUFhO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0tBQ3JCOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7S0FDbkI7Ozs7O0lBRUQsSUFBSSxJQUFJLENBQUMsS0FBYTtRQUNsQixJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztLQUNwQjs7OztJQUVELElBQUksS0FBSztRQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN2QztDQUNKOzs7Ozs7Ozs7OztBQUVELE1BQU07O2tCQUNHLENBQUM7c0JBQ0csSUFBSTsyQkFDQyxFQUFFO29CQUNULEVBQUU7b0JBQ0YsQ0FBQzt1QkFDRSxFQUFFO3NCQUNILEVBQUU7Ozs7O0lBR1gsSUFBSSxLQUFLO1FBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQztLQUNqQzs7Ozs7SUFFRCxJQUFJLEtBQUssQ0FBQyxLQUFVO1FBQ2hCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0tBQ3ZCOzs7O0lBRUQsSUFBSSxLQUFLO1FB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eyBidWlsZCB9IGZyb20gJy4uL3NoYXJlZC91dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgTG9va3VwIHtcclxuICAgIGV4cGlyZXM6IERhdGU7XHJcbiAgICB0eXBlTmFtZSA9ICcnO1xyXG4gICAgdmFsdWVzOiBMb29rdXBWYWx1ZVtdID0gW107XHJcbiAgICBfa2V5ID0gJyc7XHJcblxyXG4gICAgZ2V0IGtleSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9rZXkgfHwgdGhpcy50eXBlTmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQga2V5KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9rZXkgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmtleTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbmFtZSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5rZXkgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbmFtZXMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5tYXAoeCA9PiB4Lm5hbWUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTG9va3VwVmFsdWUge1xyXG4gICAgaWQgPSAwO1xyXG4gICAgYWN0aXZlID0gdHJ1ZTtcclxuICAgIGRlc2NyaXB0aW9uID0gJyc7XHJcbiAgICBuYW1lID0gJyc7XHJcbiAgICBzb3J0ID0gMDtcclxuICAgIHRvb2x0aXAgPSAnJzsgLy8gdXNlIHRoaXMgZm9yIGFjY2Vzc2liaWxpdHkgYW5kL29yIGhlbHAgdG9vbHRpcCBtZXNzYWdlc1xyXG4gICAgX2xhYmVsID0gJyc7XHJcbiAgICBfdmFsdWU6IGFueTtcclxuXHJcbiAgICBnZXQgdmFsdWUoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWUgfHwgdGhpcy5pZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdmFsdWUodmFsdWU6IGFueSkge1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGxhYmVsKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsIHx8IHRoaXMuZGVzY3JpcHRpb247XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGxhYmVsKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9sYWJlbCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvb2t1cHMge1xyXG4gICAgW2tleTogc3RyaW5nXTogTG9va3VwO1xyXG5cclxuICAgIHN0YXRpYyBBZGRMb29rdXBzKHN0YXRlOiBMb29rdXBzLCBsb29rdXBzOiBMb29rdXBbXSk6IExvb2t1cHMge1xyXG4gICAgICAgIHJldHVybiBsb29rdXBzLnJlZHVjZSgoYWNjOiBMb29rdXBzLCBsb29rdXA6IExvb2t1cCk6IExvb2t1cHMgPT5cclxuICAgICAgICAgICAgYnVpbGQoTG9va3VwcywgYWNjLCB7IFtsb29rdXAua2V5XTogYnVpbGQoTG9va3VwLCBsb29rdXApIH0pLCBzdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEFkZExvb2t1cChzdGF0ZTogTG9va3VwcywgbG9va3VwOiBMb29rdXApOiBMb29rdXBzIHtcclxuICAgICAgICByZXR1cm4gYnVpbGQoTG9va3Vwcywgc3RhdGUsIHtcclxuICAgICAgICAgICAgW2xvb2t1cC5rZXldOiBidWlsZChMb29rdXAsIGxvb2t1cClcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgQnVpbGRMb29rdXBWYWx1ZXModmFsdWVzOiBMb29rdXBWYWx1ZVtdLCBuYW1lczogc3RyaW5nW10pOiBMb29rdXBWYWx1ZVtdIHtcclxuICAgICAgICByZXR1cm4gbmFtZXMucmVkdWNlKChhY2MsIG5hbWUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXMuZmluZCh4ID0+IHgubmFtZSA9PT0gbmFtZSk7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA/IFsuLi5hY2MsIHZhbHVlXSA6IFsuLi5hY2NdO1xyXG4gICAgICAgIH0sIFtdKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgRmluZExvb2t1cElkQnlOYW1lKHZhbHVlczogTG9va3VwVmFsdWVbXSwgbmFtZTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBsa3AgPSBidWlsZChMb29rdXBWYWx1ZSwgdmFsdWVzLmZpbmQoeCA9PiB4Lm5hbWUgPT09IG5hbWUpKTtcclxuICAgICAgICByZXR1cm4gbGtwLmlkO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBGaW5kTG9va3VwTmFtZUJ5SWQodmFsdWVzOiBMb29rdXBWYWx1ZVtdLCBpZDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBsa3AgPSBidWlsZChMb29rdXBWYWx1ZSwgdmFsdWVzLmZpbmQoeCA9PiB4LmlkID09PSBpZCkpO1xyXG4gICAgICAgIHJldHVybiBsa3AubmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgUmVtb3ZlTG9va3VwKHN0YXRlOiBMb29rdXBzLCByZW1vdmVLZXk6IHN0cmluZyk6IExvb2t1cHMge1xyXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gbmV3IExvb2t1cHMoKTtcclxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc3RhdGUpLmZpbHRlcihrZXkgPT4ga2V5ICE9PSByZW1vdmVLZXkpO1xyXG4gICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBuZXdTdGF0ZVtrZXldID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGVba2V5XSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFkZExvb2t1cFBheWxvYWQge1xyXG4gICAga2V5ID0gJyc7XHJcbiAgICB2YWx1ZTogJyc7XHJcbn1cclxuIl19