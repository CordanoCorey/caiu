/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { Store } from '@ngrx/store';
import { map } from 'rxjs/operators';
import { LookupActions } from './lookup.actions';
import { AddLookupPayload } from './lookup.models';
import { LOOKUP_PATH, LOOKUP_KEYS } from './lookup.module';
import { HttpActions } from '../http/http.actions';
import { build } from '../shared/utils';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "./lookup.module";
export class LookupService {
    /**
     * @param {?} store
     * @param {?=} lookupPath
     * @param {?=} lookupKeys
     */
    constructor(store, lookupPath = 'lookup', lookupKeys = []) {
        this.store = store;
        this._keys = [];
        this.path = 'lookup';
        this.path = lookupPath;
        this.keys = lookupKeys;
    }
    /**
     * @return {?}
     */
    get keys() {
        return this._keys;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set keys(value) {
        this._keys = value;
    }
    /**
     * @param {?} keys
     * @param {?=} values
     * @return {?}
     */
    load(keys, values) {
        if (values) {
            this.loadValues(values);
        }
        this.loadKeys(keys);
    }
    /**
     * @param {?} keys
     * @return {?}
     */
    loadKeys(keys) {
        this.keys = keys;
        this.store.dispatch(HttpActions.get(`${this.path}${this.buildQueryString()}`, LookupActions.ADD_KEYS));
    }
    /**
     * @param {?} values
     * @return {?}
     */
    loadValues(values) {
        this.store.dispatch(LookupActions.addValues(values));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    lookup(key) {
        return this.store.select('lookup').pipe(map(s => s[key]));
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    addKey(key, value) {
        this.store.dispatch(LookupActions.addKey(build(AddLookupPayload, {
            key: key,
            value: value
        })));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeKey(key) {
        this.store.dispatch(LookupActions.removeKey(key));
    }
    /**
     * @return {?}
     */
    buildQueryString() {
        let /** @type {?} */ query = this.keys.length > 0 ? `?keys=${this.keys[0]}` : '';
        this.keys.filter((key, index) => index !== 0)
            .forEach(key => {
            query += `&keys=${key}`;
        });
        return query;
    }
}
LookupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
LookupService.ctorParameters = () => [
    { type: Store },
    { type: undefined, decorators: [{ type: Inject, args: [LOOKUP_PATH,] }] },
    { type: Array, decorators: [{ type: Inject, args: [LOOKUP_KEYS,] }] }
];
/** @nocollapse */ LookupService.ngInjectableDef = i0.defineInjectable({ factory: function LookupService_Factory() { return new LookupService(i0.inject(i1.Store), i0.inject(i2.LOOKUP_PATH), i0.inject(i2.LOOKUP_KEYS)); }, token: LookupService, providedIn: "root" });
function LookupService_tsickle_Closure_declarations() {
    /** @type {?} */
    LookupService.prototype._keys;
    /** @type {?} */
    LookupService.prototype.path;
    /** @type {?} */
    LookupService.prototype.store;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2xvb2t1cC9sb29rdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVwQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBVSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNELE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQUt4QyxNQUFNOzs7Ozs7SUFLSixZQUNTLE9BQ2MsVUFBVSxHQUFHLFFBQVEsRUFDckIsYUFBdUIsRUFBRTtRQUZ2QyxVQUFLLEdBQUwsS0FBSztxQkFKSSxFQUFFO29CQUNiLFFBQVE7UUFPYixJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztLQUN4Qjs7OztJQUVELElBQUksSUFBSTtRQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0tBQ25COzs7OztJQUVELElBQUksSUFBSSxDQUFDLEtBQWU7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7S0FDcEI7Ozs7OztJQUVELElBQUksQ0FBQyxJQUFjLEVBQUUsTUFBaUI7UUFDcEMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNYLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekI7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3JCOzs7OztJQUVELFFBQVEsQ0FBQyxJQUFjO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7S0FDeEc7Ozs7O0lBRUQsVUFBVSxDQUFDLE1BQWdCO1FBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUN0RDs7Ozs7SUFFRCxNQUFNLENBQUMsR0FBVztRQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUNyQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDakIsQ0FBQztLQUNIOzs7Ozs7SUFFRCxNQUFNLENBQUMsR0FBVyxFQUFFLEtBQVU7UUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FDdEMsS0FBSyxDQUFDLGdCQUFnQixFQUNwQjtZQUNFLEdBQUcsRUFBRSxHQUFHO1lBQ1IsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUNGLENBQUMsQ0FBQyxDQUFDO0tBQ1A7Ozs7O0lBRUQsU0FBUyxDQUFDLEdBQVc7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ25EOzs7O0lBRU8sZ0JBQWdCO1FBQ3RCLHFCQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDaEUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFXLEVBQUUsS0FBYSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDO2FBQzFELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNiLEtBQUssSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO1NBQ3pCLENBQUMsQ0FBQztRQUNMLE1BQU0sQ0FBQyxLQUFLLENBQUM7Ozs7WUFuRWhCLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQVpRLEtBQUs7NENBb0JULE1BQU0sU0FBQyxXQUFXO3dDQUNsQixNQUFNLFNBQUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IExvb2t1cEFjdGlvbnMgfSBmcm9tICcuL2xvb2t1cC5hY3Rpb25zJztcbmltcG9ydCB7IExvb2t1cCwgQWRkTG9va3VwUGF5bG9hZCB9IGZyb20gJy4vbG9va3VwLm1vZGVscyc7XG5pbXBvcnQgeyBMT09LVVBfUEFUSCwgTE9PS1VQX0tFWVMgfSBmcm9tICcuL2xvb2t1cC5tb2R1bGUnO1xuaW1wb3J0IHsgSHR0cEFjdGlvbnMgfSBmcm9tICcuLi9odHRwL2h0dHAuYWN0aW9ucyc7XG5pbXBvcnQgeyBidWlsZCB9IGZyb20gJy4uL3NoYXJlZC91dGlscyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIExvb2t1cFNlcnZpY2Uge1xuXG4gIF9rZXlzOiBzdHJpbmdbXSA9IFtdO1xuICBwYXRoID0gJ2xvb2t1cCc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHN0b3JlOiBTdG9yZTxhbnk+LFxuICAgIEBJbmplY3QoTE9PS1VQX1BBVEgpIGxvb2t1cFBhdGggPSAnbG9va3VwJyxcbiAgICBASW5qZWN0KExPT0tVUF9LRVlTKSBsb29rdXBLZXlzOiBzdHJpbmdbXSA9IFtdXG4gICkge1xuICAgIHRoaXMucGF0aCA9IGxvb2t1cFBhdGg7XG4gICAgdGhpcy5rZXlzID0gbG9va3VwS2V5cztcbiAgfVxuXG4gIGdldCBrZXlzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5fa2V5cztcbiAgfVxuXG4gIHNldCBrZXlzKHZhbHVlOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuX2tleXMgPSB2YWx1ZTtcbiAgfVxuXG4gIGxvYWQoa2V5czogc3RyaW5nW10sIHZhbHVlcz86IExvb2t1cFtdKTogdm9pZCB7XG4gICAgaWYgKHZhbHVlcykge1xuICAgICAgdGhpcy5sb2FkVmFsdWVzKHZhbHVlcyk7XG4gICAgfVxuICAgIHRoaXMubG9hZEtleXMoa2V5cyk7XG4gIH1cblxuICBsb2FkS2V5cyhrZXlzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIHRoaXMua2V5cyA9IGtleXM7XG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaChIdHRwQWN0aW9ucy5nZXQoYCR7dGhpcy5wYXRofSR7dGhpcy5idWlsZFF1ZXJ5U3RyaW5nKCl9YCwgTG9va3VwQWN0aW9ucy5BRERfS0VZUykpO1xuICB9XG5cbiAgbG9hZFZhbHVlcyh2YWx1ZXM6IExvb2t1cFtdKTogdm9pZCB7XG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaChMb29rdXBBY3Rpb25zLmFkZFZhbHVlcyh2YWx1ZXMpKTtcbiAgfVxuXG4gIGxvb2t1cChrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuc2VsZWN0KCdsb29rdXAnKS5waXBlKFxuICAgICAgbWFwKHMgPT4gc1trZXldKVxuICAgICk7XG4gIH1cblxuICBhZGRLZXkoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKExvb2t1cEFjdGlvbnMuYWRkS2V5KFxuICAgICAgYnVpbGQoQWRkTG9va3VwUGF5bG9hZCxcbiAgICAgICAge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9XG4gICAgICApKSk7XG4gIH1cblxuICByZW1vdmVLZXkoa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKExvb2t1cEFjdGlvbnMucmVtb3ZlS2V5KGtleSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZFF1ZXJ5U3RyaW5nKCk6IHN0cmluZyB7XG4gICAgbGV0IHF1ZXJ5ID0gdGhpcy5rZXlzLmxlbmd0aCA+IDAgPyBgP2tleXM9JHt0aGlzLmtleXNbMF19YCA6ICcnO1xuICAgIHRoaXMua2V5cy5maWx0ZXIoKGtleTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiBpbmRleCAhPT0gMClcbiAgICAgIC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIHF1ZXJ5ICs9IGAma2V5cz0ke2tleX1gO1xuICAgICAgfSk7XG4gICAgcmV0dXJuIHF1ZXJ5O1xuICB9XG5cbn1cbiJdfQ==