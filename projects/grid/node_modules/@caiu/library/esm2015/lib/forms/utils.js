/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { FormBuilder } from '@angular/forms';
import { FormArray } from './models';
import { getAllProps, ignoreKey, inArray, build, getValue } from '../shared/utils';
/**
 * @param {?} fb
 * @param {?} value
 * @return {?}
 */
export function buildAbstractControl(fb, value) {
    return isGroupValue(value) ? fb.group(buildControlsConfig(value, fb)) : fb.control(value);
}
/**
 * Construct form builder and initialize new form array
 * @template T
 * @param {?} ctor
 * @param {?=} validator
 * @param {?=} asyncValidator
 * @return {?}
 */
export function buildArrayFromType(ctor, validator, asyncValidator) {
    const /** @type {?} */ fb = new FormBuilder();
    return FormArray.BuildWithType(ctor, fb, [], validator, asyncValidator);
}
/**
 * @param {?} fb
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
export function buildControl(fb, model, key) {
    return isFormGroup(model, key) ?
        fb.group(buildControlsConfig(model[key], fb))
        : (isFormArray(model, key) ? buildFormArray(fb, model, key)
            : (hasValidators(model, key) ? [model[key], model['metadata'][key]['validators']]
                : [model[key]]));
}
/**
 * Construct form builder and initialize new form group.
 * @template T
 * @param {?} model
 * @return {?}
 */
export function buildControlFromModel(model) {
    const /** @type {?} */ fb = new FormBuilder();
    const /** @type {?} */ controlsConfig = buildControlsConfig(model, fb);
    return hasGroupValidators(model) ? fb.group(controlsConfig, model['metadata']['validators']) : fb.group(controlsConfig);
}
/**
 * Function to recursively construct form control config object.
 * @param {?} model
 * @param {?} fb
 * @return {?}
 */
export function buildControlsConfig(model, fb) {
    const /** @type {?} */ keys = getAllProps(model);
    const /** @type {?} */ config = {};
    return keys.filter(key => key !== 'metadata' && !ignoreKey(model, key))
        .reduce((acc, key) => Object.assign({}, acc, { [key]: buildControl(fb, model, key) }), {});
}
/**
 * Initialize new form array.
 * @template T
 * @param {?} fb
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
export function buildFormArray(fb, model, key) {
    const /** @type {?} */ ctor = findFormArrayType(model, key);
    const /** @type {?} */ value = model[key];
    const /** @type {?} */ controls = buildFormArrayControls(fb, value, ctor);
    return ctor ? FormArray.BuildWithType(ctor, fb, controls) : FormArray.Build(fb, []);
}
/**
 * @template T
 * @param {?} fb
 * @param {?} value
 * @param {?=} ctor
 * @return {?}
 */
export function buildFormArrayControls(fb, value, ctor) {
    return ctor ? value.map(x => buildAbstractControl(fb, getValue(build(ctor, x))))
        : value.map(x => buildAbstractControl(fb, x));
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
export function findFormArrayType(model, key) {
    return model['metadata'] && model['metadata'][key] ? /** @type {?} */ (model['metadata'][key]['type']) : null;
}
/**
 * @param {?} model
 * @return {?}
 */
export function hasGroupValidators(model) {
    return model['metadata'] && model['metadata']['validators'];
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
export function hasValidators(model, key) {
    return model['metadata'] && model['metadata'][key] && model['metadata'][key]['validators'];
}
/**
 * @param {?} value
 * @return {?}
 */
export function isArrayValue(value) {
    return Array.isArray(value);
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
export function isFormArray(model, key) {
    return Array.isArray(model[key]) && model['metadata'] && model['metadata'][key] && model['metadata'][key]['isFormArray'];
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
export function isFormControl(model, key) {
    return model['metadata'] && model['metadata']['controls'] && inArray(model['metadata']['controls'], key);
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
export function isFormGroup(model, key) {
    return model[key]
        && typeof model[key] === 'object'
        && !Array.isArray(model[key])
        && Object.keys(model[key]).length > 0
        && !isFormControl(model, key)
        && !isFormArray(model, key);
}
/**
 * @param {?} value
 * @return {?}
 */
export function isGroupValue(value) {
    return typeof value === 'object' && Object.keys(value).length > 0 && !isArrayValue(value);
}

//# sourceMappingURL=data:application/json;base64,