/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { FormArray as Ng2FormArray } from '@angular/forms';
import { buildAbstractControl, buildControlsConfig } from './utils';
import { build, getValue, toArray } from '../shared/utils';
export class FormArray extends Ng2FormArray {
    /**
     * @param {?} fb
     * @param {?} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     */
    constructor(fb, controls, validator, asyncValidator) {
        super(controls, validator, asyncValidator);
        this.fb = fb;
    }
    /**
     * @template T
     * @param {?} fb
     * @param {?} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    static Build(fb, controls, validator, asyncValidator) {
        return new FormArray(fb, controls, validator, asyncValidator);
    }
    /**
     * @template T
     * @param {?} ctor
     * @param {?} fb
     * @param {?=} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    static BuildWithType(ctor, fb, controls = [], validator, asyncValidator) {
        const /** @type {?} */ fa = new FormArray(fb, controls, validator, asyncValidator);
        fa.ctor = ctor;
        return fa;
    }
    /**
     * @template T
     * @param {?} ctor
     * @param {?} value
     * @param {?} fb
     * @param {?=} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    static BuildWithTypeAndValue(ctor, value, fb, controls = [], validator, asyncValidator) {
        const /** @type {?} */ fa = new FormArray(fb, controls, validator, asyncValidator);
        fa.ctor = ctor;
        fa.setValue(value);
        return fa;
    }
    /**
     * @template T
     * @param {?} value
     * @param {?} fb
     * @param {?=} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    static BuildWithValue(value, fb, controls = [], validator, asyncValidator) {
        const /** @type {?} */ fa = new FormArray(fb, controls, validator, asyncValidator);
        fa.setValue(value);
        return fa;
    }
    /**
     * @param {?} value
     * @param {?} ctor
     * @return {?}
     */
    static GetValue(value, ctor) {
        return toArray(value).map(x => getValue(build(ctor, x)));
    }
    /**
     * @return {?}
     */
    get maxIndex() {
        return this.length - 1;
    }
    /**
     * @return {?}
     */
    get values() {
        return [...this.value];
    }
    /**
     * @param {?} n
     * @return {?}
     */
    buildControls(n) {
        return this.buildItems(n).map(x => buildAbstractControl(this.fb, x));
    }
    /**
     * @param {?} n
     * @return {?}
     */
    buildItems(n) {
        return Array.from(Array(n).keys()).map(x => this.ctor ? getValue(new this.ctor()) : {});
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getValue(value) {
        return this.ctor ? toArray(value).map(x => getValue(build(this.ctor, x))) : value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    resetValue(value) {
        this.removeAll();
        this.addControls(value);
        this.setValue(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setLength(value) {
        if (this.length < value) {
            this.add(value - this.length);
        }
        else if (this.length > value) {
            this.remove(this.length - value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValue(value) {
        this.setLength(value.length);
        super.setValue(this.getValue(value));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    findControlById(id) {
        return this.controls.find(control => control.value && control.value['id'] && control.value['id'] === id);
    }
    /**
     * @return {?}
     */
    removeAll() {
        this.controls = [];
    }
    /**
     * @param {?} indexes
     * @return {?}
     */
    removeIndexes(indexes) {
        indexes.forEach(index => {
            this.removeAt(index);
        });
    }
    /**
     * @param {?} n
     * @return {?}
     */
    add(n) {
        this.buildControls(n).forEach(x => {
            this.push(x);
        });
    }
    /**
     * @param {?} n
     * @return {?}
     */
    remove(n) {
        const /** @type {?} */ k = Math.min(n, this.length);
        Array.from(Array(k).keys()).forEach(x => {
            this.removeAt(this.maxIndex);
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    addControls(value) {
        const /** @type {?} */ controls = value.map(x => this.fb.group(buildControlsConfig(x, this.fb)));
        controls.forEach(control => {
            this.push(control);
        });
    }
    /**
     * Set value of each control.
     * @param {?} ctor Class constructor
     * @param {?} props Values to assign to props of each control
     * @return {?}
     */
    setAll(ctor, props) {
        this.controls.forEach(control => {
            control.setValue(build(new ctor(), control.value, props));
        });
    }
}
function FormArray_tsickle_Closure_declarations() {
    /** @type {?} */
    FormArray.prototype.ctor;
    /** @type {?} */
    FormArray.prototype.fb;
}

//# sourceMappingURL=data:application/json;base64,