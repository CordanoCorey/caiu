/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Effect, Actions } from '@ngrx/effects';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { ErrorActions } from './errors.actions';
import { ErrorsService } from './errors.service';
export class ErrorEffects {
    /**
     * @param {?} actions$
     * @param {?} service
     */
    constructor(actions$, service) {
        this.actions$ = actions$;
        this.service = service;
        /**
         * Listens for thrown errors and handles them accordingly
         */
        this.handleError$ = this.actions$.pipe(filter((action) => action.type === ErrorActions.THROW_ERROR), map((data) => {
            return /** @type {?} */ ({ type: ErrorActions.HANDLE_ERROR });
        }));
    }
}
ErrorEffects.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ErrorEffects.ctorParameters = () => [
    { type: Actions },
    { type: ErrorsService }
];
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Observable)
], ErrorEffects.prototype, "handleError$", void 0);
function ErrorEffects_tsickle_Closure_declarations() {
    /** @type {?} */
    ErrorEffects.prototype.actionTypes;
    /**
     * Listens for thrown errors and handles them accordingly
     * @type {?}
     */
    ErrorEffects.prototype.handleError$;
    /** @type {?} */
    ErrorEffects.prototype.actions$;
    /** @type {?} */
    ErrorEffects.prototype.service;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmVmZmVjdHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2Vycm9ycy9lcnJvcnMuZWZmZWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFJakQsTUFBTTs7Ozs7SUFhRixZQUNZLFVBQ0E7UUFEQSxhQUFRLEdBQVIsUUFBUTtRQUNSLFlBQU8sR0FBUCxPQUFPOzs7OzRCQVQwQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDM0QsTUFBTSxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQyxXQUFXLENBQUMsRUFDcEUsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDVCxNQUFNLG1CQUFTLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxZQUFZLEVBQUUsRUFBQztTQUN0RCxDQUFDLENBQ0w7S0FLSTs7O1lBakJSLFVBQVU7Ozs7WUFUTSxPQUFPO1lBTWYsYUFBYTs7O0lBVWpCLE1BQU0sRUFBRTtzQ0FBZSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFZmZlY3QsIEFjdGlvbnMgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcclxuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgRXJyb3JBY3Rpb25zIH0gZnJvbSAnLi9lcnJvcnMuYWN0aW9ucyc7XHJcbmltcG9ydCB7IEVycm9yc1NlcnZpY2UgfSBmcm9tICcuL2Vycm9ycy5zZXJ2aWNlJztcclxuXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBFcnJvckVmZmVjdHMge1xyXG4gICAgYWN0aW9uVHlwZXM6IHN0cmluZ1tdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTGlzdGVucyBmb3IgdGhyb3duIGVycm9ycyBhbmQgaGFuZGxlcyB0aGVtIGFjY29yZGluZ2x5XHJcbiAgICAgKi9cclxuICAgIEBFZmZlY3QoKSBoYW5kbGVFcnJvciQ6IE9ic2VydmFibGU8QWN0aW9uPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgICAgICBmaWx0ZXIoKGFjdGlvbjogQWN0aW9uKSA9PiBhY3Rpb24udHlwZSA9PT0gRXJyb3JBY3Rpb25zLlRIUk9XX0VSUk9SKSxcclxuICAgICAgICBtYXAoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIDxBY3Rpb24+eyB0eXBlOiBFcnJvckFjdGlvbnMuSEFORExFX0VSUk9SIH07XHJcbiAgICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBhY3Rpb25zJDogQWN0aW9ucyxcclxuICAgICAgICBwcml2YXRlIHNlcnZpY2U6IEVycm9yc1NlcnZpY2VcclxuICAgICkgeyB9XHJcbn1cclxuIl19