/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { of, combineLatest } from 'rxjs';
import { map, distinctUntilChanged } from 'rxjs/operators';
import { Breadcrumbs } from './models';
import { QueryModel } from '../shared/models';
import { toArray, toInt } from '../shared/utils';
/**
 * @param {?} store
 * @return {?}
 */
export function routeSelector(store) {
    return store.select('route');
}
/**
 * @param {?} store
 * @return {?}
 */
export function breadcrumbsSelector(store) {
    return routeSelector(store).pipe(map(r => {
        const /** @type {?} */ outlets = r.activatedOutlets;
        return new Breadcrumbs(Object.keys(outlets).map(key => outlets[key]));
    }));
}
/**
 * @param {?} store
 * @return {?}
 */
export function routeNameSelector(store) {
    return routeSelector(store).pipe(map(r => r.routeName), distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
export function routeParamsSelector(store) {
    return routeSelector(store).pipe(map(r => r.params), distinctUntilChanged());
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
export function lazyRouteParamsSelector(store, key) {
    return routeParamsSelector(store).pipe(map(params => params[key]), distinctUntilChanged());
}
/**
 * @param {?} store
 * @param {?} key
 * @param {?=} defaultValue
 * @return {?}
 */
export function routeParamSelector(store, key, defaultValue = null) {
    return combineLatest(of(defaultValue), lazyRouteParamsSelector(store, key), (x, y) => {
        return y || x;
    });
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
export function routeParamArraySelector(store, key) {
    return routeParamSelector(store, key, []).pipe(map(x => toArray(x)));
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
export function routeParamIdSelector(store, key) {
    return routeParamIntSelector(store, key);
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
export function routeParamIntSelector(store, key) {
    return routeParamSelector(store, key, 0).pipe(map(x => toInt(x)));
}
/**
 * @param {?} store
 * @return {?}
 */
export function urlSelector(store) {
    return routeSelector(store).pipe(map(r => r.url), distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
export function querySelector(store) {
    const /** @type {?} */ skip$ = routeParamIntSelector(store, 'skip');
    const /** @type {?} */ take$ = routeParamIntSelector(store, 'take');
    const /** @type {?} */ term$ = routeParamSelector(store, 'term');
    return combineLatest(skip$, take$, term$, (skip, take, term) => (Object.assign(new QueryModel(), {
        skip,
        take,
        term
    })));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNhaXUvbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9yb3V0ZXIvc2VsZWN0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQWMsRUFBRSxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyRCxPQUFPLEVBQUUsR0FBRyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0QsT0FBTyxFQUFlLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7QUFFakQsTUFBTSx3QkFBd0IsS0FBaUI7SUFDM0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDaEM7Ozs7O0FBRUQsTUFBTSw4QkFBOEIsS0FBaUI7SUFDakQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQzVCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNKLHVCQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7UUFDbkMsTUFBTSxDQUFDLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6RSxDQUFDLENBQ0wsQ0FBQztDQUNMOzs7OztBQUVELE1BQU0sNEJBQTRCLEtBQWlCO0lBQy9DLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUM1QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQ3JCLG9CQUFvQixFQUFFLENBQ3pCLENBQUM7Q0FDTDs7Ozs7QUFFRCxNQUFNLDhCQUE4QixLQUFpQjtJQUNqRCxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FDNUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUNsQixvQkFBb0IsRUFBRSxDQUN6QixDQUFDO0NBQ0w7Ozs7OztBQUVELE1BQU0sa0NBQWtDLEtBQWlCLEVBQUUsR0FBVztJQUNsRSxNQUFNLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUNsQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDMUIsb0JBQW9CLEVBQUUsQ0FDekIsQ0FBQztDQUNMOzs7Ozs7O0FBRUQsTUFBTSw2QkFBNkIsS0FBaUIsRUFBRSxHQUFXLEVBQUUsWUFBWSxHQUFHLElBQUk7SUFDbEYsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsdUJBQXVCLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2pGLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2pCLENBQUMsQ0FBQztDQUNOOzs7Ozs7QUFFRCxNQUFNLGtDQUFrQyxLQUFpQixFQUFFLEdBQVc7SUFDbEUsTUFBTSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUMxQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDdkIsQ0FBQztDQUNMOzs7Ozs7QUFFRCxNQUFNLCtCQUErQixLQUFpQixFQUFFLEdBQVc7SUFDL0QsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztDQUM1Qzs7Ozs7O0FBRUQsTUFBTSxnQ0FBZ0MsS0FBaUIsRUFBRSxHQUFXO0lBQ2hFLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDekMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3JCLENBQUM7Q0FDTDs7Ozs7QUFFRCxNQUFNLHNCQUFzQixLQUFpQjtJQUN6QyxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FDNUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUNmLG9CQUFvQixFQUFFLENBQ3pCLENBQUM7Q0FDTDs7Ozs7QUFFRCxNQUFNLHdCQUF3QixLQUFpQjtJQUMzQyx1QkFBTSxLQUFLLEdBQUcscUJBQXFCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25ELHVCQUFNLEtBQUssR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkQsdUJBQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoRCxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUNwQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUNsQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxFQUFPLEVBQy9CO1FBQ0ksSUFBSTtRQUNKLElBQUk7UUFDSixJQUFJO0tBQ1AsQ0FDSixDQUNKLENBQUMsQ0FBQztDQUNWIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgZGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBSb3V0ZXJTdGF0ZSwgQnJlYWRjcnVtYnMgfSBmcm9tICcuL21vZGVscyc7XHJcbmltcG9ydCB7IFF1ZXJ5TW9kZWwgfSBmcm9tICcuLi9zaGFyZWQvbW9kZWxzJztcclxuaW1wb3J0IHsgdG9BcnJheSwgdG9JbnQgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdXRlU2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4pOiBPYnNlcnZhYmxlPFJvdXRlclN0YXRlPiB7XHJcbiAgICByZXR1cm4gc3RvcmUuc2VsZWN0KCdyb3V0ZScpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYnJlYWRjcnVtYnNTZWxlY3RvcihzdG9yZTogU3RvcmU8YW55Pik6IE9ic2VydmFibGU8QnJlYWRjcnVtYnM+IHtcclxuICAgIHJldHVybiByb3V0ZVNlbGVjdG9yKHN0b3JlKS5waXBlKFxyXG4gICAgICAgIG1hcChyID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgb3V0bGV0cyA9IHIuYWN0aXZhdGVkT3V0bGV0cztcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCcmVhZGNydW1icyhPYmplY3Qua2V5cyhvdXRsZXRzKS5tYXAoa2V5ID0+IG91dGxldHNba2V5XSkpO1xyXG4gICAgICAgIH0pXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm91dGVOYW1lU2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4pOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuIHJvdXRlU2VsZWN0b3Ioc3RvcmUpLnBpcGUoXHJcbiAgICAgICAgbWFwKHIgPT4gci5yb3V0ZU5hbWUpLFxyXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3V0ZVBhcmFtc1NlbGVjdG9yKHN0b3JlOiBTdG9yZTxhbnk+KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiByb3V0ZVNlbGVjdG9yKHN0b3JlKS5waXBlKFxyXG4gICAgICAgIG1hcChyID0+IHIucGFyYW1zKSxcclxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGF6eVJvdXRlUGFyYW1zU2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4sIGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiByb3V0ZVBhcmFtc1NlbGVjdG9yKHN0b3JlKS5waXBlKFxyXG4gICAgICAgIG1hcChwYXJhbXMgPT4gcGFyYW1zW2tleV0pLFxyXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3V0ZVBhcmFtU2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4sIGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWUgPSBudWxsKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KG9mKGRlZmF1bHRWYWx1ZSksIGxhenlSb3V0ZVBhcmFtc1NlbGVjdG9yKHN0b3JlLCBrZXkpLCAoeCwgeSkgPT4ge1xyXG4gICAgICAgIHJldHVybiB5IHx8IHg7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdXRlUGFyYW1BcnJheVNlbGVjdG9yKHN0b3JlOiBTdG9yZTxhbnk+LCBrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55W10+IHtcclxuICAgIHJldHVybiByb3V0ZVBhcmFtU2VsZWN0b3Ioc3RvcmUsIGtleSwgW10pLnBpcGUoXHJcbiAgICAgICAgbWFwKHggPT4gdG9BcnJheSh4KSlcclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3V0ZVBhcmFtSWRTZWxlY3RvcihzdG9yZTogU3RvcmU8YW55Piwga2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuIHJvdXRlUGFyYW1JbnRTZWxlY3RvcihzdG9yZSwga2V5KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdXRlUGFyYW1JbnRTZWxlY3RvcihzdG9yZTogU3RvcmU8YW55Piwga2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuIHJvdXRlUGFyYW1TZWxlY3RvcihzdG9yZSwga2V5LCAwKS5waXBlKFxyXG4gICAgICAgIG1hcCh4ID0+IHRvSW50KHgpKVxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVybFNlbGVjdG9yKHN0b3JlOiBTdG9yZTxhbnk+KTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiByb3V0ZVNlbGVjdG9yKHN0b3JlKS5waXBlKFxyXG4gICAgICAgIG1hcChyID0+IHIudXJsKSxcclxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlTZWxlY3RvcihzdG9yZTogU3RvcmU8YW55Pik6IE9ic2VydmFibGU8UXVlcnlNb2RlbDxhbnk+PiB7XHJcbiAgICBjb25zdCBza2lwJCA9IHJvdXRlUGFyYW1JbnRTZWxlY3RvcihzdG9yZSwgJ3NraXAnKTtcclxuICAgIGNvbnN0IHRha2UkID0gcm91dGVQYXJhbUludFNlbGVjdG9yKHN0b3JlLCAndGFrZScpO1xyXG4gICAgY29uc3QgdGVybSQgPSByb3V0ZVBhcmFtU2VsZWN0b3Ioc3RvcmUsICd0ZXJtJyk7XHJcbiAgICByZXR1cm4gY29tYmluZUxhdGVzdChza2lwJCwgdGFrZSQsIHRlcm0kLFxyXG4gICAgICAgIChza2lwLCB0YWtlLCB0ZXJtKSA9PiAoXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24obmV3IFF1ZXJ5TW9kZWw8YW55PigpLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHNraXAsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFrZSxcclxuICAgICAgICAgICAgICAgICAgICB0ZXJtXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApKTtcclxufVxyXG4iXX0=