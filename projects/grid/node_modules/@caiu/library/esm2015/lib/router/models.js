/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { build, assignProps } from '../shared/utils';
export class ActivatedRoutePayload {
    constructor() {
        this.routeName = '';
    }
}
function ActivatedRoutePayload_tsickle_Closure_declarations() {
    /** @type {?} */
    ActivatedRoutePayload.prototype.routeName;
    /** @type {?} */
    ActivatedRoutePayload.prototype.parent;
}
export class Breadcrumbs {
    /**
     * @param {?} segments
     */
    constructor(segments) {
        this.segments = segments;
    }
}
function Breadcrumbs_tsickle_Closure_declarations() {
    /** @type {?} */
    Breadcrumbs.prototype.segments;
}
export class CustomRoute {
    /**
     * @param {?} props
     */
    constructor(props) {
        this.children = [];
        this.lazyChildren = [];
        this._path = '';
        assignProps(this, props);
    }
    /**
     * @return {?}
     */
    get path() {
        return this._path;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set path(value) {
        this._path = value;
    }
    /**
     * @return {?}
     */
    get route() {
        return {
            component: this.component,
            children: [
                ...this.children,
                ...this.lazyChildren
            ]
        };
    }
}
function CustomRoute_tsickle_Closure_declarations() {
    /** @type {?} */
    CustomRoute.prototype.children;
    /** @type {?} */
    CustomRoute.prototype.lazyChildren;
    /** @type {?} */
    CustomRoute.prototype.component;
    /** @type {?} */
    CustomRoute.prototype._path;
}
export class LazyRoute extends CustomRoute {
    /**
     * @param {?} props
     */
    constructor(props) {
        super(props);
        this.path = '';
    }
}
/**
 * @record
 */
export function RouterEvent() { }
function RouterEvent_tsickle_Closure_declarations() {
    /** @type {?} */
    RouterEvent.prototype.eventType;
    /** @type {?} */
    RouterEvent.prototype.event;
    /** @type {?|undefined} */
    RouterEvent.prototype.navigationCancel;
    /** @type {?|undefined} */
    RouterEvent.prototype.navigationEnd;
    /** @type {?|undefined} */
    RouterEvent.prototype.navigationError;
    /** @type {?|undefined} */
    RouterEvent.prototype.navigationStart;
    /** @type {?|undefined} */
    RouterEvent.prototype.routesRecognized;
}
/** @enum {number} */
const NavigationStatus = {
    Default: 0,
    NavigationStart: 1,
    NavigationCancel: 2,
    NavigationError: 3,
    RoutesRecognized: 4,
    NavigationEnd: 5,
};
export { NavigationStatus };
NavigationStatus[NavigationStatus.Default] = "Default";
NavigationStatus[NavigationStatus.NavigationStart] = "NavigationStart";
NavigationStatus[NavigationStatus.NavigationCancel] = "NavigationCancel";
NavigationStatus[NavigationStatus.NavigationError] = "NavigationError";
NavigationStatus[NavigationStatus.RoutesRecognized] = "RoutesRecognized";
NavigationStatus[NavigationStatus.NavigationEnd] = "NavigationEnd";
export class RouteSegment {
    constructor() {
        /**
         * The URL fragment shared by all the routes
         */
        this.fragment = '';
        /**
         * The order of the segment in the route
         */
        this.order = 0;
        /**
         * The outlet name of the route
         */
        this.outlet = '';
        /**
         * The label to pass to the anchor tag
         */
        this.routeLabel = '';
        /**
         * The unique identifier for the route segment
         */
        this.routeName = '';
    }
    /**
     * The link to pass to the anchor tag
     * @return {?}
     */
    get routerLink() {
        return this.pathFromRoot
            .map(r => r.url)
            .reduce((acc, x) => {
            const /** @type {?} */ segment = RouterState.BuildUrlSegment(x);
            return segment && segment !== '/' ? `${acc}${segment}` : acc;
        }, '');
    }
}
function RouteSegment_tsickle_Closure_declarations() {
    /**
     * The static and resolved data of this route
     * @type {?}
     */
    RouteSegment.prototype.data;
    /**
     * The URL fragment shared by all the routes
     * @type {?}
     */
    RouteSegment.prototype.fragment;
    /**
     * The order of the segment in the route
     * @type {?}
     */
    RouteSegment.prototype.order;
    /**
     * The outlet name of the route
     * @type {?}
     */
    RouteSegment.prototype.outlet;
    /**
     * The path from the root of the router state tree to this route
     * @type {?}
     */
    RouteSegment.prototype.pathFromRoot;
    /**
     * The matrix parameters scoped to this route
     * @type {?}
     */
    RouteSegment.prototype.params;
    /**
     * The label to pass to the anchor tag
     * @type {?}
     */
    RouteSegment.prototype.routeLabel;
    /**
     * The unique identifier for the route segment
     * @type {?}
     */
    RouteSegment.prototype.routeName;
    /**
     * The URL segments matched by this route
     * @type {?}
     */
    RouteSegment.prototype.url;
}
export class RouterState {
    constructor() {
        this.id = 0;
        this.error = undefined;
        this.events = [];
        this.history = [];
        this.navigationStatus = NavigationStatus.Default;
        this.reason = '';
        this.state = undefined;
        this.url = '';
        this.urlAfterRedirects = '';
    }
    /**
     * @param {?} props
     * @return {?}
     */
    static BuildRoute(props) {
        const /** @type {?} */ r = new CustomRoute(props);
        return /** @type {?} */ (r);
    }
    /**
     * @param {?} props
     * @return {?}
     */
    static BuildLazyRoute(props) {
        const /** @type {?} */ r = new LazyRoute(props);
        return /** @type {?} */ (r);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    static BuildUrlSegment(url) {
        return url.reduce((acc, segment) => segment.path && segment.path !== '/' ? `${acc}/${segment.path}` : acc, '');
    }
    /**
     * @param {?} root
     * @param {?=} index
     * @return {?}
     */
    static GetActivatedOutlets(root, index = 0) {
        return root ? root.children.reduce((acc, r, currentIndex) => {
            const /** @type {?} */ i = index + currentIndex;
            const /** @type {?} */ routeName = RouterState.GetRouteName(r);
            const /** @type {?} */ existing = build(RouteSegment, acc[routeName]);
            const /** @type {?} */ outlet = RouterState.GetRouteSegment(r, existing, i);
            return routeName ? Object.assign(acc, RouterState.GetActivatedOutlets(r, i + 1), { [routeName]: outlet })
                : Object.assign(acc, RouterState.GetActivatedOutlets(r, i + 1));
        }, {}) : {};
    }
    /**
     * @param {?} root
     * @return {?}
     */
    static GetActivatedRoute(root) {
        return root.children.reduce((acc, r) => {
            return RouterState.GetActivatedRoute(r);
        }, root);
    }
    /**
     * @param {?} route
     * @return {?}
     */
    static GetAllParams(route) {
        return route ? route.children.reduce((acc, r) => {
            return Object.assign({}, acc, RouterState.GetAllParams(r));
        }, Object.assign({}, route.params, route.queryParams)) : {};
    }
    /**
     * @param {?} route
     * @return {?}
     */
    static GetRouteData(route) {
        return route.data;
    }
    /**
     * @param {?} route
     * @param {?=} existing
     * @param {?=} index
     * @return {?}
     */
    static GetRouteSegment(route, existing = new RouteSegment(), index = 0) {
        const /** @type {?} */ routeName = RouterState.GetRouteName(route);
        return build(RouteSegment, existing, {
            data: route.data,
            fragment: route.fragment,
            order: index,
            outlet: route.outlet,
            pathFromRoot: route.pathFromRoot,
            params: route.params,
            routeName,
            routeLabel: RouterState.GetRouteData(route)['routeLabel'] || existing.routeLabel
        });
    }
    /**
     * @param {?} route
     * @return {?}
     */
    static GetRouteName(route) {
        return route ? RouterState.GetRouteData(route)['routeName'] : '';
    }
    /**
     * @return {?}
     */
    get activatedOutlets() {
        return RouterState.GetActivatedOutlets(this.rootRoute);
    }
    /**
     * @return {?}
     */
    get lastEvent() {
        return this.events[-1];
    }
    /**
     * @return {?}
     */
    get params() {
        return RouterState.GetAllParams(this.rootRoute);
    }
    /**
     * @return {?}
     */
    get routeName() {
        return RouterState.GetRouteName(this.activatedRoute);
    }
    /**
     * @return {?}
     */
    get visited() {
        return this.history.map(x => x.link);
    }
    /**
     * @param {?} e
     * @param {?} eventType
     * @return {?}
     */
    addRouterEvent(e, eventType) {
        const /** @type {?} */ newEvent = /** @type {?} */ ({ eventType: eventType, event: e });
        return [
            ...this.events,
            newEvent
        ];
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    navigationCancel(payload) {
        return build(RouterState, this, {
            navigationStatus: NavigationStatus.NavigationCancel,
            events: this.addRouterEvent(payload, NavigationStatus.NavigationCancel),
            id: payload.id,
            url: payload.url,
            reason: payload.reason
        });
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    navigationEnd(payload) {
        const /** @type {?} */ history = [payload.toString(), ...this.history];
        return build(RouterState, this, {
            history,
            navigationStatus: NavigationStatus.NavigationEnd,
            events: this.addRouterEvent(payload, NavigationStatus.NavigationEnd),
            id: payload.id,
            url: payload.url,
            urlAfterRedirects: payload.urlAfterRedirects
        });
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    navigationError(payload) {
        return build(RouterState, this, {
            navigationStatus: NavigationStatus.NavigationError,
            events: this.addRouterEvent(payload, NavigationStatus.NavigationError),
            id: payload.id,
            url: payload.url,
            error: payload.error
        });
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    navigationStart(payload) {
        return build(RouterState, this, {
            navigationStatus: NavigationStatus.NavigationStart,
            events: this.addRouterEvent(payload, NavigationStatus.NavigationStart),
            id: payload.id,
            url: payload.url
        });
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    routesRecognized(payload) {
        const /** @type {?} */ rootRoute = payload.state.root;
        const /** @type {?} */ activatedRoute = RouterState.GetActivatedRoute(rootRoute);
        return build(RouterState, this, {
            activatedRoute,
            rootRoute,
            navigationStatus: NavigationStatus.RoutesRecognized,
            events: this.addRouterEvent(payload, NavigationStatus.RoutesRecognized),
            id: payload.id,
            state: payload.state,
            url: payload.url,
            urlAfterRedirects: payload.urlAfterRedirects
        });
    }
}
function RouterState_tsickle_Closure_declarations() {
    /** @type {?} */
    RouterState.prototype.id;
    /** @type {?} */
    RouterState.prototype.activatedRoute;
    /** @type {?} */
    RouterState.prototype.error;
    /** @type {?} */
    RouterState.prototype.events;
    /** @type {?} */
    RouterState.prototype.history;
    /** @type {?} */
    RouterState.prototype.navigationStatus;
    /** @type {?} */
    RouterState.prototype.reason;
    /** @type {?} */
    RouterState.prototype.rootRoute;
    /** @type {?} */
    RouterState.prototype.state;
    /** @type {?} */
    RouterState.prototype.url;
    /** @type {?} */
    RouterState.prototype.urlAfterRedirects;
}
export class VisitedRoute {
    constructor() {
        this.label = '';
        this.link = '';
        this.name = '';
        this.visitTime = new Date();
    }
}
function VisitedRoute_tsickle_Closure_declarations() {
    /** @type {?} */
    VisitedRoute.prototype.label;
    /** @type {?} */
    VisitedRoute.prototype.link;
    /** @type {?} */
    VisitedRoute.prototype.name;
    /** @type {?} */
    VisitedRoute.prototype.visitTime;
}

//# sourceMappingURL=data:application/json;base64,