/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { of } from 'rxjs';
import { combineLatest, skip, take } from 'rxjs/operators';
import { EventActions } from './events.actions';
import { eventValueSelector } from './events.selectors';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
export class EventsService {
    /**
     * @param {?} store
     */
    constructor(store) {
        this.store = store;
        this.eventIndex = 0;
        this.events = [];
    }
    /**
     * @return {?}
     */
    get eventKey() {
        this.eventIndex++;
        return `event-${this.eventIndex}`;
    }
    /**
     * @param {?} actionType
     * @param {?=} handler
     * @return {?}
     */
    addEvent(actionType, handler) {
        const /** @type {?} */ f = handler ? handler : (action) => true;
        const /** @type {?} */ actionWithKey = EventActions.addEvent(actionType, f, false);
        this.store.dispatch(actionWithKey);
        return actionWithKey.key;
    }
    /**
     * @param {?} action
     * @param {?=} handler
     * @return {?}
     */
    dispatch(action, handler) {
        return this.dispatchHttpAction(action, handler);
    }
    /**
     * @param {?} action
     * @param {?=} handler
     * @return {?}
     */
    dispatchHttpAction(action, handler) {
        const /** @type {?} */ successAction = action.payload.onSuccess;
        const /** @type {?} */ errorAction = typeof (action.payload.onError) === 'string' ? action.payload.onError : null;
        const /** @type {?} */ success = this.takeOne(successAction, handler);
        const /** @type {?} */ obs = errorAction ? success.pipe(combineLatest(this.takeOne(errorAction, handler), (x, y) => true)) : success;
        this.store.dispatch(action);
        return obs;
    }
    /**
     * @param {?} eventKey
     * @return {?}
     */
    removeEvent(eventKey) {
        this.store.dispatch(EventActions.removeEvent(eventKey));
    }
    /**
     * @param {?} action
     * @param {?} handler
     * @return {?}
     */
    subscribe(action, handler) {
        return this.take(1, action).subscribe(handler);
    }
    /**
     * @param {?=} n
     * @param {?=} actionType
     * @param {?=} handler
     * @return {?}
     */
    take(n = 1, actionType, handler) {
        const /** @type {?} */ key = this.addEvent(actionType, handler);
        return eventValueSelector(this.store, key).pipe(skip(1), take(n));
    }
    /**
     * @param {?=} n
     * @param {?=} actions
     * @param {?=} handler
     * @return {?}
     */
    takeFrom(n = 1, actions, handler) {
        const /** @type {?} */ keys = actions.map(action => this.addEvent(action, handler));
        return keys.map(key => eventValueSelector(this.store, key))
            .reduce((acc, obs) => {
            return acc.pipe(combineLatest(obs, (x, y) => true));
        }, of(false)).pipe(skip(1), take(n));
    }
    /**
     * @param {?} actionType
     * @param {?=} handler
     * @return {?}
     */
    takeOne(actionType, handler) {
        return this.take(1, actionType, handler);
    }
}
EventsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
EventsService.ctorParameters = () => [
    { type: Store }
];
/** @nocollapse */ EventsService.ngInjectableDef = i0.defineInjectable({ factory: function EventsService_Factory() { return new EventsService(i0.inject(i1.Store)); }, token: EventsService, providedIn: "root" });
function EventsService_tsickle_Closure_declarations() {
    /** @type {?} */
    EventsService.prototype.eventIndex;
    /** @type {?} */
    EventsService.prototype.events;
    /** @type {?} */
    EventsService.prototype.store;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2V2ZW50cy9ldmVudHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBNEIsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7O0FBT3hELE1BQU07Ozs7SUFLSixZQUFtQixLQUFpQjtRQUFqQixVQUFLLEdBQUwsS0FBSyxDQUFZOzBCQUh2QixDQUFDO3NCQUNJLEVBQUU7S0FHbkI7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsTUFBTSxDQUFDLFNBQVMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQ25DOzs7Ozs7SUFFRCxRQUFRLENBQUMsVUFBa0IsRUFBRSxPQUFpQztRQUM1RCx1QkFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDdkQsdUJBQU0sYUFBYSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcs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LEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzFDOzs7WUFyRUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBWFEsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgc2tpcCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IEV2ZW50QWN0aW9ucyB9IGZyb20gJy4vZXZlbnRzLmFjdGlvbnMnO1xyXG5pbXBvcnQgeyBldmVudFZhbHVlU2VsZWN0b3IgfSBmcm9tICcuL2V2ZW50cy5zZWxlY3RvcnMnO1xyXG5pbXBvcnQgeyBIdHRwQWN0aW9uIH0gZnJvbSAnLi4vaHR0cC9odHRwLm1vZGVscyc7XHJcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4uL3N0b3JlL21vZGVscyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFdmVudHNTZXJ2aWNlIHtcclxuXHJcbiAgZXZlbnRJbmRleCA9IDA7XHJcbiAgZXZlbnRzOiBFdmVudFtdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzdG9yZTogU3RvcmU8YW55Pikge1xyXG4gIH1cclxuXHJcbiAgZ2V0IGV2ZW50S2V5KCk6IHN0cmluZyB7XHJcbiAgICB0aGlzLmV2ZW50SW5kZXgrKztcclxuICAgIHJldHVybiBgZXZlbnQtJHt0aGlzLmV2ZW50SW5kZXh9YDtcclxuICB9XHJcblxyXG4gIGFkZEV2ZW50KGFjdGlvblR5cGU6IHN0cmluZywgaGFuZGxlcj86IChhY3Rpb246IEFjdGlvbikgPT4gYW55KTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGYgPSBoYW5kbGVyID8gaGFuZGxlciA6IChhY3Rpb246IEFjdGlvbikgPT4gdHJ1ZTtcclxuICAgIGNvbnN0IGFjdGlvbldpdGhLZXkgPSBFdmVudEFjdGlvbnMuYWRkRXZlbnQoYWN0aW9uVHlwZSwgZiwgZmFsc2UpO1xyXG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaChhY3Rpb25XaXRoS2V5KTtcclxuICAgIHJldHVybiBhY3Rpb25XaXRoS2V5LmtleTtcclxuICB9XHJcblxyXG4gIGRpc3BhdGNoKGFjdGlvbjogSHR0cEFjdGlvbiwgaGFuZGxlcj86IChhY3Rpb246IEFjdGlvbikgPT4gYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoSHR0cEFjdGlvbihhY3Rpb24sIGhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgZGlzcGF0Y2hIdHRwQWN0aW9uKGFjdGlvbjogSHR0cEFjdGlvbiwgaGFuZGxlcj86IChhY3Rpb246IEFjdGlvbikgPT4gYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHN1Y2Nlc3NBY3Rpb24gPSBhY3Rpb24ucGF5bG9hZC5vblN1Y2Nlc3M7XHJcbiAgICBjb25zdCBlcnJvckFjdGlvbiA9IHR5cGVvZiAoYWN0aW9uLnBheWxvYWQub25FcnJvcikgPT09ICdzdHJpbmcnID8gYWN0aW9uLnBheWxvYWQub25FcnJvciA6IG51bGw7XHJcbiAgICBjb25zdCBzdWNjZXNzID0gdGhpcy50YWtlT25lKHN1Y2Nlc3NBY3Rpb24sIGhhbmRsZXIpO1xyXG4gICAgY29uc3Qgb2JzID0gZXJyb3JBY3Rpb24gPyBzdWNjZXNzLnBpcGUoXHJcbiAgICAgIGNvbWJpbmVMYXRlc3QodGhpcy50YWtlT25lKGVycm9yQWN0aW9uLCBoYW5kbGVyKSwgKHgsIHkpID0+IHRydWUpXHJcbiAgICApIDogc3VjY2VzcztcclxuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goYWN0aW9uKTtcclxuICAgIHJldHVybiBvYnM7XHJcbiAgfVxyXG5cclxuICByZW1vdmVFdmVudChldmVudEtleTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKEV2ZW50QWN0aW9ucy5yZW1vdmVFdmVudChldmVudEtleSkpO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlKGFjdGlvbjogc3RyaW5nLCBoYW5kbGVyOiAoZTogYW55KSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uIHtcclxuICAgIHJldHVybiB0aGlzLnRha2UoMSwgYWN0aW9uKS5zdWJzY3JpYmUoaGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICB0YWtlKG4gPSAxLCBhY3Rpb25UeXBlOiBzdHJpbmcsIGhhbmRsZXI/OiAoYWN0aW9uOiBBY3Rpb24pID0+IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBrZXkgPSB0aGlzLmFkZEV2ZW50KGFjdGlvblR5cGUsIGhhbmRsZXIpO1xyXG4gICAgcmV0dXJuIGV2ZW50VmFsdWVTZWxlY3Rvcih0aGlzLnN0b3JlLCBrZXkpLnBpcGUoXHJcbiAgICAgIHNraXAoMSksXHJcbiAgICAgIHRha2UobilcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICB0YWtlRnJvbShuID0gMSwgYWN0aW9uczogc3RyaW5nW10sIGhhbmRsZXI/OiAoYWN0aW9uOiBBY3Rpb24pID0+IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBrZXlzID0gYWN0aW9ucy5tYXAoYWN0aW9uID0+IHRoaXMuYWRkRXZlbnQoYWN0aW9uLCBoYW5kbGVyKSk7XHJcbiAgICByZXR1cm4ga2V5cy5tYXAoa2V5ID0+IGV2ZW50VmFsdWVTZWxlY3Rvcih0aGlzLnN0b3JlLCBrZXkpKVxyXG4gICAgICAucmVkdWNlKChhY2MsIG9icykgPT4ge1xyXG4gICAgICAgIHJldHVybiBhY2MucGlwZShcclxuICAgICAgICAgIGNvbWJpbmVMYXRlc3Qob2JzLCAoeCwgeSkgPT4gdHJ1ZSlcclxuICAgICAgICApO1xyXG4gICAgICB9LCBvZihmYWxzZSkpLnBpcGUoXHJcbiAgICAgICAgc2tpcCgxKSxcclxuICAgICAgICB0YWtlKG4pXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICB0YWtlT25lKGFjdGlvblR5cGU6IHN0cmluZywgaGFuZGxlcj86IChhY3Rpb246IEFjdGlvbikgPT4gYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLnRha2UoMSwgYWN0aW9uVHlwZSwgaGFuZGxlcik7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=