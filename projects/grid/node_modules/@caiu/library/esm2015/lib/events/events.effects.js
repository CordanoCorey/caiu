/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { EventActions } from './events.actions';
import { Events } from './events.models';
export class EventEffects {
    /**
     * @param {?} actions$
     * @param {?} store
     */
    constructor(actions$, store) {
        this.actions$ = actions$;
        this.store = store;
        this.events = new Events();
        /**
         * Trigger event if action is a registered trigger.
         */
        this.onTriggerEvent = this.actions$.pipe(filter(action => this.events.actions.indexOf(action.type) !== -1), map(this.trigger));
        this.store.select(s => s['events'])
            .subscribe(events => {
            this.events = events;
        });
    }
    /**
     * @param {?} action
     * @return {?}
     */
    trigger(action) {
        return EventActions.triggerEvent(action);
    }
}
EventEffects.decorators = [
    { type: Injectable },
];
/** @nocollapse */
EventEffects.ctorParameters = () => [
    { type: Actions },
    { type: Store }
];
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Observable)
], EventEffects.prototype, "onTriggerEvent", void 0);
function EventEffects_tsickle_Closure_declarations() {
    /** @type {?} */
    EventEffects.prototype.events;
    /**
     * Trigger event if action is a registered trigger.
     * @type {?}
     */
    EventEffects.prototype.onTriggerEvent;
    /** @type {?} */
    EventEffects.prototype.actions$;
    /** @type {?} */
    EventEffects.prototype.store;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmVmZmVjdHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2V2ZW50cy9ldmVudHMuZWZmZWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUl6QyxNQUFNOzs7OztJQVlGLFlBQ1ksVUFDQTtRQURBLGFBQVEsR0FBUixRQUFRO1FBQ1IsVUFBSyxHQUFMLEtBQUs7c0JBWkEsSUFBSSxNQUFNLEVBQUU7Ozs7OEJBS2tCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUM3RCxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ2pFLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQ3BCO1FBTUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDOUIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1NBQ3hCLENBQUMsQ0FBQztLQUNWOzs7OztJQUVELE9BQU8sQ0FBQyxNQUFjO1FBQ2xCLE1BQU0sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzVDOzs7WUF6QkosVUFBVTs7OztZQVRGLE9BQU87WUFDUCxLQUFLOzs7SUFnQlQsTUFBTSxFQUFFO3NDQUFpQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY3Rpb25zLCBFZmZlY3QgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcclxuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBFdmVudEFjdGlvbnMgfSBmcm9tICcuL2V2ZW50cy5hY3Rpb25zJztcclxuaW1wb3J0IHsgRXZlbnRzIH0gZnJvbSAnLi9ldmVudHMubW9kZWxzJztcclxuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi4vc3RvcmUvbW9kZWxzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEV2ZW50RWZmZWN0cyB7XHJcblxyXG4gICAgZXZlbnRzOiBFdmVudHMgPSBuZXcgRXZlbnRzKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlnZ2VyIGV2ZW50IGlmIGFjdGlvbiBpcyBhIHJlZ2lzdGVyZWQgdHJpZ2dlci5cclxuICAgICAqL1xyXG4gICAgQEVmZmVjdCgpIG9uVHJpZ2dlckV2ZW50OiBPYnNlcnZhYmxlPEFjdGlvbj4gPSB0aGlzLmFjdGlvbnMkLnBpcGUoXHJcbiAgICAgICAgZmlsdGVyKGFjdGlvbiA9PiB0aGlzLmV2ZW50cy5hY3Rpb25zLmluZGV4T2YoYWN0aW9uLnR5cGUpICE9PSAtMSksXHJcbiAgICAgICAgbWFwKHRoaXMudHJpZ2dlcilcclxuICAgICk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBhY3Rpb25zJDogQWN0aW9ucyxcclxuICAgICAgICBwcml2YXRlIHN0b3JlOiBTdG9yZTxhbnk+XHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnN0b3JlLnNlbGVjdChzID0+IHNbJ2V2ZW50cyddKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKGV2ZW50cyA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cyA9IGV2ZW50cztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJpZ2dlcihhY3Rpb246IEFjdGlvbik6IEFjdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIEV2ZW50QWN0aW9ucy50cmlnZ2VyRXZlbnQoYWN0aW9uKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19