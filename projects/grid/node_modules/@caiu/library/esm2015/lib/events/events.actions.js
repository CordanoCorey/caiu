/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Event, UpdateValuePayload } from './events.models';
import { build, guid } from '../shared/utils';
export class EventActions {
    /**
     * @param {?} onAction
     * @param {?=} handler
     * @param {?=} value
     * @return {?}
     */
    static addEvent(onAction, handler, value = null) {
        const /** @type {?} */ e = build(Event, {
            onAction,
            handler,
            value,
            key: guid()
        });
        return {
            type: EventActions.ADD_EVENT,
            payload: e,
            key: e.key
        };
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static removeEvent(key) {
        return {
            type: EventActions.REMOVE_EVENT,
            payload: key
        };
    }
    /**
     * @param {?} action
     * @return {?}
     */
    static triggerEvent(action) {
        return {
            type: EventActions.TRIGGER_EVENT,
            payload: action
        };
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    static updateValue(key, value) {
        const /** @type {?} */ payload = build(UpdateValuePayload, {
            key,
            value
        });
        return {
            type: EventActions.UPDATE_VALUE,
            payload: payload
        };
    }
}
EventActions.ADD_EVENT = '[Events] Add Event';
EventActions.REMOVE_EVENT = '[Events] Remove Event';
EventActions.TRIGGER_EVENT = '[Events] Trigger Event';
EventActions.UPDATE_VALUE = '[Events] Update Value';
function EventActions_tsickle_Closure_declarations() {
    /** @type {?} */
    EventActions.ADD_EVENT;
    /** @type {?} */
    EventActions.REMOVE_EVENT;
    /** @type {?} */
    EventActions.TRIGGER_EVENT;
    /** @type {?} */
    EventActions.UPDATE_VALUE;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmFjdGlvbnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2V2ZW50cy9ldmVudHMuYWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTVELE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFOUMsTUFBTTs7Ozs7OztJQU1GLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBMkIsRUFBRSxPQUFpQyxFQUFFLEtBQUssR0FBRyxJQUFJO1FBQ3hGLHVCQUFNLENBQUMsR0FBVSxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQzFCLFFBQVE7WUFDUixPQUFPO1lBQ1AsS0FBSztZQUNMLEdBQUcsRUFBRSxJQUFJLEVBQUU7U0FDZCxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUM7WUFDSCxJQUFJLEVBQUUsWUFBWSxDQUFDLFNBQVM7WUFDNUIsT0FBTyxFQUFFLENBQUM7WUFDVixHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUc7U0FDYixDQUFDO0tBQ0w7Ozs7O0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFXO1FBQzFCLE1BQU0sQ0FBQztZQUNILElBQUksRUFBRSxZQUFZLENBQUMsWUFBWTtZQUMvQixPQUFPLEVBQUUsR0FBRztTQUNmLENBQUM7S0FDTDs7Ozs7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQWM7UUFDOUIsTUFBTSxDQUFDO1lBQ0gsSUFBSSxFQUFFLFlBQVksQ0FBQyxhQUFhO1lBQ2hDLE9BQU8sRUFBRSxNQUFNO1NBQ2xCLENBQUM7S0FDTDs7Ozs7O0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFXLEVBQUUsS0FBVTtRQUN0Qyx1QkFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixFQUNwQztZQUNJLEdBQUc7WUFDSCxLQUFLO1NBQ1IsQ0FDSixDQUFDO1FBQ0YsTUFBTSxDQUFDO1lBQ0gsSUFBSSxFQUFFLFlBQVksQ0FBQyxZQUFZO1lBQy9CLE9BQU8sRUFBRSxPQUFPO1NBQ25CLENBQUM7S0FDTDs7eUJBNUNrQixvQkFBb0I7NEJBQ2pCLHVCQUF1Qjs2QkFDdEIsd0JBQXdCOzRCQUN6Qix1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudCwgVXBkYXRlVmFsdWVQYXlsb2FkIH0gZnJvbSAnLi9ldmVudHMubW9kZWxzJztcclxuaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25XaXRoS2V5IH0gZnJvbSAnLi4vc3RvcmUvbW9kZWxzJztcclxuaW1wb3J0IHsgYnVpbGQsIGd1aWQgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEV2ZW50QWN0aW9ucyB7XHJcbiAgICBzdGF0aWMgQUREX0VWRU5UID0gJ1tFdmVudHNdIEFkZCBFdmVudCc7XHJcbiAgICBzdGF0aWMgUkVNT1ZFX0VWRU5UID0gJ1tFdmVudHNdIFJlbW92ZSBFdmVudCc7XHJcbiAgICBzdGF0aWMgVFJJR0dFUl9FVkVOVCA9ICdbRXZlbnRzXSBUcmlnZ2VyIEV2ZW50JztcclxuICAgIHN0YXRpYyBVUERBVEVfVkFMVUUgPSAnW0V2ZW50c10gVXBkYXRlIFZhbHVlJztcclxuXHJcbiAgICBzdGF0aWMgYWRkRXZlbnQob25BY3Rpb246IHN0cmluZyB8IHN0cmluZ1tdLCBoYW5kbGVyPzogKGFjdGlvbjogQWN0aW9uKSA9PiBhbnksIHZhbHVlID0gbnVsbCk6IEFjdGlvbldpdGhLZXkge1xyXG4gICAgICAgIGNvbnN0IGU6IEV2ZW50ID0gYnVpbGQoRXZlbnQsIHtcclxuICAgICAgICAgICAgb25BY3Rpb24sXHJcbiAgICAgICAgICAgIGhhbmRsZXIsXHJcbiAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICBrZXk6IGd1aWQoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHR5cGU6IEV2ZW50QWN0aW9ucy5BRERfRVZFTlQsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IGUsXHJcbiAgICAgICAgICAgIGtleTogZS5rZXlcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZW1vdmVFdmVudChrZXk6IHN0cmluZyk6IEFjdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogRXZlbnRBY3Rpb25zLlJFTU9WRV9FVkVOVCxcclxuICAgICAgICAgICAgcGF5bG9hZDoga2V5XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdHJpZ2dlckV2ZW50KGFjdGlvbjogQWN0aW9uKTogQWN0aW9uIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiBFdmVudEFjdGlvbnMuVFJJR0dFUl9FVkVOVCxcclxuICAgICAgICAgICAgcGF5bG9hZDogYWN0aW9uXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdXBkYXRlVmFsdWUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBBY3Rpb24ge1xyXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBidWlsZChVcGRhdGVWYWx1ZVBheWxvYWQsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGtleSxcclxuICAgICAgICAgICAgICAgIHZhbHVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHR5cGU6IEV2ZW50QWN0aW9ucy5VUERBVEVfVkFMVUUsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IHBheWxvYWRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=