/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { orderBy } from '@progress/kendo-data-query';
import { Collection } from '../../shared/collection';
import { DateHelper } from '../../shared/date';
import { QueryModel, StyleModel } from '../../shared/models';
/**
 * @template T
 */
export class Grid {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
        this.query = new QueryModel();
        this.style = new StyleModel();
        this.filterable = true;
        this.sortable = { mode: 'multiple' };
    }
    /**
     * @param {?} acc
     * @param {?} operator
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    static ApplyFilter(acc, operator, field, value) {
        switch (operator) {
            case 'contains':
                return acc.filter(row => Grid.Contains(row[field], value));
            case 'gte':
                return acc.filter(row => Grid.MatchDate(row[field], value));
        }
    }
    /**
     * @template T
     * @param {?} items
     * @return {?}
     */
    static Build(items) {
        const /** @type {?} */ data = Object.assign(new Collection(), { items });
        return new Grid(data);
    }
    /**
     * @param {?} field
     * @param {?=} dir
     * @return {?}
     */
    static BuildSort(field, dir = 'asc') {
        return /** @type {?} */ ({ dir, field });
    }
    /**
     * @param {?} str
     * @param {?} substr
     * @return {?}
     */
    static Contains(str, substr) {
        if (typeof (str) === 'string' && typeof (substr) === 'string') {
            return str.toLowerCase().includes(substr.toLowerCase());
        }
        return true;
    }
    /**
     * @param {?} rows
     * @param {?} filters
     * @return {?}
     */
    static FilterRows(rows, filters) {
        return filters.reduce((acc, filter) => {
            const /** @type {?} */ operator = filter['operator'];
            const /** @type {?} */ field = filter['field'];
            const /** @type {?} */ value = filter['value'];
            return Grid.ApplyFilter(rows, operator, field, value);
        }, rows);
    }
    /**
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    static MatchDate(date1, date2) {
        return DateHelper.IsSameDay(date1, date2);
    }
    /**
     * @param {?} rows
     * @param {?} skip
     * @param {?} take
     * @return {?}
     */
    static PageRows(rows, skip, take) {
        return rows.filter((row, index) => index >= skip && index < skip + take);
    }
    /**
     * @param {?} rows
     * @param {?} sort
     * @return {?}
     */
    static SortRows(rows, sort) {
        return orderBy(rows, sort);
    }
    /**
     * @param {?} grid
     * @return {?}
     */
    update(grid) {
    }
}
function Grid_tsickle_Closure_declarations() {
    /** @type {?} */
    Grid.prototype.query;
    /** @type {?} */
    Grid.prototype.style;
    /** @type {?} */
    Grid.prototype.detailRowHeight;
    /** @type {?} */
    Grid.prototype.filter;
    /** @type {?} */
    Grid.prototype.filterable;
    /** @type {?} */
    Grid.prototype.groupable;
    /** @type {?} */
    Grid.prototype.height;
    /** @type {?} */
    Grid.prototype.pageSize;
    /** @type {?} */
    Grid.prototype.pageable;
    /** @type {?} */
    Grid.prototype.rowHeight;
    /** @type {?} */
    Grid.prototype.scrollable;
    /** @type {?} */
    Grid.prototype.selectable;
    /** @type {?} */
    Grid.prototype.skip;
    /** @type {?} */
    Grid.prototype.sortable;
    /** @type {?} */
    Grid.prototype.group;
    /** @type {?} */
    Grid.prototype.rowClass;
    /** @type {?} */
    Grid.prototype.sort;
    /** @type {?} */
    Grid.prototype.data;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9ncmlkL2dyaWQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUdyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7QUFFN0QsTUFBTTs7OztJQWtFRixZQUFtQixJQUFtQjtRQUFuQixTQUFJLEdBQUosSUFBSSxDQUFlO3FCQWpFZixJQUFJLFVBQVUsRUFBSztxQkFDdEIsSUFBSSxVQUFVLEVBQUU7MEJBSXZCLElBQUk7d0JBU1EsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0tBb0Q1Qzs7Ozs7Ozs7SUEvQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFVLEVBQUUsUUFBZ0IsRUFBRSxLQUFhLEVBQUUsS0FBVTtRQUN0RSxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2YsS0FBSyxVQUFVO2dCQUNYLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMvRCxLQUFLLEtBQUs7Z0JBQ04sTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ25FO0tBQ0o7Ozs7OztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUksS0FBVTtRQUN0Qix1QkFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsRUFBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMzRCxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUksSUFBSSxDQUFDLENBQUM7S0FDNUI7Ozs7OztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBYSxFQUFFLE1BQXNCLEtBQUs7UUFDdkQsTUFBTSxtQkFBaUIsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUM7S0FDekM7Ozs7OztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBVyxFQUFFLE1BQWM7UUFDdkMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM1RCxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUMzRDtRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7S0FDZjs7Ozs7O0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFXLEVBQUUsT0FBYztRQUN6QyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNsQyx1QkFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3BDLHVCQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUIsdUJBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN6RCxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ1o7Ozs7OztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBVyxFQUFFLEtBQVc7UUFDckMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzdDOzs7Ozs7O0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFXLEVBQUUsSUFBWSxFQUFFLElBQVk7UUFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7S0FDNUU7Ozs7OztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBVyxFQUFFLElBQXNCO1FBQy9DLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzlCOzs7OztJQUtELE1BQU0sQ0FBQyxJQUFtQjtLQUN6QjtDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb3JkZXJCeSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kYXRhLXF1ZXJ5JztcclxuXHJcbmltcG9ydCB7IEdyaWRDb21wb25lbnQgfSBmcm9tICcuL2dyaWQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4uLy4uL3NoYXJlZC9jb2xsZWN0aW9uJztcclxuaW1wb3J0IHsgRGF0ZUhlbHBlciB9IGZyb20gJy4uLy4uL3NoYXJlZC9kYXRlJztcclxuaW1wb3J0IHsgQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvciwgR3JvdXBhYmxlU2V0dGluZ3MsIFNvcnREZXNjcmlwdG9yLCBTb3J0U2V0dGluZ3MgfSBmcm9tICcuLi8uLi9zaGFyZWQva2VuZG8nO1xyXG5pbXBvcnQgeyBRdWVyeU1vZGVsLCBTdHlsZU1vZGVsIH0gZnJvbSAnLi4vLi4vc2hhcmVkL21vZGVscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgR3JpZDxUPiB7XHJcbiAgICBxdWVyeTogUXVlcnlNb2RlbDxUPiA9IG5ldyBRdWVyeU1vZGVsPFQ+KCk7XHJcbiAgICBzdHlsZTogU3R5bGVNb2RlbCA9IG5ldyBTdHlsZU1vZGVsKCk7XHJcblxyXG4gICAgZGV0YWlsUm93SGVpZ2h0OiBudW1iZXI7XHJcbiAgICBmaWx0ZXI6IENvbXBvc2l0ZUZpbHRlckRlc2NyaXB0b3I7XHJcbiAgICBmaWx0ZXJhYmxlID0gdHJ1ZTtcclxuICAgIGdyb3VwYWJsZTogR3JvdXBhYmxlU2V0dGluZ3MgfCBib29sZWFuO1xyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgICBwYWdlU2l6ZTogbnVtYmVyO1xyXG4gICAgcGFnZWFibGU6IGFueSB8IGJvb2xlYW47XHJcbiAgICByb3dIZWlnaHQ6IG51bWJlcjtcclxuICAgIHNjcm9sbGFibGU6IGFueTtcclxuICAgIHNlbGVjdGFibGU6IGJvb2xlYW47XHJcbiAgICBza2lwOiBudW1iZXI7XHJcbiAgICBzb3J0YWJsZTogU29ydFNldHRpbmdzID0geyBtb2RlOiAnbXVsdGlwbGUnIH07XHJcbiAgICBncm91cDogYW55W107XHJcbiAgICByb3dDbGFzczogRnVuY3Rpb247XHJcbiAgICBzb3J0OiBhbnlbXTtcclxuXHJcbiAgICBzdGF0aWMgQXBwbHlGaWx0ZXIoYWNjOiBhbnlbXSwgb3BlcmF0b3I6IHN0cmluZywgZmllbGQ6IHN0cmluZywgdmFsdWU6IGFueSk6IGFueVtdIHtcclxuICAgICAgICBzd2l0Y2ggKG9wZXJhdG9yKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2NvbnRhaW5zJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBhY2MuZmlsdGVyKHJvdyA9PiBHcmlkLkNvbnRhaW5zKHJvd1tmaWVsZF0sIHZhbHVlKSk7XHJcbiAgICAgICAgICAgIGNhc2UgJ2d0ZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjLmZpbHRlcihyb3cgPT4gR3JpZC5NYXRjaERhdGUocm93W2ZpZWxkXSwgdmFsdWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEJ1aWxkPFQ+KGl0ZW1zOiBUW10pOiBHcmlkPFQ+IHtcclxuICAgICAgICBjb25zdCBkYXRhID0gT2JqZWN0LmFzc2lnbihuZXcgQ29sbGVjdGlvbjxUPigpLCB7IGl0ZW1zIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgR3JpZDxUPihkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgQnVpbGRTb3J0KGZpZWxkOiBzdHJpbmcsIGRpcjogJ2FzYycgfCAnZGVzYycgPSAnYXNjJyk6IFNvcnREZXNjcmlwdG9yIHtcclxuICAgICAgICByZXR1cm4gPFNvcnREZXNjcmlwdG9yPnsgZGlyLCBmaWVsZCB9O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBDb250YWlucyhzdHI6IHN0cmluZywgc3Vic3RyOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodHlwZW9mIChzdHIpID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgKHN1YnN0cikgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzdWJzdHIudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBGaWx0ZXJSb3dzKHJvd3M6IGFueVtdLCBmaWx0ZXJzOiBhbnlbXSk6IGFueVtdIHtcclxuICAgICAgICByZXR1cm4gZmlsdGVycy5yZWR1Y2UoKGFjYywgZmlsdGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wZXJhdG9yID0gZmlsdGVyWydvcGVyYXRvciddO1xyXG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IGZpbHRlclsnZmllbGQnXTtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBmaWx0ZXJbJ3ZhbHVlJ107XHJcbiAgICAgICAgICAgIHJldHVybiBHcmlkLkFwcGx5RmlsdGVyKHJvd3MsIG9wZXJhdG9yLCBmaWVsZCwgdmFsdWUpO1xyXG4gICAgICAgIH0sIHJvd3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBNYXRjaERhdGUoZGF0ZTE6IERhdGUsIGRhdGUyOiBEYXRlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIERhdGVIZWxwZXIuSXNTYW1lRGF5KGRhdGUxLCBkYXRlMik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIFBhZ2VSb3dzKHJvd3M6IGFueVtdLCBza2lwOiBudW1iZXIsIHRha2U6IG51bWJlcik6IGFueVtdIHtcclxuICAgICAgICByZXR1cm4gcm93cy5maWx0ZXIoKHJvdywgaW5kZXgpID0+IGluZGV4ID49IHNraXAgJiYgaW5kZXggPCBza2lwICsgdGFrZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIFNvcnRSb3dzKHJvd3M6IGFueVtdLCBzb3J0OiBTb3J0RGVzY3JpcHRvcltdKTogYW55W10ge1xyXG4gICAgICAgIHJldHVybiBvcmRlckJ5KHJvd3MsIHNvcnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBkYXRhOiBDb2xsZWN0aW9uPFQ+KSB7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGdyaWQ6IEdyaWRDb21wb25lbnQpIHtcclxuICAgIH1cclxuXHJcbn1cclxuIl19