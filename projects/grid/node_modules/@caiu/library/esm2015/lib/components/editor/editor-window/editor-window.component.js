/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Inject, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { DialogAction, DialogModel } from '../../dialog/dialog.model';
import { build } from '../../../shared/utils';
export class EditorWindowComponent {
    /**
     * @param {?} data
     * @param {?} dialogRef
     */
    constructor(data, dialogRef) {
        this.data = data;
        this.dialogRef = dialogRef;
        this.actionWidth = '100%';
    }
    /**
     * @return {?}
     */
    get actions() {
        return [
            build(DialogAction, { value: this.data, label: 'Save and Close' }),
        ];
    }
    /**
     * @return {?}
     */
    get dialog() {
        return build(DialogModel, {
            title: this.title,
            actions: this.actions
        });
    }
    /**
     * @return {?}
     */
    get title() {
        return 'Editor';
    }
    /**
     * @return {?}
     */
    close() {
        this.dialogRef.close(this.data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    update(data) {
        this.data = data;
    }
}
EditorWindowComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-editor-window',
                template: `<span id="editor-window">
  <mat-toolbar color="primary" mat-dialog-title>
    <span class="dialog-title">
      {{ title }}
      <button mat-button [mat-dialog-close]="null">
        <mat-icon>close</mat-icon>
      </button>
    </span>
  </mat-toolbar>
  <mat-dialog-content>
    <div id="expanded-editor">
      <iu-editor [value]="data" [expanded]="true" [height]="380" (changes)="update($event)"></iu-editor>
    </div>
  </mat-dialog-content>
  <mat-dialog-actions>
    <button mat-raised-button (click)="close()" [style.width]="actionWidth" color="accent">Save and Close</button>
  </mat-dialog-actions>
</span>
`,
                styles: [`#editor-window #expanded-editor{margin:0;padding:0;height:60vh}#editor-window .mat-toolbar{margin:-24px -24px 0;width:calc(100% + 48px);min-height:32px!important}#editor-window .mat-toolbar .mat-toolbar-row{height:48px}#editor-window .mat-toolbar .dialog-title{position:relative;height:calc(100% - 8px);width:100%;margin-top:8px}#editor-window .mat-toolbar .dialog-title button{cursor:pointer;position:absolute;right:0;top:-5px;border-radius:100%;height:42px;width:42px;min-width:36px}#editor-window .mat-toolbar .dialog-title button:hover,#editor-window .mat-toolbar .dialog-title button:hover mat-icon{font-weight:700}#editor-window .mat-toolbar .dialog-title mat-icon{position:absolute;top:9px;right:8px;z-index:1}#editor-window .mat-toolbar-row{height:48px}#editor-window .mat-dialog-actions{margin-left:-24px;margin-right:-24px;color:#fff;padding:0}#editor-window .mat-dialog-actions button{padding:12px 0}#editor-window .mat-dialog-actions .mat-accent{color:#fff!important}`],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
EditorWindowComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: MatDialogRef }
];
function EditorWindowComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    EditorWindowComponent.prototype.actionWidth;
    /** @type {?} */
    EditorWindowComponent.prototype.data;
    /** @type {?} */
    EditorWindowComponent.prototype.dialogRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLXdpbmRvdy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZWRpdG9yL2VkaXRvci13aW5kb3cvZWRpdG9yLXdpbmRvdy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbEUsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUEwQjlDLE1BQU07Ozs7O0lBSUosWUFDa0MsSUFBUyxFQUNsQztRQUR5QixTQUFJLEdBQUosSUFBSSxDQUFLO1FBQ2xDLGNBQVMsR0FBVCxTQUFTOzJCQUpKLE1BQU07S0FLZjs7OztJQUVMLElBQUksT0FBTztRQUNULE1BQU0sQ0FBQztZQUNMLEtBQUssQ0FBQyxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztTQUNuRSxDQUFDO0tBQ0g7Ozs7SUFFRCxJQUFJLE1BQU07UUFDUixNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtZQUN4QixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1NBQ3RCLENBQUMsQ0FBQztLQUNKOzs7O0lBRUQsSUFBSSxLQUFLO1FBQ1AsTUFBTSxDQUFDLFFBQVEsQ0FBQztLQUNqQjs7OztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakM7Ozs7O0lBRUQsTUFBTSxDQUFDLElBQVk7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7S0FDbEI7OztZQXhERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FrQlg7Z0JBQ0MsTUFBTSxFQUFFLENBQUMscTlCQUFxOUIsQ0FBQztnQkFDLzlCLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2FBQ3RDOzs7OzRDQU1JLE1BQU0sU0FBQyxlQUFlO1lBbENELFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1BVF9ESUFMT0dfREFUQSwgTWF0RGlhbG9nUmVmIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG5pbXBvcnQgeyBEaWFsb2dBY3Rpb24sIERpYWxvZ01vZGVsIH0gZnJvbSAnLi4vLi4vZGlhbG9nL2RpYWxvZy5tb2RlbCc7XG5pbXBvcnQgeyBidWlsZCB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC91dGlscyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2l1LWVkaXRvci13aW5kb3cnLFxuICB0ZW1wbGF0ZTogYDxzcGFuIGlkPVwiZWRpdG9yLXdpbmRvd1wiPlxuICA8bWF0LXRvb2xiYXIgY29sb3I9XCJwcmltYXJ5XCIgbWF0LWRpYWxvZy10aXRsZT5cbiAgICA8c3BhbiBjbGFzcz1cImRpYWxvZy10aXRsZVwiPlxuICAgICAge3sgdGl0bGUgfX1cbiAgICAgIDxidXR0b24gbWF0LWJ1dHRvbiBbbWF0LWRpYWxvZy1jbG9zZV09XCJudWxsXCI+XG4gICAgICAgIDxtYXQtaWNvbj5jbG9zZTwvbWF0LWljb24+XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L3NwYW4+XG4gIDwvbWF0LXRvb2xiYXI+XG4gIDxtYXQtZGlhbG9nLWNvbnRlbnQ+XG4gICAgPGRpdiBpZD1cImV4cGFuZGVkLWVkaXRvclwiPlxuICAgICAgPGl1LWVkaXRvciBbdmFsdWVdPVwiZGF0YVwiIFtleHBhbmRlZF09XCJ0cnVlXCIgW2hlaWdodF09XCIzODBcIiAoY2hhbmdlcyk9XCJ1cGRhdGUoJGV2ZW50KVwiPjwvaXUtZWRpdG9yPlxuICAgIDwvZGl2PlxuICA8L21hdC1kaWFsb2ctY29udGVudD5cbiAgPG1hdC1kaWFsb2ctYWN0aW9ucz5cbiAgICA8YnV0dG9uIG1hdC1yYWlzZWQtYnV0dG9uIChjbGljayk9XCJjbG9zZSgpXCIgW3N0eWxlLndpZHRoXT1cImFjdGlvbldpZHRoXCIgY29sb3I9XCJhY2NlbnRcIj5TYXZlIGFuZCBDbG9zZTwvYnV0dG9uPlxuICA8L21hdC1kaWFsb2ctYWN0aW9ucz5cbjwvc3Bhbj5cbmAsXG4gIHN0eWxlczogW2AjZWRpdG9yLXdpbmRvdyAjZXhwYW5kZWQtZWRpdG9ye21hcmdpbjowO3BhZGRpbmc6MDtoZWlnaHQ6NjB2aH0jZWRpdG9yLXdpbmRvdyAubWF0LXRvb2xiYXJ7bWFyZ2luOi0yNHB4IC0yNHB4IDA7d2lkdGg6Y2FsYygxMDAlICsgNDhweCk7bWluLWhlaWdodDozMnB4IWltcG9ydGFudH0jZWRpdG9yLXdpbmRvdyAubWF0LXRvb2xiYXIgLm1hdC10b29sYmFyLXJvd3toZWlnaHQ6NDhweH0jZWRpdG9yLXdpbmRvdyAubWF0LXRvb2xiYXIgLmRpYWxvZy10aXRsZXtwb3NpdGlvbjpyZWxhdGl2ZTtoZWlnaHQ6Y2FsYygxMDAlIC0gOHB4KTt3aWR0aDoxMDAlO21hcmdpbi10b3A6OHB4fSNlZGl0b3Itd2luZG93IC5tYXQtdG9vbGJhciAuZGlhbG9nLXRpdGxlIGJ1dHRvbntjdXJzb3I6cG9pbnRlcjtwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO3RvcDotNXB4O2JvcmRlci1yYWRpdXM6MTAwJTtoZWlnaHQ6NDJweDt3aWR0aDo0MnB4O21pbi13aWR0aDozNnB4fSNlZGl0b3Itd2luZG93IC5tYXQtdG9vbGJhciAuZGlhbG9nLXRpdGxlIGJ1dHRvbjpob3ZlciwjZWRpdG9yLXdpbmRvdyAubWF0LXRvb2xiYXIgLmRpYWxvZy10aXRsZSBidXR0b246aG92ZXIgbWF0LWljb257Zm9udC13ZWlnaHQ6NzAwfSNlZGl0b3Itd2luZG93IC5tYXQtdG9vbGJhciAuZGlhbG9nLXRpdGxlIG1hdC1pY29ue3Bvc2l0aW9uOmFic29sdXRlO3RvcDo5cHg7cmlnaHQ6OHB4O3otaW5kZXg6MX0jZWRpdG9yLXdpbmRvdyAubWF0LXRvb2xiYXItcm93e2hlaWdodDo0OHB4fSNlZGl0b3Itd2luZG93IC5tYXQtZGlhbG9nLWFjdGlvbnN7bWFyZ2luLWxlZnQ6LTI0cHg7bWFyZ2luLXJpZ2h0Oi0yNHB4O2NvbG9yOiNmZmY7cGFkZGluZzowfSNlZGl0b3Itd2luZG93IC5tYXQtZGlhbG9nLWFjdGlvbnMgYnV0dG9ue3BhZGRpbmc6MTJweCAwfSNlZGl0b3Itd2luZG93IC5tYXQtZGlhbG9nLWFjdGlvbnMgLm1hdC1hY2NlbnR7Y29sb3I6I2ZmZiFpbXBvcnRhbnR9YF0sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgRWRpdG9yV2luZG93Q29tcG9uZW50IHtcblxuICBhY3Rpb25XaWR0aCA9ICcxMDAlJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGE6IGFueSxcbiAgICBwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8RWRpdG9yV2luZG93Q29tcG9uZW50PlxuICApIHsgfVxuXG4gIGdldCBhY3Rpb25zKCk6IERpYWxvZ0FjdGlvbltdIHtcbiAgICByZXR1cm4gW1xuICAgICAgYnVpbGQoRGlhbG9nQWN0aW9uLCB7IHZhbHVlOiB0aGlzLmRhdGEsIGxhYmVsOiAnU2F2ZSBhbmQgQ2xvc2UnIH0pLFxuICAgIF07XG4gIH1cblxuICBnZXQgZGlhbG9nKCk6IERpYWxvZ01vZGVsIHtcbiAgICByZXR1cm4gYnVpbGQoRGlhbG9nTW9kZWwsIHtcbiAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgYWN0aW9uczogdGhpcy5hY3Rpb25zXG4gICAgfSk7XG4gIH1cblxuICBnZXQgdGl0bGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ0VkaXRvcic7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSh0aGlzLmRhdGEpO1xuICB9XG5cbiAgdXBkYXRlKGRhdGE6IHN0cmluZykge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH1cblxufVxuIl19