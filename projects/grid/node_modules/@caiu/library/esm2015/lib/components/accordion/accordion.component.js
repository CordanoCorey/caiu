/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { trigger, state, style, transition, animate } from '@angular/animations';
export class AccordionComponent {
    constructor() {
        this.active = true;
        this.opened = true;
        this.showArrow = false;
        this.closeStart = new EventEmitter();
        this.closeDone = new EventEmitter();
        this.openStart = new EventEmitter();
        this.openDone = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    toggle() {
        this.opened = !this.opened;
    }
    /**
     * @return {?}
     */
    open() {
        this.opened = true;
    }
    /**
     * @return {?}
     */
    close() {
        this.opened = false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onStart(e) {
        if (this.opened) {
            this.openStart.emit();
        }
        else {
            this.closeStart.emit();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onDone(e) {
        if (this.opened) {
            this.openDone.emit();
        }
        else {
            this.closeDone.emit();
        }
    }
    /**
     * @return {?}
     */
    onClickTrigger() {
        if (this.active) {
            this.toggle();
        }
    }
}
AccordionComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-accordion',
                template: `<div class="accordion">
  <div class="trigger-wrapper" (click)="onClickTrigger()" [class.active]="active">
    <ng-content select=".accordion-trigger"></ng-content>
  </div>
  <div class="content-wrapper" [@toggle]="opened ? 'show' : 'hide'" (@toggle.start)="onStart($event)" (@toggle.done)="onDone($event)">
    <ng-content select=".accordion-content"></ng-content>
  </div>
</div>`,
                styles: [`.trigger-wrapper{position:relative;padding:0}.trigger-wrapper.active{cursor:pointer}.content-wrapper{overflow:hidden;clear:both}.mat-icon{position:absolute;right:2%;top:25%;color:#fff;font-size:32px;height:50%;font-weight:700}`],
                animations: [
                    trigger('toggle', [
                        state('*', style({ height: '0px' })),
                        state('show', style({ height: '*' })),
                        state('hide', style({ height: '0px' })),
                        transition('show <=> hide', [
                            animate('300ms ease-out')
                        ])
                    ])
                ]
            },] },
];
/** @nocollapse */
AccordionComponent.ctorParameters = () => [];
AccordionComponent.propDecorators = {
    active: [{ type: Input }],
    opened: [{ type: Input }],
    showArrow: [{ type: Input }],
    closeStart: [{ type: Output }],
    closeDone: [{ type: Output }],
    openStart: [{ type: Output }],
    openDone: [{ type: Output }]
};
function AccordionComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    AccordionComponent.prototype.active;
    /** @type {?} */
    AccordionComponent.prototype.opened;
    /** @type {?} */
    AccordionComponent.prototype.showArrow;
    /** @type {?} */
    AccordionComponent.prototype.closeStart;
    /** @type {?} */
    AccordionComponent.prototype.closeDone;
    /** @type {?} */
    AccordionComponent.prototype.openStart;
    /** @type {?} */
    AccordionComponent.prototype.openDone;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9hY2NvcmRpb24vYWNjb3JkaW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBd0JqRixNQUFNO0lBVUo7c0JBUmtCLElBQUk7c0JBQ0osSUFBSTt5QkFDRCxLQUFLOzBCQUNILElBQUksWUFBWSxFQUFFO3lCQUNuQixJQUFJLFlBQVksRUFBRTt5QkFDbEIsSUFBSSxZQUFZLEVBQUU7d0JBQ25CLElBQUksWUFBWSxFQUFFO0tBRXRCOzs7O0lBRWpCLFFBQVE7S0FDUDs7OztJQUVELE1BQU07UUFDSixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztLQUM1Qjs7OztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztLQUNwQjs7OztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztLQUNyQjs7Ozs7SUFFRCxPQUFPLENBQUMsQ0FBTTtRQUNaLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDdkI7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDeEI7S0FDRjs7Ozs7SUFFRCxNQUFNLENBQUMsQ0FBTTtRQUNYLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDdEI7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDdkI7S0FDRjs7OztJQUVELGNBQWM7UUFDWixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNoQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjtLQUNGOzs7WUFyRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxjQUFjO2dCQUN4QixRQUFRLEVBQUU7Ozs7Ozs7T0FPTDtnQkFDTCxNQUFNLEVBQUUsQ0FBQyxvT0FBb08sQ0FBQztnQkFDOU8sVUFBVSxFQUFFO29CQUNWLE9BQU8sQ0FBQyxRQUFRLEVBQUU7d0JBQ2hCLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7d0JBQ3BDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7d0JBQ3JDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7d0JBQ3ZDLFVBQVUsQ0FBQyxlQUFlLEVBQUU7NEJBQzFCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQzt5QkFDMUIsQ0FBQztxQkFDSCxDQUFDO2lCQUNIO2FBQ0Y7Ozs7O3FCQUdFLEtBQUs7cUJBQ0wsS0FBSzt3QkFDTCxLQUFLO3lCQUNMLE1BQU07d0JBQ04sTUFBTTt3QkFDTixNQUFNO3VCQUNOLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHRyaWdnZXIsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgYW5pbWF0ZSB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdpdS1hY2NvcmRpb24nLFxyXG4gIHRlbXBsYXRlOiBgPGRpdiBjbGFzcz1cImFjY29yZGlvblwiPlxyXG4gIDxkaXYgY2xhc3M9XCJ0cmlnZ2VyLXdyYXBwZXJcIiAoY2xpY2spPVwib25DbGlja1RyaWdnZXIoKVwiIFtjbGFzcy5hY3RpdmVdPVwiYWN0aXZlXCI+XHJcbiAgICA8bmctY29udGVudCBzZWxlY3Q9XCIuYWNjb3JkaW9uLXRyaWdnZXJcIj48L25nLWNvbnRlbnQ+XHJcbiAgPC9kaXY+XHJcbiAgPGRpdiBjbGFzcz1cImNvbnRlbnQtd3JhcHBlclwiIFtAdG9nZ2xlXT1cIm9wZW5lZCA/ICdzaG93JyA6ICdoaWRlJ1wiIChAdG9nZ2xlLnN0YXJ0KT1cIm9uU3RhcnQoJGV2ZW50KVwiIChAdG9nZ2xlLmRvbmUpPVwib25Eb25lKCRldmVudClcIj5cclxuICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIi5hY2NvcmRpb24tY29udGVudFwiPjwvbmctY29udGVudD5cclxuICA8L2Rpdj5cclxuPC9kaXY+YCxcclxuICBzdHlsZXM6IFtgLnRyaWdnZXItd3JhcHBlcntwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nOjB9LnRyaWdnZXItd3JhcHBlci5hY3RpdmV7Y3Vyc29yOnBvaW50ZXJ9LmNvbnRlbnQtd3JhcHBlcntvdmVyZmxvdzpoaWRkZW47Y2xlYXI6Ym90aH0ubWF0LWljb257cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MiU7dG9wOjI1JTtjb2xvcjojZmZmO2ZvbnQtc2l6ZTozMnB4O2hlaWdodDo1MCU7Zm9udC13ZWlnaHQ6NzAwfWBdLFxyXG4gIGFuaW1hdGlvbnM6IFtcclxuICAgIHRyaWdnZXIoJ3RvZ2dsZScsIFtcclxuICAgICAgc3RhdGUoJyonLCBzdHlsZSh7IGhlaWdodDogJzBweCcgfSkpLFxyXG4gICAgICBzdGF0ZSgnc2hvdycsIHN0eWxlKHsgaGVpZ2h0OiAnKicgfSkpLFxyXG4gICAgICBzdGF0ZSgnaGlkZScsIHN0eWxlKHsgaGVpZ2h0OiAnMHB4JyB9KSksXHJcbiAgICAgIHRyYW5zaXRpb24oJ3Nob3cgPD0+IGhpZGUnLCBbXHJcbiAgICAgICAgYW5pbWF0ZSgnMzAwbXMgZWFzZS1vdXQnKVxyXG4gICAgICBdKVxyXG4gICAgXSlcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBY2NvcmRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBASW5wdXQoKSBhY3RpdmUgPSB0cnVlO1xyXG4gIEBJbnB1dCgpIG9wZW5lZCA9IHRydWU7XHJcbiAgQElucHV0KCkgc2hvd0Fycm93ID0gZmFsc2U7XHJcbiAgQE91dHB1dCgpIGNsb3NlU3RhcnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpIGNsb3NlRG9uZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICBAT3V0cHV0KCkgb3BlblN0YXJ0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIEBPdXRwdXQoKSBvcGVuRG9uZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgfVxyXG5cclxuICB0b2dnbGUoKSB7XHJcbiAgICB0aGlzLm9wZW5lZCA9ICF0aGlzLm9wZW5lZDtcclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICB0aGlzLm9wZW5lZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMub3BlbmVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBvblN0YXJ0KGU6IGFueSkge1xyXG4gICAgaWYgKHRoaXMub3BlbmVkKSB7XHJcbiAgICAgIHRoaXMub3BlblN0YXJ0LmVtaXQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2xvc2VTdGFydC5lbWl0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkRvbmUoZTogYW55KSB7XHJcbiAgICBpZiAodGhpcy5vcGVuZWQpIHtcclxuICAgICAgdGhpcy5vcGVuRG9uZS5lbWl0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNsb3NlRG9uZS5lbWl0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNsaWNrVHJpZ2dlcigpIHtcclxuICAgIGlmICh0aGlzLmFjdGl2ZSkge1xyXG4gICAgICB0aGlzLnRvZ2dsZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19