/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ContentChildren, ElementRef, Input, QueryList, Renderer2, ViewChild, ViewEncapsulation, Output, EventEmitter } from '@angular/core';
import { Grid } from './grid.model';
import { GridColumnComponent } from './grid-column/grid-column.component';
import { str2int } from '../../shared/utils';
export class GridComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.advancedFilter = false;
        this.autoCalculateHeight = true;
        this.buttonColor = '#fff';
        this.buttonCount = 5;
        this.buttonClass = 'toolbar-button';
        this.pagerInfo = true;
        this.pagerType = 'numeric';
        this.pageSizes = true;
        this.previousNext = true;
        this.export = false;
        this.fileName = 'export';
        this.filter = { logic: 'and', filters: [] };
        this.filterable = true;
        this.pageSize = 20;
        this.pager = {
            pageSizes: [10, 20, 50, 100]
        };
        this.pdfHeader = '';
        this.skip = 0;
        this.sortable = { mode: 'multiple' };
        this.sort = [];
        this.total = 0;
        this.changes = new EventEmitter();
        this.columns = [];
        this.filtering = true;
    }
    /**
     * The color of the toolbar. Can be primary, accent, or warn.
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set color(value) {
        this._updateColor(value);
    }
    /**
     * @param {?} newColor
     * @return {?}
     */
    _updateColor(newColor) {
        this._setElementColor(this._color, false);
        this._setElementColor(newColor, true);
        this._color = newColor;
    }
    /**
     * @param {?} color
     * @param {?} isAdd
     * @return {?}
     */
    _setElementColor(color, isAdd) {
        if (color != null && color !== '') {
            const /** @type {?} */ element = this._elementRef.nativeElement;
            if (isAdd) {
                this._renderer.addClass(element, `mat-${color}`);
            }
            else {
                this._renderer.removeClass(element, `mat-${color}`);
            }
        }
    }
    /**
     * @return {?}
     */
    get activeRows() {
        return this.pageRows(this.filterRows(this.sortRows(this.rows)));
    }
    /**
     * @return {?}
     */
    get computedRowHeight() {
        return this.rowHeightMax || 32;
    }
    /**
     * @return {?}
     */
    get dynamicHeight() {
        return this.autoCalculateHeight ? (this.activeRows.length === 0 || !this.numericHeight) ?
            null : Math.max(96 + this.headerHeight + this.pagerHeight + this.toolbarHeight, Math.min(this.computedRowHeight * this.activeRows.length + this.headerHeight + this.pagerHeight + this.toolbarHeight, this.numericHeight))
            : this.numericHeight;
    }
    /**
     * @return {?}
     */
    get excelFileName() {
        return `${this.fileName}.xlsx`;
    }
    /**
     * @return {?}
     */
    get filters() {
        return this.filter.filters;
    }
    /**
     * @return {?}
     */
    get gridData() {
        return {
            data: this.activeRows,
            total: this.total ? this.total : this.rows.length
        };
    }
    /**
     * @return {?}
     */
    get headerHeight() {
        return this.filterable ? 66 : 27;
    }
    /**
     * @return {?}
     */
    get numericHeight() {
        return typeof (this.height) === 'string' ? str2int(this.height) : this.height;
    }
    /**
     * @return {?}
     */
    get pagerHeight() {
        return this.pageable ? 46 : 0;
    }
    /**
     * @return {?}
     */
    get pagerSettings() {
        return this.pager;
    }
    /**
     * @return {?}
     */
    get pdfFileName() {
        return `${this.fileName}.pdf`;
    }
    /**
     * @return {?}
     */
    get rows() {
        return this.model.data ? this.model.data.toArray() : [];
    }
    /**
     * @return {?}
     */
    get showFilters() {
        return this.filterable && this.filtering;
    }
    /**
     * @return {?}
     */
    get take() {
        return this.pageSize || 20;
    }
    /**
     * @return {?}
     */
    get toolbarHeight() {
        return this.export ? 53 : 0;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.model.update(this);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.pageable = {
            buttonCount: this.buttonCount,
            info: this.pagerInfo,
            type: this.pagerType,
            pageSizes: this.pageSizes,
            previousNext: this.previousNext
        };
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.contentChildren.forEach(x => {
            this.columns.push(x);
        });
    }
    /**
     * @param {?} state
     * @return {?}
     */
    dataStateChange(state) {
        this.filterChange(state['filter']);
        this.pageChange({ skip: state['skip'], take: state['take'] });
        this.sortChange(state['sort']);
        this.changes.emit(state);
    }
    /**
     * @param {?} component
     * @return {?}
     */
    save(component) {
        const /** @type {?} */ options = component.workbookOptions();
        const /** @type {?} */ rows = options.sheets[0].rows;
        let /** @type {?} */ altIdx = 0;
        rows.forEach((row) => {
            if (row.type === 'data') {
                if (altIdx % 2 !== 0) {
                    row.cells.forEach((cell) => {
                        cell.background = '#aabbcc';
                    });
                }
                altIdx++;
            }
        });
        component.save(options);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    filterChange(e) {
        this.filter = e;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    pageChange(e) {
        this.skip = e.skip;
        this.pageSize = str2int(e.take.toString());
    }
    /**
     * @param {?} sort
     * @return {?}
     */
    sortChange(sort) {
        this.sort = sort;
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    filterRows(rows) {
        return Grid.FilterRows(rows, this.filters);
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    pageRows(rows) {
        return this.pager ? Grid.PageRows(rows, this.skip, this.take) : rows;
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    sortRows(rows) {
        return Grid.SortRows(rows, this.sort);
    }
}
GridComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-grid',
                template: `<mat-card class="grid mat-primary" [class.mat-card]="!export">
  <kendo-grid [data]="gridData" [filter]="filter" [filterable]="showFilters" [groupable]="groupable" [height]="dynamicHeight"
    [pageSize]="pageSize" [pageable]="pagerSettings" [rowHeight]="rowHeight" [scrollable]="scrollable" [selectable]="selectable"
    [skip]="skip" [sortable]="sortable" [group]="group" [sort]="sort" (dataStateChange)="dataStateChange($event)" #kendoGridInstance="kendoGrid">

    <!-- Toolbar Template -->
    <ng-template kendoGridToolbarTemplate *ngIf="export">
      <button mat-raised-button class="toolbar-button pdf-button" kendoGridPDFCommand>
        <mat-icon>picture_as_pdf</mat-icon>Export to PDF</button>
      <button mat-raised-button class="toolbar-button excel-button" (click)="save(excelexport)">
        <mat-icon>import_export</mat-icon>Export To Excel</button>
    </ng-template>

    <!-- Grid Columns -->
    <kendo-grid-column *ngFor="let col of columns" [class]="col.class" [editable]="col.editable" [editor]="col.editor" [field]="col.colField"
      [filter]="col.filter" [filterable]="col.filterable" [footerClass]="col.footerClass" [footerStyle]="col.footerStyle" [format]="col.format"
      [headerClass]="col.headerClass" [headerStyle]="col.headerStyle" [hidden]="col.hidden" [locked]="col.locked" [media]="col.media"
      [sortable]="col.sortable" [style]="col.style" [title]="col.colTitle" [width]="col.width">
      <ng-template *ngIf="col.templateRef" kendoGridCellTemplate let-dataItem>
        <iu-grid-cell [templateRef]="col.templateRef" [dataItem]="dataItem"></iu-grid-cell>
      </ng-template>
    </kendo-grid-column>

    <!-- Export to PDF -->
    <kendo-grid-pdf *ngIf="export" [fileName]="pdfFileName" [allPages]="true" paperSize="A4" [repeatHeaders]="true" [landscape]="true">
      <kendo-grid-pdf-margin top="2cm" left="1cm" right="1cm" bottom="2cm"></kendo-grid-pdf-margin>
      <ng-template kendoGridPDFTemplate let-pageNum="pageNum" let-totalPages="totalPages">
        <div class="page-template">
          <div class="header">
            <div style="float: right">Page {{ pageNum }} of {{ totalPages }}</div>
            {{ pdfHeader }}
          </div>
          <div class="footer">
            Page {{ pageNum }} of {{ totalPages }}
          </div>
        </div>
      </ng-template>
    </kendo-grid-pdf>

    <!-- Export to Excel -->
    <kendo-excelexport [data]="activeRows" [fileName]="excelFileName" [filterable]="true" #excelexport>
      <kendo-excelexport-column *ngFor="let col of columns" [field]="col.colField" [title]="col.colTitle">
      </kendo-excelexport-column>
    </kendo-excelexport>

  </kendo-grid>
</mat-card>
`,
                styles: [`.mat-card.grid{padding:0}.grid .k-grid-header{padding-right:13px}.grid th.k-grid-header:first-child{padding-left:6px}.grid .mat-raised-button{color:#fff}.k-grid-header .k-header>.k-link{font-size:16px;padding:2px 12px}.k-grid td{border:none;padding:6px 12px}.k-widget{border:none}.k-filter-row>th{padding:4px;max-width:190px;border-width:0 0 1px 1px;border-style:solid}.k-input.k-textbox,.k-textbox{height:calc(1em + (4px * 2) + (1px * 2))!important;min-width:80px}.k-filtercell .k-filtercell-wrapper,.k-filtercell>span{padding-right:calc(1.5em + 8px + 2px + 4px)}.k-filtercell .k-dropdown-operator{display:none}.k-picker-wrap.k-state-default{border-bottom-width:1px}.page-template{font-family:"DejaVu Sans",Arial,sans-serif;position:absolute;width:100%;height:100%;top:0;left:0}.page-template .header{position:absolute;top:30px;left:30px;right:30px;border-bottom:1px solid #888;color:#888}.page-template .footer{position:absolute;bottom:30px;left:30px;right:30px;border-top:1px solid #888;text-align:center;color:#888}.toolbar-button{color:#fff;background-image:none;vertical-align:middle}`],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
GridComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
GridComponent.propDecorators = {
    model: [{ type: Input }],
    advancedFilter: [{ type: Input }],
    autoCalculateHeight: [{ type: Input }],
    buttonColor: [{ type: Input }],
    buttonCount: [{ type: Input }],
    buttonClass: [{ type: Input }],
    pagerInfo: [{ type: Input }],
    pagerType: [{ type: Input }],
    pageSizes: [{ type: Input }],
    previousNext: [{ type: Input }],
    detailRowHeight: [{ type: Input }],
    export: [{ type: Input }],
    fileName: [{ type: Input }],
    filter: [{ type: Input }],
    filterable: [{ type: Input }],
    groupable: [{ type: Input }],
    height: [{ type: Input }],
    pageSize: [{ type: Input }],
    pageable: [{ type: Input }],
    pager: [{ type: Input }],
    pdfHeader: [{ type: Input }],
    rowHeight: [{ type: Input }],
    rowHeightMax: [{ type: Input }],
    scrollable: [{ type: Input }],
    selectable: [{ type: Input }],
    skip: [{ type: Input }],
    sortable: [{ type: Input }],
    group: [{ type: Input }],
    rowClass: [{ type: Input }],
    sort: [{ type: Input }],
    total: [{ type: Input }],
    changes: [{ type: Output }],
    grid: [{ type: ViewChild, args: ['kendoGridInstance',] }],
    contentChildren: [{ type: ContentChildren, args: [GridColumnComponent,] }],
    color: [{ type: Input }]
};
function GridComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    GridComponent.prototype.model;
    /** @type {?} */
    GridComponent.prototype.advancedFilter;
    /** @type {?} */
    GridComponent.prototype.autoCalculateHeight;
    /** @type {?} */
    GridComponent.prototype.buttonColor;
    /** @type {?} */
    GridComponent.prototype.buttonCount;
    /** @type {?} */
    GridComponent.prototype.buttonClass;
    /** @type {?} */
    GridComponent.prototype.pagerInfo;
    /** @type {?} */
    GridComponent.prototype.pagerType;
    /** @type {?} */
    GridComponent.prototype.pageSizes;
    /** @type {?} */
    GridComponent.prototype.previousNext;
    /** @type {?} */
    GridComponent.prototype.detailRowHeight;
    /** @type {?} */
    GridComponent.prototype.export;
    /** @type {?} */
    GridComponent.prototype.fileName;
    /** @type {?} */
    GridComponent.prototype.filter;
    /** @type {?} */
    GridComponent.prototype.filterable;
    /** @type {?} */
    GridComponent.prototype.groupable;
    /** @type {?} */
    GridComponent.prototype.height;
    /** @type {?} */
    GridComponent.prototype.pageSize;
    /** @type {?} */
    GridComponent.prototype.pageable;
    /** @type {?} */
    GridComponent.prototype.pager;
    /** @type {?} */
    GridComponent.prototype.pdfHeader;
    /** @type {?} */
    GridComponent.prototype.rowHeight;
    /** @type {?} */
    GridComponent.prototype.rowHeightMax;
    /** @type {?} */
    GridComponent.prototype.scrollable;
    /** @type {?} */
    GridComponent.prototype.selectable;
    /** @type {?} */
    GridComponent.prototype.skip;
    /** @type {?} */
    GridComponent.prototype.sortable;
    /** @type {?} */
    GridComponent.prototype.group;
    /** @type {?} */
    GridComponent.prototype.rowClass;
    /** @type {?} */
    GridComponent.prototype.sort;
    /** @type {?} */
    GridComponent.prototype.total;
    /** @type {?} */
    GridComponent.prototype.changes;
    /** @type {?} */
    GridComponent.prototype.grid;
    /** @type {?} */
    GridComponent.prototype.contentChildren;
    /** @type {?} */
    GridComponent.prototype.columns;
    /** @type {?} */
    GridComponent.prototype._color;
    /** @type {?} */
    GridComponent.prototype.filtering;
    /** @type {?} */
    GridComponent.prototype._elementRef;
    /** @type {?} */
    GridComponent.prototype._renderer;
}

//# sourceMappingURL=data:application/json;base64,