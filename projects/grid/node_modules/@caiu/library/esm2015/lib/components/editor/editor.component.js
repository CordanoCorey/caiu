/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, forwardRef, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MatDialog } from '@angular/material';
import { EditorWindowComponent } from './editor-window/editor-window.component';
export const /** @type {?} */ EDITOR_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => EditorComponent),
    multi: true
};
export class EditorComponent {
    /**
     * @param {?} dialog
     * @param {?} ref
     */
    constructor(dialog, ref) {
        this.dialog = dialog;
        this.ref = ref;
        this.type = 'full';
        this.expanded = false;
        this.height = 100;
        this.plugins = [
            'advlist autolink lists link image charmap print preview hr anchor pagebreak',
            'searchreplace wordcount visualblocks visualchars code fullscreen',
            'insertdatetime media nonbreaking save table contextmenu directionality',
            'emoticons template paste textcolor colorpicker textpattern imagetools toc help'
        ];
        this.skinUrl = '/assets/skins/lightgray-gradient';
        this.templates = [
            { title: 'Test template 1', content: 'Test 1' },
            { title: 'Test template 2', content: 'Test 2' }
        ];
        this.changes = new EventEmitter();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.setContent(this._value);
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    get basic() {
        return this.type === 'basic';
    }
    /**
     * @return {?}
     */
    get full() {
        return this.type === 'full';
    }
    /**
     * @return {?}
     */
    get config() {
        switch (this.type) {
            case 'basic':
                return this.configBasic;
            case 'full':
                return this.configFull;
            default:
                return this.configFull;
        }
    }
    /**
     * @return {?}
     */
    get configBasic() {
        return {
            height: this.height,
            selector: '#' + this.elementId,
            menubar: false,
            skin_url: this.skinUrl,
            theme: 'modern',
            plugins: [
                'advlist autolink lists link image charmap print preview anchor',
                'searchreplace visualblocks code fullscreen',
                'insertdatetime media table contextmenu paste code'
            ],
            toolbar: `undo redo | insert | styleselect | bold italic |
       alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link`,
            content_css: [
                '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
                '//www.tinymce.com/css/codepen.min.css'
            ],
            setup: editor => {
                this.editorRef = editor;
                editor.on('keyup', (e) => {
                    e.preventDefault();
                    const /** @type {?} */ content = editor.getContent();
                    this.onKeyup(content);
                });
                editor.on('change', (e) => {
                    e.preventDefault();
                    const /** @type {?} */ content = editor.getContent();
                    this.onChange(content);
                });
                editor.on('viewcontentloaded', (e) => {
                    editor.setContent('');
                });
            },
        };
    }
    /**
     * @return {?}
     */
    get configFull() {
        return {
            height: this.height,
            selector: '#' + this.elementId,
            plugins: this.plugins,
            skin_url: this.skinUrl,
            templates: this.templates,
            theme: 'modern',
            toolbar1: `undo redo | insert | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent`,
            toolbar2: 'print preview | forecolor backcolor | link',
            setup: editor => {
                this.editorRef = editor;
                editor.on('keyup', (e) => {
                    e.preventDefault();
                    const /** @type {?} */ content = editor.getContent();
                    this.onKeyup(content);
                });
                editor.on('change', (e) => {
                    e.preventDefault();
                    const /** @type {?} */ content = editor.getContent();
                    this.onChange(content);
                });
                editor.on('viewcontentloaded', (e) => {
                    editor.setContent('');
                });
            },
            image_advtab: true,
            content_css: [
                '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
                '//www.tinymce.com/css/codepen.min.css'
            ]
        };
    }
    /**
     * @return {?}
     */
    get hasValue() {
        return this.value ? true : false;
    }
    /**
     * @return {?}
     */
    get showExpand() {
        return this.full && !this.expanded;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        tinymce.init(this.config);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        tinymce.remove(this.editorRef);
    }
    /**
     * @return {?}
     */
    clear() {
        this.value = '';
    }
    /**
     * @param {?} e
     * @return {?}
     */
    expand(e) {
        if (e && e.preventDefault) {
            e.preventDefault();
        }
        const /** @type {?} */ config = {
            data: this.editorRef.getContent(),
            width: '1200px'
        };
        this.openDialog(config);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
        this.value = value;
        this.changes.emit(value);
        if (this.onModelChange) {
            this.onModelChange(value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onUpdate(value) {
        this.onChange(value);
        this.setContent(this.value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onKeyup(value) {
        this.onChange(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onBlur(value) {
        this.focused = '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onFocus(value) {
        this.focused = value;
        if (this.onTouch) {
            this.onTouch();
        }
    }
    /**
     * @param {?} config
     * @return {?}
     */
    openDialog(config) {
        const /** @type {?} */ dialogRef = this.dialog.open(EditorWindowComponent, config);
        this.dialogRef = dialogRef.afterClosed().subscribe(result => {
            this.closeDialog(result);
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    closeDialog(value) {
        if (value) {
            this.onChange(value);
        }
        this.dialogRef.unsubscribe();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setContent(value) {
        if (this.editorRef && this.editorRef.getContent) {
            const /** @type {?} */ content = this.editorRef.getContent();
            if (value && content != value) {
                this.editorRef.setContent(value);
            }
        }
    }
}
EditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-editor',
                template: `<mat-card class="editor">
  <textarea [id]="elementId">
    <ng-content *ngIf="!hasValue"></ng-content>
    <span *ngIf="hasValue">{{ value }}</span>
  </textarea>
  <button *ngIf="showExpand" id="expand-editor" (click)="expand($event)" mat-button>
    <mat-icon>fullscreen</mat-icon>
  </button>
</mat-card>
`,
                styles: [`.mat-card{display:block;clear:both;padding:1px 3px 1px 1px;border-radius:2px}#expand-editor{font-size:36px;position:absolute;right:3px;top:3px;color:#fff;text-align:center;min-width:36px;line-height:24px;padding:2px}.mat-icon{font-size:36px;position:relative;left:-6px;top:-7px}`],
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [EDITOR_ACCESSOR]
            },] },
];
/** @nocollapse */
EditorComponent.ctorParameters = () => [
    { type: MatDialog },
    { type: ChangeDetectorRef }
];
EditorComponent.propDecorators = {
    type: [{ type: Input }],
    elementId: [{ type: Input }],
    expanded: [{ type: Input }],
    height: [{ type: Input }],
    plugins: [{ type: Input }],
    skinUrl: [{ type: Input }],
    templates: [{ type: Input }],
    changes: [{ type: Output }],
    value: [{ type: Input }]
};
function EditorComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    EditorComponent.prototype.type;
    /** @type {?} */
    EditorComponent.prototype.elementId;
    /** @type {?} */
    EditorComponent.prototype.expanded;
    /** @type {?} */
    EditorComponent.prototype.height;
    /** @type {?} */
    EditorComponent.prototype.plugins;
    /** @type {?} */
    EditorComponent.prototype.skinUrl;
    /** @type {?} */
    EditorComponent.prototype.templates;
    /** @type {?} */
    EditorComponent.prototype.changes;
    /** @type {?} */
    EditorComponent.prototype.onModelChange;
    /** @type {?} */
    EditorComponent.prototype.onTouch;
    /** @type {?} */
    EditorComponent.prototype._value;
    /** @type {?} */
    EditorComponent.prototype.focused;
    /** @type {?} */
    EditorComponent.prototype.dialogRef;
    /** @type {?} */
    EditorComponent.prototype.editorRef;
    /** @type {?} */
    EditorComponent.prototype.dialog;
    /** @type {?} */
    EditorComponent.prototype.ref;
}

//# sourceMappingURL=data:application/json;base64,