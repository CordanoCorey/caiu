/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Output, EventEmitter, forwardRef, Input, ViewEncapsulation, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { FileUpload } from './file-upload.model';
import { Ordering } from '../../shared/ordering';
import { build, guid, equals } from '../../shared/utils';
export const /** @type {?} */ FILE_UPLOAD_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => FileUploadComponent),
    multi: true
};
export class FileUploadComponent {
    /**
     * @param {?} ref
     */
    constructor(ref) {
        this.ref = ref;
        this.id = `files-${guid()}`;
        this.multiple = false;
        this.ordered = true;
        this.preview = true;
        this.upload = new EventEmitter();
        this.changes$ = new BehaviorSubject(new FileUpload());
        this.ordering = new Ordering([], FileUpload, 'order', 'name');
    }
    /**
     * @return {?}
     */
    get activeFile() {
        return this.hasUploads ? this.uploads[0] : new FileUpload();
    }
    /**
     * @return {?}
     */
    get hasUploads() {
        return this.uploads.length > 0;
    }
    /**
     * @return {?}
     */
    get showMultiple() {
        return this.preview && this.multiple;
    }
    /**
     * @return {?}
     */
    get uploads() {
        return this.ordering.items.filter(upload => upload.name !== '');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set uploads(value) {
        this.ordering.updateItems(value.filter(upload => upload.name !== ''));
        this.onChange(this.uploads);
    }
    /**
     * @return {?}
     */
    get orderedUploads() {
        return this.uploads;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.changes$.subscribe(upload => {
            this.onUpload(upload);
        });
    }
    /**
     * @param {?} f
     * @return {?}
     */
    add(f) {
        if (!this.multiple && this.hasUploads) {
            this.remove();
        }
        this.uploads = this.ordering.addItem(f);
    }
    /**
     * @return {?}
     */
    emit() {
        if (this.value.length > 0) {
            if (this.multiple) {
                this.upload.emit(this.value);
            }
            else {
                this.upload.emit(this.value[0]);
            }
        }
    }
    /**
     * @param {?} f
     * @return {?}
     */
    moveUp(f) {
        this.uploads = this.ordering.moveUp(f);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    moveDown(f) {
        this.uploads = this.ordering.moveDown(f);
    }
    /**
     * @param {?=} f
     * @return {?}
     */
    remove(f) {
        const /** @type {?} */ removeFile = f || this.activeFile;
        this.uploads = this.ordering.removeItem(removeFile);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    update(f) {
        const /** @type {?} */ index = this.uploads.findIndex(item => item['name'] === f.name);
        if (index === -1) {
            this.add(f);
        }
        else {
            this.uploads = this.uploads.map((x, i) => i === index ? build(FileUpload, f, { order: x.order }) : x);
            this.ref.detectChanges();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
        this.uploadAll(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
        if (!equals(this.value, value)) {
            this.value = value;
            if (value.every(x => x.readyState === 'DONE')) {
                this.emit();
            }
            if (this.onModelChange) {
                this.onModelChange(value);
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onInputChange(e) {
        const /** @type {?} */ input = event.target;
        const /** @type {?} */ files = input['files'];
        if (files && files.length > 0) {
            for (let /** @type {?} */ i = 0; i < files.length; i++) {
                this.setupReader(files[i]);
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onBlur(value) {
        this.focused = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onFocus(value) {
        this.focused = value;
        this.onTouch();
    }
    /**
     * @param {?} upload
     * @return {?}
     */
    onUpload(upload) {
        const /** @type {?} */ f = build(FileUpload, upload);
        this.update(f);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    setupReader(file) {
        const /** @type {?} */ reader = new FileReader();
        const /** @type {?} */ changes$ = this.changes$;
        const /** @type {?} */ upload = build(FileUpload, {
            lastModified: file['lastModified'],
            lastModifiedDate: file['lastModifiedDate'],
            name: file['name'],
            size: file['size'],
            type: file['type'],
            webkitRelativePath: file['webkitRelativePath']
        });
        reader.onload = function (e) {
            const /** @type {?} */ src = reader.result;
            const /** @type {?} */ readyState = FileUpload.GetReadyState(reader);
            changes$.next(Object.assign(upload, { src, readyState }));
        };
        reader.readAsDataURL(file);
        this.onUpload(build(FileUpload, upload, { readyState: FileUpload.GetReadyState(reader) }));
    }
    /**
     * @param {?} uploads
     * @return {?}
     */
    uploadAll(uploads) {
        uploads.forEach(upload => {
            this.onUpload(upload);
        });
    }
}
FileUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-file-upload',
                template: `<div class="file-upload">
  <div class="box" fxLayout="row" fxLayoutAlign="center end">
    <p id="dragdrop-message" *ngIf="showMultiple">
      <strong>Choose files</strong>
      <span class="dragndrop"> or drag them here</span>.
    </p>
    <input id="file-upload" *ngIf="showMultiple" type="file" (change)="onInputChange($event)" [id]="id" multiple/>
    <p id="dragdrop-message" *ngIf="!multiple">
      <strong>Choose a file</strong>
      <span class="dragndrop"> or drag it here</span>.
    </p>
    <input id="file-upload" *ngIf="!multiple" type="file" (change)="onInputChange($event)" [id]="id" />
    <label [for]="id" class="custom-file-upload">
      <figure>
        <mat-icon>cloud_upload</mat-icon>
      </figure>
    </label>
  </div>
  <iu-uploads *ngIf="multiple" [uploads]="uploads" [ordered]="ordered" (moveUp)="moveUp($event)" (moveDown)="moveDown($event)"
    (remove)="remove($event)"></iu-uploads>
  <iu-upload *ngIf="preview && !multiple && hasUploads" [upload]="activeFile" [height]="200" (remove)="remove()"></iu-upload>
</div>
`,
                styles: [`.file-upload{margin:10px;padding:10px}.file-upload input[type=file]{width:.1px;height:.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.file-upload .box{padding:100px 20px;margin:10px;display:flex;outline:-webkit-focus-ring-color auto 5px;outline-offset:-10px;position:relative}.file-upload .box #dragdrop-message{position:absolute;top:60px;max-width:80%;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;display:inline-block;overflow:hidden;font-size:24px}.file-upload .box #dragdrop-message span{display:inline}.file-upload .custom-file-upload{box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12);max-width:80%;font-size:20px;font-weight:700;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;display:inline-block;overflow:hidden;padding:10px 20px;margin-top:50px}.file-upload .custom-file-upload figure{width:50px;height:70px;display:flex;position:relative;padding:30px;margin:0 auto 10px}.file-upload .custom-file-upload figure mat-icon{font-size:50px;height:50px;width:50px}.file-upload .custom-file-upload figure::after,.file-upload .custom-file-upload figure::before{width:0;height:0;content:'';position:absolute;top:0;right:0}.file-upload .custom-file-upload figure::before{border-left:20px solid transparent}.file-upload .custom-file-upload figure::after{border-right:20px solid transparent}`],
                providers: [FILE_UPLOAD_ACCESSOR],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
FileUploadComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
FileUploadComponent.propDecorators = {
    id: [{ type: Input }],
    multiple: [{ type: Input }],
    ordered: [{ type: Input }],
    preview: [{ type: Input }],
    upload: [{ type: Output }]
};
function FileUploadComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    FileUploadComponent.prototype.id;
    /** @type {?} */
    FileUploadComponent.prototype.multiple;
    /** @type {?} */
    FileUploadComponent.prototype.ordered;
    /** @type {?} */
    FileUploadComponent.prototype.preview;
    /** @type {?} */
    FileUploadComponent.prototype.upload;
    /** @type {?} */
    FileUploadComponent.prototype.onModelChange;
    /** @type {?} */
    FileUploadComponent.prototype.onTouch;
    /** @type {?} */
    FileUploadComponent.prototype.changes$;
    /** @type {?} */
    FileUploadComponent.prototype.value;
    /** @type {?} */
    FileUploadComponent.prototype.focused;
    /** @type {?} */
    FileUploadComponent.prototype.ordering;
    /** @type {?} */
    FileUploadComponent.prototype.ref;
}

//# sourceMappingURL=data:application/json;base64,