/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { Grid } from '../grid.model';
import { GridColumn } from '../grid-column/grid-column.model';
import { Metadata } from '../../../shared/models';
import { toArray } from '../../../shared/utils';
export class SimpleGridComponent {
    constructor() {
        this.data = [];
        this.export = false;
        this.filterable = false;
        this.fileName = 'export';
        this.height = 600;
        this.pageSize = 30;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set metadata(value) {
        this._metadata = value;
    }
    /**
     * @return {?}
     */
    get metadata() {
        return this._metadata ? this._metadata : (toArray(this.data).length > 0 ? toArray(this.data)[0].metadata : null);
    }
    /**
     * @return {?}
     */
    get columns() {
        return this.metadata ? this.columnKeys.map(key => new GridColumn(key, this.metadata[key].columnLabel)) : [];
    }
    /**
     * @return {?}
     */
    get columnKeys() {
        return this.metadata ? Object.keys(this.metadata).filter(key => this.metadata[key].columnLabel ? true : false) : [];
    }
    /**
     * @return {?}
     */
    get columnLabels() {
        return this.metadata ? this.columnKeys.map(key => this.metadata[key].columnLabel) : [];
    }
    /**
     * @return {?}
     */
    get gridData() {
        return Grid.Build(toArray(this.data));
    }
}
SimpleGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-simple-grid',
                template: `<iu-grid [model]="gridData" [export]="export" [filterable]="filterable" [fileName]="fileName" [pageSize]="pageSize" [height]="height">
  <iu-grid-column *ngFor="let column of columns" [model]="column"></iu-grid-column>
</iu-grid>
`,
                styles: [``]
            },] },
];
/** @nocollapse */
SimpleGridComponent.ctorParameters = () => [];
SimpleGridComponent.propDecorators = {
    data: [{ type: Input }],
    export: [{ type: Input }],
    filterable: [{ type: Input }],
    fileName: [{ type: Input }],
    height: [{ type: Input }],
    pageSize: [{ type: Input }],
    metadata: [{ type: Input }]
};
function SimpleGridComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    SimpleGridComponent.prototype.data;
    /** @type {?} */
    SimpleGridComponent.prototype.export;
    /** @type {?} */
    SimpleGridComponent.prototype.filterable;
    /** @type {?} */
    SimpleGridComponent.prototype.fileName;
    /** @type {?} */
    SimpleGridComponent.prototype.height;
    /** @type {?} */
    SimpleGridComponent.prototype.pageSize;
    /** @type {?} */
    SimpleGridComponent.prototype._metadata;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWdyaWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNhaXUvbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2dyaWQvc2ltcGxlLWdyaWQvc2ltcGxlLWdyaWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBVWhELE1BQU07SUFXSjtvQkFUdUIsRUFBRTtzQkFDUCxLQUFLOzBCQUNELEtBQUs7d0JBQ1AsUUFBUTtzQkFDVixHQUFHO3dCQUNELEVBQUU7S0FJTDs7Ozs7SUFFakIsSUFDSSxRQUFRLENBQUMsS0FBZTtRQUMxQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztLQUN4Qjs7OztJQUVELElBQUksUUFBUTtRQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2xIOzs7O0lBRUQsSUFBSSxPQUFPO1FBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQzdHOzs7O0lBRUQsSUFBSSxVQUFVO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7S0FDckg7Ozs7SUFFRCxJQUFJLFlBQVk7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7S0FDeEY7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBTSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDNUM7OztZQTVDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsUUFBUSxFQUFFOzs7Q0FHWDtnQkFDQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDYjs7Ozs7bUJBR0UsS0FBSztxQkFDTCxLQUFLO3lCQUNMLEtBQUs7dUJBQ0wsS0FBSztxQkFDTCxLQUFLO3VCQUNMLEtBQUs7dUJBTUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEdyaWQgfSBmcm9tICcuLi9ncmlkLm1vZGVsJztcclxuaW1wb3J0IHsgR3JpZENvbHVtbiB9IGZyb20gJy4uL2dyaWQtY29sdW1uL2dyaWQtY29sdW1uLm1vZGVsJztcclxuaW1wb3J0IHsgTWV0YWRhdGEgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvbW9kZWxzJztcclxuaW1wb3J0IHsgdG9BcnJheSB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC91dGlscyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2l1LXNpbXBsZS1ncmlkJyxcclxuICB0ZW1wbGF0ZTogYDxpdS1ncmlkIFttb2RlbF09XCJncmlkRGF0YVwiIFtleHBvcnRdPVwiZXhwb3J0XCIgW2ZpbHRlcmFibGVdPVwiZmlsdGVyYWJsZVwiIFtmaWxlTmFtZV09XCJmaWxlTmFtZVwiIFtwYWdlU2l6ZV09XCJwYWdlU2l6ZVwiIFtoZWlnaHRdPVwiaGVpZ2h0XCI+XHJcbiAgPGl1LWdyaWQtY29sdW1uICpuZ0Zvcj1cImxldCBjb2x1bW4gb2YgY29sdW1uc1wiIFttb2RlbF09XCJjb2x1bW5cIj48L2l1LWdyaWQtY29sdW1uPlxyXG48L2l1LWdyaWQ+XHJcbmAsXHJcbiAgc3R5bGVzOiBbYGBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTaW1wbGVHcmlkQ29tcG9uZW50IHtcclxuXHJcbiAgQElucHV0KCkgZGF0YTogYW55W10gPSBbXTtcclxuICBASW5wdXQoKSBleHBvcnQgPSBmYWxzZTtcclxuICBASW5wdXQoKSBmaWx0ZXJhYmxlID0gZmFsc2U7XHJcbiAgQElucHV0KCkgZmlsZU5hbWUgPSAnZXhwb3J0JztcclxuICBASW5wdXQoKSBoZWlnaHQgPSA2MDA7XHJcbiAgQElucHV0KCkgcGFnZVNpemUgPSAzMDtcclxuXHJcbiAgX21ldGFkYXRhOiBNZXRhZGF0YTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgQElucHV0KClcclxuICBzZXQgbWV0YWRhdGEodmFsdWU6IE1ldGFkYXRhKSB7XHJcbiAgICB0aGlzLl9tZXRhZGF0YSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG1ldGFkYXRhKCk6IE1ldGFkYXRhIHtcclxuICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YSA/IHRoaXMuX21ldGFkYXRhIDogKHRvQXJyYXkodGhpcy5kYXRhKS5sZW5ndGggPiAwID8gdG9BcnJheSh0aGlzLmRhdGEpWzBdLm1ldGFkYXRhIDogbnVsbCk7XHJcbiAgfVxyXG5cclxuICBnZXQgY29sdW1ucygpOiBHcmlkQ29sdW1uPGFueT5bXSB7XHJcbiAgICByZXR1cm4gdGhpcy5tZXRhZGF0YSA/IHRoaXMuY29sdW1uS2V5cy5tYXAoa2V5ID0+IG5ldyBHcmlkQ29sdW1uKGtleSwgdGhpcy5tZXRhZGF0YVtrZXldLmNvbHVtbkxhYmVsKSkgOiBbXTtcclxuICB9XHJcblxyXG4gIGdldCBjb2x1bW5LZXlzKCk6IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiB0aGlzLm1ldGFkYXRhID8gT2JqZWN0LmtleXModGhpcy5tZXRhZGF0YSkuZmlsdGVyKGtleSA9PiB0aGlzLm1ldGFkYXRhW2tleV0uY29sdW1uTGFiZWwgPyB0cnVlIDogZmFsc2UpIDogW107XHJcbiAgfVxyXG5cclxuICBnZXQgY29sdW1uTGFiZWxzKCk6IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiB0aGlzLm1ldGFkYXRhID8gdGhpcy5jb2x1bW5LZXlzLm1hcChrZXkgPT4gdGhpcy5tZXRhZGF0YVtrZXldLmNvbHVtbkxhYmVsKSA6IFtdO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGdyaWREYXRhKCk6IEdyaWQ8YW55PiB7XHJcbiAgICByZXR1cm4gR3JpZC5CdWlsZDxhbnk+KHRvQXJyYXkodGhpcy5kYXRhKSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=