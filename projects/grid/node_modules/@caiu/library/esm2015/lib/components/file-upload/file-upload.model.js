/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { build } from '../../shared/utils';
export class FileUpload {
    constructor() {
        this.lastModified = 0;
        this.lastModifiedDate = new Date();
        this.name = '';
        this.size = 0;
        this.type = '';
        this.webkitRelativePath = '';
        this.order = 0;
        this.readyState = 'EMPTY';
        this.src = '';
    }
    /**
     * @param {?} file
     * @return {?}
     */
    static BuildFromFile(file) {
        return build(FileUpload, {
            name: file.fileName,
            size: file.fileSize,
            type: file.mimeType,
            src: file.src,
            order: file.order
        });
    }
    /**
     * @param {?} reader
     * @return {?}
     */
    static GetReadyState(reader) {
        switch (reader.readyState) {
            case 0:
                return 'EMPTY';
            case 1:
                return 'LOADING';
            case 2:
                return 'DONE';
            default:
                return 'EMPTY';
        }
    }
    /**
     * @return {?}
     */
    get extension() {
        return this.name.split('.').pop();
    }
    /**
     * @return {?}
     */
    get isImage() {
        return this.type.split('/')[0] === 'image';
    }
    /**
     * @return {?}
     */
    get loading() {
        return this.readyState === 'LOADING';
    }
    /**
     * @return {?}
     */
    get file() {
        return File.BuildFromFileUpload(this);
    }
}
function FileUpload_tsickle_Closure_declarations() {
    /** @type {?} */
    FileUpload.prototype.lastModified;
    /** @type {?} */
    FileUpload.prototype.lastModifiedDate;
    /** @type {?} */
    FileUpload.prototype.name;
    /** @type {?} */
    FileUpload.prototype.size;
    /** @type {?} */
    FileUpload.prototype.type;
    /** @type {?} */
    FileUpload.prototype.webkitRelativePath;
    /** @type {?} */
    FileUpload.prototype.order;
    /** @type {?} */
    FileUpload.prototype.readyState;
    /** @type {?} */
    FileUpload.prototype.src;
}
/**
 * @param {?} reader
 * @return {?}
 */
export function getReadyState(reader) {
    switch (reader.readyState) {
        case 0:
            return 'EMPTY';
        case 1:
            return 'LOADING';
        case 2:
            return 'DONE';
        default:
            return 'EMPTY';
    }
}
export class File {
    constructor() {
        this.id = 0;
        this.fileBinary = [];
        this.fileExtension = '';
        this.fileName = '';
        this.fileSize = 0;
        this.mimeType = '';
        this.order = 0;
    }
    /**
     * @param {?} upload
     * @return {?}
     */
    static BuildFromFileUpload(upload) {
        return build(File, {
            fileBinary: upload.src.replace(File.GetSrcPrefix(upload.type), ''),
            fileExtension: upload.extension,
            fileName: upload.name,
            fileSize: upload.size,
            mimeType: upload.type,
            order: upload.order
        });
    }
    /**
     * @param {?} img
     * @param {?=} defaultSrc
     * @return {?}
     */
    static GetImageBinarySrc(img, defaultSrc = '') {
        if (Array.isArray(img)) {
            if (img.length > 0) {
                return `data:${img[0].mimeType};base64,${img[0].fileBinary}`;
            }
            else {
                return defaultSrc;
            }
        }
        return img && img.mimeType && img.fileBinary ? `data:${img.mimeType};base64,${img.fileBinary}` : defaultSrc;
    }
    /**
     * @param {?} mimeType
     * @return {?}
     */
    static GetSrcPrefix(mimeType) {
        return `data:${mimeType};base64,`;
    }
    /**
     * @return {?}
     */
    get src() {
        return File.GetImageBinarySrc(this);
    }
}
function File_tsickle_Closure_declarations() {
    /** @type {?} */
    File.prototype.id;
    /** @type {?} */
    File.prototype.fileBinary;
    /** @type {?} */
    File.prototype.fileExtension;
    /** @type {?} */
    File.prototype.fileName;
    /** @type {?} */
    File.prototype.fileSize;
    /** @type {?} */
    File.prototype.mimeType;
    /** @type {?} */
    File.prototype.order;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZmlsZS11cGxvYWQvZmlsZS11cGxvYWQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUzQyxNQUFNOzs0QkFDYSxDQUFDO2dDQUNTLElBQUksSUFBSSxFQUFFO29CQUM1QixFQUFFO29CQUNGLENBQUM7b0JBQ0QsRUFBRTtrQ0FDWSxFQUFFO3FCQUNmLENBQUM7MEJBQ2tDLE9BQU87bUJBQzVDLEVBQUU7Ozs7OztJQUVSLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBVTtRQUMzQixNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRTtZQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDbkIsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ25CLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNuQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7U0FDcEIsQ0FBQyxDQUFDO0tBQ047Ozs7O0lBRUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFrQjtRQUNuQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN4QixLQUFLLENBQUM7Z0JBQ0YsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNuQixLQUFLLENBQUM7Z0JBQ0YsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUNyQixLQUFLLENBQUM7Z0JBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNsQjtnQkFDSSxNQUFNLENBQUMsT0FBTyxDQUFDO1NBQ3RCO0tBQ0o7Ozs7SUFFRCxJQUFJLFNBQVM7UUFDVCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDckM7Ozs7SUFFRCxJQUFJLE9BQU87UUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTyxDQUFDO0tBQzlDOzs7O0lBRUQsSUFBSSxPQUFPO1FBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxDQUFDO0tBQ3hDOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN6QztDQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUQsTUFBTSx3QkFBd0IsTUFBa0I7SUFDNUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDeEIsS0FBSyxDQUFDO1lBQ0YsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUNuQixLQUFLLENBQUM7WUFDRixNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ3JCLEtBQUssQ0FBQztZQUNGLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDbEI7WUFDSSxNQUFNLENBQUMsT0FBTyxDQUFDO0tBQ3RCO0NBQ0o7QUFFRCxNQUFNOztrQkFFRyxDQUFDOzBCQUNjLEVBQUU7NkJBQ04sRUFBRTt3QkFDUCxFQUFFO3dCQUNGLENBQUM7d0JBQ0QsRUFBRTtxQkFDTCxDQUFDOzs7Ozs7SUFFVCxNQUFNLENBQUMsbUJBQW1CLENBQUMsTUFBa0I7UUFDekMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDZixVQUFVLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2xFLGFBQWEsRUFBRSxNQUFNLENBQUMsU0FBUztZQUMvQixRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUk7WUFDckIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1lBQ3JCLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSTtZQUNyQixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7U0FDdEIsQ0FBQyxDQUFDO0tBQ047Ozs7OztJQUVELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFrQixFQUFFLFVBQVUsR0FBRyxFQUFFO1FBQ3hELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakIsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7YUFDaEU7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixNQUFNLENBQUMsVUFBVSxDQUFDO2FBQ3JCO1NBQ0o7UUFDRCxNQUFNLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsUUFBUSxXQUFXLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0tBQy9HOzs7OztJQUVELE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBZ0I7UUFDaEMsTUFBTSxDQUFDLFFBQVEsUUFBUSxVQUFVLENBQUM7S0FDckM7Ozs7SUFNRCxJQUFJLEdBQUc7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3ZDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWlsZCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRmlsZVVwbG9hZCB7XHJcbiAgICBsYXN0TW9kaWZpZWQgPSAwO1xyXG4gICAgbGFzdE1vZGlmaWVkRGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBuYW1lID0gJyc7XHJcbiAgICBzaXplID0gMDtcclxuICAgIHR5cGUgPSAnJztcclxuICAgIHdlYmtpdFJlbGF0aXZlUGF0aCA9ICcnO1xyXG4gICAgb3JkZXI/PSAwO1xyXG4gICAgcmVhZHlTdGF0ZTogJ0VNUFRZJyB8ICdMT0FESU5HJyB8ICdET05FJyA9ICdFTVBUWSc7XHJcbiAgICBzcmMgPSAnJztcclxuXHJcbiAgICBzdGF0aWMgQnVpbGRGcm9tRmlsZShmaWxlOiBGaWxlKTogRmlsZVVwbG9hZCB7XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkKEZpbGVVcGxvYWQsIHtcclxuICAgICAgICAgICAgbmFtZTogZmlsZS5maWxlTmFtZSxcclxuICAgICAgICAgICAgc2l6ZTogZmlsZS5maWxlU2l6ZSxcclxuICAgICAgICAgICAgdHlwZTogZmlsZS5taW1lVHlwZSxcclxuICAgICAgICAgICAgc3JjOiBmaWxlLnNyYyxcclxuICAgICAgICAgICAgb3JkZXI6IGZpbGUub3JkZXJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgR2V0UmVhZHlTdGF0ZShyZWFkZXI6IEZpbGVSZWFkZXIpIHtcclxuICAgICAgICBzd2l0Y2ggKHJlYWRlci5yZWFkeVN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnRU1QVFknO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0xPQURJTkcnO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0RPTkUnO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdFTVBUWSc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBleHRlbnNpb24oKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lLnNwbGl0KCcuJykucG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzSW1hZ2UoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5zcGxpdCgnLycpWzBdID09PSAnaW1hZ2UnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBsb2FkaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlYWR5U3RhdGUgPT09ICdMT0FESU5HJztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZmlsZSgpOiBGaWxlIHtcclxuICAgICAgICByZXR1cm4gRmlsZS5CdWlsZEZyb21GaWxlVXBsb2FkKHRoaXMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVhZHlTdGF0ZShyZWFkZXI6IEZpbGVSZWFkZXIpIHtcclxuICAgIHN3aXRjaCAocmVhZGVyLnJlYWR5U3RhdGUpIHtcclxuICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgIHJldHVybiAnRU1QVFknO1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgcmV0dXJuICdMT0FESU5HJztcclxuICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgIHJldHVybiAnRE9ORSc7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuICdFTVBUWSc7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBGaWxlIHtcclxuXHJcbiAgICBpZCA9IDA7XHJcbiAgICBmaWxlQmluYXJ5OiBhbnlbXSA9IFtdO1xyXG4gICAgZmlsZUV4dGVuc2lvbiA9ICcnO1xyXG4gICAgZmlsZU5hbWUgPSAnJztcclxuICAgIGZpbGVTaXplID0gMDtcclxuICAgIG1pbWVUeXBlID0gJyc7XHJcbiAgICBvcmRlciA9IDA7XHJcblxyXG4gICAgc3RhdGljIEJ1aWxkRnJvbUZpbGVVcGxvYWQodXBsb2FkOiBGaWxlVXBsb2FkKTogRmlsZSB7XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkKEZpbGUsIHtcclxuICAgICAgICAgICAgZmlsZUJpbmFyeTogdXBsb2FkLnNyYy5yZXBsYWNlKEZpbGUuR2V0U3JjUHJlZml4KHVwbG9hZC50eXBlKSwgJycpLFxyXG4gICAgICAgICAgICBmaWxlRXh0ZW5zaW9uOiB1cGxvYWQuZXh0ZW5zaW9uLFxyXG4gICAgICAgICAgICBmaWxlTmFtZTogdXBsb2FkLm5hbWUsXHJcbiAgICAgICAgICAgIGZpbGVTaXplOiB1cGxvYWQuc2l6ZSxcclxuICAgICAgICAgICAgbWltZVR5cGU6IHVwbG9hZC50eXBlLFxyXG4gICAgICAgICAgICBvcmRlcjogdXBsb2FkLm9yZGVyXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEdldEltYWdlQmluYXJ5U3JjKGltZzogRmlsZSB8IEZpbGVbXSwgZGVmYXVsdFNyYyA9ICcnKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW1nKSkge1xyXG4gICAgICAgICAgICBpZiAoaW1nLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgZGF0YToke2ltZ1swXS5taW1lVHlwZX07YmFzZTY0LCR7aW1nWzBdLmZpbGVCaW5hcnl9YDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0U3JjO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbWcgJiYgaW1nLm1pbWVUeXBlICYmIGltZy5maWxlQmluYXJ5ID8gYGRhdGE6JHtpbWcubWltZVR5cGV9O2Jhc2U2NCwke2ltZy5maWxlQmluYXJ5fWAgOiBkZWZhdWx0U3JjO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBHZXRTcmNQcmVmaXgobWltZVR5cGU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGBkYXRhOiR7bWltZVR5cGV9O2Jhc2U2NCxgO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGdldCBmaWxlVXBsb2FkKCk6IEZpbGVVcGxvYWQge1xyXG4gICAgLy8gICAgIHJldHVybiBGaWxlVXBsb2FkLkJ1aWxkRnJvbUZpbGUodGhpcyk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgZ2V0IHNyYygpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBGaWxlLkdldEltYWdlQmluYXJ5U3JjKHRoaXMpO1xyXG4gICAgfVxyXG5cclxufSJdfQ==