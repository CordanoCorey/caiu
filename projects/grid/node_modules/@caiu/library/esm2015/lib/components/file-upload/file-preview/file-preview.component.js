/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
import { FileUpload } from '../file-upload.model';
export class FilePreviewComponent {
    constructor() {
        this.file = new FileUpload();
        this.ordered = true;
        this.first = false;
        this.last = false;
        this.moveUp = new EventEmitter();
        this.moveDown = new EventEmitter();
        this.remove = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get cursorStyle() {
        return this.ordered ? 'move' : 'default';
    }
    /**
     * @return {?}
     */
    get graphic() {
        if (this.file.loading) {
            return 'cloud_upload';
        }
        else if (this.file.isImage) {
            return 'image';
        }
        else {
            switch (this.file.extension) {
                case 'pdf':
                    return 'picture_as_pdf';
                default:
                    return 'cloud_done';
            }
        }
    }
    /**
     * @return {?}
     */
    get showImage() {
        return this.graphic === 'image';
    }
    /**
     * @return {?}
     */
    get showUpArrow() {
        return this.ordered && !this.first;
    }
    /**
     * @return {?}
     */
    get showDownArrow() {
        return this.ordered && !this.last;
    }
    /**
     * @return {?}
     */
    onMoveUp() {
        this.moveUp.emit(this.file);
    }
    /**
     * @return {?}
     */
    onMoveDown() {
        this.moveDown.emit(this.file);
    }
    /**
     * @return {?}
     */
    onRemove() {
        this.remove.emit(this.file);
    }
}
FilePreviewComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-file-preview',
                template: `<mat-card class="file-preview" [style.cursor]="cursorStyle">
  <div class="graphic">
    <img *ngIf="showImage" [src]="file.src" [style.height]="height" [style.width]="width">
    <mat-icon *ngIf="!showImage" class="icon-graphic">{{ graphic }}</mat-icon>
  </div>
  <mat-progress-bar mode="indeterminate" *ngIf="file.loading"></mat-progress-bar>
  <div class="file-info">
    <span class="file-name">{{ file.name }}</span>
  </div>
  <mat-icon *ngIf="showUpArrow" class="up-arrow" (click)="onMoveUp()">keyboard_arrow_up</mat-icon>
  <mat-icon *ngIf="showDownArrow" class="down-arrow" (click)="onMoveDown()">keyboard_arrow_down</mat-icon>
  <mat-icon class="remove-upload" (click)="onRemove()">cancel</mat-icon>
</mat-card>
`,
                styles: [`.file-preview{height:80px;margin:2px 0;position:relative}.mat-card{padding:0}.file-preview img{max-height:72px}.graphic{position:absolute;left:50px;height:72px;max-width:200px;text-align:center;padding-left:20px;overflow:hidden}.icon-graphic{font-size:72px;height:72px;width:72px}.mat-progress-bar{position:absolute;left:0;top:73px}.file-info{position:absolute;left:250px;height:72px;max-width:300px;text-align:center}.file-name{margin:18px 6px;display:inline-block;line-height:36px;font-size:16px;height:36px;font-weight:700;color:#000}.arrow,.down-arrow,.up-arrow{cursor:pointer}.up-arrow{position:absolute;left:6px;top:0;font-size:36px;height:36px;width:36px;font-weight:700}.down-arrow{position:absolute;left:6px;top:36px;font-size:36px;height:36px;width:36px;font-weight:700}.remove-upload{cursor:pointer;position:absolute;right:10px;top:20px;font-size:40px;height:40px;width:40px}.down-arrow:hover,.up-arrow:hover{color:#fff}`]
            },] },
];
/** @nocollapse */
FilePreviewComponent.ctorParameters = () => [];
FilePreviewComponent.propDecorators = {
    file: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    ordered: [{ type: Input }],
    first: [{ type: Input }],
    last: [{ type: Input }],
    moveUp: [{ type: Output }],
    moveDown: [{ type: Output }],
    remove: [{ type: Output }]
};
function FilePreviewComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    FilePreviewComponent.prototype.file;
    /** @type {?} */
    FilePreviewComponent.prototype.height;
    /** @type {?} */
    FilePreviewComponent.prototype.width;
    /** @type {?} */
    FilePreviewComponent.prototype.ordered;
    /** @type {?} */
    FilePreviewComponent.prototype.first;
    /** @type {?} */
    FilePreviewComponent.prototype.last;
    /** @type {?} */
    FilePreviewComponent.prototype.moveUp;
    /** @type {?} */
    FilePreviewComponent.prototype.moveDown;
    /** @type {?} */
    FilePreviewComponent.prototype.remove;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1wcmV2aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWxlLXVwbG9hZC9maWxlLXByZXZpZXcvZmlsZS1wcmV2aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFvQmxELE1BQU07SUFZSjtvQkFWNEIsSUFBSSxVQUFVLEVBQUU7dUJBR3pCLElBQUk7cUJBQ04sS0FBSztvQkFDTixLQUFLO3NCQUNGLElBQUksWUFBWSxFQUFjO3dCQUM1QixJQUFJLFlBQVksRUFBYztzQkFDaEMsSUFBSSxZQUFZLEVBQWM7S0FFaEM7Ozs7SUFFakIsSUFBSSxXQUFXO1FBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0tBQzFDOzs7O0lBRUQsSUFBSSxPQUFPO1FBQ1QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxjQUFjLENBQUM7U0FDdkI7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDaEI7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDNUIsS0FBSyxLQUFLO29CQUNSLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDMUI7b0JBQ0UsTUFBTSxDQUFDLFlBQVksQ0FBQzthQUN2QjtTQUNGO0tBQ0Y7Ozs7SUFFRCxJQUFJLFNBQVM7UUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxPQUFPLENBQUM7S0FDakM7Ozs7SUFFRCxJQUFJLFdBQVc7UUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDcEM7Ozs7SUFFRCxJQUFJLGFBQWE7UUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7S0FDbkM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzdCOzs7O0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMvQjs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDN0I7OztZQXpFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7O0NBYVg7Z0JBQ0MsTUFBTSxFQUFFLENBQUMscTZCQUFxNkIsQ0FBQzthQUNoN0I7Ozs7O21CQUdFLEtBQUs7cUJBQ0wsS0FBSztvQkFDTCxLQUFLO3NCQUNMLEtBQUs7b0JBQ0wsS0FBSzttQkFDTCxLQUFLO3FCQUNMLE1BQU07dUJBQ04sTUFBTTtxQkFDTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRmlsZVVwbG9hZCB9IGZyb20gJy4uL2ZpbGUtdXBsb2FkLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaXUtZmlsZS1wcmV2aWV3JyxcbiAgdGVtcGxhdGU6IGA8bWF0LWNhcmQgY2xhc3M9XCJmaWxlLXByZXZpZXdcIiBbc3R5bGUuY3Vyc29yXT1cImN1cnNvclN0eWxlXCI+XG4gIDxkaXYgY2xhc3M9XCJncmFwaGljXCI+XG4gICAgPGltZyAqbmdJZj1cInNob3dJbWFnZVwiIFtzcmNdPVwiZmlsZS5zcmNcIiBbc3R5bGUuaGVpZ2h0XT1cImhlaWdodFwiIFtzdHlsZS53aWR0aF09XCJ3aWR0aFwiPlxuICAgIDxtYXQtaWNvbiAqbmdJZj1cIiFzaG93SW1hZ2VcIiBjbGFzcz1cImljb24tZ3JhcGhpY1wiPnt7IGdyYXBoaWMgfX08L21hdC1pY29uPlxuICA8L2Rpdj5cbiAgPG1hdC1wcm9ncmVzcy1iYXIgbW9kZT1cImluZGV0ZXJtaW5hdGVcIiAqbmdJZj1cImZpbGUubG9hZGluZ1wiPjwvbWF0LXByb2dyZXNzLWJhcj5cbiAgPGRpdiBjbGFzcz1cImZpbGUtaW5mb1wiPlxuICAgIDxzcGFuIGNsYXNzPVwiZmlsZS1uYW1lXCI+e3sgZmlsZS5uYW1lIH19PC9zcGFuPlxuICA8L2Rpdj5cbiAgPG1hdC1pY29uICpuZ0lmPVwic2hvd1VwQXJyb3dcIiBjbGFzcz1cInVwLWFycm93XCIgKGNsaWNrKT1cIm9uTW92ZVVwKClcIj5rZXlib2FyZF9hcnJvd191cDwvbWF0LWljb24+XG4gIDxtYXQtaWNvbiAqbmdJZj1cInNob3dEb3duQXJyb3dcIiBjbGFzcz1cImRvd24tYXJyb3dcIiAoY2xpY2spPVwib25Nb3ZlRG93bigpXCI+a2V5Ym9hcmRfYXJyb3dfZG93bjwvbWF0LWljb24+XG4gIDxtYXQtaWNvbiBjbGFzcz1cInJlbW92ZS11cGxvYWRcIiAoY2xpY2spPVwib25SZW1vdmUoKVwiPmNhbmNlbDwvbWF0LWljb24+XG48L21hdC1jYXJkPlxuYCxcbiAgc3R5bGVzOiBbYC5maWxlLXByZXZpZXd7aGVpZ2h0OjgwcHg7bWFyZ2luOjJweCAwO3Bvc2l0aW9uOnJlbGF0aXZlfS5tYXQtY2FyZHtwYWRkaW5nOjB9LmZpbGUtcHJldmlldyBpbWd7bWF4LWhlaWdodDo3MnB4fS5ncmFwaGlje3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTBweDtoZWlnaHQ6NzJweDttYXgtd2lkdGg6MjAwcHg7dGV4dC1hbGlnbjpjZW50ZXI7cGFkZGluZy1sZWZ0OjIwcHg7b3ZlcmZsb3c6aGlkZGVufS5pY29uLWdyYXBoaWN7Zm9udC1zaXplOjcycHg7aGVpZ2h0OjcycHg7d2lkdGg6NzJweH0ubWF0LXByb2dyZXNzLWJhcntwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjczcHh9LmZpbGUtaW5mb3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjI1MHB4O2hlaWdodDo3MnB4O21heC13aWR0aDozMDBweDt0ZXh0LWFsaWduOmNlbnRlcn0uZmlsZS1uYW1le21hcmdpbjoxOHB4IDZweDtkaXNwbGF5OmlubGluZS1ibG9jaztsaW5lLWhlaWdodDozNnB4O2ZvbnQtc2l6ZToxNnB4O2hlaWdodDozNnB4O2ZvbnQtd2VpZ2h0OjcwMDtjb2xvcjojMDAwfS5hcnJvdywuZG93bi1hcnJvdywudXAtYXJyb3d7Y3Vyc29yOnBvaW50ZXJ9LnVwLWFycm93e3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NnB4O3RvcDowO2ZvbnQtc2l6ZTozNnB4O2hlaWdodDozNnB4O3dpZHRoOjM2cHg7Zm9udC13ZWlnaHQ6NzAwfS5kb3duLWFycm93e3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NnB4O3RvcDozNnB4O2ZvbnQtc2l6ZTozNnB4O2hlaWdodDozNnB4O3dpZHRoOjM2cHg7Zm9udC13ZWlnaHQ6NzAwfS5yZW1vdmUtdXBsb2Fke2N1cnNvcjpwb2ludGVyO3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjEwcHg7dG9wOjIwcHg7Zm9udC1zaXplOjQwcHg7aGVpZ2h0OjQwcHg7d2lkdGg6NDBweH0uZG93bi1hcnJvdzpob3ZlciwudXAtYXJyb3c6aG92ZXJ7Y29sb3I6I2ZmZn1gXVxufSlcbmV4cG9ydCBjbGFzcyBGaWxlUHJldmlld0NvbXBvbmVudCB7XG5cbiAgQElucHV0KCkgZmlsZTogRmlsZVVwbG9hZCA9IG5ldyBGaWxlVXBsb2FkKCk7XG4gIEBJbnB1dCgpIGhlaWdodDogbnVtYmVyO1xuICBASW5wdXQoKSB3aWR0aDogbnVtYmVyO1xuICBASW5wdXQoKSBvcmRlcmVkID0gdHJ1ZTtcbiAgQElucHV0KCkgZmlyc3QgPSBmYWxzZTtcbiAgQElucHV0KCkgbGFzdCA9IGZhbHNlO1xuICBAT3V0cHV0KCkgbW92ZVVwID0gbmV3IEV2ZW50RW1pdHRlcjxGaWxlVXBsb2FkPigpO1xuICBAT3V0cHV0KCkgbW92ZURvd24gPSBuZXcgRXZlbnRFbWl0dGVyPEZpbGVVcGxvYWQ+KCk7XG4gIEBPdXRwdXQoKSByZW1vdmUgPSBuZXcgRXZlbnRFbWl0dGVyPEZpbGVVcGxvYWQ+KCk7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBnZXQgY3Vyc29yU3R5bGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5vcmRlcmVkID8gJ21vdmUnIDogJ2RlZmF1bHQnO1xuICB9XG5cbiAgZ2V0IGdyYXBoaWMoKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5maWxlLmxvYWRpbmcpIHtcbiAgICAgIHJldHVybiAnY2xvdWRfdXBsb2FkJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmlsZS5pc0ltYWdlKSB7XG4gICAgICByZXR1cm4gJ2ltYWdlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoICh0aGlzLmZpbGUuZXh0ZW5zaW9uKSB7XG4gICAgICAgIGNhc2UgJ3BkZic6XG4gICAgICAgICAgcmV0dXJuICdwaWN0dXJlX2FzX3BkZic7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuICdjbG91ZF9kb25lJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgc2hvd0ltYWdlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmdyYXBoaWMgPT09ICdpbWFnZSc7XG4gIH1cblxuICBnZXQgc2hvd1VwQXJyb3coKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMub3JkZXJlZCAmJiAhdGhpcy5maXJzdDtcbiAgfVxuXG4gIGdldCBzaG93RG93bkFycm93KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm9yZGVyZWQgJiYgIXRoaXMubGFzdDtcbiAgfVxuXG4gIG9uTW92ZVVwKCkge1xuICAgIHRoaXMubW92ZVVwLmVtaXQodGhpcy5maWxlKTtcbiAgfVxuXG4gIG9uTW92ZURvd24oKSB7XG4gICAgdGhpcy5tb3ZlRG93bi5lbWl0KHRoaXMuZmlsZSk7XG4gIH1cblxuICBvblJlbW92ZSgpIHtcbiAgICB0aGlzLnJlbW92ZS5lbWl0KHRoaXMuZmlsZSk7XG4gIH1cblxufVxuIl19