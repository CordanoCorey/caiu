/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Tile } from '../tile/tile.model';
import { Dimensions } from '../../shared/models';
import { integerArray, positiveIntegerArray } from '../../shared/utils';
export class Collage {
    constructor() {
        this.canvasHeight = 0;
        this.canvasWidth = 0;
        this.maxColumns = 4;
        this.maxRows = 4;
        this.totalColumns = 0;
        this.totalRows = 0;
        this._images = [];
        this._tiles = [];
    }
    /**
     * @param {?} startRow
     * @param {?} startColumn
     * @param {?} maxColumns
     * @param {?} cells
     * @return {?}
     */
    static AvailableColumns(startRow, startColumn, maxColumns, cells) {
        const /** @type {?} */ totalColumns = cells[0].length;
        return Math.max(...positiveIntegerArray(maxColumns)
            .map(k => k <= maxColumns && startColumn + k <= totalColumns && cells[startRow] && cells[startRow][startColumn + k] ? k : 1));
    }
    /**
     * @param {?} startRow
     * @param {?} startColumn
     * @param {?} maxRows
     * @param {?} cells
     * @return {?}
     */
    static AvailableRows(startRow, startColumn, maxRows, cells) {
        const /** @type {?} */ totalRows = cells[0].length;
        return Math.max(...positiveIntegerArray(maxRows)
            .map(k => k <= maxRows && startRow + k <= totalRows && cells[startRow + k] && cells[startRow + k][startColumn] ? k : 1));
    }
    /**
     * @param {?} dimensions
     * @param {?} startRow
     * @param {?} startColumn
     * @param {?} maxRows
     * @param {?} maxColumns
     * @param {?} cells
     * @return {?}
     */
    static AvailableDimensions(dimensions, startRow, startColumn, maxRows, maxColumns, cells) {
        const /** @type {?} */ availableRows = Collage.AvailableRows(startRow, startColumn, maxRows, cells);
        const /** @type {?} */ availableColumns = Collage.AvailableColumns(startRow, startColumn, maxColumns, cells);
        return dimensions.filter(x => x.rows <= availableRows && x.columns <= availableColumns);
    }
    /**
     * @param {?} images
     * @param {?} canvasHeight
     * @param {?} canvasWidth
     * @param {?=} totalRows
     * @param {?=} totalColumns
     * @param {?=} maxRows
     * @param {?=} maxColumns
     * @return {?}
     */
    static Build(images, canvasHeight, canvasWidth, totalRows = 0, totalColumns = 0, maxRows = 0, maxColumns = 0) {
        const /** @type {?} */ collage = Object.assign(new Collage(), {
            canvasHeight,
            canvasWidth,
            totalRows,
            totalColumns,
            maxRows,
            maxColumns
        });
        collage.images = images;
        return collage;
    }
    /**
     * @param {?} rows
     * @param {?} cols
     * @return {?}
     */
    static BuildEmptyCells(rows, cols) {
        return integerArray(rows).map(x => integerArray(cols).map(y => true));
    }
    /**
     * @param {?} collage
     * @return {?}
     */
    static BuildTiles(collage) {
        return collage.images.map((image, index) => {
            const /** @type {?} */ dimensions = Collage.FindDimensions(image.height, image.width, collage.tileDimensions, collage.cellHeight, collage.cellWidth);
            return Object.assign(new Tile(), {
                image,
                dimensions,
                id: index + 1,
                cellHeight: collage.cellHeight,
                cellWidth: collage.cellWidth
            });
        });
    }
    /**
     * @param {?} id
     * @param {?} tileIds
     * @return {?}
     */
    static ChooseTileId(id, tileIds) {
        return [...tileIds.filter(x => x !== id), id];
    }
    /**
     * @param {?} index
     * @param {?} totalRows
     * @param {?} totalColumns
     * @return {?}
     */
    static FindCoordinates(index, totalRows, totalColumns) {
        const /** @type {?} */ remainder = (index + totalColumns) % totalColumns;
        return {
            row: (index - remainder) / totalColumns,
            column: remainder
        };
    }
    /**
     * @param {?} index
     * @param {?} totalRows
     * @param {?} totalColumns
     * @param {?} startRow
     * @param {?} startColumn
     * @return {?}
     */
    static FindCoordinatesNested(index, totalRows, totalColumns, startRow, startColumn) {
        const /** @type {?} */ coordinates = Collage.FindCoordinates(index, totalRows, totalColumns);
        coordinates.column += startColumn;
        coordinates.row += startRow;
        return coordinates;
    }
    /**
     * @param {?} height
     * @param {?} width
     * @param {?} dimensions
     * @param {?} cellHeight
     * @param {?} cellWidth
     * @return {?}
     */
    static FindDimensions(height, width, dimensions, cellHeight, cellWidth) {
        const /** @type {?} */ filtered = dimensions.filter(x => x.rows * cellHeight <= height && x.columns * cellWidth <= width);
        const /** @type {?} */ ordered = filtered.sort((a, b) => Math.abs(height / width - a.ratio) - Math.abs(height / width - b.ratio));
        const /** @type {?} */ closestMatch = ordered[0];
        const /** @type {?} */ rows = closestMatch && closestMatch.rows ? closestMatch.rows : [];
        const /** @type {?} */ columns = closestMatch && closestMatch.columns ? closestMatch.columns : [];
        return Object.assign(new Dimensions(), {
            rows,
            columns,
            height,
            width
        });
    }
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    static FindNextTileId(tiles, tileIds, dimensions) {
        const /** @type {?} */ nextMatch = Collage.FindNextMatchId(tiles, tileIds, dimensions);
        return nextMatch || Collage.FindBestMatchId(tiles, tileIds, dimensions);
    }
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    static FindBestMatchId(tiles, tileIds, dimensions) {
        let /** @type {?} */ diff = 999;
        return tileIds.reduce((acc, id) => {
            const /** @type {?} */ tile = tiles.find(x => x.id === id);
            diff = Math.abs(tile.ratio - dimensions.ratio);
            return acc === 0 || diff < acc ? id : acc;
        }, 0);
    }
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    static FindNextMatchId(tiles, tileIds, dimensions) {
        return tileIds.reduce((acc, id) => {
            if (acc !== 0) {
                return acc;
            }
            const /** @type {?} */ tile = tiles.find(x => x.id === id);
            return tile && tile.rows === dimensions.rows && tile.columns === dimensions.columns ? tile.id : 0;
        }, 0);
    }
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    static FindBestMatch(tiles, tileIds, dimensions) {
        const /** @type {?} */ id = Collage.FindBestMatchId(tiles, tileIds, dimensions);
        return tiles.find(x => x.id === id);
    }
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    static FindNextTile(tiles, tileIds, dimensions) {
        return tileIds.reduce((acc, id) => {
            if (acc === null || acc.id === 0) {
                const /** @type {?} */ tile = tiles.find(x => x.id === id);
                const /** @type {?} */ dim = dimensions.find(x => tile.rows === x.rows && tile.columns === x.columns);
                return dim ? Object.assign(new Tile(), tile, {
                    dimensions: Object.assign(new Dimensions(), tile.dimensions, {
                        rows: dim.rows,
                        columns: dim.columns
                    })
                }) : null;
            }
            return acc;
        }, new Tile()) || Collage.FindBestMatch(tiles, tileIds, dimensions[0]);
    }
    /**
     * @param {?} cellHeight
     * @param {?} cellWidth
     * @param {?} maxRows
     * @param {?} maxColumns
     * @return {?}
     */
    static GetTileDimensions(cellHeight, cellWidth, maxRows, maxColumns) {
        return positiveIntegerArray(maxRows).reduce((acc, x) => {
            const /** @type {?} */ dimensions = positiveIntegerArray(maxColumns)
                .map(y => Object.assign(new Dimensions(), {
                rows: x,
                columns: y,
                height: x * cellHeight,
                width: y * cellWidth
            }));
            return [...acc, ...dimensions];
        }, []);
    }
    /**
     * @param {?} cells
     * @param {?} startIndex
     * @param {?} dimensions
     * @param {?} totalRows
     * @param {?} totalColumns
     * @return {?}
     */
    static MarkCellsAsFilled(cells, startIndex, dimensions, totalRows, totalColumns) {
        const /** @type {?} */ start = Collage.FindCoordinates(startIndex, totalRows, totalColumns);
        return integerArray(dimensions.rows * dimensions.columns).reduce((acc, i) => {
            const /** @type {?} */ coordinates = Collage.FindCoordinatesNested(i, dimensions.rows, dimensions.columns, start.row, start.column);
            cells[coordinates.row][coordinates.column] = false;
            return cells;
        }, cells);
    }
    /**
     * @param {?} tiles
     * @param {?} collage
     * @return {?}
     */
    static PositionTiles(tiles, collage) {
        let /** @type {?} */ cells = Collage.BuildEmptyCells(collage.totalRows, collage.totalColumns);
        let /** @type {?} */ tileIds = tiles.map(x => x.id);
        return integerArray(collage.totalCells).reduce((acc, i) => {
            const /** @type {?} */ coordinates = Collage.FindCoordinates(i, collage.totalRows, collage.totalColumns);
            if (!cells[coordinates.row][coordinates.column]) {
                return acc;
            }
            const /** @type {?} */ availableDimensions = Collage.AvailableDimensions(collage.tileDimensions, coordinates.row, coordinates.column, collage.maxRows, collage.maxColumns, cells);
            const /** @type {?} */ tile = Collage.FindNextTile(tiles, tileIds, availableDimensions);
            tile.coordinates = coordinates;
            cells = Collage.MarkCellsAsFilled(cells, i, tile.dimensions, collage.totalRows, collage.totalColumns);
            tileIds = Collage.ChooseTileId(tile.id, tileIds);
            return [...acc, tile];
        }, []);
    }
    /**
     * @return {?}
     */
    get cellHeight() {
        return this.canvasHeight / this.totalRows;
    }
    /**
     * @return {?}
     */
    get cellWidth() {
        return this.canvasWidth / this.totalColumns;
    }
    /**
     * @return {?}
     */
    get emptyCells() {
        return Collage.BuildEmptyCells(this.totalRows, this.totalColumns);
    }
    /**
     * @return {?}
     */
    get images() {
        return this._images;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set images(value) {
        this._images = value;
        this.tiles = Collage.BuildTiles(this);
    }
    /**
     * @return {?}
     */
    get tileDimensions() {
        return Collage.GetTileDimensions(this.cellHeight, this.cellWidth, this.maxRows, this.maxColumns);
    }
    /**
     * @return {?}
     */
    get tiles() {
        return this._tiles;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tiles(value) {
        this._tiles = Collage.PositionTiles(value, this);
    }
    /**
     * @return {?}
     */
    get totalCells() {
        return this.totalRows * this.totalColumns;
    }
}
function Collage_tsickle_Closure_declarations() {
    /** @type {?} */
    Collage.prototype.canvasHeight;
    /** @type {?} */
    Collage.prototype.canvasWidth;
    /** @type {?} */
    Collage.prototype.maxColumns;
    /** @type {?} */
    Collage.prototype.maxRows;
    /** @type {?} */
    Collage.prototype.totalColumns;
    /** @type {?} */
    Collage.prototype.totalRows;
    /** @type {?} */
    Collage.prototype._images;
    /** @type {?} */
    Collage.prototype._tiles;
}

//# sourceMappingURL=data:application/json;base64,