/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { FileUpload } from '../file-upload.model';
export class UploadComponent {
    constructor() {
        this.upload = new FileUpload();
        this.height = 200;
        this.width = 600;
        this.remove = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get graphic() {
        if (this.upload.loading) {
            return 'cloud_upload';
        }
        else if (this.upload.isImage) {
            return 'image';
        }
        else {
            switch (this.upload.extension) {
                case 'pdf':
                    return 'picture_as_pdf';
                default:
                    return 'cloud_done';
            }
        }
    }
    /**
     * @return {?}
     */
    get showImage() {
        return this.graphic === 'image';
    }
    /**
     * @return {?}
     */
    onRemove() {
        this.remove.emit(this.upload);
    }
}
UploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-upload',
                template: `<div class="upload" [style.height]="img?.style?.height">
  <div class="graphic" #img>
    <img *ngIf="showImage" [src]="upload.src" [style.max-height.px]="height" [style.max-width.px]="width">
    <mat-icon *ngIf="!showImage" class="icon-graphic" [style.max-height.px]="height" [style.max-width.px]="width">{{ graphic }}</mat-icon>
    <mat-icon *ngIf="!upload.loading" class="remove-upload" (click)="onRemove()">cancel</mat-icon>
  </div>
  <mat-spinner mode="indeterminate" *ngIf="upload.loading"></mat-spinner>
  <div class="file-info" *ngIf="!upload.loading">
    <span class="file-name">{{ upload.name }}</span>
  </div>
</div>
`,
                styles: [`.upload{max-height:420px;max-width:600px;margin:10px 20px;position:relative;display:flex}.upload img{max-height:400px}.graphic{padding:0!important;float:left;margin:10px;position:relative}.icon-graphic{font-size:72px;height:72px;width:72px}.mat-progress-bar{position:absolute;left:0;top:73px}.file-info{float:right}.file-name{margin:18px 6px;display:inline-block;line-height:36px;font-size:20px;height:36px;font-weight:700;color:#000}.remove-upload{color:red;cursor:pointer;position:absolute;right:-20px;top:-20px;font-size:40px;height:40px;width:40px}`]
            },] },
];
/** @nocollapse */
UploadComponent.ctorParameters = () => [];
UploadComponent.propDecorators = {
    upload: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    remove: [{ type: Output }]
};
function UploadComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    UploadComponent.prototype.upload;
    /** @type {?} */
    UploadComponent.prototype.height;
    /** @type {?} */
    UploadComponent.prototype.width;
    /** @type {?} */
    UploadComponent.prototype.remove;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWxlLXVwbG9hZC91cGxvYWQvdXBsb2FkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFrQmxELE1BQU07SUFPSjtzQkFMOEIsSUFBSSxVQUFVLEVBQUU7c0JBQzVCLEdBQUc7cUJBQ0osR0FBRztzQkFDRCxJQUFJLFlBQVksRUFBYztLQUVoQzs7OztJQUVqQixJQUFJLE9BQU87UUFDVCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDeEIsTUFBTSxDQUFDLGNBQWMsQ0FBQztTQUN2QjtRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDL0IsTUFBTSxDQUFDLE9BQU8sQ0FBQztTQUNoQjtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixLQUFLLEtBQUs7b0JBQ1IsTUFBTSxDQUFDLGdCQUFnQixDQUFDO2dCQUMxQjtvQkFDRSxNQUFNLENBQUMsWUFBWSxDQUFDO2FBQ3ZCO1NBQ0Y7S0FDRjs7OztJQUVELElBQUksU0FBUztRQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQztLQUNqQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDL0I7OztZQTlDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Q0FXWDtnQkFDQyxNQUFNLEVBQUUsQ0FBQywwaUJBQTBpQixDQUFDO2FBQ3JqQjs7Ozs7cUJBR0UsS0FBSztxQkFDTCxLQUFLO29CQUNMLEtBQUs7cUJBQ0wsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEZpbGVVcGxvYWQgfSBmcm9tICcuLi9maWxlLXVwbG9hZC5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2l1LXVwbG9hZCcsXG4gIHRlbXBsYXRlOiBgPGRpdiBjbGFzcz1cInVwbG9hZFwiIFtzdHlsZS5oZWlnaHRdPVwiaW1nPy5zdHlsZT8uaGVpZ2h0XCI+XG4gIDxkaXYgY2xhc3M9XCJncmFwaGljXCIgI2ltZz5cbiAgICA8aW1nICpuZ0lmPVwic2hvd0ltYWdlXCIgW3NyY109XCJ1cGxvYWQuc3JjXCIgW3N0eWxlLm1heC1oZWlnaHQucHhdPVwiaGVpZ2h0XCIgW3N0eWxlLm1heC13aWR0aC5weF09XCJ3aWR0aFwiPlxuICAgIDxtYXQtaWNvbiAqbmdJZj1cIiFzaG93SW1hZ2VcIiBjbGFzcz1cImljb24tZ3JhcGhpY1wiIFtzdHlsZS5tYXgtaGVpZ2h0LnB4XT1cImhlaWdodFwiIFtzdHlsZS5tYXgtd2lkdGgucHhdPVwid2lkdGhcIj57eyBncmFwaGljIH19PC9tYXQtaWNvbj5cbiAgICA8bWF0LWljb24gKm5nSWY9XCIhdXBsb2FkLmxvYWRpbmdcIiBjbGFzcz1cInJlbW92ZS11cGxvYWRcIiAoY2xpY2spPVwib25SZW1vdmUoKVwiPmNhbmNlbDwvbWF0LWljb24+XG4gIDwvZGl2PlxuICA8bWF0LXNwaW5uZXIgbW9kZT1cImluZGV0ZXJtaW5hdGVcIiAqbmdJZj1cInVwbG9hZC5sb2FkaW5nXCI+PC9tYXQtc3Bpbm5lcj5cbiAgPGRpdiBjbGFzcz1cImZpbGUtaW5mb1wiICpuZ0lmPVwiIXVwbG9hZC5sb2FkaW5nXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJmaWxlLW5hbWVcIj57eyB1cGxvYWQubmFtZSB9fTwvc3Bhbj5cbiAgPC9kaXY+XG48L2Rpdj5cbmAsXG4gIHN0eWxlczogW2AudXBsb2Fke21heC1oZWlnaHQ6NDIwcHg7bWF4LXdpZHRoOjYwMHB4O21hcmdpbjoxMHB4IDIwcHg7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpmbGV4fS51cGxvYWQgaW1ne21heC1oZWlnaHQ6NDAwcHh9LmdyYXBoaWN7cGFkZGluZzowIWltcG9ydGFudDtmbG9hdDpsZWZ0O21hcmdpbjoxMHB4O3Bvc2l0aW9uOnJlbGF0aXZlfS5pY29uLWdyYXBoaWN7Zm9udC1zaXplOjcycHg7aGVpZ2h0OjcycHg7d2lkdGg6NzJweH0ubWF0LXByb2dyZXNzLWJhcntwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjczcHh9LmZpbGUtaW5mb3tmbG9hdDpyaWdodH0uZmlsZS1uYW1le21hcmdpbjoxOHB4IDZweDtkaXNwbGF5OmlubGluZS1ibG9jaztsaW5lLWhlaWdodDozNnB4O2ZvbnQtc2l6ZToyMHB4O2hlaWdodDozNnB4O2ZvbnQtd2VpZ2h0OjcwMDtjb2xvcjojMDAwfS5yZW1vdmUtdXBsb2Fke2NvbG9yOnJlZDtjdXJzb3I6cG9pbnRlcjtwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDotMjBweDt0b3A6LTIwcHg7Zm9udC1zaXplOjQwcHg7aGVpZ2h0OjQwcHg7d2lkdGg6NDBweH1gXVxufSlcbmV4cG9ydCBjbGFzcyBVcGxvYWRDb21wb25lbnQge1xuXG4gIEBJbnB1dCgpIHVwbG9hZDogRmlsZVVwbG9hZCA9IG5ldyBGaWxlVXBsb2FkKCk7XG4gIEBJbnB1dCgpIGhlaWdodCA9IDIwMDtcbiAgQElucHV0KCkgd2lkdGggPSA2MDA7XG4gIEBPdXRwdXQoKSByZW1vdmUgPSBuZXcgRXZlbnRFbWl0dGVyPEZpbGVVcGxvYWQ+KCk7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBnZXQgZ3JhcGhpYygpOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLnVwbG9hZC5sb2FkaW5nKSB7XG4gICAgICByZXR1cm4gJ2Nsb3VkX3VwbG9hZCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLnVwbG9hZC5pc0ltYWdlKSB7XG4gICAgICByZXR1cm4gJ2ltYWdlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoICh0aGlzLnVwbG9hZC5leHRlbnNpb24pIHtcbiAgICAgICAgY2FzZSAncGRmJzpcbiAgICAgICAgICByZXR1cm4gJ3BpY3R1cmVfYXNfcGRmJztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gJ2Nsb3VkX2RvbmUnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCBzaG93SW1hZ2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ3JhcGhpYyA9PT0gJ2ltYWdlJztcbiAgfVxuXG4gIG9uUmVtb3ZlKCkge1xuICAgIHRoaXMucmVtb3ZlLmVtaXQodGhpcy51cGxvYWQpO1xuICB9XG5cbn1cbiJdfQ==