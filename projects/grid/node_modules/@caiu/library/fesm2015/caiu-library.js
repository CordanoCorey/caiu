import { Injectable, Component, Input, ViewContainerRef, ElementRef, ViewChild, ContentChildren, Renderer2, ViewEncapsulation, Output, EventEmitter, NgModule, ChangeDetectionStrategy, ErrorHandler, InjectionToken, Pipe, forwardRef, Inject, ChangeDetectorRef, defineInjectable, inject } from '@angular/core';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { FlexLayoutModule } from '@angular/flex-layout';
import { RouterModule, Router, ActivatedRoute, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, RoutesRecognized } from '@angular/router';
import 'hammerjs';
import { NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule, FormArray, FormBuilder } from '@angular/forms';
import { MatDatepickerModule, MatNativeDateModule, MatInputModule, MatDialogModule, MatIconModule, MatToolbarModule, MatCardModule, MatProgressBarModule, MatProgressSpinnerModule, MatButtonModule, MatCheckboxModule, MatRadioModule, MatSelectModule, MatTabsModule, MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material';
import { BehaviorSubject, Observable, of, throwError, from, combineLatest as combineLatest$1 } from 'rxjs';
import { orderBy } from '@progress/kendo-data-query';
import { ExcelExportModule } from '@progress/kendo-angular-excel-export';
import { GridModule, PDFModule } from '@progress/kendo-angular-grid';
import { MatIconModule as MatIconModule$1 } from '@angular/material/icon';
import { EffectsModule, Effect, Actions, ofType } from '@ngrx/effects';
import { __decorate, __metadata } from 'tslib';
import { filter, map, combineLatest, skip, take, catchError, debounceTime, distinctUntilChanged, finalize, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';
import { Store, StoreModule } from '@ngrx/store';
import { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';
import { Observable as Observable$1 } from 'rxjs/internal/Observable';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LibraryService {
    constructor() { }
}
LibraryService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
LibraryService.ctorParameters = () => [];
/** @nocollapse */ LibraryService.ngInjectableDef = defineInjectable({ factory: function LibraryService_Factory() { return new LibraryService(); }, token: LibraryService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LibraryComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
LibraryComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-library',
                template: `
    <p>
      library works!
    </p>
  `,
                styles: []
            },] },
];
/** @nocollapse */
LibraryComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AccordionComponent {
    constructor() {
        this.active = true;
        this.opened = true;
        this.showArrow = false;
        this.closeStart = new EventEmitter();
        this.closeDone = new EventEmitter();
        this.openStart = new EventEmitter();
        this.openDone = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    toggle() {
        this.opened = !this.opened;
    }
    /**
     * @return {?}
     */
    open() {
        this.opened = true;
    }
    /**
     * @return {?}
     */
    close() {
        this.opened = false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onStart(e) {
        if (this.opened) {
            this.openStart.emit();
        }
        else {
            this.closeStart.emit();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onDone(e) {
        if (this.opened) {
            this.openDone.emit();
        }
        else {
            this.closeDone.emit();
        }
    }
    /**
     * @return {?}
     */
    onClickTrigger() {
        if (this.active) {
            this.toggle();
        }
    }
}
AccordionComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-accordion',
                template: `<div class="accordion">
  <div class="trigger-wrapper" (click)="onClickTrigger()" [class.active]="active">
    <ng-content select=".accordion-trigger"></ng-content>
  </div>
  <div class="content-wrapper" [@toggle]="opened ? 'show' : 'hide'" (@toggle.start)="onStart($event)" (@toggle.done)="onDone($event)">
    <ng-content select=".accordion-content"></ng-content>
  </div>
</div>`,
                styles: [`.trigger-wrapper{position:relative;padding:0}.trigger-wrapper.active{cursor:pointer}.content-wrapper{overflow:hidden;clear:both}.mat-icon{position:absolute;right:2%;top:25%;color:#fff;font-size:32px;height:50%;font-weight:700}`],
                animations: [
                    trigger('toggle', [
                        state('*', style({ height: '0px' })),
                        state('show', style({ height: '*' })),
                        state('hide', style({ height: '0px' })),
                        transition('show <=> hide', [
                            animate('300ms ease-out')
                        ])
                    ])
                ]
            },] },
];
/** @nocollapse */
AccordionComponent.ctorParameters = () => [];
AccordionComponent.propDecorators = {
    active: [{ type: Input }],
    opened: [{ type: Input }],
    showArrow: [{ type: Input }],
    closeStart: [{ type: Output }],
    closeDone: [{ type: Output }],
    openStart: [{ type: Output }],
    openDone: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SharedModule {
}
SharedModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    RouterModule,
                    FlexLayoutModule,
                ],
                declarations: [],
                exports: [
                    CommonModule,
                    RouterModule,
                    FlexLayoutModule,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AccordionModule {
}
AccordionModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    SharedModule,
                ],
                declarations: [
                    AccordionComponent,
                ],
                exports: [
                    AccordionComponent,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Address {
    constructor() {
        this.firstName = '';
        this.lastName = '';
        this.streetAddress = '';
        this.address2 = '';
        this.city = '';
        this.state = '';
        this.stateId = 45;
        this.zipCode = 0;
        this.metadata = {
            streetAddress: {},
            address2: {},
            city: {},
            stateId: {},
            zipCode: {}
        };
    }
    /**
     * @return {?}
     */
    get cityStateZip() {
        return this.hasCityStateZip ?
            `${this.city}, ${this.state} ${this.zipCode} ` : '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set cityStateZip(value) {
    }
    /**
     * @return {?}
     */
    get fullName() {
        return this.firstName && this.lastName ? `${this.firstName} ${this.lastName}` : '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set fullName(value) {
    }
    /**
     * @return {?}
     */
    get hasAddress() {
        return this.hasStreetAddress && this.hasCityStateZip;
    }
    /**
     * @return {?}
     */
    get hasCityStateZip() {
        return this.city !== '' && (this.state !== '' || this.stateId !== 0) && this.zipCode !== 0;
    }
    /**
     * @return {?}
     */
    get hasStreetAddress() {
        return this.streetAddress !== '';
    }
}
class Alert {
    constructor() {
        this.message = '';
    }
}
class Coordinates {
    constructor() {
        this.row = 0;
        this.column = 0;
    }
}
class Dimensions {
    constructor() {
        this.height = 0;
        this.width = 0;
        this.rows = 0;
        this.columns = 0;
    }
    /**
     * @return {?}
     */
    get approxRatio() {
        return this.rows / this.columns;
    }
    /**
     * @return {?}
     */
    get ratio() {
        return this.height / this.width;
    }
}
class Email {
    constructor() {
        this.id = 0;
        this.bcc = '';
        this.body = '';
        this.cc = '';
        this.failed = '';
        this.from = '';
        this.sent = false;
        this.sentDate = new Date();
        this.subject = '';
        this.to = '';
        this.createdById = null;
        this.createdDate = new Date();
        this.attachments = [];
    }
}
const /** @type {?} */ EMAIL_REGEX = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
class Filters {
    constructor() {
        this.skip = 0;
        this.sortBy = '';
        this.take = 0;
    }
}
class Image {
    constructor() {
        this.src = '';
        this.height = 0;
        this.width = 0;
    }
    /**
     * @return {?}
     */
    get horizontal() {
        return this.orientation === 'h';
    }
    /**
     * @return {?}
     */
    get vertical() {
        return this.orientation === 'v';
    }
    /**
     * @return {?}
     */
    get colspan() {
        return this.vertical ? 1 : 1;
    }
    /**
     * @return {?}
     */
    get rowspan() {
        return this.vertical ? 2 : 1;
    }
}
class Metadata {
    constructor() {
        this.controls = [];
        this.ignore = [];
        this.label = '';
        this.name = '';
    }
}
/** @enum {number} */
const MetadataType = {
    CLASS: 0,
    METHOD: 1,
    PROPERTY: 2,
    PARAMETER: 3,
    STATIC_METHOD: 4,
    STATIC_PROPERTY: 5,
};
MetadataType[MetadataType.CLASS] = "CLASS";
MetadataType[MetadataType.METHOD] = "METHOD";
MetadataType[MetadataType.PROPERTY] = "PROPERTY";
MetadataType[MetadataType.PARAMETER] = "PARAMETER";
MetadataType[MetadataType.STATIC_METHOD] = "STATIC_METHOD";
MetadataType[MetadataType.STATIC_PROPERTY] = "STATIC_PROPERTY";
/**
 * @template T
 */
class PropertyMetadata {
    constructor() {
        this.ignore = [];
        this.label = '';
        this.name = '';
    }
}
class QueryItem {
    constructor() {
        this.label = '';
    }
}
/**
 * @template T
 */
class QueryModel {
    constructor() {
        this.userId = 0;
        this.accountId = 0;
        this.fields = [];
        this.filters = [];
        this.groups = [];
        this.params = {};
        this.skip = 0;
        this.sort = [];
        this.take = 0;
        this.term = '';
    }
    /**
     * @return {?}
     */
    get hasParams() {
        return this.totalParams > 0;
    }
    /**
     * @return {?}
     */
    get keys() {
        return Object.keys(new QueryModel());
    }
    /**
     * @return {?}
     */
    get totalParams() {
        return Object.keys(this.params).length;
    }
    /**
     * @param {?} query
     * @return {?}
     */
    static AppendQueryString(query) {
        const /** @type {?} */ obj = QueryModel.BuildQueryObject(query);
        return Object.keys(obj).reduce((acc, key) => {
            const /** @type {?} */ str = obj[key];
            return str ? QueryModel.AppendToQueryString(acc, str) : acc;
        }, '');
    }
    /**
     * @param {?} path
     * @param {?} str
     * @return {?}
     */
    static AppendToQueryString(path, str) {
        return path ? `${path}&${str}` : str;
    }
    /**
     * @param {?} query
     * @return {?}
     */
    static BuildQueryString(query) {
        const /** @type {?} */ path = QueryModel.AppendQueryString(query);
        return path ? `?${path}` : '';
    }
    /**
     * @param {?} query
     * @return {?}
     */
    static BuildQueryObject(query) {
        return Object.assign({
            skip: QueryModel.QuerySkip(query),
            take: QueryModel.QueryTake(query),
            term: QueryModel.QueryTerm(query)
        }, QueryModel.QueryParams(query));
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static FormatDate(date) {
        const /** @type {?} */ d = new Date(date);
        let /** @type {?} */ month = '' + (d.getMonth() + 1);
        let /** @type {?} */ day = '' + d.getDate();
        const /** @type {?} */ year = d.getFullYear();
        if (month.length < 2) {
            month = '0' + month;
        }
        if (day.length < 2) {
            day = '0' + day;
        }
        return [year, month, day].join('-');
    }
    /**
     * @param {?} queryString
     * @return {?}
     */
    static ParseQuery(queryString) {
        const /** @type {?} */ query = {};
        const /** @type {?} */ pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');
        for (let /** @type {?} */ i = 0; i < pairs.length; i++) {
            const /** @type {?} */ pair = pairs[i].split('=');
            query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');
        }
        return query;
    }
    /**
     * @param {?} query
     * @return {?}
     */
    static QueryParams(query) {
        return Object.keys(query.params)
            .reduce((acc, key) => Object.assign({}, acc, { [key]: `${key}=${query.params[key]}` }), {});
    }
    /**
     * @param {?} query
     * @return {?}
     */
    static QuerySkip(query) {
        return query.skip ? `skip=${query.skip}` : '';
    }
    /**
     * @param {?} query
     * @return {?}
     */
    static QueryTake(query) {
        return query.take ? `take=${query.take}` : '';
    }
    /**
     * @param {?} query
     * @return {?}
     */
    static QueryTerm(query) {
        return query.term ? `term=${query.term}` : '';
    }
    /**
     * @return {?}
     */
    get queryParams() {
        return QueryModel.QueryParams(this);
    }
    /**
     * @return {?}
     */
    get queryString() {
        return QueryModel.BuildQueryString(this);
    }
    /**
     * @return {?}
     */
    get queryObject() {
        return QueryModel.BuildQueryObject(this);
    }
    /**
     * @return {?}
     */
    get querySkip() {
        return this.skip ? `skip=${this.skip}` : '';
    }
    /**
     * @return {?}
     */
    get queryTake() {
        return this.take ? `take=${this.take}` : '';
    }
    /**
     * @return {?}
     */
    get queryTerm() {
        return this.term ? `term=${this.term}` : '';
    }
}
/**
 * @template T
 */
class Search {
    constructor() {
        this.query = new QueryModel();
        this.results = [];
        this.total = 0;
    }
}
class StyleModel {
    /**
     * @return {?}
     */
    get styles() {
        const /** @type {?} */ s = {};
        if (this.backgroundColor) {
            s['backgroundColor'] = this.backgroundColor;
        }
        if (this.border) {
            s['border'] = this.border;
        }
        if (this.borderRadius) {
            s['borderRadius.px'] = this.borderRadius;
        }
        if (this.color) {
            s['color'] = this.color;
        }
        if (this.cursor) {
            s['color'] = this.cursor;
        }
        if (this.display) {
            s['display'] = this.display;
        }
        if (this.fontSize) {
            s['fontSize'] = this.fontSize;
        }
        if (this.height) {
            s['height.px'] = this.height;
        }
        if (this.lineHeight) {
            s['line-height.px'] = this.lineHeight;
        }
        if (this.padding) {
            s['padding.px'] = this.padding;
        }
        if (this.paddingTop) {
            s['padding-top.px'] = this.paddingTop;
        }
        if (this.paddingBottom) {
            s['padding-bottom.px'] = this.paddingBottom;
        }
        if (this.paddingLeft) {
            s['padding-left.px'] = this.paddingLeft;
        }
        if (this.paddingRight) {
            s['padding-right.px'] = this.paddingRight;
        }
        if (this.textDecoration) {
            s['textDecoration'] = this.textDecoration;
        }
        if (this.width) {
            s['width.px'] = this.width;
        }
        return s;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Tile {
    constructor() {
        this.id = 0;
        this.cellHeight = 0;
        this.cellWidth = 0;
        this.color = '#fff';
        this.name = '';
        this.src = '';
        this.text = '';
        this._coordinates = new Coordinates();
        this._dimensions = new Dimensions();
        this._image = new Image();
    }
    /**
     * @return {?}
     */
    get coordinates() {
        return this._coordinates || new Coordinates();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set coordinates(value) {
        this._coordinates = value;
    }
    /**
     * @return {?}
     */
    get dimensions() {
        return this._dimensions || new Dimensions();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dimensions(value) {
        this._dimensions = value;
    }
    /**
     * @return {?}
     */
    get image() {
        return this._image || new Image();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set image(value) {
        this._image = value;
    }
    /**
     * @return {?}
     */
    get height() {
        return this.rows * this.cellHeight;
    }
    /**
     * @return {?}
     */
    get width() {
        return this.columns * this.cellWidth;
    }
    /**
     * @return {?}
     */
    get imageSrc() {
        return this.image.src;
    }
    /**
     * @return {?}
     */
    get imageHeight() {
        return this.image.height * this.scale;
    }
    /**
     * @return {?}
     */
    get imageWidth() {
        return this.image.width * this.scale;
    }
    /**
     * @return {?}
     */
    get rows() {
        return this.dimensions.rows;
    }
    /**
     * @return {?}
     */
    get columns() {
        return this.dimensions.columns;
    }
    /**
     * @return {?}
     */
    get positionTop() {
        return this.startRow * this.cellHeight;
    }
    /**
     * @return {?}
     */
    get positionLeft() {
        return this.startColumn * this.cellWidth;
    }
    /**
     * @return {?}
     */
    get approxRatio() {
        return this.rows * this.cellHeight / this.columns * this.cellWidth;
    }
    /**
     * @return {?}
     */
    get ratio() {
        return this.dimensions.ratio;
    }
    /**
     * @return {?}
     */
    get scale() {
        return this.heightScale >= this.widthScale ? this.heightScale : this.widthScale;
    }
    /**
     * @return {?}
     */
    get heightScale() {
        return (this.rows * this.cellHeight) / this.image.height;
    }
    /**
     * @return {?}
     */
    get widthScale() {
        return (this.columns * this.cellWidth) / this.image.width;
    }
    /**
     * @return {?}
     */
    get startRow() {
        return this.coordinates.row;
    }
    /**
     * @return {?}
     */
    get startColumn() {
        return this.coordinates.column;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} derived
 * @param {?} baseCtors
 * @return {?}
 */
function applyDecorators(derived, baseCtors) {
    baseCtors.forEach(baseCtor => {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
            derived[name] = baseCtor.prototype[name];
        });
    });
}
/**
 * @param {?} derivedCtor The clas Constructor
 * @param {?} baseCtors
 * @return {?}
 */
function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(baseCtor => {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
            derivedCtor.prototype[name] = baseCtor.prototype[name];
        });
    });
}
/**
 * Find distinct elements in the union of 2 arrays.
 * @param {?} array1
 * @param {?} array2
 * @return {?}
 */
function arrayUnion(array1, array2) {
    const /** @type {?} */ a = [...array1, ...array2];
    for (let /** @type {?} */ i = 0; i < a.length; ++i) {
        for (let /** @type {?} */ j = i + 1; j < a.length; ++j) {
            if (a[i] === a[j]) {
                a.splice(j--, 1);
            }
        }
    }
    return a;
}
/**
 * @param {?} target
 * @param {?} props
 * @return {?}
 */
function assignProps(target, props) {
    Object.keys(props).forEach(key => {
        if (target[key]) {
            target[key] = props[key];
        }
    });
}
/**
 * @template T
 * @param {?} ctor
 * @param {...?} args
 * @return {?}
 */
function build(ctor, ...args) {
    const /** @type {?} */ instance = new ctor();
    return args.reduce((acc, next) => {
        let /** @type {?} */ ret;
        try {
            ret = Object.assign(acc, next);
        }
        catch (/** @type {?} */ e) {
            console.warn(e);
            ret = acc;
        }
        finally {
            return ret;
        }
    }, instance);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function compareDates(a, b) {
    return new Date(b).getTime() - new Date(a).getTime();
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function compareNumbers(a, b) {
    return a - b;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function compareStrings(a, b) {
    const /** @type {?} */ x = a.toLowerCase();
    const /** @type {?} */ y = b.toLowerCase();
    if (x < y) {
        return -1;
    }
    else if (x > y) {
        return 1;
    }
    return 0;
}
/**
 * @param {?} arr
 * @param {?=} key
 * @return {?}
 */
function distinct(arr, key = '') {
    return key ? arr.reduce((acc, x) => acc.findIndex(y => y[key] === x[key]) === -1 ? [...acc, x] : acc, [])
        : arr.reduce((acc, x) => acc.indexOf(x) === -1 ? [...acc, x] : acc, []);
}
/**
 * @param {?} x1
 * @param {?} x2
 * @return {?}
 */
function equals(x1, x2) {
    // check whether x1 and x2 have the same type
    if (typeof (x1) !== typeof (x2)) {
        return false;
    }
    // check whether x1 and x2 are both null or both undefined
    if ((x1 === null && x2 === null) || (x1 === undefined && x2 === undefined)) {
        return true;
    }
    // account for non-matching null and undefined values
    if (((x1 === null || x1 === undefined) && x2 !== null && x2 !== undefined)
        || ((x2 === null || x2 === undefined) && x1 !== null && x1 !== undefined)) {
        return false;
    }
    // compare two arrays
    if (Array.isArray(x1) && Array.isArray(x2) && x1.length === x2.length) {
        return x1.findIndex((x, index) => !equals(x, x2[index])) === -1 ? true : false;
    }
    // compare two objects
    if (x1 && typeof (x1) === 'object' && typeof (x2) === 'object'
        && Object.keys(x1).length === Object.keys(x2).length
        && Object.keys(x2).length === arrayUnion(Object.keys(x1), Object.keys(x2)).length) {
        return Object.keys(x1).findIndex(key => !equals(x1[key], x2[key])) === -1;
    }
    // compare two primitives with the same type
    return x1 === x2;
}
/**
 * Extends an object with the *enumerable* and *own* properties of one or more source objects,
 * similar to Object.assign.
 *
 * @param {?} dest The object which will have properties copied to it.
 * @param {...?} sources The source objects from which properties will be copied.
 * @return {?}
 */
function extendObject(dest, ...sources) {
    if (dest == null) {
        throw TypeError('Cannot convert undefined or null to object');
    }
    for (const /** @type {?} */ source of sources) {
        if (source != null) {
            for (const /** @type {?} */ key in source) {
                if (source.hasOwnProperty(key)) {
                    dest[key] = source[key];
                }
            }
        }
    }
    return dest;
}
/**
 * @param {?} value
 * @return {?}
 */
function falsy(value) {
    return value === null || value === 0 || value === '' || value === undefined;
}
/**
 * Remove problematic or undesired store properties.
 * @param {?} obj
 * @return {?}
 */
function filterState(obj) {
    return removeCycles(removeProps(obj));
}
/**
 * @param {?} ctor
 * @return {?}
 */
function findMetadata(ctor) {
    const /** @type {?} */ instance = new ctor();
    return instance && instance.metadata ? instance.metadata : new Metadata();
}
/**
 * @return {?}
 */
function findSchoolYear() {
    const /** @type {?} */ date = new Date();
    const /** @type {?} */ year = date.getFullYear();
    const /** @type {?} */ month = date.getMonth();
    return month >= 7 ? `${year}-${year + 1}` : `${year - 1}-${year}`;
}
/**
 * @param {?} obj
 * @param {?} parents
 * @return {?}
 */
function flattenKeys(obj, parents) {
    return Object.keys(obj).reduce((acc, key) => {
        const /** @type {?} */ pathToRoot = [...parents, key];
        const /** @type {?} */ val = obj[key];
        if (!Array.isArray(val) && Object.keys(val).length > 0) {
            return [...acc, ...flattenKeys(val, pathToRoot)];
        }
        return [...acc, ...pathToRoot];
    }, []);
}
/**
 * @param {?=} number
 * @return {?}
 */
function formatPhoneNumber(number = '') {
    if (!number) {
        return '000-000-0000';
    }
    const /** @type {?} */ l = number.length;
    return number && (l === 7 || l === 10) ?
        l === 7 ? format7DigitPhoneNumber(number)
            : format10DigitPhoneNumber(number)
        : '000-000-0000';
}
/**
 * @param {?=} number
 * @return {?}
 */
function format7DigitPhoneNumber(number = '0000000') {
    const /** @type {?} */ first3 = number.substring(0, 3);
    const /** @type {?} */ last4 = number.substring(3, 7);
    return `${first3} -${last4} `;
}
/**
 * @param {?=} number
 * @return {?}
 */
function format10DigitPhoneNumber(number = '0000000000') {
    const /** @type {?} */ first3 = number.substring(0, 3);
    const /** @type {?} */ last7 = format7DigitPhoneNumber(number.substring(3, 10));
    return `${first3} -${last7} `;
}
/**
 * @param {?} total
 * @return {?}
 */
function formatPrice(total) {
    const /** @type {?} */ dollars = total.toFixed(2).replace(/./g, function (c, i, a) {
        return i && c !== '.' && ((a.length - i) % 3 === 0) ? ',' + c : c;
    });
    return `$${dollars}`;
}
/**
 * @param {?} type
 * @return {?}
 */
function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
}
/**
 * @param {?} obj
 * @return {?}
 */
function getAllProps(obj) {
    const /** @type {?} */ mapped = obj['metadata'] && obj['metadata']['include'] && Array.isArray(obj['metadata']['include']) ?
        obj['metadata']['include'].reduce((acc, key) => Object.assign({}, acc, { [key]: obj[key] }), {}) : obj;
    if (obj['metadata'] && obj['metadata']['exclude'] && Array.isArray(obj['metadata']['exclude'])) {
        obj['metadata']['exclude'].forEach(key => {
            delete mapped[key];
        });
    }
    return [...Object.keys(mapped), ...getGetters(mapped)];
}
/**
 * @param {?} obj
 * @return {?}
 */
function getGetters(obj) {
    return Object.keys(obj.constructor.prototype).filter(name => {
        return typeof Object.getOwnPropertyDescriptor(obj.constructor.prototype, name)['get'] === 'function';
    });
}
/**
 * @param {?} model
 * @return {?}
 */
function getKeyValues(model) {
    const /** @type {?} */ keys = getAllProps(model);
    return model['metadata'] && model['metadata']['include'] ?
        toArray(model['metadata']['include']).reduce((acc, key) => Object.assign({}, acc, { [key]: model[key] }), {})
        : keys.reduce((acc, key) => Object.assign({}, acc, { [key]: model[key] }), {});
}
/**
 * @param {?} obj
 * @return {?}
 */
function getSetters(obj) {
    return Object.keys(obj.prototype).filter(name => {
        return typeof Object.getOwnPropertyDescriptor(obj.prototype, name)['set'] === 'function';
    });
}
/**
 * @param {?} el
 * @param {?} styleProp
 * @return {?}
 */
function getStyle(el, styleProp) {
    let /** @type {?} */ value;
    const /** @type {?} */ defaultView = el.ownerDocument.defaultView;
    // W3C standard way:
    if (defaultView && defaultView.getComputedStyle) {
        // sanitize property name to css notation (hypen separated words eg. font-Size)
        styleProp = styleProp.replace(/([A-Z])/g, '-$1').toLowerCase();
        return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);
    }
    else if (el['currentStyle']) {
        // IE
        // sanitize property name to camelCase
        styleProp = styleProp.replace(/\-(\w)/g, function (str, letter) {
            return letter.toUpperCase();
        });
        value = el['currentStyle'][styleProp];
        return value;
    }
    return '';
}
/**
 * @param {?} model
 * @return {?}
 */
function getValue(model) {
    if (model === null || typeof (model) === 'string' || typeof (model) === 'string' || model instanceof Date) {
        return model;
    }
    const /** @type {?} */ keys = getAllProps(model);
    const /** @type {?} */ props = keys.filter(key => key !== 'metadata' && !ignoreKey(model, key))
        .map(key => {
        const /** @type {?} */ obj = {};
        obj[key] = model[key] && typeof model[key] === 'object' ?
            (Array.isArray(model[key]) ?
                (model[key].length > 0 ?
                    model[key].map(x => (typeof x === 'object' ? getValue(x) : x)) : [])
                : getValue(model[key])) : model[key];
        return obj;
    });
    return props.reduce((acc, val) => {
        return Object.assign({}, acc, val);
    }, {});
}
/**
 * @return {?}
 */
function guid() {
    /**
     * @return {?}
     */
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
        s4() + '-' + s4() + s4() + s4();
}
/**
 * @param {?} changes
 * @param {?} key
 * @param {?} props
 * @return {?}
 */
function hasChanged(changes, key, props) {
    const /** @type {?} */ currentValue = changes[key] && changes[key].currentValue ? changes[key].currentValue : {};
    const /** @type {?} */ previousValue = changes[key] && changes[key].previousValue ? changes[key].previousValue : {};
    return props.reduce((acc, prop) => {
        return acc ? true : currentValue[prop] !== previousValue[prop];
    }, false);
}
/**
 * @param {?} changes
 * @param {?} key
 * @return {?}
 */
function idChanged(changes, key) {
    const /** @type {?} */ newId = changes[key].currentValue ? changes[key].currentValue['id'] || 0 : 0;
    const /** @type {?} */ oldId = changes[key].previousValue ? changes[key].previousValue['id'] || 0 : 0;
    return newId !== oldId;
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
function ignoreKey(model, key) {
    if (model['metadata'] && model['metadata']['ignore']) {
        return inArray(model['metadata']['ignore'], key);
    }
    return false;
}
/**
 * @param {?} arr
 * @param {?} val
 * @return {?}
 */
function inArray(arr, val) {
    return arr.filter(item => item === val).length > 0;
}
/**
 * @param {?} arr
 * @param {?} val
 * @param {?} key
 * @return {?}
 */
function inArrayByKey(arr, val, key) {
    return arr.findIndex(item => item[key] === val) !== -1;
}
/**
 * @param {?} n
 * @return {?}
 */
function integerArray(n) {
    return Array.from(Array(n).keys());
}
/**
 * @param {?} dateFrom
 * @param {?} dateTo
 * @param {?} dateCheck
 * @return {?}
 */
function isBetweenDates(dateFrom, dateTo, dateCheck) {
    const /** @type {?} */ d1 = dateFrom.toLocaleDateString().split('/');
    const /** @type {?} */ d2 = dateTo.toLocaleDateString().split('/');
    const /** @type {?} */ c = dateCheck.toLocaleDateString().split('/');
    const /** @type {?} */ from$$1 = new Date(d1[2], toInt(d1[1]) - 1, d1[0]); // -1 because months are from 0 to 11
    const /** @type {?} */ to = new Date(d2[2], toInt(d2[1]) - 1, d2[0]);
    const /** @type {?} */ check = new Date(c[2], toInt(c[1]) - 1, c[0]);
    return (check >= from$$1 && check <= to);
}
/**
 * Detects cycles in an object.
 * @param {?} obj
 * @return {?}
 */
function isCyclic(obj) {
    const /** @type {?} */ seenObjects = [];
    const /** @type {?} */ detect = (x) => {
        if (x && typeof x === 'object') {
            if (seenObjects.indexOf(x) !== -1) {
                return true;
            }
            seenObjects.push(x);
            for (const /** @type {?} */ key in x) {
                if (x.hasOwnProperty(key) && detect(x[key])) {
                    return true;
                }
            }
        }
        return false;
    };
    return detect(obj);
}
/**
 * @param {?} fromState The last state object from the store
 * @param {?} dState A partial class containing all properties that have changed wrt fromState
 * @return {?} The current/updated state of the application (toState)
 */
function nextState(fromState, dState) {
    const /** @type {?} */ toState = Object.assign({}, fromState, dState);
    return toState;
}
/**
 * @param {?} n
 * @return {?}
 */
function positiveIntegerArray(n) {
    return integerArray(n).map(x => x + 1);
}
/**
 * Remove store props that contain cycles.
 * @param {?} obj
 * @return {?}
 */
function removeCycles(obj) {
    if (obj && typeof obj === 'object') {
        for (const /** @type {?} */ key in obj) {
            if (obj.hasOwnProperty(key) && isCyclic(obj[key])) {
                delete obj[key];
            }
        }
    }
    return obj;
}
/**
 * Remove any props that should not appear in the store.
 * @param {?} obj
 * @return {?}
 */
function removeProps(obj) {
    return obj;
}
/**
 * @param {?} model
 * @return {?}
 */
function serialize(model) {
    if (Array.isArray(model)) {
        return model.map(x => serialize(x));
    }
    if (model.serialize && typeof model.serialize === 'function') {
        return serialize(model.serialize());
    }
    if (model === null || typeof (model) === 'number' || typeof (model) === 'string' || model instanceof Date) {
        return model;
    }
    const /** @type {?} */ keys = getAllProps(model);
    if (keys.length === 0) {
        return model;
    }
    return keys.reduce((acc, key) => {
        let /** @type {?} */ val = null;
        if (model[key] !== null && typeof (model[key]) === 'object' && !(model[key] instanceof Date)) {
            if (model[key].serialize && typeof model[key].serialize === 'function') {
                val = model[key].serialize();
            }
            else {
                val = serialize(model[key]);
            }
        }
        else {
            val = model[key];
        }
        return Object.assign({}, acc, {
            [key]: val
        });
    }, {});
}
/**
 * @param {?} token
 * @return {?}
 */
function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return `${token.overriddenName}`;
    }
    if (token.name) {
        return `${token.name}`;
    }
    const /** @type {?} */ res = token.toString();
    const /** @type {?} */ newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
/**
 * @param {?} str
 * @return {?}
 */
function str2CharCode(str) {
    return str.charCodeAt(0);
}
/**
 * @param {?} str
 * @return {?}
 */
function str2Id(str) {
    const /** @type {?} */ charCodes = str ? str.split('').reduce((acc, x) => `${acc}${str2CharCode(x)}`, '') : '';
    return toInt(charCodes);
}
/**
 * @param {?} str
 * @return {?}
 */
function str2int(str) {
    return parseInt(str, 10);
}
/**
 * @param {?} strArray
 * @return {?}
 */
function strArray2Id(strArray) {
    const /** @type {?} */ str = strArray.reduce((acc, x) => `${acc}${x}`, '');
    return str2Id(str);
}
/**
 * @param {?} errorName
 * @param {?} errorMessage
 * @return {?}
 */
function throwException(errorName, errorMessage) {
    throw {
        name: errorName,
        level: 'Show Stopper',
        message: errorMessage,
        htmlMessage: 'Error detected. Please contact the <a href=\'mailto:agendamanager@caiu.com\'>system administrator</a>.',
        toString: function () { return errorName + ': ' + errorMessage; }
    };
}
/**
 * @return {?}
 */
function throwNotImplementedException() {
    throwException('Not Implemented', 'Not Implemented');
}
/**
 * @param {?} val
 * @return {?}
 */
function toArray(val) {
    return val ? (Array.isArray(val) ? val : [val]) : [];
}
/**
 * @param {?} val
 * @return {?}
 */
function toInt(val) {
    return val && val.toString ? str2int(val.toString()) : 0;
}
/**
 * @param {?} action
 * @return {?}
 */
function toPayload(action) {
    return action ? action.payload : null;
}
/**
 * @param {?} n
 * @return {?}
 */
function toPx(n) {
    return `${n}px`;
}
/**
 * @param {?} value
 * @return {?}
 */
function truthy(value) {
    return !falsy(value);
}
/**
 * @param {?} obj
 * @param {?} type
 * @return {?}
 */
function tryCast(obj, type) {
    const /** @type {?} */ retObj = new type();
    for (const /** @type {?} */ key in obj) {
        if (typeof (retObj[key]) !== 'undefined') {
            retObj[key] = obj[key];
        }
    }
    return retObj;
}
/**
 * @param {?} changes
 * @param {?=} key
 * @return {?}
 */
function valueChanged(changes, key = '') {
    return key ? changes[key].currentValue !== changes[key].previousValue
        : Object.keys(changes).reduce((acc, currentKey) => {
            return acc ? true : changes[currentKey].currentValue !== changes[currentKey].previousValue;
        }, false);
}
/**
 * @param {?} value
 * @param {?} formValue
 * @return {?}
 */
function valueEquals(value, formValue) {
    return equals(getValue(value), formValue);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Collage {
    constructor() {
        this.canvasHeight = 0;
        this.canvasWidth = 0;
        this.maxColumns = 4;
        this.maxRows = 4;
        this.totalColumns = 0;
        this.totalRows = 0;
        this._images = [];
        this._tiles = [];
    }
    /**
     * @param {?} startRow
     * @param {?} startColumn
     * @param {?} maxColumns
     * @param {?} cells
     * @return {?}
     */
    static AvailableColumns(startRow, startColumn, maxColumns, cells) {
        const /** @type {?} */ totalColumns = cells[0].length;
        return Math.max(...positiveIntegerArray(maxColumns)
            .map(k => k <= maxColumns && startColumn + k <= totalColumns && cells[startRow] && cells[startRow][startColumn + k] ? k : 1));
    }
    /**
     * @param {?} startRow
     * @param {?} startColumn
     * @param {?} maxRows
     * @param {?} cells
     * @return {?}
     */
    static AvailableRows(startRow, startColumn, maxRows, cells) {
        const /** @type {?} */ totalRows = cells[0].length;
        return Math.max(...positiveIntegerArray(maxRows)
            .map(k => k <= maxRows && startRow + k <= totalRows && cells[startRow + k] && cells[startRow + k][startColumn] ? k : 1));
    }
    /**
     * @param {?} dimensions
     * @param {?} startRow
     * @param {?} startColumn
     * @param {?} maxRows
     * @param {?} maxColumns
     * @param {?} cells
     * @return {?}
     */
    static AvailableDimensions(dimensions, startRow, startColumn, maxRows, maxColumns, cells) {
        const /** @type {?} */ availableRows = Collage.AvailableRows(startRow, startColumn, maxRows, cells);
        const /** @type {?} */ availableColumns = Collage.AvailableColumns(startRow, startColumn, maxColumns, cells);
        return dimensions.filter(x => x.rows <= availableRows && x.columns <= availableColumns);
    }
    /**
     * @param {?} images
     * @param {?} canvasHeight
     * @param {?} canvasWidth
     * @param {?=} totalRows
     * @param {?=} totalColumns
     * @param {?=} maxRows
     * @param {?=} maxColumns
     * @return {?}
     */
    static Build(images, canvasHeight, canvasWidth, totalRows = 0, totalColumns = 0, maxRows = 0, maxColumns = 0) {
        const /** @type {?} */ collage = Object.assign(new Collage(), {
            canvasHeight,
            canvasWidth,
            totalRows,
            totalColumns,
            maxRows,
            maxColumns
        });
        collage.images = images;
        return collage;
    }
    /**
     * @param {?} rows
     * @param {?} cols
     * @return {?}
     */
    static BuildEmptyCells(rows, cols) {
        return integerArray(rows).map(x => integerArray(cols).map(y => true));
    }
    /**
     * @param {?} collage
     * @return {?}
     */
    static BuildTiles(collage) {
        return collage.images.map((image, index) => {
            const /** @type {?} */ dimensions = Collage.FindDimensions(image.height, image.width, collage.tileDimensions, collage.cellHeight, collage.cellWidth);
            return Object.assign(new Tile(), {
                image,
                dimensions,
                id: index + 1,
                cellHeight: collage.cellHeight,
                cellWidth: collage.cellWidth
            });
        });
    }
    /**
     * @param {?} id
     * @param {?} tileIds
     * @return {?}
     */
    static ChooseTileId(id, tileIds) {
        return [...tileIds.filter(x => x !== id), id];
    }
    /**
     * @param {?} index
     * @param {?} totalRows
     * @param {?} totalColumns
     * @return {?}
     */
    static FindCoordinates(index, totalRows, totalColumns) {
        const /** @type {?} */ remainder = (index + totalColumns) % totalColumns;
        return {
            row: (index - remainder) / totalColumns,
            column: remainder
        };
    }
    /**
     * @param {?} index
     * @param {?} totalRows
     * @param {?} totalColumns
     * @param {?} startRow
     * @param {?} startColumn
     * @return {?}
     */
    static FindCoordinatesNested(index, totalRows, totalColumns, startRow, startColumn) {
        const /** @type {?} */ coordinates = Collage.FindCoordinates(index, totalRows, totalColumns);
        coordinates.column += startColumn;
        coordinates.row += startRow;
        return coordinates;
    }
    /**
     * @param {?} height
     * @param {?} width
     * @param {?} dimensions
     * @param {?} cellHeight
     * @param {?} cellWidth
     * @return {?}
     */
    static FindDimensions(height, width, dimensions, cellHeight, cellWidth) {
        const /** @type {?} */ filtered = dimensions.filter(x => x.rows * cellHeight <= height && x.columns * cellWidth <= width);
        const /** @type {?} */ ordered = filtered.sort((a, b) => Math.abs(height / width - a.ratio) - Math.abs(height / width - b.ratio));
        const /** @type {?} */ closestMatch = ordered[0];
        const /** @type {?} */ rows = closestMatch && closestMatch.rows ? closestMatch.rows : [];
        const /** @type {?} */ columns = closestMatch && closestMatch.columns ? closestMatch.columns : [];
        return Object.assign(new Dimensions(), {
            rows,
            columns,
            height,
            width
        });
    }
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    static FindNextTileId(tiles, tileIds, dimensions) {
        const /** @type {?} */ nextMatch = Collage.FindNextMatchId(tiles, tileIds, dimensions);
        return nextMatch || Collage.FindBestMatchId(tiles, tileIds, dimensions);
    }
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    static FindBestMatchId(tiles, tileIds, dimensions) {
        let /** @type {?} */ diff = 999;
        return tileIds.reduce((acc, id) => {
            const /** @type {?} */ tile = tiles.find(x => x.id === id);
            diff = Math.abs(tile.ratio - dimensions.ratio);
            return acc === 0 || diff < acc ? id : acc;
        }, 0);
    }
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    static FindNextMatchId(tiles, tileIds, dimensions) {
        return tileIds.reduce((acc, id) => {
            if (acc !== 0) {
                return acc;
            }
            const /** @type {?} */ tile = tiles.find(x => x.id === id);
            return tile && tile.rows === dimensions.rows && tile.columns === dimensions.columns ? tile.id : 0;
        }, 0);
    }
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    static FindBestMatch(tiles, tileIds, dimensions) {
        const /** @type {?} */ id = Collage.FindBestMatchId(tiles, tileIds, dimensions);
        return tiles.find(x => x.id === id);
    }
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    static FindNextTile(tiles, tileIds, dimensions) {
        return tileIds.reduce((acc, id) => {
            if (acc === null || acc.id === 0) {
                const /** @type {?} */ tile = tiles.find(x => x.id === id);
                const /** @type {?} */ dim = dimensions.find(x => tile.rows === x.rows && tile.columns === x.columns);
                return dim ? Object.assign(new Tile(), tile, {
                    dimensions: Object.assign(new Dimensions(), tile.dimensions, {
                        rows: dim.rows,
                        columns: dim.columns
                    })
                }) : null;
            }
            return acc;
        }, new Tile()) || Collage.FindBestMatch(tiles, tileIds, dimensions[0]);
    }
    /**
     * @param {?} cellHeight
     * @param {?} cellWidth
     * @param {?} maxRows
     * @param {?} maxColumns
     * @return {?}
     */
    static GetTileDimensions(cellHeight, cellWidth, maxRows, maxColumns) {
        return positiveIntegerArray(maxRows).reduce((acc, x) => {
            const /** @type {?} */ dimensions = positiveIntegerArray(maxColumns)
                .map(y => Object.assign(new Dimensions(), {
                rows: x,
                columns: y,
                height: x * cellHeight,
                width: y * cellWidth
            }));
            return [...acc, ...dimensions];
        }, []);
    }
    /**
     * @param {?} cells
     * @param {?} startIndex
     * @param {?} dimensions
     * @param {?} totalRows
     * @param {?} totalColumns
     * @return {?}
     */
    static MarkCellsAsFilled(cells, startIndex, dimensions, totalRows, totalColumns) {
        const /** @type {?} */ start = Collage.FindCoordinates(startIndex, totalRows, totalColumns);
        return integerArray(dimensions.rows * dimensions.columns).reduce((acc, i) => {
            const /** @type {?} */ coordinates = Collage.FindCoordinatesNested(i, dimensions.rows, dimensions.columns, start.row, start.column);
            cells[coordinates.row][coordinates.column] = false;
            return cells;
        }, cells);
    }
    /**
     * @param {?} tiles
     * @param {?} collage
     * @return {?}
     */
    static PositionTiles(tiles, collage) {
        let /** @type {?} */ cells = Collage.BuildEmptyCells(collage.totalRows, collage.totalColumns);
        let /** @type {?} */ tileIds = tiles.map(x => x.id);
        return integerArray(collage.totalCells).reduce((acc, i) => {
            const /** @type {?} */ coordinates = Collage.FindCoordinates(i, collage.totalRows, collage.totalColumns);
            if (!cells[coordinates.row][coordinates.column]) {
                return acc;
            }
            const /** @type {?} */ availableDimensions = Collage.AvailableDimensions(collage.tileDimensions, coordinates.row, coordinates.column, collage.maxRows, collage.maxColumns, cells);
            const /** @type {?} */ tile = Collage.FindNextTile(tiles, tileIds, availableDimensions);
            tile.coordinates = coordinates;
            cells = Collage.MarkCellsAsFilled(cells, i, tile.dimensions, collage.totalRows, collage.totalColumns);
            tileIds = Collage.ChooseTileId(tile.id, tileIds);
            return [...acc, tile];
        }, []);
    }
    /**
     * @return {?}
     */
    get cellHeight() {
        return this.canvasHeight / this.totalRows;
    }
    /**
     * @return {?}
     */
    get cellWidth() {
        return this.canvasWidth / this.totalColumns;
    }
    /**
     * @return {?}
     */
    get emptyCells() {
        return Collage.BuildEmptyCells(this.totalRows, this.totalColumns);
    }
    /**
     * @return {?}
     */
    get images() {
        return this._images;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set images(value) {
        this._images = value;
        this.tiles = Collage.BuildTiles(this);
    }
    /**
     * @return {?}
     */
    get tileDimensions() {
        return Collage.GetTileDimensions(this.cellHeight, this.cellWidth, this.maxRows, this.maxColumns);
    }
    /**
     * @return {?}
     */
    get tiles() {
        return this._tiles;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tiles(value) {
        this._tiles = Collage.PositionTiles(value, this);
    }
    /**
     * @return {?}
     */
    get totalCells() {
        return this.totalRows * this.totalColumns;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CollageComponent {
    constructor() {
        this.images = [];
        this.canvasHeight = 0;
        this.canvasWidth = 0;
        this.totalRows = 0;
        this.totalColumns = 0;
        this.maxRows = 0;
        this.maxColumns = 0;
    }
    /**
     * @return {?}
     */
    get collage() {
        return this.canvasHeight > 0 && this.canvasWidth > 0 ?
            Collage.Build(this.images, this.canvasHeight, this.canvasWidth, this.totalRows, this.totalColumns, this.maxRows, this.maxColumns)
            : new Collage();
    }
    /**
     * @return {?}
     */
    get tiles() {
        return this.collage.tiles;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
CollageComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-collage',
                template: `<iu-tile *ngFor="let tile of tiles" [tile]="tile"></iu-tile>`,
                styles: [``],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
CollageComponent.ctorParameters = () => [];
CollageComponent.propDecorators = {
    images: [{ type: Input }],
    canvasHeight: [{ type: Input }],
    canvasWidth: [{ type: Input }],
    totalRows: [{ type: Input }],
    totalColumns: [{ type: Input }],
    maxRows: [{ type: Input }],
    maxColumns: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TileComponent {
    constructor() {
        this.tile = new Tile();
    }
    /**
     * @return {?}
     */
    get backgroundColor() {
        return '';
    }
    /**
     * @return {?}
     */
    get height() {
        return this.tile.height;
    }
    /**
     * @return {?}
     */
    get imageHeight() {
        return this.tile.imageHeight;
    }
    /**
     * @return {?}
     */
    get imageSrc() {
        return this.tile.image.src;
    }
    /**
     * @return {?}
     */
    get imageWidth() {
        return this.tile.imageWidth;
    }
    /**
     * @return {?}
     */
    get position() {
        return 'absolute';
    }
    /**
     * @return {?}
     */
    get positionLeft() {
        return this.tile.positionLeft;
    }
    /**
     * @return {?}
     */
    get positionTop() {
        return this.tile.positionTop;
    }
    /**
     * @return {?}
     */
    get width() {
        return this.tile.width;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
TileComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-tile',
                template: `<div fxLayout fxLayoutAlign="center center" class="tile" [style.position]="position" [style.top.px]="positionTop" [style.left.px]="positionLeft"
  [style.background-color]="backgroundColor" [style.height.px]="height" [style.width.px]="width">
  <img [src]="imageSrc" [style.height.px]="imageHeight" [style.width.px]="imageWidth">
</div>
`,
                styles: [``],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
TileComponent.ctorParameters = () => [];
TileComponent.propDecorators = {
    tile: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TileModule {
}
TileModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    SharedModule,
                ],
                declarations: [
                    TileComponent,
                ],
                exports: [
                    TileComponent,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CollageModule {
}
CollageModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    SharedModule,
                    TileModule,
                ],
                declarations: [
                    CollageComponent,
                ],
                exports: [
                    CollageComponent,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DateRange {
    constructor() {
        this.startDate = new Date();
        this.endDate = new Date();
    }
}
class DateHelper {
    /**
     * @param {?} startDate
     * @param {?} startHours
     * @param {?} startMinutes
     * @param {?} startMeridian
     * @return {?}
     */
    static BuildStartTime(startDate, startHours, startMinutes, startMeridian) {
        const /** @type {?} */ startTime = new Date(startDate);
        const /** @type {?} */ hours = startMeridian === 'AM' ? startHours : startHours + 12;
        startTime.setHours(hours);
        startTime.setMinutes(startMinutes);
        return startTime;
    }
    /**
     * @param {?} startTime
     * @param {?} dHours
     * @param {?} dMinutes
     * @return {?}
     */
    static BuildEndTime(startTime, dHours, dMinutes) {
        const /** @type {?} */ endTime = new Date(startTime);
        endTime.setHours(endTime.getHours() + dHours);
        endTime.setMinutes(endTime.getMinutes() + dMinutes);
        return endTime;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static FormatDate(date) {
        const /** @type {?} */ d = new Date(date);
        const /** @type {?} */ month = '' + (d.getMonth() + 1);
        const /** @type {?} */ day = '' + d.getDate();
        const /** @type {?} */ year = d.getFullYear();
        return month && day && year ? [month, day, year].join('/') : null;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static FormatDateDashes(date) {
        const /** @type {?} */ d = new Date(date);
        let /** @type {?} */ month = '' + (d.getMonth() + 1);
        let /** @type {?} */ day = '' + d.getDate();
        const /** @type {?} */ year = d.getFullYear();
        if (month.length < 2) {
            month = '0' + month;
        }
        if (day.length < 2) {
            day = '0' + day;
        }
        return [year, month, day].join('-');
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static FormatDateSlashes(date) {
        const /** @type {?} */ d = new Date(date);
        let /** @type {?} */ month = '' + (d.getMonth() + 1);
        let /** @type {?} */ day = '' + d.getDate();
        const /** @type {?} */ year = d.getFullYear();
        if (month.length < 2) {
            month = '0' + month;
        }
        if (day.length < 2) {
            day = '0' + day;
        }
        return [month, day, year].join('/');
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static TimeAgo(date) {
        if (!date) {
            return '';
        }
        const /** @type {?} */ seconds = Math.floor(((new Date()).getTime() - (new Date(date)).getTime()) / 1000);
        let /** @type {?} */ interval = Math.floor(seconds / 31536000);
        if (interval > 1) {
            return interval + ' years';
        }
        interval = Math.floor(seconds / 2592000);
        if (interval > 1) {
            return interval + ' months';
        }
        interval = Math.floor(seconds / 86400);
        if (interval > 1) {
            return interval + ' days';
        }
        interval = Math.floor(seconds / 3600);
        if (interval > 1) {
            return interval + ' hours';
        }
        interval = Math.floor(seconds / 60);
        if (interval > 1) {
            return interval + ' minutes';
        }
        return Math.floor(seconds) + ' seconds';
    }
    /**
     * @param {?} d
     * @return {?}
     */
    static ToMonthName(d) {
        const /** @type {?} */ date = new Date(d);
        return DateHelper.MonthNames[date.getMonth()];
    }
    /**
     * @param {?} d
     * @return {?}
     */
    static ToMonthNumber(d) {
        const /** @type {?} */ date = new Date(d);
        return date.getMonth() + 1;
    }
    /**
     * @param {?} monthYear
     * @return {?}
     */
    static ToMonthNumberFromMonthYear(monthYear) {
        const /** @type {?} */ month = monthYear.substr(monthYear.length - 2);
        return toInt(month) - 1;
    }
    /**
     * @param {?} monthYear
     * @return {?}
     */
    static ToMonthNumberFromMonthYearName(monthYear) {
        const /** @type {?} */ parts = monthYear.split(/\s*,\s*/);
        const /** @type {?} */ month = DateHelper.MonthNumbers[parts[0]];
        return month;
    }
    /**
     * @param {?} d
     * @return {?}
     */
    static ToMonthYear(d) {
        const /** @type {?} */ date = new Date(d);
        const /** @type {?} */ monthNumber = DateHelper.ToMonthNumber(date);
        const /** @type {?} */ month = monthNumber < 10 ? `0${monthNumber}` : monthNumber;
        return `${date.getFullYear()}-${month}`;
    }
    /**
     * @param {?} d
     * @return {?}
     */
    static ToMonthYearName(d) {
        const /** @type {?} */ date = new Date(d);
        const /** @type {?} */ month = DateHelper.ToMonthName(date);
        const /** @type {?} */ year = date.getFullYear();
        return month && year ? `${month} ${year}` : '';
    }
    /**
     * @param {?} monthYear
     * @return {?}
     */
    static ToYearNumberFromMonthYear(monthYear) {
        const /** @type {?} */ year = monthYear.substring(0, 4);
        return toInt(year);
    }
    /**
     * @param {?} monthYear
     * @return {?}
     */
    static FromMonthYear(monthYear) {
        const /** @type {?} */ year = DateHelper.ToYearNumberFromMonthYear(monthYear);
        const /** @type {?} */ month = DateHelper.ToMonthNumberFromMonthYear(monthYear);
        return year && month ? new Date(year, month) : new Date();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static IsDate(date) {
        return Object.prototype.toString.call(date) === '[object Date]';
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static IsValidDate(date) {
        const /** @type {?} */ dateWrapper = new Date(date);
        return !isNaN(dateWrapper.getDate());
    }
    /**
     * @return {?}
     */
    static get Today() {
        return new Date();
    }
    /**
     * @return {?}
     */
    static get Month() {
        return DateHelper.Today.getMonth();
    }
    /**
     * @return {?}
     */
    static get MonthNumbers() {
        return DateHelper.MonthNames.reduce((acc, x, i) => Object.assign({}, acc, { [x]: i }));
    }
    /**
     * @return {?}
     */
    static get Year() {
        return DateHelper.Today.getFullYear();
    }
    /**
     * @return {?}
     */
    static get NextSchoolYear() {
        return DateHelper.Month < 7 ? DateHelper.Year : DateHelper.Year + 1;
    }
    /**
     * @return {?}
     */
    static get NextSchoolYearStartDate() {
        return new Date(DateHelper.SchoolYearStart(DateHelper.NextSchoolYear));
    }
    /**
     * @return {?}
     */
    static get PreviousSchoolYear() {
        return DateHelper.Month < 7 ? DateHelper.Year : DateHelper.Year + 1;
    }
    /**
     * @return {?}
     */
    static get PreviousSchoolYearEndDate() {
        return new Date(DateHelper.SchoolYearEnd(DateHelper.PreviousSchoolYear));
    }
    /**
     * @return {?}
     */
    static get FutureDate() {
        const /** @type {?} */ date = DateHelper.Today;
        return DateHelper.AddDays(date, 100000);
    }
    /**
     * @return {?}
     */
    static get PastDate() {
        const /** @type {?} */ date = DateHelper.Today;
        return DateHelper.SubtractDays(date, 100000);
    }
    /**
     * @param {?} d
     * @param {?} days
     * @return {?}
     */
    static AddDays(d, days) {
        const /** @type {?} */ date = new Date(d);
        date.setDate(date.getDate() + days);
        return date;
    }
    /**
     * @param {?} d
     * @param {?} days
     * @return {?}
     */
    static SubtractDays(d, days) {
        const /** @type {?} */ date = new Date(d);
        date.setDate(date.getDate() - days);
        return date;
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    static BuildDate(year, month, day) {
        const /** @type {?} */ date = new Date();
        date.setFullYear(year);
        date.setMonth(month);
        date.setDate(day);
        return date;
    }
    /**
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    static DateChanged(d1, d2) {
        const /** @type {?} */ date1 = new Date(d1);
        const /** @type {?} */ date2 = new Date(d2);
        return date1.getDate() !== date2.getDate() || date1.getMonth() !== date2.getMonth() || date1.getFullYear() !== date2.getFullYear();
    }
    /**
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    static IsSameDay(d1, d2) {
        return !DateHelper.DateChanged(d1, d2);
    }
    /**
     * @return {?}
     */
    static get YearStartDate() {
        if (DateHelper.Month < 7) {
            return DateHelper.BuildDate(DateHelper.Year - 1, 6, 1);
        }
        else {
            return DateHelper.BuildDate(DateHelper.Year, 6, 1);
        }
    }
    /**
     * @return {?}
     */
    static get PreviousYearStartDate() {
        if (DateHelper.Month < 7) {
            return DateHelper.BuildDate(DateHelper.Year - 2, 6, 1);
        }
        else {
            return DateHelper.BuildDate(DateHelper.Year - 1, 6, 1);
        }
    }
    /**
     * @param {?} year
     * @return {?}
     */
    static SchoolYearStart(year) {
        return DateHelper.BuildDate(year, 6, 1);
    }
    /**
     * @return {?}
     */
    static get YearEndDate() {
        if (DateHelper.Month < 7) {
            return DateHelper.BuildDate(DateHelper.Year, 5, 30);
        }
        else {
            return DateHelper.BuildDate(DateHelper.Year + 1, 5, 30);
        }
    }
    /**
     * @return {?}
     */
    static get PreviousYearEndDate() {
        if (DateHelper.Month < 7) {
            return DateHelper.BuildDate(DateHelper.Year - 1, 5, 30);
        }
        else {
            return DateHelper.BuildDate(DateHelper.Year, 5, 30);
        }
    }
    /**
     * @param {?=} year
     * @return {?}
     */
    static SchoolYearEnd(year) {
        return DateHelper.BuildDate(year - 1, 5, 30);
    }
    /**
     * @param {?} dateRangeId
     * @return {?}
     */
    static BuildDateRange(dateRangeId) {
        let /** @type {?} */ startDate;
        let /** @type {?} */ endDate;
        switch (dateRangeId) {
            case 0:
                break;
            case 1:
                break;
            case 2:
                // Today
                startDate = DateHelper.Today;
                endDate = startDate;
                break;
            case 3:
                // Next 15
                startDate = DateHelper.Today;
                endDate = DateHelper.AddDays(startDate, 15);
                break;
            case 4:
                // Next 30
                startDate = DateHelper.Today;
                endDate = DateHelper.AddDays(startDate, 30);
                break;
            case 5:
                // Next 60
                startDate = DateHelper.Today;
                endDate = DateHelper.AddDays(startDate, 60);
                break;
            case 6:
                // Previous 15
                endDate = DateHelper.Today;
                startDate = DateHelper.SubtractDays(endDate, 15);
                break;
            case 7:
                // Previous 30
                endDate = DateHelper.Today;
                startDate = DateHelper.SubtractDays(endDate, 30);
                break;
            case 8:
                // Previous 60
                endDate = DateHelper.Today;
                startDate = DateHelper.SubtractDays(endDate, 60);
                break;
            case 9:
                // School Year - Runs from July 1st Thru June 30th
                startDate = DateHelper.YearStartDate;
                endDate = DateHelper.YearEndDate;
                break;
            case 10:
                // Number of meetings = 10
                startDate = DateHelper.Today;
                endDate = DateHelper.FutureDate;
                break;
            case 11:
                // Previous School Year
                startDate = DateHelper.PreviousYearStartDate;
                endDate = DateHelper.PreviousYearEndDate;
                break;
        }
        return build(DateRange, { startDate, endDate });
    }
}
DateHelper.MonthNames = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December'
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ DATEPICKER_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => DatepickerComponent),
    multi: true
};
class DatepickerComponent {
    constructor() {
        this.placeholder = 'Choose a date';
        this.startView = 'month';
        this.selectedChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
        this.value = value;
        if (this.onModelChange) {
            this.onModelChange(value);
        }
    }
    /**
     * @param {?} input
     * @return {?}
     */
    onBlur(input) {
        const /** @type {?} */ date = new Date(input.value);
        if (DateHelper.IsValidDate(date)) {
            this.changeSelected(date);
        }
        else {
            input.value = DateHelper.FormatDate(this.value);
        }
    }
    /**
     * @return {?}
     */
    get id() {
        return this.datepicker.id;
    }
    /**
     * @return {?}
     */
    get opened() {
        return this.datepicker.opened;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.startAt = this.value;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    changeSelected(date) {
        this.onChange(date);
        this.selectedChanged.emit(date);
    }
    /**
     * @return {?}
     */
    close() {
        this.datepicker.close();
    }
    /**
     * @return {?}
     */
    open() {
        this.datepicker.open();
    }
}
DatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-datepicker',
                template: `<mat-form-field>
  <input matInput [placeholder]="placeholder" [matDatepicker]="picker" (blur)="onBlur(pickerInput)" (change)="onChange(value)"
    [min]="min" [max]="max" [value]="value" #pickerInput>
  <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
  <mat-datepicker #picker [startAt]="startAt" [startView]="startView" [touchUi]="touchUi" (selectedChanged)="changeSelected($event)"></mat-datepicker>
</mat-form-field>`,
                styles: [`.mat-input-container{float:left}`],
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [DATEPICKER_ACCESSOR]
            },] },
];
/** @nocollapse */
DatepickerComponent.ctorParameters = () => [];
DatepickerComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    placeholder: [{ type: Input }],
    startAt: [{ type: Input }],
    startView: [{ type: Input }],
    touchUi: [{ type: Input }],
    selectedChanged: [{ type: Output }],
    datepicker: [{ type: ViewChild, args: ['picker',] }],
    value: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ DATERANGE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => DaterangeComponent),
    multi: true
};
class DaterangeComponent {
    /**
     * @param {?} changeDetectorRef
     */
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.inline = false;
        this.startLabel = 'Start Date';
        this.endLabel = 'End Date';
        this.startDateChanged = new EventEmitter();
        this.endDateChanged = new EventEmitter();
        this._value = new DateRange();
        this.focused = new DateRange();
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        if (this && this.changeDetectorRef && !this.changeDetectorRef['destroyed']) {
            this.changeDetectorRef.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    get startDateId() {
        return this.startDatepicker.id;
    }
    /**
     * @return {?}
     */
    get startDateOpened() {
        return this.startDatepicker.opened;
    }
    /**
     * @return {?}
     */
    get endDateId() {
        return this.endDatepicker.id;
    }
    /**
     * @return {?}
     */
    get endDateOpened() {
        return this.endDatepicker.opened;
    }
    /**
     * @return {?}
     */
    get startDateValue() {
        return this.value.startDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set startDateValue(value) {
        this.changeStartDate(value);
    }
    /**
     * @return {?}
     */
    get endDateValue() {
        return this.value.endDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set endDateValue(value) {
        this.changeEndDate(value);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    changeStartDate(date) {
        this.onChange(build(DateRange, {
            endDate: this.value.endDate,
            startDate: date
        }));
        this.startDateChanged.emit(date);
    }
    /**
     * @return {?}
     */
    closeStartDate() {
        this.startDatepicker.close();
    }
    /**
     * @return {?}
     */
    openStateDate() {
        this.startDatepicker.open();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    changeEndDate(date) {
        this.onChange(build(DateRange, {
            endDate: date,
            startDate: this.value.startDate
        }));
        this.endDateChanged.emit(date);
    }
    /**
     * @return {?}
     */
    closeEndDate() {
        this.endDatepicker.close();
    }
    /**
     * @return {?}
     */
    openEndDate() {
        this.endDatepicker.open();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
        this.value = value;
        if (this.onModelChange) {
            this.onModelChange(value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onBlur(value) {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onFocus(value) {
        this.focused = value;
        if (this.onTouch) {
            this.onTouch();
        }
    }
}
DaterangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-daterange',
                template: `<div class="daterange">
  <div class="start-date" [class.date]="!inline" [class.inline-date]="inline">
    <label class="lbl-date iu-primary">{{ startLabel }}:</label>
    <iu-datepicker #startDate (selectedChanged)="changeStartDate($event)" [value]="startDateValue"></iu-datepicker>
  </div>
  <div class="end-date" [class.date]="!inline" [class.inline-date]="inline">
    <label class="lbl-date iu-primary">{{ endLabel }}:</label>
    <iu-datepicker #endDate (selectedChanged)="changeEndDate($event)" [value]="endDateValue"></iu-datepicker>
  </div>
</div>
`,
                styles: [`.daterange{display:inline-block;line-height:18px;padding:0 10px;border-radius:3px}.daterange .date{display:flex;padding:6px}.daterange .inline-date{display:inline-flex;padding:0}.daterange .inline-date.end-date{margin-left:32px}.daterange .lbl-date{width:76px;display:inline-block;font-size:14px;padding-top:22px}`],
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [DATERANGE_ACCESSOR]
            },] },
];
/** @nocollapse */
DaterangeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
DaterangeComponent.propDecorators = {
    inline: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    startAt: [{ type: Input }],
    startLabel: [{ type: Input }],
    endLabel: [{ type: Input }],
    startView: [{ type: Input }],
    touchUi: [{ type: Input }],
    startDateChanged: [{ type: Output }],
    endDateChanged: [{ type: Output }],
    startDatepicker: [{ type: ViewChild, args: ['startDate',] }],
    endDatepicker: [{ type: ViewChild, args: ['endDate',] }],
    value: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DatepickerModule {
}
DatepickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    SharedModule,
                    MatDatepickerModule,
                    MatNativeDateModule,
                    MatInputModule,
                ],
                declarations: [
                    DatepickerComponent,
                    DaterangeComponent,
                ],
                exports: [
                    DatepickerComponent,
                    DaterangeComponent,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DialogModel {
    constructor() {
        this.title = ' ';
        this.actions = [];
        /**
         * Whether the dialog has a backdrop.
         */
        this.hasBackdrop = true;
        /**
         * Whether the user can use escape or clicking outside to close a modal.
         */
        this.disableClose = false;
    }
    /**
     * @return {?}
     */
    get config() {
        return {
            viewContainerRef: this.viewContainerRef,
            role: this.role,
            panelClass: this.panelClass,
            hasBackdrop: this.hasBackdrop,
            backdropClass: this.backdropClass,
            disableClose: this.disableClose,
            width: this.width,
            height: this.height,
            position: this.position,
            data: this.data,
            direction: this.direction
        };
    }
}
class DialogAction {
    constructor() {
        this.value = null;
        this.label = '';
        this.color = 'accent';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DialogComponent {
    constructor() {
        this.model = new DialogModel();
        this.showActions = true;
        this.showCloseAction = false;
        this.showCloseIcon = true;
        this.defaultActionColor = 'accent';
    }
    /**
     * @return {?}
     */
    get actions() {
        return this.model.actions;
    }
    /**
     * @return {?}
     */
    get actionWidth() {
        const /** @type {?} */ actionsCount = Math.max(this.actions.length, 1);
        return `${100 / actionsCount}%`;
    }
    /**
     * @return {?}
     */
    get title() {
        return this.model.title;
    }
}
DialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-dialog',
                template: `<mat-toolbar color="primary" mat-dialog-title>
  <span class="dialog-title">
    {{ title }}
    <button *ngIf="showCloseIcon" mat-button [mat-dialog-close]="null">
      <mat-icon>close</mat-icon>
    </button>
  </span>
</mat-toolbar>
<mat-dialog-content class="scrollable">
  <ng-content></ng-content>
</mat-dialog-content>
<mat-dialog-actions *ngIf="showActions && actions.length > 0">
  <button *ngFor="let action of actions" mat-raised-button [mat-dialog-close]="action.value" [style.width]="actionWidth" [style.color]="action.color">{{ action.label }}</button>
</mat-dialog-actions>
<mat-dialog-actions *ngIf="showCloseAction && actions.length === 0">
  <button mat-raised-button mat-dialog-close="close" [style.width]="actionWidth" [style.color]="defaultActionColor">Close</button>
</mat-dialog-actions>
`,
                styles: [`iu-dialog .mat-toolbar{margin:-24px -24px 0;width:calc(100% + 48px);min-height:32px}iu-dialog .mat-toolbar .dialog-title{position:relative;height:calc(100% - 8px);width:100%;margin-top:8px}iu-dialog .mat-toolbar .dialog-title button{cursor:pointer;position:absolute;right:0;top:-5px;border-radius:100%;height:42px;width:42px;min-width:36px}iu-dialog .mat-toolbar .dialog-title button:hover,iu-dialog .mat-toolbar .dialog-title button:hover mat-icon{font-weight:700}iu-dialog .mat-toolbar .dialog-title mat-icon{position:absolute;top:9px;right:8px;z-index:1}iu-dialog .mat-toolbar-row{height:48px}iu-dialog .mat-dialog-actions{margin-left:-24px;margin-right:-24px;color:#fff;padding:0}iu-dialog .mat-dialog-actions button{padding:12px 0}iu-dialog .mat-dialog-actions .mat-accent{color:#fff!important}`],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
DialogComponent.ctorParameters = () => [];
DialogComponent.propDecorators = {
    model: [{ type: Input }],
    showActions: [{ type: Input }],
    showCloseAction: [{ type: Input }],
    showCloseIcon: [{ type: Input }],
    defaultActionColor: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DialogModule {
}
DialogModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    SharedModule,
                    MatDialogModule,
                    MatIconModule,
                    MatToolbarModule,
                ],
                declarations: [
                    DialogComponent,
                ],
                exports: [
                    DialogComponent,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FileUpload {
    constructor() {
        this.lastModified = 0;
        this.lastModifiedDate = new Date();
        this.name = '';
        this.size = 0;
        this.type = '';
        this.webkitRelativePath = '';
        this.order = 0;
        this.readyState = 'EMPTY';
        this.src = '';
    }
    /**
     * @param {?} file
     * @return {?}
     */
    static BuildFromFile(file) {
        return build(FileUpload, {
            name: file.fileName,
            size: file.fileSize,
            type: file.mimeType,
            src: file.src,
            order: file.order
        });
    }
    /**
     * @param {?} reader
     * @return {?}
     */
    static GetReadyState(reader) {
        switch (reader.readyState) {
            case 0:
                return 'EMPTY';
            case 1:
                return 'LOADING';
            case 2:
                return 'DONE';
            default:
                return 'EMPTY';
        }
    }
    /**
     * @return {?}
     */
    get extension() {
        return this.name.split('.').pop();
    }
    /**
     * @return {?}
     */
    get isImage() {
        return this.type.split('/')[0] === 'image';
    }
    /**
     * @return {?}
     */
    get loading() {
        return this.readyState === 'LOADING';
    }
    /**
     * @return {?}
     */
    get file() {
        return File.BuildFromFileUpload(this);
    }
}
/**
 * @param {?} reader
 * @return {?}
 */
function getReadyState(reader) {
    switch (reader.readyState) {
        case 0:
            return 'EMPTY';
        case 1:
            return 'LOADING';
        case 2:
            return 'DONE';
        default:
            return 'EMPTY';
    }
}
class File {
    constructor() {
        this.id = 0;
        this.fileBinary = [];
        this.fileExtension = '';
        this.fileName = '';
        this.fileSize = 0;
        this.mimeType = '';
        this.order = 0;
    }
    /**
     * @param {?} upload
     * @return {?}
     */
    static BuildFromFileUpload(upload) {
        return build(File, {
            fileBinary: upload.src.replace(File.GetSrcPrefix(upload.type), ''),
            fileExtension: upload.extension,
            fileName: upload.name,
            fileSize: upload.size,
            mimeType: upload.type,
            order: upload.order
        });
    }
    /**
     * @param {?} img
     * @param {?=} defaultSrc
     * @return {?}
     */
    static GetImageBinarySrc(img, defaultSrc = '') {
        if (Array.isArray(img)) {
            if (img.length > 0) {
                return `data:${img[0].mimeType};base64,${img[0].fileBinary}`;
            }
            else {
                return defaultSrc;
            }
        }
        return img && img.mimeType && img.fileBinary ? `data:${img.mimeType};base64,${img.fileBinary}` : defaultSrc;
    }
    /**
     * @param {?} mimeType
     * @return {?}
     */
    static GetSrcPrefix(mimeType) {
        return `data:${mimeType};base64,`;
    }
    /**
     * @return {?}
     */
    get src() {
        return File.GetImageBinarySrc(this);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class Permutation {
    /**
     * @param {?} order
     */
    constructor(order) {
        this.order = order;
        this._timestamp = new Date();
    }
    /**
     * @return {?}
     */
    get ranks() {
        return this.order.sort((a, b) => a.order - b.order)
            .map((x, index) => Object.assign(/** @type {?} */ ({}), x, { rank: index + 1 }));
    }
    /**
     * @return {?}
     */
    get timestamp() {
        return this._timestamp;
    }
}
/**
 * @template T
 */
class OrderedItem {
    /**
     * @param {?} item
     */
    constructor(item) {
        this.item = item;
    }
}
/**
 * @template T
 */
class Ordering {
    /**
     * @param {?} _items
     * @param {?} ctor
     * @param {?} orderKey
     * @param {?=} idKey
     */
    constructor(_items, ctor, orderKey, idKey = 'id') {
        this._items = _items;
        this.ctor = ctor;
        this.orderKey = orderKey;
        this.idKey = idKey;
        this._history = [];
    }
    /**
     * @return {?}
     */
    get count() {
        return this.items.length;
    }
    /**
     * @return {?}
     */
    get history() {
        return this._history;
    }
    /**
     * @return {?}
     */
    get instance() {
        return new this.ctor();
    }
    /**
     * @return {?}
     */
    get items() {
        return this._items.sort((a, b) => this.getItemOrder(a) - this.getItemOrder(b));
    }
    /**
     * @return {?}
     */
    get maxIndex() {
        return this.count === 0 ? 0 : Math.max(...this.order.map(x => x.order));
    }
    /**
     * @return {?}
     */
    get order() {
        return this.permutation.ranks;
    }
    /**
     * @return {?}
     */
    get permutation() {
        return new Permutation(this.items.map(item => /** @type {?} */ ({
            id: this.getItemId(item),
            order: this.getItemOrder(item)
        })));
    }
    /**
     * @return {?}
     */
    get nextPosition() {
        return this.maxIndex + 1;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    addItem(item) {
        return this.addItemAtPosition(item, this.nextPosition);
    }
    /**
     * @param {?} item
     * @param {?} pos
     * @return {?}
     */
    addItemAtPosition(item, pos) {
        const /** @type {?} */ newItemId = this.getItemId(item);
        return [...this.items, build(this.ctor, item, { order: pos })]
            .map(x => {
            const /** @type {?} */ order = this.getItemOrder(x);
            const /** @type {?} */ id = this.getItemId(x);
            return (order <= pos || id === newItemId) ? x : build(this.ctor, x, { order: order + 1 });
        });
    }
    /**
     * @param {?=} items
     * @return {?}
     */
    archive(items) {
        const /** @type {?} */ permutation = items ? this.getPermutation(items) : this.permutation;
        this._history = [...this._history, permutation];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    getItemId(item) {
        return item[this.idKey];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    getItemOrder(item) {
        return item[this.orderKey];
    }
    /**
     * @param {?} items
     * @return {?}
     */
    getPermutation(items) {
        return new Permutation(items.map(item => /** @type {?} */ ({
            id: this.getItemId(item),
            order: this.getItemOrder(item)
        })));
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    move(item, to) {
        const /** @type {?} */ from$$1 = this.getItemOrder(item);
        const /** @type {?} */ itemId = this.getItemId(item);
        if (to === from$$1) {
            return [...this.items];
        }
        else if (to < from$$1) {
            return this.items.map(x => {
                const /** @type {?} */ order = this.getItemOrder(x);
                const /** @type {?} */ id = this.getItemId(x);
                return id === itemId ? build(this.ctor, x, { order: to })
                    : (order < to || order > from$$1) ? x : build(this.ctor, x, { order: order + 1 });
            });
        }
        else {
            // to > from
            return this.items.map(x => {
                const /** @type {?} */ order = this.getItemOrder(x);
                const /** @type {?} */ id = this.getItemId(x);
                return id === itemId ? build(this.ctor, x, { order: to })
                    : (order < from$$1 || order > to) ? x : build(this.ctor, x, { order: order - 1 });
            });
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    moveDown(item) {
        return this.move(item, this.getItemOrder(item) + 1);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    moveUp(item) {
        return this.move(item, this.getItemOrder(item) - 1);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    removeItem(item) {
        return this.removeItemAtPosition(this.getItemOrder(item));
    }
    /**
     * @param {?} pos
     * @return {?}
     */
    removeItemAtPosition(pos) {
        return this.items.filter(item => this.getItemOrder(item) !== pos)
            .map(x => {
            const /** @type {?} */ order = this.getItemOrder(x);
            return order < pos ? x : build(this.ctor, x, { order: order - 1 });
        });
    }
    /**
     * @param {?} items
     * @return {?}
     */
    updateItems(items) {
        this.archive();
        this._items = items;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ FILE_UPLOAD_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => FileUploadComponent),
    multi: true
};
class FileUploadComponent {
    /**
     * @param {?} ref
     */
    constructor(ref) {
        this.ref = ref;
        this.id = `files-${guid()}`;
        this.multiple = false;
        this.ordered = true;
        this.preview = true;
        this.upload = new EventEmitter();
        this.changes$ = new BehaviorSubject(new FileUpload());
        this.ordering = new Ordering([], FileUpload, 'order', 'name');
    }
    /**
     * @return {?}
     */
    get activeFile() {
        return this.hasUploads ? this.uploads[0] : new FileUpload();
    }
    /**
     * @return {?}
     */
    get hasUploads() {
        return this.uploads.length > 0;
    }
    /**
     * @return {?}
     */
    get showMultiple() {
        return this.preview && this.multiple;
    }
    /**
     * @return {?}
     */
    get uploads() {
        return this.ordering.items.filter(upload => upload.name !== '');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set uploads(value) {
        this.ordering.updateItems(value.filter(upload => upload.name !== ''));
        this.onChange(this.uploads);
    }
    /**
     * @return {?}
     */
    get orderedUploads() {
        return this.uploads;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.changes$.subscribe(upload => {
            this.onUpload(upload);
        });
    }
    /**
     * @param {?} f
     * @return {?}
     */
    add(f) {
        if (!this.multiple && this.hasUploads) {
            this.remove();
        }
        this.uploads = this.ordering.addItem(f);
    }
    /**
     * @return {?}
     */
    emit() {
        if (this.value.length > 0) {
            if (this.multiple) {
                this.upload.emit(this.value);
            }
            else {
                this.upload.emit(this.value[0]);
            }
        }
    }
    /**
     * @param {?} f
     * @return {?}
     */
    moveUp(f) {
        this.uploads = this.ordering.moveUp(f);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    moveDown(f) {
        this.uploads = this.ordering.moveDown(f);
    }
    /**
     * @param {?=} f
     * @return {?}
     */
    remove(f) {
        const /** @type {?} */ removeFile = f || this.activeFile;
        this.uploads = this.ordering.removeItem(removeFile);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    update(f) {
        const /** @type {?} */ index = this.uploads.findIndex(item => item['name'] === f.name);
        if (index === -1) {
            this.add(f);
        }
        else {
            this.uploads = this.uploads.map((x, i) => i === index ? build(FileUpload, f, { order: x.order }) : x);
            this.ref.detectChanges();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
        this.uploadAll(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
        if (!equals(this.value, value)) {
            this.value = value;
            if (value.every(x => x.readyState === 'DONE')) {
                this.emit();
            }
            if (this.onModelChange) {
                this.onModelChange(value);
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onInputChange(e) {
        const /** @type {?} */ input = event.target;
        const /** @type {?} */ files = input['files'];
        if (files && files.length > 0) {
            for (let /** @type {?} */ i = 0; i < files.length; i++) {
                this.setupReader(files[i]);
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onBlur(value) {
        this.focused = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onFocus(value) {
        this.focused = value;
        this.onTouch();
    }
    /**
     * @param {?} upload
     * @return {?}
     */
    onUpload(upload) {
        const /** @type {?} */ f = build(FileUpload, upload);
        this.update(f);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    setupReader(file) {
        const /** @type {?} */ reader = new FileReader();
        const /** @type {?} */ changes$ = this.changes$;
        const /** @type {?} */ upload = build(FileUpload, {
            lastModified: file['lastModified'],
            lastModifiedDate: file['lastModifiedDate'],
            name: file['name'],
            size: file['size'],
            type: file['type'],
            webkitRelativePath: file['webkitRelativePath']
        });
        reader.onload = function (e) {
            const /** @type {?} */ src = reader.result;
            const /** @type {?} */ readyState = FileUpload.GetReadyState(reader);
            changes$.next(Object.assign(upload, { src, readyState }));
        };
        reader.readAsDataURL(file);
        this.onUpload(build(FileUpload, upload, { readyState: FileUpload.GetReadyState(reader) }));
    }
    /**
     * @param {?} uploads
     * @return {?}
     */
    uploadAll(uploads) {
        uploads.forEach(upload => {
            this.onUpload(upload);
        });
    }
}
FileUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-file-upload',
                template: `<div class="file-upload">
  <div class="box" fxLayout="row" fxLayoutAlign="center end">
    <p id="dragdrop-message" *ngIf="showMultiple">
      <strong>Choose files</strong>
      <span class="dragndrop"> or drag them here</span>.
    </p>
    <input id="file-upload" *ngIf="showMultiple" type="file" (change)="onInputChange($event)" [id]="id" multiple/>
    <p id="dragdrop-message" *ngIf="!multiple">
      <strong>Choose a file</strong>
      <span class="dragndrop"> or drag it here</span>.
    </p>
    <input id="file-upload" *ngIf="!multiple" type="file" (change)="onInputChange($event)" [id]="id" />
    <label [for]="id" class="custom-file-upload">
      <figure>
        <mat-icon>cloud_upload</mat-icon>
      </figure>
    </label>
  </div>
  <iu-uploads *ngIf="multiple" [uploads]="uploads" [ordered]="ordered" (moveUp)="moveUp($event)" (moveDown)="moveDown($event)"
    (remove)="remove($event)"></iu-uploads>
  <iu-upload *ngIf="preview && !multiple && hasUploads" [upload]="activeFile" [height]="200" (remove)="remove()"></iu-upload>
</div>
`,
                styles: [`.file-upload{margin:10px;padding:10px}.file-upload input[type=file]{width:.1px;height:.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.file-upload .box{padding:100px 20px;margin:10px;display:flex;outline:-webkit-focus-ring-color auto 5px;outline-offset:-10px;position:relative}.file-upload .box #dragdrop-message{position:absolute;top:60px;max-width:80%;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;display:inline-block;overflow:hidden;font-size:24px}.file-upload .box #dragdrop-message span{display:inline}.file-upload .custom-file-upload{box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12);max-width:80%;font-size:20px;font-weight:700;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;display:inline-block;overflow:hidden;padding:10px 20px;margin-top:50px}.file-upload .custom-file-upload figure{width:50px;height:70px;display:flex;position:relative;padding:30px;margin:0 auto 10px}.file-upload .custom-file-upload figure mat-icon{font-size:50px;height:50px;width:50px}.file-upload .custom-file-upload figure::after,.file-upload .custom-file-upload figure::before{width:0;height:0;content:'';position:absolute;top:0;right:0}.file-upload .custom-file-upload figure::before{border-left:20px solid transparent}.file-upload .custom-file-upload figure::after{border-right:20px solid transparent}`],
                providers: [FILE_UPLOAD_ACCESSOR],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
FileUploadComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
FileUploadComponent.propDecorators = {
    id: [{ type: Input }],
    multiple: [{ type: Input }],
    ordered: [{ type: Input }],
    preview: [{ type: Input }],
    upload: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FilePreviewComponent {
    constructor() {
        this.file = new FileUpload();
        this.ordered = true;
        this.first = false;
        this.last = false;
        this.moveUp = new EventEmitter();
        this.moveDown = new EventEmitter();
        this.remove = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get cursorStyle() {
        return this.ordered ? 'move' : 'default';
    }
    /**
     * @return {?}
     */
    get graphic() {
        if (this.file.loading) {
            return 'cloud_upload';
        }
        else if (this.file.isImage) {
            return 'image';
        }
        else {
            switch (this.file.extension) {
                case 'pdf':
                    return 'picture_as_pdf';
                default:
                    return 'cloud_done';
            }
        }
    }
    /**
     * @return {?}
     */
    get showImage() {
        return this.graphic === 'image';
    }
    /**
     * @return {?}
     */
    get showUpArrow() {
        return this.ordered && !this.first;
    }
    /**
     * @return {?}
     */
    get showDownArrow() {
        return this.ordered && !this.last;
    }
    /**
     * @return {?}
     */
    onMoveUp() {
        this.moveUp.emit(this.file);
    }
    /**
     * @return {?}
     */
    onMoveDown() {
        this.moveDown.emit(this.file);
    }
    /**
     * @return {?}
     */
    onRemove() {
        this.remove.emit(this.file);
    }
}
FilePreviewComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-file-preview',
                template: `<mat-card class="file-preview" [style.cursor]="cursorStyle">
  <div class="graphic">
    <img *ngIf="showImage" [src]="file.src" [style.height]="height" [style.width]="width">
    <mat-icon *ngIf="!showImage" class="icon-graphic">{{ graphic }}</mat-icon>
  </div>
  <mat-progress-bar mode="indeterminate" *ngIf="file.loading"></mat-progress-bar>
  <div class="file-info">
    <span class="file-name">{{ file.name }}</span>
  </div>
  <mat-icon *ngIf="showUpArrow" class="up-arrow" (click)="onMoveUp()">keyboard_arrow_up</mat-icon>
  <mat-icon *ngIf="showDownArrow" class="down-arrow" (click)="onMoveDown()">keyboard_arrow_down</mat-icon>
  <mat-icon class="remove-upload" (click)="onRemove()">cancel</mat-icon>
</mat-card>
`,
                styles: [`.file-preview{height:80px;margin:2px 0;position:relative}.mat-card{padding:0}.file-preview img{max-height:72px}.graphic{position:absolute;left:50px;height:72px;max-width:200px;text-align:center;padding-left:20px;overflow:hidden}.icon-graphic{font-size:72px;height:72px;width:72px}.mat-progress-bar{position:absolute;left:0;top:73px}.file-info{position:absolute;left:250px;height:72px;max-width:300px;text-align:center}.file-name{margin:18px 6px;display:inline-block;line-height:36px;font-size:16px;height:36px;font-weight:700;color:#000}.arrow,.down-arrow,.up-arrow{cursor:pointer}.up-arrow{position:absolute;left:6px;top:0;font-size:36px;height:36px;width:36px;font-weight:700}.down-arrow{position:absolute;left:6px;top:36px;font-size:36px;height:36px;width:36px;font-weight:700}.remove-upload{cursor:pointer;position:absolute;right:10px;top:20px;font-size:40px;height:40px;width:40px}.down-arrow:hover,.up-arrow:hover{color:#fff}`]
            },] },
];
/** @nocollapse */
FilePreviewComponent.ctorParameters = () => [];
FilePreviewComponent.propDecorators = {
    file: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    ordered: [{ type: Input }],
    first: [{ type: Input }],
    last: [{ type: Input }],
    moveUp: [{ type: Output }],
    moveDown: [{ type: Output }],
    remove: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class UploadComponent {
    constructor() {
        this.upload = new FileUpload();
        this.height = 200;
        this.width = 600;
        this.remove = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get graphic() {
        if (this.upload.loading) {
            return 'cloud_upload';
        }
        else if (this.upload.isImage) {
            return 'image';
        }
        else {
            switch (this.upload.extension) {
                case 'pdf':
                    return 'picture_as_pdf';
                default:
                    return 'cloud_done';
            }
        }
    }
    /**
     * @return {?}
     */
    get showImage() {
        return this.graphic === 'image';
    }
    /**
     * @return {?}
     */
    onRemove() {
        this.remove.emit(this.upload);
    }
}
UploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-upload',
                template: `<div class="upload" [style.height]="img?.style?.height">
  <div class="graphic" #img>
    <img *ngIf="showImage" [src]="upload.src" [style.max-height.px]="height" [style.max-width.px]="width">
    <mat-icon *ngIf="!showImage" class="icon-graphic" [style.max-height.px]="height" [style.max-width.px]="width">{{ graphic }}</mat-icon>
    <mat-icon *ngIf="!upload.loading" class="remove-upload" (click)="onRemove()">cancel</mat-icon>
  </div>
  <mat-spinner mode="indeterminate" *ngIf="upload.loading"></mat-spinner>
  <div class="file-info" *ngIf="!upload.loading">
    <span class="file-name">{{ upload.name }}</span>
  </div>
</div>
`,
                styles: [`.upload{max-height:420px;max-width:600px;margin:10px 20px;position:relative;display:flex}.upload img{max-height:400px}.graphic{padding:0!important;float:left;margin:10px;position:relative}.icon-graphic{font-size:72px;height:72px;width:72px}.mat-progress-bar{position:absolute;left:0;top:73px}.file-info{float:right}.file-name{margin:18px 6px;display:inline-block;line-height:36px;font-size:20px;height:36px;font-weight:700;color:#000}.remove-upload{color:red;cursor:pointer;position:absolute;right:-20px;top:-20px;font-size:40px;height:40px;width:40px}`]
            },] },
];
/** @nocollapse */
UploadComponent.ctorParameters = () => [];
UploadComponent.propDecorators = {
    upload: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    remove: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class UploadsComponent {
    constructor() {
        this.uploads = [];
        this.ordered = true;
        this.moveUp = new EventEmitter();
        this.moveDown = new EventEmitter();
        this.remove = new EventEmitter();
    }
    /**
     * @param {?} f
     * @return {?}
     */
    onMoveUp(f) {
        this.moveUp.emit(f);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    onMoveDown(f) {
        this.moveDown.emit(f);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    onRemove(f) {
        this.remove.emit(f);
    }
}
UploadsComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-uploads',
                template: `<div class="uploads" [style.height]="height" [style.width]="width">
  <iu-file-preview *ngFor="let upload of uploads; let first = first; let last = last;" [file]="upload" [first]="first" [last]="last"
    [ordered]="ordered" (moveUp)="onMoveUp($event)" (moveDown)="onMoveDown($event)" (remove)="onRemove($event)"></iu-file-preview>
</div>
`,
                styles: [`.uploads{max-height:420px;max-width:600px;overflow-y:scroll;margin:10px 20px}.uploads::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);border-radius:10px;background-color:#424242}.uploads::-webkit-scrollbar{width:12px;background-color:#424242}.uploads::-webkit-scrollbar-thumb{border-radius:10px;-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3)}.uploads .dragging{background-color:#424242}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
UploadsComponent.ctorParameters = () => [];
UploadsComponent.propDecorators = {
    uploads: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    ordered: [{ type: Input }],
    moveUp: [{ type: Output }],
    moveDown: [{ type: Output }],
    remove: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FileUploadModule {
}
FileUploadModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    SharedModule,
                    MatCardModule,
                    MatIconModule,
                    MatProgressBarModule,
                    MatProgressSpinnerModule,
                ],
                declarations: [
                    FileUploadComponent,
                    FilePreviewComponent,
                    UploadComponent,
                    UploadsComponent,
                ],
                exports: [
                    FileUploadComponent,
                    FilePreviewComponent,
                    UploadComponent,
                    UploadsComponent,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class Collection {
    /**
     * @param {?=} ctor
     */
    constructor(ctor) {
        this.activeId = 0;
        this.metadata = {};
        this._items = {};
        if (ctor) {
            this.ctor = ctor;
        }
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} key
     * @param {?} item
     * @return {?}
     */
    static AddItem(state$$1, key, item) {
        const /** @type {?} */ newState = {};
        Object.keys(state$$1)
            .forEach(k => {
            newState[k] = state$$1[k];
        });
        newState[key] = item;
        return newState;
    }
    /**
     * @template T
     * @param {?} items
     * @param {?=} findByKey
     * @return {?}
     */
    static BuildCollection(items, findByKey = 'id') {
        const /** @type {?} */ dictionary = Collection.BuildItems(items, findByKey);
        return Object.assign(new Collection(), { items: dictionary });
    }
    /**
     * @template T
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    static BuildDictionaryFromArray(value, key = 'id') {
        const /** @type {?} */ obj = {};
        value.forEach(item => {
            obj[item[key]] = item;
        });
        return obj;
    }
    /**
     * @template T
     * @param {?} items
     * @param {?=} findByKey
     * @return {?}
     */
    static BuildFromArray(items, findByKey = 'id') {
        const /** @type {?} */ dictionary = Collection.BuildItems(items, findByKey);
        return Object.assign(new Collection(), { items: dictionary });
    }
    /**
     * @template T
     * @param {?} items
     * @param {?=} findByKey
     * @return {?}
     */
    static BuildItems(items, findByKey = 'id') {
        const /** @type {?} */ dictionary = {};
        items.forEach(item => {
            const /** @type {?} */ key = item[findByKey];
            dictionary[key] = item;
        });
        return dictionary;
    }
    /**
     * @template T
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    static Filter(item, path) {
        return Array.isArray(item['matches']) && inArray(item['matches'], path);
    }
    /**
     * @template T
     * @param {?} item
     * @param {?} paths
     * @return {?}
     */
    static FilterAnd(item, paths) {
        return Array.isArray(item['matches']) && paths.every(path => inArray(item['matches'], path));
    }
    /**
     * @template T
     * @param {?} item
     * @param {?} paths
     * @return {?}
     */
    static FilterOr(item, paths) {
        return Array.isArray(item['matches']) && paths.some(path => inArray(item['matches'], path));
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} key
     * @return {?}
     */
    static RemoveItem(state$$1, key) {
        const /** @type {?} */ newState = {};
        Object.keys(state$$1)
            .filter(k => k !== key)
            .forEach(k => {
            newState[k] = state$$1[k];
        });
        return newState;
    }
    /**
     * @return {?}
     */
    get active() {
        const /** @type {?} */ item = this.items[this.activeId] || /** @type {?} */ ({});
        return this.ctor ? build(this.ctor, item) : item;
    }
    /**
     * @return {?}
     */
    get ctor() {
        return this._ctor;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ctor(value) {
        this._ctor = value;
    }
    /**
     * @return {?}
     */
    get count() {
        return this.toArray().length;
    }
    /**
     * @return {?}
     */
    get defaultItem() {
        return this.ctor ? new this.ctor() : /** @type {?} */ ({});
    }
    /**
     * @return {?}
     */
    get empty() {
        return this.toArray().length === 0;
    }
    /**
     * @return {?}
     */
    get instance() {
        const /** @type {?} */ activeId = this.activeId;
        const /** @type {?} */ ctor = this.ctor;
        const /** @type {?} */ lastUpdated = this.lastUpdated;
        const /** @type {?} */ metadata = this.metadata;
        // const collection = this.constructor();
        const /** @type {?} */ collection = new Collection();
        collection.activeId = activeId;
        collection.ctor = ctor;
        collection.lastUpdated = lastUpdated;
        collection.metadata = metadata;
        return collection;
    }
    /**
     * @return {?}
     */
    get items() {
        return this._items;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set items(value) {
        this._items = value;
        this.lastUpdated = new Date();
    }
    /**
     * @return {?}
     */
    get keys() {
        return Object.keys(this.items);
    }
    /**
     * @return {?}
     */
    get asArray() {
        return this.toArray();
    }
    /**
     * @return {?}
     */
    get itemsArray() {
        return this.asArray;
    }
    /**
     * @return {?}
     */
    toArray() {
        return Object.keys(this.items).map((key) => /** @type {?} */ (this.items[key]));
    }
    /**
     * @param {?} id
     * @param {?=} key
     * @return {?}
     */
    activate(id, key = 'id') {
        const /** @type {?} */ items = this.items[id] ? this.copyItems() : Object.assign(this.copyItems(), { [id]: { [key]: id } });
        return Object.assign(new Collection(), this, { activeId: id, items });
    }
    /**
     * @param {?} item
     * @param {?=} key
     * @return {?}
     */
    addItem(item, key) {
        const /** @type {?} */ items = this.copyItems();
        return Object.assign(this.constructor(), this, {
            items: Object.assign(items, { [key]: item })
        });
    }
    /**
     * @param {?} items
     * @param {?=} key
     * @return {?}
     */
    addItems(items, key = 'id') {
        const /** @type {?} */ newItems = {};
        this.toArray().forEach(item => {
            newItems[item[key]] = item;
        });
        items.forEach(item => {
            const /** @type {?} */ existingItem = newItems[item[key]] ? newItems[item[key]] : /** @type {?} */ ({});
            const /** @type {?} */ existingMatches = existingItem['matches'] || [];
            const /** @type {?} */ newMatches = item['matches'] || [];
            const /** @type {?} */ matches = arrayUnion(existingMatches, newMatches);
            const /** @type {?} */ newItem = this.buildItem(item, { matches: matches });
            newItems[item[key]] = this.buildItem(existingItem, newItem);
        });
        this.items = newItems;
        return Object.assign(new Collection(), this);
    }
    /**
     * @param {?} items
     * @param {?=} ctor
     * @return {?}
     */
    build(items, ctor) {
        return ctor ? build(ctor, { items })
            : /** @type {?} */ (Object.assign(this.instance, { items }));
    }
    /**
     * @param {?} existingItem
     * @param {?} newItem
     * @param {?=} ctor
     * @return {?}
     */
    buildItem(existingItem, newItem, ctor) {
        const /** @type {?} */ existing = existingItem || {};
        const /** @type {?} */ item = ctor ? build(ctor, existing, newItem)
            : this.ctor ? build(this.ctor, existing, newItem)
                : Object.assign({}, existing, newItem);
        return item;
    }
    /**
     * @param {?} items
     * @param {?=} ctor
     * @return {?}
     */
    buildItems(items, ctor) {
        const /** @type {?} */ factory = ctor ? ctor : this.ctor;
        return items.map(x => factory ? build(factory, x) : Object.assign(/** @type {?} */ ({}), x));
    }
    /**
     * @return {?}
     */
    copyItems() {
        return Object.keys(this.items)
            .reduce((acc, key) => {
            acc[key] = this.get(key);
            return acc;
        }, {});
    }
    /**
     * @param {?} key
     * @return {?}
     */
    delete(key) {
        return this.removeAt(key);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    filter(f) {
        const /** @type {?} */ items = Collection.BuildDictionaryFromArray(this.toArray().filter(f));
        return Object.assign(new Collection(), this, { items });
    }
    /**
     * @param {?} f
     * @return {?}
     */
    filterBy(f) {
        return this.filterItems(f);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    filterItems(f) {
        return this.toArray().filter(f);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    findBy(f) {
        return this.asArray.find(f) || this.defaultItem;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    get(id) {
        const /** @type {?} */ existing = this.items[id];
        return this.ctor ? build(this.ctor, existing)
            : Object.assign(/** @type {?} */ ({}), existing);
    }
    /**
     * @param {?} f
     * @return {?}
     */
    map(f) {
        const /** @type {?} */ items = Collection.BuildDictionaryFromArray(this.toArray().map(f));
        return Object.assign(new Collection(), this, { items });
    }
    /**
     * @param {?} path
     * @return {?}
     */
    query(path) {
        return this.toArray().filter(item => Collection.Filter(item, path));
    }
    /**
     * @param {?} paths
     * @return {?}
     */
    queryAnd(paths) {
        return this.toArray().filter(item => Collection.FilterAnd(item, paths));
    }
    /**
     * @param {?} paths
     * @return {?}
     */
    queryOr(paths) {
        return this.toArray().filter(item => Collection.FilterOr(item, paths));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeAt(key) {
        const /** @type {?} */ keys = Object.keys(this.items);
        const /** @type {?} */ items = Collection.BuildDictionaryFromArray(keys.filter(x => x.toString() !== key.toString()).map(y => this.items[y]));
        return Object.assign(new Collection(), this, { items });
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeItem(key) {
        const /** @type {?} */ collection = this.constructor();
        const /** @type {?} */ keys = Object.keys(this.items).filter(k => k !== key);
        keys.forEach((k) => {
            collection.items[k] = /** @type {?} */ (Object.assign({}, this.items[k]));
        });
        return collection;
    }
    /**
     * @param {?} filter
     * @param {?=} key
     * @return {?}
     */
    removeItems(filter$$1, key = 'id') {
        const /** @type {?} */ keys = this.toArray().filter(filter$$1).map(x => x[key]);
        this.removeKeys(keys);
    }
    /**
     * @param {?} keys
     * @return {?}
     */
    removeKeys(keys) {
        keys.forEach((key) => {
            this.removeItem(key);
        });
    }
    /**
     * @param {?} itemsArray
     * @return {?}
     */
    replace(itemsArray) {
        const /** @type {?} */ items = Collection.BuildDictionaryFromArray(this.buildItems(itemsArray));
        return Object.assign(new Collection(), this, { items });
    }
    /**
     * @param {?} items
     * @param {?=} filter
     * @return {?}
     */
    replaceItems(items, filter$$1) {
        if (filter$$1) {
            const /** @type {?} */ f = (x) => !filter$$1(x);
            return this.replaceItems([...this.filterItems(f), ...items]);
        }
        return Object.assign(new Collection(), this, { items });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValue(value) {
        return Object.assign(new Collection(), this, value);
    }
    /**
     * @param {?} value
     * @param {?=} ctor
     * @param {?=} key
     * @return {?}
     */
    update(value, ctor, key = 'id') {
        if (Array.isArray(value)) {
            return this.updateItems(value, ctor, key);
        }
        return this.updateItem(value, value[key], ctor);
    }
    /**
     * @param {?} item
     * @param {?} key
     * @param {?=} ctor
     * @return {?}
     */
    updateItem(item, key, ctor) {
        const /** @type {?} */ items = this.copyItems();
        const /** @type {?} */ updatedItem = this.buildItem(items[key], item, ctor);
        return this.build(Object.assign(items, { [key]: updatedItem }));
    }
    /**
     * @param {?} items
     * @param {?=} ctor
     * @param {?=} key
     * @return {?}
     */
    updateItems(items, ctor, key = 'id') {
        const /** @type {?} */ existingItems = this.copyItems();
        const /** @type {?} */ updatedItems = items.reduce((acc, item) => {
            const /** @type {?} */ existingItem = acc[item[key]];
            acc[item[key]] = this.buildItem(existingItem, item, ctor);
            return acc;
        }, existingItems);
        return this.build(updatedItems);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class Grid {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
        this.query = new QueryModel();
        this.style = new StyleModel();
        this.filterable = true;
        this.sortable = { mode: 'multiple' };
    }
    /**
     * @param {?} acc
     * @param {?} operator
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    static ApplyFilter(acc, operator, field, value) {
        switch (operator) {
            case 'contains':
                return acc.filter(row => Grid.Contains(row[field], value));
            case 'gte':
                return acc.filter(row => Grid.MatchDate(row[field], value));
        }
    }
    /**
     * @template T
     * @param {?} items
     * @return {?}
     */
    static Build(items) {
        const /** @type {?} */ data = Object.assign(new Collection(), { items });
        return new Grid(data);
    }
    /**
     * @param {?} field
     * @param {?=} dir
     * @return {?}
     */
    static BuildSort(field, dir = 'asc') {
        return /** @type {?} */ ({ dir, field });
    }
    /**
     * @param {?} str
     * @param {?} substr
     * @return {?}
     */
    static Contains(str, substr) {
        if (typeof (str) === 'string' && typeof (substr) === 'string') {
            return str.toLowerCase().includes(substr.toLowerCase());
        }
        return true;
    }
    /**
     * @param {?} rows
     * @param {?} filters
     * @return {?}
     */
    static FilterRows(rows, filters) {
        return filters.reduce((acc, filter$$1) => {
            const /** @type {?} */ operator = filter$$1['operator'];
            const /** @type {?} */ field = filter$$1['field'];
            const /** @type {?} */ value = filter$$1['value'];
            return Grid.ApplyFilter(rows, operator, field, value);
        }, rows);
    }
    /**
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    static MatchDate(date1, date2) {
        return DateHelper.IsSameDay(date1, date2);
    }
    /**
     * @param {?} rows
     * @param {?} skip
     * @param {?} take
     * @return {?}
     */
    static PageRows(rows, skip$$1, take$$1) {
        return rows.filter((row, index) => index >= skip$$1 && index < skip$$1 + take$$1);
    }
    /**
     * @param {?} rows
     * @param {?} sort
     * @return {?}
     */
    static SortRows(rows, sort) {
        return orderBy(rows, sort);
    }
    /**
     * @param {?} grid
     * @return {?}
     */
    update(grid) {
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class GridColumn {
    /**
     * @param {?} name
     * @param {?} label
     */
    constructor(name, label) {
        this.name = name;
        this.label = label;
        this.styleModel = new StyleModel();
        this.editable = true;
        this.editor = 'text';
        this.filter = 'text';
        this.filterable = true;
        this.hidden = false;
        this.locked = false;
        this.sortable = true;
        this.metadata = { name, label };
        this.title = label;
    }
    /**
     * @return {?}
     */
    get class() {
        return this._class;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set class(value) {
        this._class = value;
    }
    /**
     * @return {?}
     */
    get field() {
        return this._field ? this._field : this.metadata.name;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set field(value) {
        this._field = value;
    }
    /**
     * @return {?}
     */
    get title() {
        return this._title ? this._title : this.metadata.label;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        this._title = value;
    }
    /**
     * @return {?}
     */
    get width() {
        return this._width;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set width(value) {
        this._width = value;
    }
    /**
     * @param {?} col
     * @return {?}
     */
    update(col) {
        this.class = col.class;
        this.editable = col.editable;
        this.editor = col.editor;
        this.field = col.field;
        this.filter = col.filter;
        this.filterable = col.filterable;
        this.footerClass = col.footerClass;
        this.footerStyle = col.footerStyle;
        this.format = col.format;
        this.headerClass = col.headerClass;
        this.headerStyle = col.headerStyle;
        this.hidden = col.hidden;
        this.locked = col.locked;
        this.media = col.media;
        this.sortable = col.sortable;
        this.style = col.style;
        this.title = col.title;
        this.width = col.width;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GridColumnComponent {
    /**
     * @param {?} view
     */
    constructor(view) {
        this.view = view;
        this.editable = true;
        this.field = '';
        this.filter = 'text';
        this.filterable = true;
        this.hidden = false;
        this.locked = false;
        this.sortable = true;
    }
    /**
     * @return {?}
     */
    get colField() {
        return this.model.metadata.name;
    }
    /**
     * @return {?}
     */
    get colTitle() {
        return this.model.title;
    }
    /**
     * @return {?}
     */
    get colWidth() {
        return this.model.width;
    }
}
GridColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-grid-column',
                template: `<kendo-grid-column [field]="colField" [title]="colTitle" [width]="colWidth" #kendoGridColumn>
  <span #content>
    <ng-content></ng-content>
  </span>
</kendo-grid-column>
`,
                styles: [``]
            },] },
];
/** @nocollapse */
GridColumnComponent.ctorParameters = () => [
    { type: ViewContainerRef }
];
GridColumnComponent.propDecorators = {
    model: [{ type: Input }],
    templateRef: [{ type: Input }],
    class: [{ type: Input }],
    editable: [{ type: Input }],
    editor: [{ type: Input }],
    field: [{ type: Input }],
    filter: [{ type: Input }],
    filterable: [{ type: Input }],
    footerClass: [{ type: Input }],
    footerStyle: [{ type: Input }],
    format: [{ type: Input }],
    headerClass: [{ type: Input }],
    headerStyle: [{ type: Input }],
    hidden: [{ type: Input }],
    locked: [{ type: Input }],
    media: [{ type: Input }],
    sortable: [{ type: Input }],
    style: [{ type: Input }],
    title: [{ type: Input }],
    width: [{ type: Input }],
    content: [{ type: ViewChild, args: ['content',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GridComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.advancedFilter = false;
        this.autoCalculateHeight = true;
        this.buttonColor = '#fff';
        this.buttonCount = 5;
        this.buttonClass = 'toolbar-button';
        this.pagerInfo = true;
        this.pagerType = 'numeric';
        this.pageSizes = true;
        this.previousNext = true;
        this.export = false;
        this.fileName = 'export';
        this.filter = { logic: 'and', filters: [] };
        this.filterable = true;
        this.pageSize = 20;
        this.pager = {
            pageSizes: [10, 20, 50, 100]
        };
        this.pdfHeader = '';
        this.skip = 0;
        this.sortable = { mode: 'multiple' };
        this.sort = [];
        this.total = 0;
        this.changes = new EventEmitter();
        this.columns = [];
        this.filtering = true;
    }
    /**
     * The color of the toolbar. Can be primary, accent, or warn.
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set color(value) {
        this._updateColor(value);
    }
    /**
     * @param {?} newColor
     * @return {?}
     */
    _updateColor(newColor) {
        this._setElementColor(this._color, false);
        this._setElementColor(newColor, true);
        this._color = newColor;
    }
    /**
     * @param {?} color
     * @param {?} isAdd
     * @return {?}
     */
    _setElementColor(color, isAdd) {
        if (color != null && color !== '') {
            const /** @type {?} */ element = this._elementRef.nativeElement;
            if (isAdd) {
                this._renderer.addClass(element, `mat-${color}`);
            }
            else {
                this._renderer.removeClass(element, `mat-${color}`);
            }
        }
    }
    /**
     * @return {?}
     */
    get activeRows() {
        return this.pageRows(this.filterRows(this.sortRows(this.rows)));
    }
    /**
     * @return {?}
     */
    get computedRowHeight() {
        return this.rowHeightMax || 32;
    }
    /**
     * @return {?}
     */
    get dynamicHeight() {
        return this.autoCalculateHeight ? (this.activeRows.length === 0 || !this.numericHeight) ?
            null : Math.max(96 + this.headerHeight + this.pagerHeight + this.toolbarHeight, Math.min(this.computedRowHeight * this.activeRows.length + this.headerHeight + this.pagerHeight + this.toolbarHeight, this.numericHeight))
            : this.numericHeight;
    }
    /**
     * @return {?}
     */
    get excelFileName() {
        return `${this.fileName}.xlsx`;
    }
    /**
     * @return {?}
     */
    get filters() {
        return this.filter.filters;
    }
    /**
     * @return {?}
     */
    get gridData() {
        return {
            data: this.activeRows,
            total: this.total ? this.total : this.rows.length
        };
    }
    /**
     * @return {?}
     */
    get headerHeight() {
        return this.filterable ? 66 : 27;
    }
    /**
     * @return {?}
     */
    get numericHeight() {
        return typeof (this.height) === 'string' ? str2int(this.height) : this.height;
    }
    /**
     * @return {?}
     */
    get pagerHeight() {
        return this.pageable ? 46 : 0;
    }
    /**
     * @return {?}
     */
    get pagerSettings() {
        return this.pager;
    }
    /**
     * @return {?}
     */
    get pdfFileName() {
        return `${this.fileName}.pdf`;
    }
    /**
     * @return {?}
     */
    get rows() {
        return this.model.data ? this.model.data.toArray() : [];
    }
    /**
     * @return {?}
     */
    get showFilters() {
        return this.filterable && this.filtering;
    }
    /**
     * @return {?}
     */
    get take() {
        return this.pageSize || 20;
    }
    /**
     * @return {?}
     */
    get toolbarHeight() {
        return this.export ? 53 : 0;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.model.update(this);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.pageable = {
            buttonCount: this.buttonCount,
            info: this.pagerInfo,
            type: this.pagerType,
            pageSizes: this.pageSizes,
            previousNext: this.previousNext
        };
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.contentChildren.forEach(x => {
            this.columns.push(x);
        });
    }
    /**
     * @param {?} state
     * @return {?}
     */
    dataStateChange(state$$1) {
        this.filterChange(state$$1['filter']);
        this.pageChange({ skip: state$$1['skip'], take: state$$1['take'] });
        this.sortChange(state$$1['sort']);
        this.changes.emit(state$$1);
    }
    /**
     * @param {?} component
     * @return {?}
     */
    save(component) {
        const /** @type {?} */ options = component.workbookOptions();
        const /** @type {?} */ rows = options.sheets[0].rows;
        let /** @type {?} */ altIdx = 0;
        rows.forEach((row) => {
            if (row.type === 'data') {
                if (altIdx % 2 !== 0) {
                    row.cells.forEach((cell) => {
                        cell.background = '#aabbcc';
                    });
                }
                altIdx++;
            }
        });
        component.save(options);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    filterChange(e) {
        this.filter = e;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    pageChange(e) {
        this.skip = e.skip;
        this.pageSize = str2int(e.take.toString());
    }
    /**
     * @param {?} sort
     * @return {?}
     */
    sortChange(sort) {
        this.sort = sort;
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    filterRows(rows) {
        return Grid.FilterRows(rows, this.filters);
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    pageRows(rows) {
        return this.pager ? Grid.PageRows(rows, this.skip, this.take) : rows;
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    sortRows(rows) {
        return Grid.SortRows(rows, this.sort);
    }
}
GridComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-grid',
                template: `<mat-card class="grid mat-primary" [class.mat-card]="!export">
  <kendo-grid [data]="gridData" [filter]="filter" [filterable]="showFilters" [groupable]="groupable" [height]="dynamicHeight"
    [pageSize]="pageSize" [pageable]="pagerSettings" [rowHeight]="rowHeight" [scrollable]="scrollable" [selectable]="selectable"
    [skip]="skip" [sortable]="sortable" [group]="group" [sort]="sort" (dataStateChange)="dataStateChange($event)" #kendoGridInstance="kendoGrid">

    <!-- Toolbar Template -->
    <ng-template kendoGridToolbarTemplate *ngIf="export">
      <button mat-raised-button class="toolbar-button pdf-button" kendoGridPDFCommand>
        <mat-icon>picture_as_pdf</mat-icon>Export to PDF</button>
      <button mat-raised-button class="toolbar-button excel-button" (click)="save(excelexport)">
        <mat-icon>import_export</mat-icon>Export To Excel</button>
    </ng-template>

    <!-- Grid Columns -->
    <kendo-grid-column *ngFor="let col of columns" [class]="col.class" [editable]="col.editable" [editor]="col.editor" [field]="col.colField"
      [filter]="col.filter" [filterable]="col.filterable" [footerClass]="col.footerClass" [footerStyle]="col.footerStyle" [format]="col.format"
      [headerClass]="col.headerClass" [headerStyle]="col.headerStyle" [hidden]="col.hidden" [locked]="col.locked" [media]="col.media"
      [sortable]="col.sortable" [style]="col.style" [title]="col.colTitle" [width]="col.width">
      <ng-template *ngIf="col.templateRef" kendoGridCellTemplate let-dataItem>
        <iu-grid-cell [templateRef]="col.templateRef" [dataItem]="dataItem"></iu-grid-cell>
      </ng-template>
    </kendo-grid-column>

    <!-- Export to PDF -->
    <kendo-grid-pdf *ngIf="export" [fileName]="pdfFileName" [allPages]="true" paperSize="A4" [repeatHeaders]="true" [landscape]="true">
      <kendo-grid-pdf-margin top="2cm" left="1cm" right="1cm" bottom="2cm"></kendo-grid-pdf-margin>
      <ng-template kendoGridPDFTemplate let-pageNum="pageNum" let-totalPages="totalPages">
        <div class="page-template">
          <div class="header">
            <div style="float: right">Page {{ pageNum }} of {{ totalPages }}</div>
            {{ pdfHeader }}
          </div>
          <div class="footer">
            Page {{ pageNum }} of {{ totalPages }}
          </div>
        </div>
      </ng-template>
    </kendo-grid-pdf>

    <!-- Export to Excel -->
    <kendo-excelexport [data]="activeRows" [fileName]="excelFileName" [filterable]="true" #excelexport>
      <kendo-excelexport-column *ngFor="let col of columns" [field]="col.colField" [title]="col.colTitle">
      </kendo-excelexport-column>
    </kendo-excelexport>

  </kendo-grid>
</mat-card>
`,
                styles: [`.mat-card.grid{padding:0}.grid .k-grid-header{padding-right:13px}.grid th.k-grid-header:first-child{padding-left:6px}.grid .mat-raised-button{color:#fff}.k-grid-header .k-header>.k-link{font-size:16px;padding:2px 12px}.k-grid td{border:none;padding:6px 12px}.k-widget{border:none}.k-filter-row>th{padding:4px;max-width:190px;border-width:0 0 1px 1px;border-style:solid}.k-input.k-textbox,.k-textbox{height:calc(1em + (4px * 2) + (1px * 2))!important;min-width:80px}.k-filtercell .k-filtercell-wrapper,.k-filtercell>span{padding-right:calc(1.5em + 8px + 2px + 4px)}.k-filtercell .k-dropdown-operator{display:none}.k-picker-wrap.k-state-default{border-bottom-width:1px}.page-template{font-family:"DejaVu Sans",Arial,sans-serif;position:absolute;width:100%;height:100%;top:0;left:0}.page-template .header{position:absolute;top:30px;left:30px;right:30px;border-bottom:1px solid #888;color:#888}.page-template .footer{position:absolute;bottom:30px;left:30px;right:30px;border-top:1px solid #888;text-align:center;color:#888}.toolbar-button{color:#fff;background-image:none;vertical-align:middle}`],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
GridComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
GridComponent.propDecorators = {
    model: [{ type: Input }],
    advancedFilter: [{ type: Input }],
    autoCalculateHeight: [{ type: Input }],
    buttonColor: [{ type: Input }],
    buttonCount: [{ type: Input }],
    buttonClass: [{ type: Input }],
    pagerInfo: [{ type: Input }],
    pagerType: [{ type: Input }],
    pageSizes: [{ type: Input }],
    previousNext: [{ type: Input }],
    detailRowHeight: [{ type: Input }],
    export: [{ type: Input }],
    fileName: [{ type: Input }],
    filter: [{ type: Input }],
    filterable: [{ type: Input }],
    groupable: [{ type: Input }],
    height: [{ type: Input }],
    pageSize: [{ type: Input }],
    pageable: [{ type: Input }],
    pager: [{ type: Input }],
    pdfHeader: [{ type: Input }],
    rowHeight: [{ type: Input }],
    rowHeightMax: [{ type: Input }],
    scrollable: [{ type: Input }],
    selectable: [{ type: Input }],
    skip: [{ type: Input }],
    sortable: [{ type: Input }],
    group: [{ type: Input }],
    rowClass: [{ type: Input }],
    sort: [{ type: Input }],
    total: [{ type: Input }],
    changes: [{ type: Output }],
    grid: [{ type: ViewChild, args: ['kendoGridInstance',] }],
    contentChildren: [{ type: ContentChildren, args: [GridColumnComponent,] }],
    color: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GridCellComponent {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.viewContainerRef.createEmbeddedView(this.templateRef, this.dataItem);
    }
}
GridCellComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-grid-cell',
                template: `<div></div>`,
                styles: [``]
            },] },
];
/** @nocollapse */
GridCellComponent.ctorParameters = () => [
    { type: ViewContainerRef }
];
GridCellComponent.propDecorators = {
    dataItem: [{ type: Input }],
    templateRef: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SimpleGridComponent {
    constructor() {
        this.data = [];
        this.export = false;
        this.filterable = false;
        this.fileName = 'export';
        this.height = 600;
        this.pageSize = 30;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set metadata(value) {
        this._metadata = value;
    }
    /**
     * @return {?}
     */
    get metadata() {
        return this._metadata ? this._metadata : (toArray(this.data).length > 0 ? toArray(this.data)[0].metadata : null);
    }
    /**
     * @return {?}
     */
    get columns() {
        return this.metadata ? this.columnKeys.map(key => new GridColumn(key, this.metadata[key].columnLabel)) : [];
    }
    /**
     * @return {?}
     */
    get columnKeys() {
        return this.metadata ? Object.keys(this.metadata).filter(key => this.metadata[key].columnLabel ? true : false) : [];
    }
    /**
     * @return {?}
     */
    get columnLabels() {
        return this.metadata ? this.columnKeys.map(key => this.metadata[key].columnLabel) : [];
    }
    /**
     * @return {?}
     */
    get gridData() {
        return Grid.Build(toArray(this.data));
    }
}
SimpleGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-simple-grid',
                template: `<iu-grid [model]="gridData" [export]="export" [filterable]="filterable" [fileName]="fileName" [pageSize]="pageSize" [height]="height">
  <iu-grid-column *ngFor="let column of columns" [model]="column"></iu-grid-column>
</iu-grid>
`,
                styles: [``]
            },] },
];
/** @nocollapse */
SimpleGridComponent.ctorParameters = () => [];
SimpleGridComponent.propDecorators = {
    data: [{ type: Input }],
    export: [{ type: Input }],
    filterable: [{ type: Input }],
    fileName: [{ type: Input }],
    height: [{ type: Input }],
    pageSize: [{ type: Input }],
    metadata: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GridModule$1 {
}
GridModule$1.decorators = [
    { type: NgModule, args: [{
                imports: [
                    SharedModule,
                    ExcelExportModule,
                    GridModule,
                    PDFModule,
                    MatCardModule,
                    MatIconModule
                ],
                declarations: [
                    GridComponent,
                    GridColumnComponent,
                    SimpleGridComponent,
                    GridCellComponent,
                ],
                exports: [
                    GridModule,
                    GridComponent,
                    GridColumnComponent,
                    SimpleGridComponent,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NotFoundComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
NotFoundComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-not-found',
                template: `<p>
  not-found works!
</p>
`,
                styles: [``]
            },] },
];
/** @nocollapse */
NotFoundComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NotFoundModule {
}
NotFoundModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    SharedModule,
                ],
                declarations: [NotFoundComponent],
                exports: [NotFoundComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class WallpaperComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.images = [];
        this.windowHeight = 0;
        this.windowWidth = 0;
    }
    /**
     * @return {?}
     */
    get canvasHeight() {
        return this.windowWidth * 2;
    }
    /**
     * @return {?}
     */
    get canvasWidth() {
        return this.windowWidth - 100;
    }
    /**
     * @return {?}
     */
    get elementHeight() {
        return this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.style ?
            this.elementRef.nativeElement.style.height : 0;
    }
    /**
     * @return {?}
     */
    get elementHeightPx() {
        return toPx(this.elementHeight);
    }
    /**
     * @return {?}
     */
    get elementWidth() {
        return this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.style ?
            this.elementRef.nativeElement.style.width : 0;
    }
    /**
     * @return {?}
     */
    get elementWidthPx() {
        return toPx(this.elementWidth);
    }
    /**
     * @return {?}
     */
    get maxColumns() {
        return 3;
    }
    /**
     * @return {?}
     */
    get maxRows() {
        return 3;
    }
    /**
     * @return {?}
     */
    get totalColumns() {
        return 12;
    }
    /**
     * @return {?}
     */
    get totalRows() {
        return 24;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
WallpaperComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-wallpaper',
                template: `<div class="wallpaper" [style.height.px]="windowHeight" [style.width.px]="windowWidth">
  <iu-collage [images]="images" [canvasHeight]="canvasHeight" [canvasWidth]="canvasWidth" [totalRows]="totalRows" [totalColumns]="totalColumns"
    [maxRows]="maxRows" [maxColumns]="maxColumns"></iu-collage>
</div>`,
                styles: [`.wallpaper{height:100%;width:100%}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
WallpaperComponent.ctorParameters = () => [
    { type: ElementRef }
];
WallpaperComponent.propDecorators = {
    images: [{ type: Input }],
    windowHeight: [{ type: Input }],
    windowWidth: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class WallpaperModule {
}
WallpaperModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    SharedModule,
                    CollageModule,
                ],
                declarations: [
                    WallpaperComponent,
                ],
                exports: [
                    WallpaperComponent,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ListPipe {
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    transform(value, args) {
        return Array.isArray(value) ? value.reduce((acc, x) => acc ? `${acc}, ${x}` : x, '') : '';
    }
}
ListPipe.decorators = [
    { type: Pipe, args: [{
                name: 'list'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PhoneNumberPipe {
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    transform(value, args) {
        return value.length !== 10 ? value
            : `(${value[0]}${value[1]}${value[2]}) ${value[3]}${value[4]}${value[5]}-${value[6]}${value[7]}${value[8]}${value[9]}`;
    }
}
PhoneNumberPipe.decorators = [
    { type: Pipe, args: [{
                name: 'phone'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TimeAgoPipe {
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    transform(value, args) {
        return DateHelper.TimeAgo(value);
    }
}
TimeAgoPipe.decorators = [
    { type: Pipe, args: [{
                name: 'timeago'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class YesNoPipe {
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    transform(value, args) {
        return value ? 'Yes' : 'No';
    }
}
YesNoPipe.decorators = [
    { type: Pipe, args: [{
                name: 'yesno'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LibraryModule {
}
LibraryModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    SharedModule,
                    AccordionModule,
                    DatepickerModule,
                    DialogModule,
                    FileUploadModule,
                    GridModule$1,
                    NotFoundModule,
                    MatButtonModule,
                    MatCardModule,
                    MatCheckboxModule,
                    MatIconModule$1,
                    MatInputModule,
                    MatProgressBarModule,
                    MatProgressSpinnerModule,
                    MatRadioModule,
                    MatSelectModule,
                    MatTabsModule,
                    MatToolbarModule,
                ],
                declarations: [
                    LibraryComponent,
                    ListPipe,
                    PhoneNumberPipe,
                    TimeAgoPipe,
                    YesNoPipe,
                ],
                exports: [
                    LibraryComponent,
                    SharedModule,
                    AccordionModule,
                    CollageModule,
                    DatepickerModule,
                    DialogModule,
                    FileUploadModule,
                    ListPipe,
                    NotFoundModule,
                    PhoneNumberPipe,
                    TileModule,
                    TimeAgoPipe,
                    WallpaperModule,
                    YesNoPipe,
                    MatButtonModule,
                    MatCardModule,
                    MatCheckboxModule,
                    MatIconModule$1,
                    MatInputModule,
                    MatProgressBarModule,
                    MatProgressSpinnerModule,
                    MatRadioModule,
                    MatSelectModule,
                    MatTabsModule,
                    MatToolbarModule,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AnimationsModule {
}
AnimationsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EditorWindowComponent {
    /**
     * @param {?} data
     * @param {?} dialogRef
     */
    constructor(data, dialogRef) {
        this.data = data;
        this.dialogRef = dialogRef;
        this.actionWidth = '100%';
    }
    /**
     * @return {?}
     */
    get actions() {
        return [
            build(DialogAction, { value: this.data, label: 'Save and Close' }),
        ];
    }
    /**
     * @return {?}
     */
    get dialog() {
        return build(DialogModel, {
            title: this.title,
            actions: this.actions
        });
    }
    /**
     * @return {?}
     */
    get title() {
        return 'Editor';
    }
    /**
     * @return {?}
     */
    close() {
        this.dialogRef.close(this.data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    update(data) {
        this.data = data;
    }
}
EditorWindowComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-editor-window',
                template: `<span id="editor-window">
  <mat-toolbar color="primary" mat-dialog-title>
    <span class="dialog-title">
      {{ title }}
      <button mat-button [mat-dialog-close]="null">
        <mat-icon>close</mat-icon>
      </button>
    </span>
  </mat-toolbar>
  <mat-dialog-content>
    <div id="expanded-editor">
      <iu-editor [value]="data" [expanded]="true" [height]="380" (changes)="update($event)"></iu-editor>
    </div>
  </mat-dialog-content>
  <mat-dialog-actions>
    <button mat-raised-button (click)="close()" [style.width]="actionWidth" color="accent">Save and Close</button>
  </mat-dialog-actions>
</span>
`,
                styles: [`#editor-window #expanded-editor{margin:0;padding:0;height:60vh}#editor-window .mat-toolbar{margin:-24px -24px 0;width:calc(100% + 48px);min-height:32px!important}#editor-window .mat-toolbar .mat-toolbar-row{height:48px}#editor-window .mat-toolbar .dialog-title{position:relative;height:calc(100% - 8px);width:100%;margin-top:8px}#editor-window .mat-toolbar .dialog-title button{cursor:pointer;position:absolute;right:0;top:-5px;border-radius:100%;height:42px;width:42px;min-width:36px}#editor-window .mat-toolbar .dialog-title button:hover,#editor-window .mat-toolbar .dialog-title button:hover mat-icon{font-weight:700}#editor-window .mat-toolbar .dialog-title mat-icon{position:absolute;top:9px;right:8px;z-index:1}#editor-window .mat-toolbar-row{height:48px}#editor-window .mat-dialog-actions{margin-left:-24px;margin-right:-24px;color:#fff;padding:0}#editor-window .mat-dialog-actions button{padding:12px 0}#editor-window .mat-dialog-actions .mat-accent{color:#fff!important}`],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
EditorWindowComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: MatDialogRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ EDITOR_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => EditorComponent),
    multi: true
};
class EditorComponent {
    /**
     * @param {?} dialog
     * @param {?} ref
     */
    constructor(dialog, ref) {
        this.dialog = dialog;
        this.ref = ref;
        this.type = 'full';
        this.expanded = false;
        this.height = 100;
        this.plugins = [
            'advlist autolink lists link image charmap print preview hr anchor pagebreak',
            'searchreplace wordcount visualblocks visualchars code fullscreen',
            'insertdatetime media nonbreaking save table contextmenu directionality',
            'emoticons template paste textcolor colorpicker textpattern imagetools toc help'
        ];
        this.skinUrl = '/assets/skins/lightgray-gradient';
        this.templates = [
            { title: 'Test template 1', content: 'Test 1' },
            { title: 'Test template 2', content: 'Test 2' }
        ];
        this.changes = new EventEmitter();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.setContent(this._value);
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    get basic() {
        return this.type === 'basic';
    }
    /**
     * @return {?}
     */
    get full() {
        return this.type === 'full';
    }
    /**
     * @return {?}
     */
    get config() {
        switch (this.type) {
            case 'basic':
                return this.configBasic;
            case 'full':
                return this.configFull;
            default:
                return this.configFull;
        }
    }
    /**
     * @return {?}
     */
    get configBasic() {
        return {
            height: this.height,
            selector: '#' + this.elementId,
            menubar: false,
            skin_url: this.skinUrl,
            theme: 'modern',
            plugins: [
                'advlist autolink lists link image charmap print preview anchor',
                'searchreplace visualblocks code fullscreen',
                'insertdatetime media table contextmenu paste code'
            ],
            toolbar: `undo redo | insert | styleselect | bold italic |
       alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link`,
            content_css: [
                '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
                '//www.tinymce.com/css/codepen.min.css'
            ],
            setup: editor => {
                this.editorRef = editor;
                editor.on('keyup', (e) => {
                    e.preventDefault();
                    const /** @type {?} */ content = editor.getContent();
                    this.onKeyup(content);
                });
                editor.on('change', (e) => {
                    e.preventDefault();
                    const /** @type {?} */ content = editor.getContent();
                    this.onChange(content);
                });
                editor.on('viewcontentloaded', (e) => {
                    editor.setContent('');
                });
            },
        };
    }
    /**
     * @return {?}
     */
    get configFull() {
        return {
            height: this.height,
            selector: '#' + this.elementId,
            plugins: this.plugins,
            skin_url: this.skinUrl,
            templates: this.templates,
            theme: 'modern',
            toolbar1: `undo redo | insert | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent`,
            toolbar2: 'print preview | forecolor backcolor | link',
            setup: editor => {
                this.editorRef = editor;
                editor.on('keyup', (e) => {
                    e.preventDefault();
                    const /** @type {?} */ content = editor.getContent();
                    this.onKeyup(content);
                });
                editor.on('change', (e) => {
                    e.preventDefault();
                    const /** @type {?} */ content = editor.getContent();
                    this.onChange(content);
                });
                editor.on('viewcontentloaded', (e) => {
                    editor.setContent('');
                });
            },
            image_advtab: true,
            content_css: [
                '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
                '//www.tinymce.com/css/codepen.min.css'
            ]
        };
    }
    /**
     * @return {?}
     */
    get hasValue() {
        return this.value ? true : false;
    }
    /**
     * @return {?}
     */
    get showExpand() {
        return this.full && !this.expanded;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        tinymce.init(this.config);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        tinymce.remove(this.editorRef);
    }
    /**
     * @return {?}
     */
    clear() {
        this.value = '';
    }
    /**
     * @param {?} e
     * @return {?}
     */
    expand(e) {
        if (e && e.preventDefault) {
            e.preventDefault();
        }
        const /** @type {?} */ config = {
            data: this.editorRef.getContent(),
            width: '1200px'
        };
        this.openDialog(config);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
        this.value = value;
        this.changes.emit(value);
        if (this.onModelChange) {
            this.onModelChange(value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onUpdate(value) {
        this.onChange(value);
        this.setContent(this.value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onKeyup(value) {
        this.onChange(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onBlur(value) {
        this.focused = '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onFocus(value) {
        this.focused = value;
        if (this.onTouch) {
            this.onTouch();
        }
    }
    /**
     * @param {?} config
     * @return {?}
     */
    openDialog(config) {
        const /** @type {?} */ dialogRef = this.dialog.open(EditorWindowComponent, config);
        this.dialogRef = dialogRef.afterClosed().subscribe(result => {
            this.closeDialog(result);
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    closeDialog(value) {
        if (value) {
            this.onChange(value);
        }
        this.dialogRef.unsubscribe();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setContent(value) {
        if (this.editorRef && this.editorRef.getContent) {
            const /** @type {?} */ content = this.editorRef.getContent();
            if (value && content != value) {
                this.editorRef.setContent(value);
            }
        }
    }
}
EditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'iu-editor',
                template: `<mat-card class="editor">
  <textarea [id]="elementId">
    <ng-content *ngIf="!hasValue"></ng-content>
    <span *ngIf="hasValue">{{ value }}</span>
  </textarea>
  <button *ngIf="showExpand" id="expand-editor" (click)="expand($event)" mat-button>
    <mat-icon>fullscreen</mat-icon>
  </button>
</mat-card>
`,
                styles: [`.mat-card{display:block;clear:both;padding:1px 3px 1px 1px;border-radius:2px}#expand-editor{font-size:36px;position:absolute;right:3px;top:3px;color:#fff;text-align:center;min-width:36px;line-height:24px;padding:2px}.mat-icon{font-size:36px;position:relative;left:-6px;top:-7px}`],
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [EDITOR_ACCESSOR]
            },] },
];
/** @nocollapse */
EditorComponent.ctorParameters = () => [
    { type: MatDialog },
    { type: ChangeDetectorRef }
];
EditorComponent.propDecorators = {
    type: [{ type: Input }],
    elementId: [{ type: Input }],
    expanded: [{ type: Input }],
    height: [{ type: Input }],
    plugins: [{ type: Input }],
    skinUrl: [{ type: Input }],
    templates: [{ type: Input }],
    changes: [{ type: Output }],
    value: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EditorModule {
}
EditorModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    SharedModule,
                    FormsModule,
                    DialogModule,
                    MatButtonModule,
                    MatCardModule,
                    MatDialogModule,
                    MatIconModule,
                    MatToolbarModule,
                ],
                declarations: [
                    EditorComponent,
                    EditorWindowComponent,
                ],
                entryComponents: [
                    EditorWindowComponent,
                ],
                exports: [
                    EditorComponent,
                    EditorWindowComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EffectsModule$1 {
    /**
     * @param {?} featureEffects
     * @return {?}
     */
    static forFeature(featureEffects) {
        return EffectsModule.forFeature(featureEffects);
    }
    /**
     * @param {?} rootEffects
     * @return {?}
     */
    static forRoot(rootEffects) {
        return EffectsModule.forRoot(rootEffects);
    }
}
EffectsModule$1.decorators = [
    { type: NgModule, args: [{
                imports: [
                    EffectsModule
                ],
                declarations: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ErrorActions {
    /**
     * @param {?} e
     * @param {?} outlet
     * @return {?}
     */
    static addAtOutlet(e, outlet) {
        let /** @type {?} */ payload = {
            key: outlet.key,
            error: outlet.handler ? outlet.handler(e) : e
        };
        return ErrorActions.add(payload);
    }
    /**
     * @param {?} key
     * @param {?} e
     * @return {?}
     */
    static addError(key, e) {
        let /** @type {?} */ payload = {
            key: key,
            error: e
        };
        return ErrorActions.add(payload);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    static add(payload) {
        return {
            type: ErrorActions.ADD,
            payload: payload
        };
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static remove(key) {
        return {
            type: ErrorActions.REMOVE,
            payload: key
        };
    }
}
ErrorActions.ADD = '[Error] Add Error';
ErrorActions.REMOVE = '[Error] Remove Error';
ErrorActions.HANDLE_ERROR = '[Error Handler] Handle Error';
ErrorActions.THROW_ERROR = '[Error Handler] Throw Error';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ErrorsService {
    constructor() { }
}
ErrorsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
ErrorsService.ctorParameters = () => [];
/** @nocollapse */ ErrorsService.ngInjectableDef = defineInjectable({ factory: function ErrorsService_Factory() { return new ErrorsService(); }, token: ErrorsService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ErrorEffects {
    /**
     * @param {?} actions$
     * @param {?} service
     */
    constructor(actions$, service) {
        this.actions$ = actions$;
        this.service = service;
        /**
         * Listens for thrown errors and handles them accordingly
         */
        this.handleError$ = this.actions$.pipe(filter((action) => action.type === ErrorActions.THROW_ERROR), map((data) => {
            return /** @type {?} */ ({ type: ErrorActions.HANDLE_ERROR });
        }));
    }
}
ErrorEffects.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ErrorEffects.ctorParameters = () => [
    { type: Actions },
    { type: ErrorsService }
];
__decorate([
    Effect(),
    __metadata("design:type", Observable)
], ErrorEffects.prototype, "handleError$", void 0);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GlobalErrorsService {
    constructor() { }
    /**
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        alert(error);
        // IMPORTANT: Rethrow the error otherwise it gets swallowed
        throw error;
    }
}
GlobalErrorsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
GlobalErrorsService.ctorParameters = () => [];
/** @nocollapse */ GlobalErrorsService.ngInjectableDef = defineInjectable({ factory: function GlobalErrorsService_Factory() { return new GlobalErrorsService(); }, token: GlobalErrorsService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ErrorsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: ErrorsModule,
            providers: [
                ErrorsService,
                ErrorEffects,
                {
                    provide: ErrorHandler,
                    useClass: GlobalErrorsService
                }
            ]
        };
    }
}
ErrorsModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Error {
    constructor() {
        this.message = '';
        this.statusCode = 0;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
function errorsReducer(state$$1 = {}, action) {
    switch (action.type) {
        case ErrorActions.ADD:
            let /** @type {?} */ newState = Collection.AddItem(state$$1, 'lastError', action.payload.error);
            if (action.payload.key === 'lastError') {
                return newState;
            }
            return Collection.AddItem(state$$1, action.payload.key, action.payload.error);
        case ErrorActions.REMOVE:
            return Collection.RemoveItem(state$$1, action.payload);
        default:
            return state$$1;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} store
 * @return {?}
 */
function errorsSelector(store) {
    return store.select(s => s['errors']);
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
function errorSelector(store, key) {
    return errorsSelector(store).pipe(map(errors => errors[key]));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Event {
    constructor() {
        this.emittedCount = 0;
        this.key = '';
        this.onAction = '';
        this.value = null;
    }
}
class Events extends Collection {
    /**
     * @return {?}
     */
    get actions() {
        return this.toArray().reduce((acc, event) => {
            const /** @type {?} */ addValues = !event.onAction ?
                [] : typeof event.onAction === 'string' ?
                acc.indexOf(event.onAction) === -1 ? [event.onAction] : []
                : event.onAction.filter(x => acc.indexOf(x) === -1);
            return [...acc, ...addValues];
        }, []);
    }
    /**
     * @return {?}
     */
    get eventsByAction() {
        return this.toArray().reduce((acc, event) => {
            if (typeof event.onAction === 'string') {
                const /** @type {?} */ val = acc[event.onAction] || [];
                acc[event.onAction] = [...val, event];
            }
            else {
                event.onAction.forEach(actionType => {
                    const /** @type {?} */ val = acc[actionType] || [];
                    acc[actionType] = [...val, event];
                });
            }
            return acc;
        }, {});
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    addEvent(payload) {
        return build(Events, this.addItem(payload, payload.key));
    }
    /**
     * @param {?} actionType
     * @return {?}
     */
    getActionEvents(actionType) {
        return this.eventsByAction[actionType];
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    removeEvent(payload) {
        return build(Events, this.removeItem(payload));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    replaceEvents(payload) {
        const /** @type {?} */ events = this.copyItems();
        payload.forEach(e => {
            events[e.key] = e;
        });
        return build(Events, this, { items: events });
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    triggerEvent(payload) {
        const /** @type {?} */ events = this.getActionEvents(payload.type)
            .map(e => build(Event, e, { value: e.handler ? e.handler(payload) : payload }));
        return this.replaceEvents(events);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    updateValue(payload) {
        const /** @type {?} */ event = build(Event, this.items[payload.key], { value: payload.value });
        return build(Events, this.updateItem(event, payload.key, Event));
    }
}
class UpdateValuePayload {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EventActions {
    /**
     * @param {?} onAction
     * @param {?=} handler
     * @param {?=} value
     * @return {?}
     */
    static addEvent(onAction, handler, value = null) {
        const /** @type {?} */ e = build(Event, {
            onAction,
            handler,
            value,
            key: guid()
        });
        return {
            type: EventActions.ADD_EVENT,
            payload: e,
            key: e.key
        };
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static removeEvent(key) {
        return {
            type: EventActions.REMOVE_EVENT,
            payload: key
        };
    }
    /**
     * @param {?} action
     * @return {?}
     */
    static triggerEvent(action) {
        return {
            type: EventActions.TRIGGER_EVENT,
            payload: action
        };
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    static updateValue(key, value) {
        const /** @type {?} */ payload = build(UpdateValuePayload, {
            key,
            value
        });
        return {
            type: EventActions.UPDATE_VALUE,
            payload: payload
        };
    }
}
EventActions.ADD_EVENT = '[Events] Add Event';
EventActions.REMOVE_EVENT = '[Events] Remove Event';
EventActions.TRIGGER_EVENT = '[Events] Trigger Event';
EventActions.UPDATE_VALUE = '[Events] Update Value';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EventEffects {
    /**
     * @param {?} actions$
     * @param {?} store
     */
    constructor(actions$, store) {
        this.actions$ = actions$;
        this.store = store;
        this.events = new Events();
        /**
         * Trigger event if action is a registered trigger.
         */
        this.onTriggerEvent = this.actions$.pipe(filter(action => this.events.actions.indexOf(action.type) !== -1), map(this.trigger));
        this.store.select(s => s['events'])
            .subscribe(events => {
            this.events = events;
        });
    }
    /**
     * @param {?} action
     * @return {?}
     */
    trigger(action) {
        return EventActions.triggerEvent(action);
    }
}
EventEffects.decorators = [
    { type: Injectable },
];
/** @nocollapse */
EventEffects.ctorParameters = () => [
    { type: Actions },
    { type: Store }
];
__decorate([
    Effect(),
    __metadata("design:type", Observable)
], EventEffects.prototype, "onTriggerEvent", void 0);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} store
 * @return {?}
 */
function eventsSelector(store) {
    return store.select(s => s['events']).pipe(map((events) => events.items));
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
function eventSelector(store, key) {
    return eventsSelector(store).pipe(map(events => events[key]));
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
function eventValueSelector(store, key) {
    return eventSelector(store, key).pipe(map(e => e ? e.value : null));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EventsService {
    /**
     * @param {?} store
     */
    constructor(store) {
        this.store = store;
        this.eventIndex = 0;
        this.events = [];
    }
    /**
     * @return {?}
     */
    get eventKey() {
        this.eventIndex++;
        return `event-${this.eventIndex}`;
    }
    /**
     * @param {?} actionType
     * @param {?=} handler
     * @return {?}
     */
    addEvent(actionType, handler) {
        const /** @type {?} */ f = handler ? handler : (action) => true;
        const /** @type {?} */ actionWithKey = EventActions.addEvent(actionType, f, false);
        this.store.dispatch(actionWithKey);
        return actionWithKey.key;
    }
    /**
     * @param {?} action
     * @param {?=} handler
     * @return {?}
     */
    dispatch(action, handler) {
        return this.dispatchHttpAction(action, handler);
    }
    /**
     * @param {?} action
     * @param {?=} handler
     * @return {?}
     */
    dispatchHttpAction(action, handler) {
        const /** @type {?} */ successAction = action.payload.onSuccess;
        const /** @type {?} */ errorAction = typeof (action.payload.onError) === 'string' ? action.payload.onError : null;
        const /** @type {?} */ success = this.takeOne(successAction, handler);
        const /** @type {?} */ obs = errorAction ? success.pipe(combineLatest(this.takeOne(errorAction, handler), (x, y) => true)) : success;
        this.store.dispatch(action);
        return obs;
    }
    /**
     * @param {?} eventKey
     * @return {?}
     */
    removeEvent(eventKey) {
        this.store.dispatch(EventActions.removeEvent(eventKey));
    }
    /**
     * @param {?} action
     * @param {?} handler
     * @return {?}
     */
    subscribe(action, handler) {
        return this.take(1, action).subscribe(handler);
    }
    /**
     * @param {?=} n
     * @param {?=} actionType
     * @param {?=} handler
     * @return {?}
     */
    take(n = 1, actionType, handler) {
        const /** @type {?} */ key = this.addEvent(actionType, handler);
        return eventValueSelector(this.store, key).pipe(skip(1), take(n));
    }
    /**
     * @param {?=} n
     * @param {?=} actions
     * @param {?=} handler
     * @return {?}
     */
    takeFrom(n = 1, actions, handler) {
        const /** @type {?} */ keys = actions.map(action => this.addEvent(action, handler));
        return keys.map(key => eventValueSelector(this.store, key))
            .reduce((acc, obs) => {
            return acc.pipe(combineLatest(obs, (x, y) => true));
        }, of(false)).pipe(skip(1), take(n));
    }
    /**
     * @param {?} actionType
     * @param {?=} handler
     * @return {?}
     */
    takeOne(actionType, handler) {
        return this.take(1, actionType, handler);
    }
}
EventsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
EventsService.ctorParameters = () => [
    { type: Store }
];
/** @nocollapse */ EventsService.ngInjectableDef = defineInjectable({ factory: function EventsService_Factory() { return new EventsService(inject(Store)); }, token: EventsService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EventsModule {
}
EventsModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    EventEffects,
                    EventsService,
                ],
                exports: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
function eventsReducer(state$$1 = new Events(), action) {
    switch (action.type) {
        case EventActions.ADD_EVENT:
            return state$$1.addEvent(action.payload);
        case EventActions.REMOVE_EVENT:
            return state$$1.removeEvent(action.payload);
        case EventActions.TRIGGER_EVENT:
            return state$$1.triggerEvent(action.payload);
        case EventActions.UPDATE_VALUE:
            return state$$1.updateValue(action.payload);
        default:
            return state$$1;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormsModule$1 {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: FormsModule$1,
            providers: []
        };
    }
}
FormsModule$1.decorators = [
    { type: NgModule, args: [{
                imports: [
                    FormsModule,
                    ReactiveFormsModule,
                ],
                exports: [
                    FormsModule,
                    ReactiveFormsModule,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormActions {
    /**
     * @param {?} control
     * @return {?}
     */
    static addForm(control) {
        return {
            type: FormActions.ADD,
            payload: control
        };
    }
    /**
     * @param {?} control
     * @param {?} changes
     * @return {?}
     */
    static changeStatus(control, changes) {
        return {
            type: FormActions.STATUS_CHANGES,
            payload: {
                control: control,
                changes: changes
            }
        };
    }
    /**
     * @param {?} control
     * @param {?} changes
     * @return {?}
     */
    static changeValue(control, changes) {
        return {
            type: FormActions.VALUE_CHANGES,
            payload: {
                control: control,
                changes: changes
            }
        };
    }
    /**
     * @param {?} route
     * @return {?}
     */
    static navigateToForm(route) {
        return {
            type: FormActions.NAVIGATE,
            payload: route
        };
    }
    /**
     * @param {?} forms
     * @return {?}
     */
    static resetForms(forms) {
        return {
            type: FormActions.RESET,
            payload: forms
        };
    }
}
FormActions.ADD = '[forms] Add Form';
FormActions.RESET = '[forms] Reset Forms';
FormActions.NAVIGATE = '[forms] Navigate to Form';
FormActions.STATUS_CHANGES = '[form] Status Changes';
FormActions.VALUE_CHANGES = '[form] Value Changes';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormArray$1 extends FormArray {
    /**
     * @param {?} fb
     * @param {?} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     */
    constructor(fb, controls, validator, asyncValidator) {
        super(controls, validator, asyncValidator);
        this.fb = fb;
    }
    /**
     * @template T
     * @param {?} fb
     * @param {?} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    static Build(fb, controls, validator, asyncValidator) {
        return new FormArray$1(fb, controls, validator, asyncValidator);
    }
    /**
     * @template T
     * @param {?} ctor
     * @param {?} fb
     * @param {?=} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    static BuildWithType(ctor, fb, controls = [], validator, asyncValidator) {
        const /** @type {?} */ fa = new FormArray$1(fb, controls, validator, asyncValidator);
        fa.ctor = ctor;
        return fa;
    }
    /**
     * @template T
     * @param {?} ctor
     * @param {?} value
     * @param {?} fb
     * @param {?=} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    static BuildWithTypeAndValue(ctor, value, fb, controls = [], validator, asyncValidator) {
        const /** @type {?} */ fa = new FormArray$1(fb, controls, validator, asyncValidator);
        fa.ctor = ctor;
        fa.setValue(value);
        return fa;
    }
    /**
     * @template T
     * @param {?} value
     * @param {?} fb
     * @param {?=} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    static BuildWithValue(value, fb, controls = [], validator, asyncValidator) {
        const /** @type {?} */ fa = new FormArray$1(fb, controls, validator, asyncValidator);
        fa.setValue(value);
        return fa;
    }
    /**
     * @param {?} value
     * @param {?} ctor
     * @return {?}
     */
    static GetValue(value, ctor) {
        return toArray(value).map(x => getValue(build(ctor, x)));
    }
    /**
     * @return {?}
     */
    get maxIndex() {
        return this.length - 1;
    }
    /**
     * @return {?}
     */
    get values() {
        return [...this.value];
    }
    /**
     * @param {?} n
     * @return {?}
     */
    buildControls(n) {
        return this.buildItems(n).map(x => buildAbstractControl(this.fb, x));
    }
    /**
     * @param {?} n
     * @return {?}
     */
    buildItems(n) {
        return Array.from(Array(n).keys()).map(x => this.ctor ? getValue(new this.ctor()) : {});
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getValue(value) {
        return this.ctor ? toArray(value).map(x => getValue(build(this.ctor, x))) : value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    resetValue(value) {
        this.removeAll();
        this.addControls(value);
        this.setValue(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setLength(value) {
        if (this.length < value) {
            this.add(value - this.length);
        }
        else if (this.length > value) {
            this.remove(this.length - value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValue(value) {
        this.setLength(value.length);
        super.setValue(this.getValue(value));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    findControlById(id) {
        return this.controls.find(control => control.value && control.value['id'] && control.value['id'] === id);
    }
    /**
     * @return {?}
     */
    removeAll() {
        this.controls = [];
    }
    /**
     * @param {?} indexes
     * @return {?}
     */
    removeIndexes(indexes) {
        indexes.forEach(index => {
            this.removeAt(index);
        });
    }
    /**
     * @param {?} n
     * @return {?}
     */
    add(n) {
        this.buildControls(n).forEach(x => {
            this.push(x);
        });
    }
    /**
     * @param {?} n
     * @return {?}
     */
    remove(n) {
        const /** @type {?} */ k = Math.min(n, this.length);
        Array.from(Array(k).keys()).forEach(x => {
            this.removeAt(this.maxIndex);
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    addControls(value) {
        const /** @type {?} */ controls = value.map(x => this.fb.group(buildControlsConfig(x, this.fb)));
        controls.forEach(control => {
            this.push(control);
        });
    }
    /**
     * Set value of each control.
     * @param {?} ctor Class constructor
     * @param {?} props Values to assign to props of each control
     * @return {?}
     */
    setAll(ctor, props) {
        this.controls.forEach(control => {
            control.setValue(build(new ctor(), control.value, props));
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} fb
 * @param {?} value
 * @return {?}
 */
function buildAbstractControl(fb, value) {
    return isGroupValue(value) ? fb.group(buildControlsConfig(value, fb)) : fb.control(value);
}
/**
 * Construct form builder and initialize new form array
 * @template T
 * @param {?} ctor
 * @param {?=} validator
 * @param {?=} asyncValidator
 * @return {?}
 */
function buildArrayFromType(ctor, validator, asyncValidator) {
    const /** @type {?} */ fb = new FormBuilder();
    return FormArray$1.BuildWithType(ctor, fb, [], validator, asyncValidator);
}
/**
 * @param {?} fb
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
function buildControl(fb, model, key) {
    return isFormGroup(model, key) ?
        fb.group(buildControlsConfig(model[key], fb))
        : (isFormArray(model, key) ? buildFormArray(fb, model, key)
            : (hasValidators(model, key) ? [model[key], model['metadata'][key]['validators']]
                : [model[key]]));
}
/**
 * Construct form builder and initialize new form group.
 * @template T
 * @param {?} model
 * @return {?}
 */
function buildControlFromModel(model) {
    const /** @type {?} */ fb = new FormBuilder();
    const /** @type {?} */ controlsConfig = buildControlsConfig(model, fb);
    return hasGroupValidators(model) ? fb.group(controlsConfig, model['metadata']['validators']) : fb.group(controlsConfig);
}
/**
 * Function to recursively construct form control config object.
 * @param {?} model
 * @param {?} fb
 * @return {?}
 */
function buildControlsConfig(model, fb) {
    const /** @type {?} */ keys = getAllProps(model);
    return keys.filter(key => key !== 'metadata' && !ignoreKey(model, key))
        .reduce((acc, key) => Object.assign({}, acc, { [key]: buildControl(fb, model, key) }), {});
}
/**
 * Initialize new form array.
 * @template T
 * @param {?} fb
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
function buildFormArray(fb, model, key) {
    const /** @type {?} */ ctor = findFormArrayType(model, key);
    const /** @type {?} */ value = model[key];
    const /** @type {?} */ controls = buildFormArrayControls(fb, value, ctor);
    return ctor ? FormArray$1.BuildWithType(ctor, fb, controls) : FormArray$1.Build(fb, []);
}
/**
 * @template T
 * @param {?} fb
 * @param {?} value
 * @param {?=} ctor
 * @return {?}
 */
function buildFormArrayControls(fb, value, ctor) {
    return ctor ? value.map(x => buildAbstractControl(fb, getValue(build(ctor, x))))
        : value.map(x => buildAbstractControl(fb, x));
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
function findFormArrayType(model, key) {
    return model['metadata'] && model['metadata'][key] ? /** @type {?} */ (model['metadata'][key]['type']) : null;
}
/**
 * @param {?} model
 * @return {?}
 */
function hasGroupValidators(model) {
    return model['metadata'] && model['metadata']['validators'];
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
function hasValidators(model, key) {
    return model['metadata'] && model['metadata'][key] && model['metadata'][key]['validators'];
}
/**
 * @param {?} value
 * @return {?}
 */
function isArrayValue(value) {
    return Array.isArray(value);
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
function isFormArray(model, key) {
    return Array.isArray(model[key]) && model['metadata'] && model['metadata'][key] && model['metadata'][key]['isFormArray'];
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
function isFormControl(model, key) {
    return model['metadata'] && model['metadata']['controls'] && inArray(model['metadata']['controls'], key);
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
function isFormGroup(model, key) {
    return model[key]
        && typeof model[key] === 'object'
        && !Array.isArray(model[key])
        && Object.keys(model[key]).length > 0
        && !isFormControl(model, key)
        && !isFormArray(model, key);
}
/**
 * @param {?} value
 * @return {?}
 */
function isGroupValue(value) {
    return typeof value === 'object' && Object.keys(value).length > 0 && !isArrayValue(value);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Decorates an abstract control property built using form builder.
 * @template T
 * @param {?} ctor
 * @return {?}
 */
function Control(ctor) {
    const /** @type {?} */ propertyDecorator = (target, propertySignature) => {
        const /** @type {?} */ decoratedProperty = buildControlFromModel(new ctor());
        target[propertySignature] = decoratedProperty;
        return target;
    };
    return propertyDecorator;
}
/**
 * Decorates an abstract control property built using form builder.
 * @template T
 * @param {?} ctor
 * @param {?=} validator
 * @param {?=} asyncValidator
 * @return {?}
 */
function ArrayControl(ctor, validator, asyncValidator) {
    const /** @type {?} */ propertyDecorator = (target, propertySignature) => {
        const /** @type {?} */ decoratedProperty = buildArrayFromType(ctor, validator, asyncValidator);
        target[propertySignature] = decoratedProperty;
        return target;
    };
    return propertyDecorator;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class HttpDeletePayload {
    constructor() {
        this.path = '';
        this.options = new HttpOptions();
        this.headers = undefined;
        this.onSuccess = '';
    }
}
/**
 * @template T
 */
class HttpGetPayload {
    constructor() {
        this.path = '';
        this.options = new HttpOptions();
        this.headers = undefined;
        this.onSuccess = '';
    }
}
/**
 * @template T
 */
class HttpPutPayload {
    constructor() {
        this.path = '';
        this.model = null;
        this.options = new HttpOptions();
        this.headers = undefined;
        this.onSuccess = '';
    }
}
/**
 * @template T
 */
class HttpPostPayload {
    constructor() {
        this.path = '';
        this.model = null;
        this.options = new HttpOptions();
        this.headers = undefined;
        this.onSuccess = '';
    }
}
/** @enum {number} */
const HTTP_REQUEST_STATUS = {
    PENDING: 0,
    ERROR: 1,
    SUCCESS: 2,
};
HTTP_REQUEST_STATUS[HTTP_REQUEST_STATUS.PENDING] = "PENDING";
HTTP_REQUEST_STATUS[HTTP_REQUEST_STATUS.ERROR] = "ERROR";
HTTP_REQUEST_STATUS[HTTP_REQUEST_STATUS.SUCCESS] = "SUCCESS";
/** @enum {number} */
const HTTP_STATUS_CODES = {
    CONTINUE: 100,
    SWITCHING_PROTOCOLS: 101,
    OK: 200,
    CREATED: 201,
    ACCEPTED: 202,
    NON_AUTHORITATIVE_INFORMATION: 203,
    NO_CONTENT: 204,
    RESET_CONTENT: 205,
    PARTIAL_CONTENT: 206,
    MULTIPLE_CHOICES: 300,
    MOVED_PERMANENTLY: 301,
    FOUND: 302,
    SEE_OTHER: 303,
    NOT_MODIFIED: 304,
    USE_PROXY: 305,
    TEMPORARY_REDIRECT: 307,
    BAD_REQUEST: 400,
    UNAUTHORIZED: 401,
    PAYMENT_REQUIRED: 402,
    FORBIDDEN: 403,
    NOT_FOUND: 404,
    METHOD_NOT_ALLOWED: 405,
    NOT_ACCEPTABLE: 406,
    PROXY_AUTHENTICATION_REQUIRED: 407,
    REQUEST_TIMEOUT: 408,
    CONFLICT: 409,
    GONE: 410,
    LENGTH_REQUIRED: 411,
    PRECONDITION_FAILED: 412,
    REQUEST_ENTITY_TOO_LARGE: 413,
    REQUEST_URI_TOO_LONG: 414,
    UNSUPPORTED_MEDIA_TYPE: 415,
    REQUESTED_RANGE_NOT_SATISFIABLE: 416,
    EXPECTATION_FAILED: 417,
    UNPROCESSABLE_ENTITY: 422,
    TOO_MANY_REQUESTS: 429,
    INTERNAL_SERVER_ERROR: 500,
    NOT_IMPLEMENTED: 501,
    BAD_GATEWAY: 502,
    SERVICE_UNAVAILABLE: 503,
    GATEWAY_TIMEOUT: 504,
    HTTP_VERSION_NOT_SUPPORTED: 505,
};
HTTP_STATUS_CODES[HTTP_STATUS_CODES.CONTINUE] = "CONTINUE";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.SWITCHING_PROTOCOLS] = "SWITCHING_PROTOCOLS";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.OK] = "OK";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.CREATED] = "CREATED";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.ACCEPTED] = "ACCEPTED";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.NON_AUTHORITATIVE_INFORMATION] = "NON_AUTHORITATIVE_INFORMATION";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.NO_CONTENT] = "NO_CONTENT";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.RESET_CONTENT] = "RESET_CONTENT";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.PARTIAL_CONTENT] = "PARTIAL_CONTENT";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.MULTIPLE_CHOICES] = "MULTIPLE_CHOICES";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.MOVED_PERMANENTLY] = "MOVED_PERMANENTLY";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.FOUND] = "FOUND";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.SEE_OTHER] = "SEE_OTHER";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.NOT_MODIFIED] = "NOT_MODIFIED";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.USE_PROXY] = "USE_PROXY";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.TEMPORARY_REDIRECT] = "TEMPORARY_REDIRECT";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.BAD_REQUEST] = "BAD_REQUEST";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.UNAUTHORIZED] = "UNAUTHORIZED";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.PAYMENT_REQUIRED] = "PAYMENT_REQUIRED";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.FORBIDDEN] = "FORBIDDEN";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.NOT_FOUND] = "NOT_FOUND";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.METHOD_NOT_ALLOWED] = "METHOD_NOT_ALLOWED";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.NOT_ACCEPTABLE] = "NOT_ACCEPTABLE";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.PROXY_AUTHENTICATION_REQUIRED] = "PROXY_AUTHENTICATION_REQUIRED";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.REQUEST_TIMEOUT] = "REQUEST_TIMEOUT";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.CONFLICT] = "CONFLICT";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.GONE] = "GONE";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.LENGTH_REQUIRED] = "LENGTH_REQUIRED";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.PRECONDITION_FAILED] = "PRECONDITION_FAILED";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.REQUEST_ENTITY_TOO_LARGE] = "REQUEST_ENTITY_TOO_LARGE";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.REQUEST_URI_TOO_LONG] = "REQUEST_URI_TOO_LONG";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.UNSUPPORTED_MEDIA_TYPE] = "UNSUPPORTED_MEDIA_TYPE";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.REQUESTED_RANGE_NOT_SATISFIABLE] = "REQUESTED_RANGE_NOT_SATISFIABLE";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.EXPECTATION_FAILED] = "EXPECTATION_FAILED";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.UNPROCESSABLE_ENTITY] = "UNPROCESSABLE_ENTITY";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.TOO_MANY_REQUESTS] = "TOO_MANY_REQUESTS";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.INTERNAL_SERVER_ERROR] = "INTERNAL_SERVER_ERROR";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.NOT_IMPLEMENTED] = "NOT_IMPLEMENTED";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.BAD_GATEWAY] = "BAD_GATEWAY";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.SERVICE_UNAVAILABLE] = "SERVICE_UNAVAILABLE";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.GATEWAY_TIMEOUT] = "GATEWAY_TIMEOUT";
HTTP_STATUS_CODES[HTTP_STATUS_CODES.HTTP_VERSION_NOT_SUPPORTED] = "HTTP_VERSION_NOT_SUPPORTED";
class HttpOptions {
    constructor() {
        this.prependBaseUrl = true;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class HttpActions {
    /**
     * @param {?} path
     * @param {?} target
     * @return {?}
     */
    static addPath(path, target) {
        const /** @type {?} */ existingMatches = target['matches'] || [];
        const /** @type {?} */ matches = inArray(existingMatches, path) ? existingMatches : [...existingMatches, path];
        return Object.assign(target, { matches: matches });
    }
    /**
     * @param {?} path
     * @param {?} payload
     * @return {?}
     */
    static matchPath(path, payload) {
        if (payload && payload['results']) {
            return Object.assign(payload, { results: HttpActions.matchPath(path, payload['results']) });
        }
        if (Array.isArray(payload)) {
            return payload.map(x => HttpActions.addPath(path, x));
        }
        return HttpActions.addPath(path, payload);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    static buildError(payload) {
        return ErrorActions.add(payload);
    }
    /**
     * @param {?} key
     * @param {?} e
     * @return {?}
     */
    static buildErrorPayload(key, e) {
        return {
            key: key,
            error: e
        };
    }
    /**
     * @param {?} e
     * @param {?} onError
     * @return {?}
     */
    static handleError(e, onError) {
        return {
            type: onError,
            payload: e
        };
    }
    /**
     * @param {?} e
     * @param {?} outlet
     * @return {?}
     */
    static handleErrorOutlet(e, outlet) {
        return ErrorActions.addAtOutlet(e, outlet);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    static handleErrorDefault(e) {
        return {
            type: HttpActions.DELETE_ERROR,
            payload: HttpActions.buildErrorPayload('lastError', e)
        };
    }
    /**
     * @param {?} path
     * @param {?} onSuccessPayload
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    static delete(path, onSuccessPayload, onSuccess, onError) {
        const /** @type {?} */ payload = Object.assign(new HttpDeletePayload(), {
            path: path,
            onSuccess: onSuccess || HttpActions.DELETE_SUCCESS,
            onSuccessPayload,
            onError: onError || HttpActions.DELETE_ERROR
        });
        return HttpActions.httpDelete(payload);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    static httpDelete(payload) {
        return {
            type: HttpActions.DELETE,
            payload: payload
        };
    }
    /**
     * @param {?} model
     * @param {?=} actionType
     * @return {?}
     */
    static deleteSuccess(model, actionType) {
        return {
            type: actionType || HttpActions.DELETE_SUCCESS,
            payload: model
        };
    }
    /**
     * @param {?} e
     * @param {?=} onError
     * @return {?}
     */
    static deleteError(e, onError) {
        if (typeof onError === 'string') {
            return HttpActions.handleError(e, onError);
        }
        // else if (typeof onError === 'ErrorOutlet') {
        //     return HttpActions.handleErrorOutlet(e, onError);
        // }
        return HttpActions.handleErrorDefault(e);
    }
    /**
     * @param {?} path
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    static get(path, onSuccess, onError) {
        const /** @type {?} */ payload = Object.assign(new HttpGetPayload(), {
            path: path,
            onSuccess: onSuccess || HttpActions.GET_SUCCESS,
            onError: onError || HttpActions.GET_ERROR
        });
        return HttpActions.httpGet(payload);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    static httpGet(payload) {
        return {
            type: HttpActions.GET,
            payload: payload
        };
    }
    /**
     * @param {?} response
     * @param {?=} actionType
     * @return {?}
     */
    static getSuccess(response, actionType) {
        return {
            type: actionType || HttpActions.GET_SUCCESS,
            payload: response
        };
    }
    /**
     * @param {?} e
     * @param {?=} onError
     * @return {?}
     */
    static getError(e, onError) {
        if (typeof onError === 'string') {
            return HttpActions.handleError(e, onError);
        }
        // else if (typeof onError === 'ErrorOutlet') {
        //     return HttpActions.handleErrorOutlet(e, onError);
        // }
        return HttpActions.handleErrorDefault(e);
    }
    /**
     * @param {?} path
     * @param {?} model
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    static post(path, model, onSuccess, onError) {
        const /** @type {?} */ payload = Object.assign(new HttpPostPayload(), {
            path: path,
            model: model,
            onSuccess: onSuccess || HttpActions.POST_SUCCESS,
            onError: onError || HttpActions.POST_ERROR
        });
        return HttpActions.httpPost(payload);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    static httpPost(payload) {
        return {
            type: HttpActions.POST,
            payload: payload
        };
    }
    /**
     * @param {?} path
     * @param {?} model
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    static postFormUrlEncoded(path, model, onSuccess, onError) {
        const /** @type {?} */ payload = Object.assign(new HttpPostPayload(), {
            path: path,
            model: model,
            onSuccess: onSuccess || HttpActions.GET_SUCCESS,
            onError: onError || HttpActions.GET_ERROR
        });
        return {
            type: HttpActions.POST_FORM_URL_ENCODED,
            payload
        };
    }
    /**
     * @param {?} model
     * @param {?=} actionType
     * @return {?}
     */
    static postSuccess(model, actionType) {
        return {
            type: actionType || HttpActions.POST_SUCCESS,
            payload: model
        };
    }
    /**
     * @param {?} e
     * @param {?=} onError
     * @return {?}
     */
    static postError(e, onError) {
        if (typeof onError === 'string') {
            return HttpActions.handleError(e, onError);
        }
        else if (typeof onError === 'object') {
            return HttpActions.handleErrorOutlet(e, onError);
        }
        return HttpActions.handleErrorDefault(e);
    }
    /**
     * @param {?} path
     * @param {?} model
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    static put(path, model, onSuccess, onError) {
        const /** @type {?} */ payload = Object.assign(new HttpPutPayload(), {
            path: path,
            model: model,
            onSuccess: onSuccess || HttpActions.PUT_SUCCESS,
            onError: onError || HttpActions.PUT_ERROR
        });
        return HttpActions.httpPut(payload);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    static httpPut(payload) {
        return {
            type: HttpActions.PUT,
            payload: payload
        };
    }
    /**
     * @param {?} model
     * @param {?=} actionType
     * @return {?}
     */
    static putSuccess(model, actionType) {
        return {
            type: actionType || HttpActions.PUT_SUCCESS,
            payload: model
        };
    }
    /**
     * @param {?} e
     * @param {?=} onError
     * @return {?}
     */
    static putError(e, onError) {
        if (typeof onError === 'string') {
            return HttpActions.handleError(e, onError);
        }
        // else if (typeof onError === 'ErrorOutlet') {
        //     return HttpActions.handleErrorOutlet(e, onError);
        // }
        return HttpActions.handleErrorDefault(e);
    }
    /**
     * @param {?} path
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    static search(path, onSuccess, onError) {
        const /** @type {?} */ payload = Object.assign(new HttpGetPayload(), {
            path: path,
            onSuccess: onSuccess || HttpActions.SEARCH_SUCCESS,
            onError: onError || HttpActions.SEARCH_ERROR
        });
        return {
            type: HttpActions.SEARCH,
            payload: payload
        };
    }
    /**
     * @param {?} response
     * @param {?=} actionType
     * @param {?=} path
     * @return {?}
     */
    static searchSuccess(response, actionType, path) {
        const /** @type {?} */ payload = path ? HttpActions.matchPath(path, response) : response;
        return {
            type: actionType || HttpActions.SEARCH_SUCCESS,
            payload: payload
        };
    }
}
HttpActions.DELETE = `[Http] DELETE`;
HttpActions.DELETE_SUCCESS = `[Http] DELETE Success`;
HttpActions.DELETE_ERROR = `[Http] DELETE Error`;
HttpActions.GET = `[Http] GET`;
HttpActions.GET_SUCCESS = `[Http] GET Success`;
HttpActions.GET_ERROR = `[Http] GET Error`;
HttpActions.POST = `[Http] POST`;
HttpActions.POST_SUCCESS = `[Http] POST Success`;
HttpActions.POST_ERROR = `[Http] POST Error`;
HttpActions.POST_FORM_URL_ENCODED = `[Http] POST Form URL Encoded`;
HttpActions.PUT = `[Http] PUT`;
HttpActions.PUT_SUCCESS = `[Http] PUT Success`;
HttpActions.PUT_ERROR = `[Http] PUT Error`;
HttpActions.SEARCH = `[Http] SEARCH`;
HttpActions.SEARCH_SUCCESS = `[Http] SEARCH Success`;
HttpActions.SEARCH_ERROR = `[Http] SEARCH Error`;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class HttpService {
    /**
     * @param {?} http
     * @param {?} baseUrl$
     * @param {?} authToken$
     */
    constructor(http, baseUrl$, authToken$) {
        this.http = http;
        this.baseUrl$ = baseUrl$;
        this.authToken$ = authToken$;
        this._authToken = '';
        this._baseUrl = '';
        this.headers = {};
        this.logEvents = true;
        this.useDefaultHeaders = true;
        this.authTokenChanges = this.authToken$.subscribe(x => {
            this.authToken = x;
        });
        this.baseUrlChanges = this.baseUrl$.subscribe(x => {
            this.baseUrl = x;
        });
    }
    /**
     * @return {?}
     */
    get authToken() {
        return this._authToken;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set authToken(value) {
        this._authToken = value;
    }
    /**
     * @return {?}
     */
    get baseUrl() {
        return this._baseUrl;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set baseUrl(value) {
        this._baseUrl = value;
    }
    /**
     * @return {?}
     */
    get defaultHeaders() {
        let /** @type {?} */ headers = new HttpHeaders();
        headers = headers.append('Content-type', 'application/json');
        if (this.authToken) {
            headers = headers.append('Authorization', 'Bearer ' + this.authToken);
        }
        return headers;
    }
    /**
     * @return {?}
     */
    get requestHeaders() {
        let /** @type {?} */ headers = this.useDefaultHeaders ? this.defaultHeaders : new HttpHeaders();
        Object.keys(this.headers).forEach(key => {
            headers = headers.append(key, this.headers[key]);
        });
        return headers;
    }
    /**
     * @param {?=} headers
     * @return {?}
     */
    appendHeaders(headers = {}) {
        let /** @type {?} */ requestHeaders = this.requestHeaders;
        Object.keys(headers).forEach(key => {
            requestHeaders = requestHeaders.append(key, this.headers[key]);
        });
        return requestHeaders;
    }
    /**
     * Make a DELETE request.
     * @param {?} relativePath
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    delete(relativePath, headers = {}, options = new HttpOptions()) {
        const /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        const /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        const /** @type {?} */ obs = this.http.delete(url, {
            headers: httpHeaders
        });
        return obs.pipe(map(res => res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res), catchError(err => this.onError(err)), finalize(() => {
            this.onComplete('DELETE', url);
        }));
    }
    /**
     * Make a GET request.
     * @param {?} relativePath
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    get(relativePath, headers = {}, options = new HttpOptions()) {
        const /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        const /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        const /** @type {?} */ obs = this.http.get(url, {
            headers: httpHeaders
        });
        return obs.pipe(map(res => res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res), catchError(err => this.onError(err)), finalize(() => {
            this.onComplete('GET', url);
        }));
    }
    ;
    /**
     * Make an autocomplete GET request.
     * @param {?} relativePath
     * @param {?} query
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    autocomplete(relativePath, query, headers = {}, options = new HttpOptions()) {
        if (!query.term || query.term.length < 1) {
            return of([]);
        }
        const /** @type {?} */ path = `${relativePath}/${QueryModel.BuildQueryString(query)}`;
        const /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        const /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        const /** @type {?} */ obs = this.http.get(url, {
            headers: httpHeaders
        });
        return obs.pipe(map(res => res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res), debounceTime(500), distinctUntilChanged(), map(json => HttpActions.matchPath(path, json)), catchError(err => this.onError(err)), finalize(() => {
            this.onComplete('GET', url);
        }));
    }
    ;
    /**
     * Make a POST request.
     * @param {?} relativePath
     * @param {?} body
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    post(relativePath, body, headers = {}, options = new HttpOptions()) {
        const /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        const /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        const /** @type {?} */ obs = this.http.post(url, serialize(body), {
            headers: httpHeaders
        });
        return obs.pipe(map(res => res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res), catchError(err => this.onError(err)), finalize(() => {
            this.onComplete('POST', url);
        }));
    }
    /**
     * Make a POST request with form url-encoded content type.
     * @param {?} relativePath
     * @param {?} body
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    postFormUrlEncoded(relativePath, body, headers = {}, options = new HttpOptions()) {
        const /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        const /** @type {?} */ httpHeaders = new HttpHeaders({ 'content-type': 'application/x-www-form-urlencoded' });
        const /** @type {?} */ obs = this.http.post(url, body, {
            headers: httpHeaders
        });
        return obs.pipe(map(res => res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res), catchError(err => this.onError(err)), finalize(() => {
            this.onComplete('POST FORM URL-ENCODED', url);
        }));
    }
    /**
     * Make a PUT request.
     * @param {?} relativePath
     * @param {?} body
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    put(relativePath, body, headers = {}, options = new HttpOptions()) {
        const /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        const /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        const /** @type {?} */ obs = this.http.put(url, serialize(body), {
            headers: httpHeaders
        });
        return obs.pipe(map(res => res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res), catchError(err => this.onError(err)), finalize(() => {
            this.onComplete('PUT', url);
        }));
    }
    /**
     * This method will be used to format URLs for all cross-origin requests.
     * @param {?} path
     * @return {?}
     */
    formatUrl(path) {
        return `${this.baseUrl}/${path}`;
    }
    /**
     * Use this method when a promise is preferred over an observable.
     * @param {?} url
     * @return {?}
     */
    getPromise(url) {
        return this.get(url)
            .toPromise()
            .then(res => res.json());
    }
    /**
     * @param {?} error
     * @return {?}
     */
    onError(error) {
        let /** @type {?} */ errorBody;
        try {
            errorBody = (error._body) ? JSON.parse(error._body) : { message: 'Internal server error', statusCode: error.status };
        }
        catch (/** @type {?} */ e) {
            if (error.status <= 0) {
                errorBody = { message: 'Internal server error.', statusCode: 500 };
            }
        }
        if (errorBody.message) {
            errorBody.message = errorBody.message.replace('An error has occured in the api.System.Exception: ', '');
            errorBody.message = errorBody.message.substring(0, errorBody.message.indexOf(' at'));
        }
        return throwError(errorBody);
    }
    /**
     * @param {?} method
     * @param {?} url
     * @return {?}
     */
    onComplete(method, url) {
        if (this.logEvents) {
            console.log(`Completed ${method} request to ${url}`);
        }
    }
}
HttpService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
HttpService.ctorParameters = () => [
    { type: HttpClient },
    { type: Observable },
    { type: Observable }
];
/** @nocollapse */ HttpService.ngInjectableDef = defineInjectable({ factory: function HttpService_Factory() { return new HttpService(inject(HttpClient), inject(Observable$1), inject(Observable$1)); }, token: HttpService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class BaseEntity {
    constructor() {
        this.createdBy = null;
        this.createdById = 0;
        this.createdDate = new Date();
        this.formId = 0;
        this.lastModifiedBy = null;
        this.lastModifiedById = 0;
        this.lastModifiedDate = new Date();
        this.matches = [];
        this.ignore = [
            '_metadata',
            'metadata',
            'ignore',
            'createdBy',
            'createdById',
            'createdDate',
            'formId',
            'lastModifiedBy',
            'lastModifiedById',
            'lastModifiedDate',
            'lastModifiedOn',
            'lastUpdated',
            'matches',
        ];
        this._metadata = new Metadata();
    }
    /**
     * @return {?}
     */
    get metadata() {
        return build(Metadata, this._metadata, {
            ignore: this.ignore
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set metadata(value) {
        this._metadata = value;
    }
    /**
     * @return {?}
     */
    static getGetters() {
        return Object.keys(this.prototype).filter(name => {
            return typeof Object.getOwnPropertyDescriptor(this.prototype, name)['get'] === 'function';
        });
    }
    /**
     * @return {?}
     */
    static getSetters() {
        return Object.keys(this.prototype).filter(name => {
            return typeof Object.getOwnPropertyDescriptor(this.prototype, name)['set'] === 'function';
        });
    }
    /**
     * @return {?}
     */
    getGetters() {
        return Object.keys(this.constructor.prototype).filter(name => {
            return typeof Object.getOwnPropertyDescriptor(this.constructor.prototype, name)['get'] === 'function';
        });
    }
    /**
     * @return {?}
     */
    getSetters() {
        return Object.keys(this.constructor.prototype).filter(name => {
            return typeof Object.getOwnPropertyDescriptor(this.constructor.prototype, name)['set'] === 'function';
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    update(value) {
        return Object.assign(new BaseEntity(), value);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ ActionCreator = (actionType) => {
    return (target, propertySignature) => {
        const /** @type {?} */ method = target[propertySignature];
        const /** @type {?} */ decoratedMethod = function () {
            const /** @type {?} */ $this = this;
            const /** @type {?} */ action = method.apply($this, arguments);
            action.actionType = actionType;
            return action;
        };
        target[propertySignature] = decoratedMethod;
        return target;
    };
};
const /** @type {?} */ ActionType = () => {
    return (target, propertySignature) => {
        return target;
    };
};
/**
 * Class Decorator Factory
 * Decorates a class.
 */
const /** @type {?} */ Class = (metadata) => {
    const /** @type {?} */ classDecorator = (target) => {
        return target;
    };
    return classDecorator;
};
const /** @type {?} */ Command = () => {
    return (target, propertySignature) => {
        return target;
    };
};
const /** @type {?} */ Dispatcher = () => {
    return (target, propertySignature) => {
        return target;
    };
};
/**
 * Decorates a class with properties from BaseEntity
 */
const /** @type {?} */ Entity = (metadata) => {
    /**
     * @template TFunction
     * @param {?} target
     * @return {?}
     */
    function classDecorator(target) {
        const /** @type {?} */ ctor = function () {
            Object.assign(this, new BaseEntity(), { metadata: metadata || {} });
        };
        ctor.prototype = Object.create(target.prototype);
        ctor.prototype.constructor = target;
        return /** @type {?} */ (ctor);
    }
    return classDecorator;
};
const /** @type {?} */ EventHandler = () => {
    return (target, propertySignature) => {
        return target;
    };
};
const /** @type {?} */ LifecycleHook = () => {
    return (target, propertySignature) => {
        return target;
    };
};
/**
 * Method Decorator Factory
 * Decorates a method.
 */
const /** @type {?} */ Method = (metadata) => {
    const /** @type {?} */ methodDecorator = (target, propertySignature, descriptor) => {
        return target;
    };
    return methodDecorator;
};
/**
 * Parameter Decorator Factory
 * Decorates a parameter.
 */
const /** @type {?} */ Parameter = (metadata) => {
    const /** @type {?} */ parameterDecorator = (target, propertySignature, parameterIndex) => {
        return target;
    };
    return parameterDecorator;
};
/**
 * Property Decorator Factory
 * Decorates a Property.
 */
const /** @type {?} */ Property = (metadata) => {
    const /** @type {?} */ propertyDecorator = (target, propertySignature) => {
        if (!target.metadata) {
            target.metadata = {};
        }
        target.metadata[propertySignature] = Object.assign(metadata, { propertyName: propertySignature });
        return target;
    };
    return propertyDecorator;
};
/**
 * Static Method Decorator Factory
 * Decorates a static method.
 */
const /** @type {?} */ StaticMethod = (metadata) => {
    const /** @type {?} */ staticMethodDecorator = (target, propertySignature) => {
        return target;
    };
    return staticMethodDecorator;
};
/**
 *  Static Property Decorator Factory
 * Decorates a static property.
 */
const /** @type {?} */ StaticProperty = (metadata) => {
    const /** @type {?} */ staticPropertyDecorator = (target, propertySignature) => {
        return target;
    };
    return staticPropertyDecorator;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class HttpCommands {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    delete$(payload) {
        return this.http.delete(payload.path, payload.headers, payload.options);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    get$(payload) {
        return this.http.get(payload.path, payload.headers, payload.options);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    post$(payload) {
        return this.http.post(payload.path, payload.model, payload.headers, payload.options);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    postFormUrlEncoded$(payload) {
        return this.http.postFormUrlEncoded(payload.path, payload.model, payload.headers, payload.options);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    put$(payload) {
        return this.http.put(payload.path, payload.model, payload.headers, payload.options);
    }
}
HttpCommands.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
HttpCommands.ctorParameters = () => [
    { type: HttpService }
];
/** @nocollapse */ HttpCommands.ngInjectableDef = defineInjectable({ factory: function HttpCommands_Factory() { return new HttpCommands(inject(HttpService)); }, token: HttpCommands, providedIn: "root" });
__decorate([
    Command(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [HttpDeletePayload]),
    __metadata("design:returntype", Observable)
], HttpCommands.prototype, "delete$", null);
__decorate([
    Command(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [HttpGetPayload]),
    __metadata("design:returntype", Observable)
], HttpCommands.prototype, "get$", null);
__decorate([
    Command(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [HttpPostPayload]),
    __metadata("design:returntype", Observable)
], HttpCommands.prototype, "post$", null);
__decorate([
    Command(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [HttpPostPayload]),
    __metadata("design:returntype", Observable)
], HttpCommands.prototype, "postFormUrlEncoded$", null);
__decorate([
    Command(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [HttpPutPayload]),
    __metadata("design:returntype", Observable)
], HttpCommands.prototype, "put$", null);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class HttpEffects {
    /**
     * @param {?} actions$
     * @param {?} commands
     */
    constructor(actions$, commands) {
        this.actions$ = actions$;
        this.commands = commands;
        this.onDelete$ = this.actions$.pipe(ofType(HttpActions.DELETE), mergeMap((action) => this.delete$(action.payload)));
        this.onGet$ = this.actions$.pipe(ofType(HttpActions.GET), mergeMap((action) => this.get$(action.payload)));
        this.onPost$ = this.actions$.pipe(ofType(HttpActions.POST), mergeMap((action) => this.post$(action.payload)));
        this.onPostFormUrlEncoded$ = this.actions$.pipe(ofType(HttpActions.POST_FORM_URL_ENCODED), mergeMap((action) => this.postFormUrlEncoded$(action.payload)));
        this.onPut$ = this.actions$.pipe(ofType(HttpActions.PUT), mergeMap((action) => this.put$(action.payload)));
        this.onSearch$ = this.actions$.pipe(ofType(HttpActions.SEARCH), mergeMap((action) => this.search$(action.payload)));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    delete$(payload) {
        // console.log('DELETE:\t', payload.onSuccess);
        return this.commands.delete$(payload).pipe(map((model) => HttpActions.deleteSuccess(payload.onSuccessPayload || model, payload.onSuccess)), catchError((e) => of(HttpActions.deleteError(e, payload.onError))));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    get$(payload) {
        // console.log('GET:\t', payload.onSuccess);
        return this.commands.get$(payload).pipe(map((model) => HttpActions.getSuccess(model, payload.onSuccess)), catchError((e) => of(HttpActions.getError(e, payload.onError))));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    post$(payload) {
        // console.log('POST:\t', payload.onSuccess);
        return this.commands.post$(payload).pipe(map((model) => HttpActions.postSuccess(model, payload.onSuccess)), catchError((e) => of(HttpActions.postError(e, payload.onError))));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    postFormUrlEncoded$(payload) {
        // console.log('POST:\t', payload.onSuccess);
        return this.commands.postFormUrlEncoded$(payload).pipe(map((model) => HttpActions.postSuccess(model, payload.onSuccess)), catchError((e) => of(HttpActions.postError(e, payload.onError))));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    put$(payload) {
        // console.log('PUT:\t', payload.onSuccess);
        return this.commands.put$(payload).pipe(map((model) => HttpActions.putSuccess(model, payload.onSuccess)), catchError((e) => of(HttpActions.putError(e, payload.onError))));
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    search$(payload) {
        // console.log('SEARCH:\t', payload.onSuccess);
        return this.commands.get$(payload).pipe(map((model) => HttpActions.searchSuccess(model, payload.onSuccess, payload.path)), catchError((e) => of(HttpActions.getError(e, payload.onError))));
    }
}
HttpEffects.decorators = [
    { type: Injectable },
];
/** @nocollapse */
HttpEffects.ctorParameters = () => [
    { type: Actions },
    { type: HttpCommands }
];
__decorate([
    Effect(),
    __metadata("design:type", Object)
], HttpEffects.prototype, "onDelete$", void 0);
__decorate([
    Effect(),
    __metadata("design:type", Object)
], HttpEffects.prototype, "onGet$", void 0);
__decorate([
    Effect(),
    __metadata("design:type", Object)
], HttpEffects.prototype, "onPost$", void 0);
__decorate([
    Effect(),
    __metadata("design:type", Object)
], HttpEffects.prototype, "onPostFormUrlEncoded$", void 0);
__decorate([
    Effect(),
    __metadata("design:type", Object)
], HttpEffects.prototype, "onPut$", void 0);
__decorate([
    Effect(),
    __metadata("design:type", Object)
], HttpEffects.prototype, "onSearch$", void 0);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ BASE_URL$ = new InjectionToken('API Base URL');
const /** @type {?} */ AUTH_TOKEN$ = new InjectionToken('API Auth Token');
/**
 * @param {?} store
 * @param {?} baseUrlSelector
 * @return {?}
 */
function baseUrlFactory(store, baseUrlSelector) {
    return store.pipe(baseUrlSelector);
}
/**
 * @param {?} store
 * @param {?} authTokenSelector
 * @return {?}
 */
function authTokenFactory(store, authTokenSelector) {
    return store.pipe(authTokenSelector);
}
/**
 * @param {?} http
 * @param {?} baseUrl$
 * @param {?} authToken$
 * @return {?}
 */
function httpServiceFactory(http, baseUrl$, authToken$) {
    return new HttpService(http, baseUrl$, authToken$);
}
/**
 * @param {?} urlSelector
 * @param {?} authTokenSelector
 * @return {?}
 */
function provideHttpContext(urlSelector, authTokenSelector) {
    return [
        HttpEffects,
        HttpCommands,
        { provide: HttpService, useFactory: httpServiceFactory, deps: [HttpClient, 'BASE_URL$', 'AUTH_TOKEN$'] },
        { provide: 'URL_SELECTOR', useValue: urlSelector },
        { provide: 'BASE_URL$', useFactory: baseUrlFactory, deps: [Store, 'URL_SELECTOR'] },
        { provide: 'TOKEN_SELECTOR', useValue: authTokenSelector },
        { provide: 'AUTH_TOKEN$', useFactory: authTokenFactory, deps: [Store, 'TOKEN_SELECTOR'] },
    ];
}
class HttpModule {
    /**
     * @param {?} baseUrlSelector
     * @param {?} authTokenSelector
     * @return {?}
     */
    static forRoot(baseUrlSelector, authTokenSelector) {
        return {
            ngModule: HttpModule,
            providers: provideHttpContext(baseUrlSelector, authTokenSelector)
        };
    }
}
HttpModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    HttpClientModule,
                ],
                exports: [
                    HttpClientModule,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LookupActions {
    /**
     * @param {?} payload
     * @return {?}
     */
    static addKey(payload) {
        return {
            type: LookupActions.ADD_KEY,
            payload: payload
        };
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    static addValues(payload) {
        return {
            type: LookupActions.ADD_VALUES,
            payload: payload
        };
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static removeKey(key) {
        return {
            type: LookupActions.REMOVE_KEY,
            payload: key
        };
    }
}
LookupActions.ADD_KEYS = '[Lookup] Add keys';
LookupActions.ADD_KEY = '[Lookup] Add key';
LookupActions.ADD_VALUES = '[Lookup] Add values';
LookupActions.REMOVE_KEY = '[Lookup] Remove key';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Lookup {
    constructor() {
        this.typeName = '';
        this.values = [];
        this._key = '';
    }
    /**
     * @return {?}
     */
    get key() {
        return this._key || this.typeName;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set key(value) {
        this._key = value;
    }
    /**
     * @return {?}
     */
    get name() {
        return this.key;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set name(value) {
        this.key = value;
    }
    /**
     * @return {?}
     */
    get names() {
        return this.values.map(x => x.name);
    }
}
class LookupValue {
    constructor() {
        this.id = 0;
        this.active = true;
        this.description = '';
        this.name = '';
        this.sort = 0;
        this.tooltip = '';
        this._label = '';
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value || this.id;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value;
    }
    /**
     * @return {?}
     */
    get label() {
        return this._label || this.description;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set label(value) {
        this._label = value;
    }
}
class Lookups {
    /**
     * @param {?} state
     * @param {?} lookups
     * @return {?}
     */
    static AddLookups(state$$1, lookups) {
        return lookups.reduce((acc, lookup) => build(Lookups, acc, { [lookup.key]: build(Lookup, lookup) }), state$$1);
    }
    /**
     * @param {?} state
     * @param {?} lookup
     * @return {?}
     */
    static AddLookup(state$$1, lookup) {
        return build(Lookups, state$$1, {
            [lookup.key]: build(Lookup, lookup)
        });
    }
    /**
     * @param {?} values
     * @param {?} names
     * @return {?}
     */
    static BuildLookupValues(values, names) {
        return names.reduce((acc, name) => {
            const /** @type {?} */ value = values.find(x => x.name === name);
            return value ? [...acc, value] : [...acc];
        }, []);
    }
    /**
     * @param {?} values
     * @param {?} name
     * @return {?}
     */
    static FindLookupIdByName(values, name) {
        const /** @type {?} */ lkp = build(LookupValue, values.find(x => x.name === name));
        return lkp.id;
    }
    /**
     * @param {?} values
     * @param {?} id
     * @return {?}
     */
    static FindLookupNameById(values, id) {
        const /** @type {?} */ lkp = build(LookupValue, values.find(x => x.id === id));
        return lkp.name;
    }
    /**
     * @param {?} state
     * @param {?} removeKey
     * @return {?}
     */
    static RemoveLookup(state$$1, removeKey) {
        const /** @type {?} */ newState = new Lookups();
        const /** @type {?} */ keys = Object.keys(state$$1).filter(key => key !== removeKey);
        keys.forEach(key => {
            newState[key] = Object.assign({}, state$$1[key]);
        });
        return newState;
    }
}
class AddLookupPayload {
    constructor() {
        this.key = '';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LookupService {
    /**
     * @param {?} store
     * @param {?=} lookupPath
     * @param {?=} lookupKeys
     */
    constructor(store, lookupPath = 'lookup', lookupKeys = []) {
        this.store = store;
        this._keys = [];
        this.path = 'lookup';
        this.path = lookupPath;
        this.keys = lookupKeys;
    }
    /**
     * @return {?}
     */
    get keys() {
        return this._keys;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set keys(value) {
        this._keys = value;
    }
    /**
     * @param {?} keys
     * @param {?=} values
     * @return {?}
     */
    load(keys, values) {
        if (values) {
            this.loadValues(values);
        }
        this.loadKeys(keys);
    }
    /**
     * @param {?} keys
     * @return {?}
     */
    loadKeys(keys) {
        this.keys = keys;
        this.store.dispatch(HttpActions.get(`${this.path}${this.buildQueryString()}`, LookupActions.ADD_KEYS));
    }
    /**
     * @param {?} values
     * @return {?}
     */
    loadValues(values) {
        this.store.dispatch(LookupActions.addValues(values));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    lookup(key) {
        return this.store.select('lookup').pipe(map(s => s[key]));
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    addKey(key, value) {
        this.store.dispatch(LookupActions.addKey(build(AddLookupPayload, {
            key: key,
            value: value
        })));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeKey(key) {
        this.store.dispatch(LookupActions.removeKey(key));
    }
    /**
     * @return {?}
     */
    buildQueryString() {
        let /** @type {?} */ query = this.keys.length > 0 ? `?keys=${this.keys[0]}` : '';
        this.keys.filter((key, index) => index !== 0)
            .forEach(key => {
            query += `&keys=${key}`;
        });
        return query;
    }
}
LookupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
LookupService.ctorParameters = () => [
    { type: Store },
    { type: undefined, decorators: [{ type: Inject, args: [LOOKUP_PATH,] }] },
    { type: Array, decorators: [{ type: Inject, args: [LOOKUP_KEYS,] }] }
];
/** @nocollapse */ LookupService.ngInjectableDef = defineInjectable({ factory: function LookupService_Factory() { return new LookupService(inject(Store), inject(LOOKUP_PATH), inject(LOOKUP_KEYS)); }, token: LookupService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ LOOKUP_PATH = new InjectionToken('API lookup endpoint');
const /** @type {?} */ LOOKUP_KEYS = new InjectionToken('API lookup keys');
/**
 * @param {?} store
 * @param {?=} LOOKUP_PATH
 * @param {?=} LOOKUP_KEYS
 * @return {?}
 */
function lookupServiceFactory(store, LOOKUP_PATH = 'lookup', LOOKUP_KEYS = []) {
    return new LookupService(store, LOOKUP_PATH, LOOKUP_KEYS);
}
/**
 * @param {?=} path
 * @param {?=} keys
 * @return {?}
 */
function provideLookup(path = '', keys = []) {
    return [
        { provide: LookupService, useFactory: lookupServiceFactory, deps: [Store, LOOKUP_PATH, LOOKUP_KEYS] },
        { provide: LOOKUP_PATH, useValue: path },
        { provide: LOOKUP_KEYS, useValue: keys },
    ];
}
class LookupModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: LookupModule,
            providers: provideLookup('lookup', [])
        };
    }
    /**
     * @param {?=} path
     * @return {?}
     */
    static forRootWithPath(path = '') {
        return {
            ngModule: LookupModule,
            providers: provideLookup(path, [])
        };
    }
    /**
     * @param {?} keys
     * @return {?}
     */
    static forRootWithKeys(keys) {
        return {
            ngModule: LookupModule,
            providers: provideLookup('lookup', keys)
        };
    }
    /**
     * @param {?=} path
     * @param {?=} keys
     * @return {?}
     */
    static forRootWithPathAndKeys(path = '', keys) {
        return {
            ngModule: LookupModule,
            providers: provideLookup(path, keys)
        };
    }
}
LookupModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AppActions {
    /**
     * @return {?}
     */
    static noAction() {
        return {
            type: AppActions.NO_ACTION
        };
    }
}
AppActions.INIT_STORE = '[Storage] Init Store';
AppActions.NO_ACTION = '[App] No Action';
class ConfigActions {
    /**
     * @param {?} config
     * @return {?}
     */
    static initialize(config) {
        return {
            type: ConfigActions.INITIALIZE,
            payload: config
        };
    }
}
ConfigActions.INITIALIZE = '[Config] Initialize Configuration';
class SidenavActions {
    /**
     * @return {?}
     */
    static close() {
        return {
            type: SidenavActions.CLOSE
        };
    }
    /**
     * @return {?}
     */
    static open() {
        return {
            type: SidenavActions.OPEN
        };
    }
    /**
     * @return {?}
     */
    static toggle() {
        return {
            type: SidenavActions.TOGGLE
        };
    }
}
SidenavActions.CLOSE = '[Sidenav] Close';
SidenavActions.OPEN = '[Sidenav] Open';
SidenavActions.TOGGLE = '[Sidenav] Toggle';
class WindowActions {
    /**
     * @param {?} payload
     * @return {?}
     */
    static resize(payload) {
        return {
            type: WindowActions.RESIZE,
            payload
        };
    }
}
WindowActions.RESIZE = '[Window] Resize';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
function lookupReducer(state$$1 = new Lookups(), action) {
    switch (action.type) {
        case LookupActions.ADD_KEYS:
            return Lookups.AddLookups(state$$1, toArray(action.payload).map(x => build(Lookup, x)));
        case LookupActions.ADD_KEY:
            return Lookups.AddLookup(state$$1, action.payload);
        case LookupActions.ADD_VALUES:
            return Lookups.AddLookups(state$$1, action.payload);
        case LookupActions.REMOVE_KEY:
            return Lookups.RemoveLookup(state$$1, action.payload);
        case AppActions.INIT_STORE:
            return build(Lookups, action.payload['lookup']);
        default:
            return state$$1;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} store
 * @return {?}
 */
function lookupSelector(store) {
    return store.select(s => s['lookup']);
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
function lookupKeySelector(store, key) {
    return lookupSelector(store).pipe(map(lookup => lookup[key] || new Lookup()));
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
function lookupValuesSelector(store, key) {
    return lookupKeySelector(store, key).pipe(map(lookup => lookup.values));
}
/**
 * @param {?} store
 * @param {?} key
 * @param {?} f
 * @return {?}
 */
function lookupValueSelector(store, key, f) {
    const /** @type {?} */ values$ = lookupValuesSelector(store, key);
    return values$.pipe(map(values => values.find(f) || new LookupValue()));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RouterActions {
    /**
     * @param {?} routeName
     * @param {?=} parent
     * @return {?}
     */
    static activate(routeName, parent) {
        const /** @type {?} */ payload = {
            routeName,
            parent
        };
        return {
            type: RouterActions.ACTIVATE,
            payload
        };
    }
    /**
     * @param {?} r
     * @return {?}
     */
    static navigate(r) {
        return {
            type: RouterActions.NAVIGATE,
            payload: r
        };
    }
    /**
     * @return {?}
     */
    static navigateSuccess() {
        return {
            type: RouterActions.NAVIGATE_SUCCESS
        };
    }
    /**
     * @return {?}
     */
    static navigateError() {
        return {
            type: RouterActions.NAVIGATE_ERROR
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    static navCancel(e) {
        return {
            type: RouterActions.NAVIGATION_CANCEL,
            payload: e
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    static navEnd(e) {
        return {
            type: RouterActions.NAVIGATION_END,
            payload: e
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    static navError(e) {
        return {
            type: RouterActions.NAVIGATION_ERROR,
            payload: e
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    static navStart(e) {
        return {
            type: RouterActions.NAVIGATION_START,
            payload: e
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    static routesRecognized(e) {
        return {
            type: RouterActions.ROUTES_RECOGNIZED,
            payload: e
        };
    }
}
RouterActions.ACTIVATE = '[Router] Activate Route';
RouterActions.NAVIGATE = '[Router] Navigate';
RouterActions.NAVIGATE_SUCCESS = '[Router] Navigate Success';
RouterActions.NAVIGATE_ERROR = '[Router] Navigate Error';
RouterActions.NAVIGATION_CANCEL = '[Router] Cancel Navigation';
RouterActions.NAVIGATION_END = '[Router] End Navigation';
RouterActions.NAVIGATION_ERROR = '[Router] Error Navigation';
RouterActions.NAVIGATION_START = '[Router] Start Navigation';
RouterActions.ROUTES_RECOGNIZED = '[Router] Routes Recognized';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RouterService {
    /**
     * @param {?} _router
     * @param {?} _route
     * @param {?} store
     */
    constructor(_router, _route, store) {
        this._router = _router;
        this._route = _route;
        this.store = store;
        this.navigationCancel = new EventEmitter();
        this.navigationEnd = new EventEmitter();
        this.navigationError = new EventEmitter();
        this.navigationStart = new EventEmitter();
        this.routesRecognized = new EventEmitter();
        _router.events.subscribe((e) => {
            if (e instanceof NavigationCancel) {
                this.onNavigationCancel(e);
            }
            else if (e instanceof NavigationEnd) {
                this.onNavigationEnd(e);
            }
            else if (e instanceof NavigationError) {
                this.onNavigationError(e);
            }
            else if (e instanceof NavigationStart) {
                this.onNavigationStart(e);
            }
            else if (e instanceof RoutesRecognized) {
                this.onRoutesRecognized(e);
            }
        });
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onNavigationCancel(e) {
        this.store.dispatch(RouterActions.navCancel(e));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onNavigationEnd(e) {
        this.store.dispatch(RouterActions.navEnd(e));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onNavigationError(e) {
        this.store.dispatch(RouterActions.navError(e));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onNavigationStart(e) {
        this.store.dispatch(RouterActions.navStart(e));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onRoutesRecognized(e) {
        this.store.dispatch(RouterActions.routesRecognized(e));
    }
    /**
     * @return {?}
     */
    get activatedRoute() {
        return this._route;
    }
    /**
     * @return {?}
     */
    get routeData$() {
        return this.activatedRoute.data;
    }
    /**
     * @return {?}
     */
    get routeParams$() {
        return this.activatedRoute.params;
    }
    /**
     * @return {?}
     */
    get router() {
        return this._router;
    }
    /**
     * @return {?}
     */
    get url$() {
        return this.store.select(s => s.router.url);
    }
    /**
     * @param {?} commands
     * @param {?=} extras
     * @return {?}
     */
    navigate(commands, extras) {
        const /** @type {?} */ promise = this.router.navigate(commands, extras);
        return from(promise);
    }
    /**
     * @param {?} url
     * @param {?=} extras
     * @return {?}
     */
    navigateByUrl(url, extras) {
        const /** @type {?} */ promise = this.router.navigateByUrl(url, extras);
        return from(promise);
    }
}
RouterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
RouterService.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: Store }
];
/** @nocollapse */ RouterService.ngInjectableDef = defineInjectable({ factory: function RouterService_Factory() { return new RouterService(inject(Router), inject(ActivatedRoute), inject(Store)); }, token: RouterService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RouterEffects {
    /**
     * @param {?} actions$
     * @param {?} router
     */
    constructor(actions$, router) {
        this.actions$ = actions$;
        this.router = router;
        /**
         * All imperative navigation should be performed using this effects
         * so that the state is aware of the navigation.
         */
        this.navigate = this.actions$.pipe(ofType(RouterActions.NAVIGATE), switchMap((action) => this.navigate$(action.payload)));
    }
    /**
     * @param {?} r
     * @return {?}
     */
    navigate$(r) {
        const /** @type {?} */ nav$ = typeof (r) === 'string' ? this.router.navigateByUrl(r) : this.router.navigate(r);
        return nav$.pipe(map(() => RouterActions.navigateSuccess()), catchError((e) => {
            return of(RouterActions.navigateError());
        }));
    }
}
RouterEffects.decorators = [
    { type: Injectable },
];
/** @nocollapse */
RouterEffects.ctorParameters = () => [
    { type: Actions },
    { type: RouterService }
];
__decorate([
    Effect(),
    __metadata("design:type", Observable)
], RouterEffects.prototype, "navigate", void 0);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RouterModule$1 {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: RouterModule$1,
            providers: [RouterService, RouterEffects]
        };
    }
}
RouterModule$1.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule],
                exports: [RouterModule]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ActivatedRoutePayload {
    constructor() {
        this.routeName = '';
    }
}
class Breadcrumbs {
    /**
     * @param {?} segments
     */
    constructor(segments) {
        this.segments = segments;
    }
}
class CustomRoute {
    /**
     * @param {?} props
     */
    constructor(props) {
        this.children = [];
        this.lazyChildren = [];
        this._path = '';
        assignProps(this, props);
    }
    /**
     * @return {?}
     */
    get path() {
        return this._path;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set path(value) {
        this._path = value;
    }
    /**
     * @return {?}
     */
    get route() {
        return {
            component: this.component,
            children: [
                ...this.children,
                ...this.lazyChildren
            ]
        };
    }
}
class LazyRoute extends CustomRoute {
    /**
     * @param {?} props
     */
    constructor(props) {
        super(props);
        this.path = '';
    }
}
/** @enum {number} */
const NavigationStatus = {
    Default: 0,
    NavigationStart: 1,
    NavigationCancel: 2,
    NavigationError: 3,
    RoutesRecognized: 4,
    NavigationEnd: 5,
};
NavigationStatus[NavigationStatus.Default] = "Default";
NavigationStatus[NavigationStatus.NavigationStart] = "NavigationStart";
NavigationStatus[NavigationStatus.NavigationCancel] = "NavigationCancel";
NavigationStatus[NavigationStatus.NavigationError] = "NavigationError";
NavigationStatus[NavigationStatus.RoutesRecognized] = "RoutesRecognized";
NavigationStatus[NavigationStatus.NavigationEnd] = "NavigationEnd";
class RouteSegment {
    constructor() {
        /**
         * The URL fragment shared by all the routes
         */
        this.fragment = '';
        /**
         * The order of the segment in the route
         */
        this.order = 0;
        /**
         * The outlet name of the route
         */
        this.outlet = '';
        /**
         * The label to pass to the anchor tag
         */
        this.routeLabel = '';
        /**
         * The unique identifier for the route segment
         */
        this.routeName = '';
    }
    /**
     * The link to pass to the anchor tag
     * @return {?}
     */
    get routerLink() {
        return this.pathFromRoot
            .map(r => r.url)
            .reduce((acc, x) => {
            const /** @type {?} */ segment = RouterState.BuildUrlSegment(x);
            return segment && segment !== '/' ? `${acc}${segment}` : acc;
        }, '');
    }
}
class RouterState {
    constructor() {
        this.id = 0;
        this.error = undefined;
        this.events = [];
        this.history = [];
        this.navigationStatus = NavigationStatus.Default;
        this.reason = '';
        this.state = undefined;
        this.url = '';
        this.urlAfterRedirects = '';
    }
    /**
     * @param {?} props
     * @return {?}
     */
    static BuildRoute(props) {
        const /** @type {?} */ r = new CustomRoute(props);
        return /** @type {?} */ (r);
    }
    /**
     * @param {?} props
     * @return {?}
     */
    static BuildLazyRoute(props) {
        const /** @type {?} */ r = new LazyRoute(props);
        return /** @type {?} */ (r);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    static BuildUrlSegment(url) {
        return url.reduce((acc, segment) => segment.path && segment.path !== '/' ? `${acc}/${segment.path}` : acc, '');
    }
    /**
     * @param {?} root
     * @param {?=} index
     * @return {?}
     */
    static GetActivatedOutlets(root, index = 0) {
        return root ? root.children.reduce((acc, r, currentIndex) => {
            const /** @type {?} */ i = index + currentIndex;
            const /** @type {?} */ routeName = RouterState.GetRouteName(r);
            const /** @type {?} */ existing = build(RouteSegment, acc[routeName]);
            const /** @type {?} */ outlet = RouterState.GetRouteSegment(r, existing, i);
            return routeName ? Object.assign(acc, RouterState.GetActivatedOutlets(r, i + 1), { [routeName]: outlet })
                : Object.assign(acc, RouterState.GetActivatedOutlets(r, i + 1));
        }, {}) : {};
    }
    /**
     * @param {?} root
     * @return {?}
     */
    static GetActivatedRoute(root) {
        return root.children.reduce((acc, r) => {
            return RouterState.GetActivatedRoute(r);
        }, root);
    }
    /**
     * @param {?} route
     * @return {?}
     */
    static GetAllParams(route) {
        return route ? route.children.reduce((acc, r) => {
            return Object.assign({}, acc, RouterState.GetAllParams(r));
        }, Object.assign({}, route.params, route.queryParams)) : {};
    }
    /**
     * @param {?} route
     * @return {?}
     */
    static GetRouteData(route) {
        return route.data;
    }
    /**
     * @param {?} route
     * @param {?=} existing
     * @param {?=} index
     * @return {?}
     */
    static GetRouteSegment(route, existing = new RouteSegment(), index = 0) {
        const /** @type {?} */ routeName = RouterState.GetRouteName(route);
        return build(RouteSegment, existing, {
            data: route.data,
            fragment: route.fragment,
            order: index,
            outlet: route.outlet,
            pathFromRoot: route.pathFromRoot,
            params: route.params,
            routeName,
            routeLabel: RouterState.GetRouteData(route)['routeLabel'] || existing.routeLabel
        });
    }
    /**
     * @param {?} route
     * @return {?}
     */
    static GetRouteName(route) {
        return route ? RouterState.GetRouteData(route)['routeName'] : '';
    }
    /**
     * @return {?}
     */
    get activatedOutlets() {
        return RouterState.GetActivatedOutlets(this.rootRoute);
    }
    /**
     * @return {?}
     */
    get lastEvent() {
        return this.events[-1];
    }
    /**
     * @return {?}
     */
    get params() {
        return RouterState.GetAllParams(this.rootRoute);
    }
    /**
     * @return {?}
     */
    get routeName() {
        return RouterState.GetRouteName(this.activatedRoute);
    }
    /**
     * @return {?}
     */
    get visited() {
        return this.history.map(x => x.link);
    }
    /**
     * @param {?} e
     * @param {?} eventType
     * @return {?}
     */
    addRouterEvent(e, eventType) {
        const /** @type {?} */ newEvent = /** @type {?} */ ({ eventType: eventType, event: e });
        return [
            ...this.events,
            newEvent
        ];
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    navigationCancel(payload) {
        return build(RouterState, this, {
            navigationStatus: NavigationStatus.NavigationCancel,
            events: this.addRouterEvent(payload, NavigationStatus.NavigationCancel),
            id: payload.id,
            url: payload.url,
            reason: payload.reason
        });
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    navigationEnd(payload) {
        const /** @type {?} */ history = [payload.toString(), ...this.history];
        return build(RouterState, this, {
            history,
            navigationStatus: NavigationStatus.NavigationEnd,
            events: this.addRouterEvent(payload, NavigationStatus.NavigationEnd),
            id: payload.id,
            url: payload.url,
            urlAfterRedirects: payload.urlAfterRedirects
        });
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    navigationError(payload) {
        return build(RouterState, this, {
            navigationStatus: NavigationStatus.NavigationError,
            events: this.addRouterEvent(payload, NavigationStatus.NavigationError),
            id: payload.id,
            url: payload.url,
            error: payload.error
        });
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    navigationStart(payload) {
        return build(RouterState, this, {
            navigationStatus: NavigationStatus.NavigationStart,
            events: this.addRouterEvent(payload, NavigationStatus.NavigationStart),
            id: payload.id,
            url: payload.url
        });
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    routesRecognized(payload) {
        const /** @type {?} */ rootRoute = payload.state.root;
        const /** @type {?} */ activatedRoute = RouterState.GetActivatedRoute(rootRoute);
        return build(RouterState, this, {
            activatedRoute,
            rootRoute,
            navigationStatus: NavigationStatus.RoutesRecognized,
            events: this.addRouterEvent(payload, NavigationStatus.RoutesRecognized),
            id: payload.id,
            state: payload.state,
            url: payload.url,
            urlAfterRedirects: payload.urlAfterRedirects
        });
    }
}
class VisitedRoute {
    constructor() {
        this.label = '';
        this.link = '';
        this.name = '';
        this.visitTime = new Date();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
function routerReducer(state$$1 = new RouterState(), action) {
    switch (action.type) {
        case RouterActions.ACTIVATE:
            return state$$1;
        case RouterActions.NAVIGATION_CANCEL:
            // console.log(RouterActions.NAVIGATION_CANCEL, action.payload);
            return state$$1.navigationCancel(action.payload);
        case RouterActions.NAVIGATION_END:
            // console.log(RouterActions.NAVIGATION_END, action.payload);
            return state$$1.navigationEnd(action.payload);
        case RouterActions.NAVIGATION_ERROR:
            // console.log(RouterActions.NAVIGATION_ERROR, action.payload);
            return state$$1.navigationError(action.payload);
        case RouterActions.NAVIGATION_START:
            // console.log(RouterActions.NAVIGATION_START, action.payload);
            return state$$1.navigationStart(action.payload);
        case RouterActions.ROUTES_RECOGNIZED:
            // console.log(RouterActions.ROUTES_RECOGNIZED, action.payload);
            // console.log(getAllParams(action.payload.state.root));
            return state$$1.routesRecognized(action.payload);
        default:
            return state$$1;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} store
 * @return {?}
 */
function routeSelector(store) {
    return store.select('route');
}
/**
 * @param {?} store
 * @return {?}
 */
function breadcrumbsSelector(store) {
    return routeSelector(store).pipe(map(r => {
        const /** @type {?} */ outlets = r.activatedOutlets;
        return new Breadcrumbs(Object.keys(outlets).map(key => outlets[key]));
    }));
}
/**
 * @param {?} store
 * @return {?}
 */
function routeNameSelector(store) {
    return routeSelector(store).pipe(map(r => r.routeName), distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
function routeParamsSelector(store) {
    return routeSelector(store).pipe(map(r => r.params), distinctUntilChanged());
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
function lazyRouteParamsSelector(store, key) {
    return routeParamsSelector(store).pipe(map(params => params[key]), distinctUntilChanged());
}
/**
 * @param {?} store
 * @param {?} key
 * @param {?=} defaultValue
 * @return {?}
 */
function routeParamSelector(store, key, defaultValue = null) {
    return combineLatest$1(of(defaultValue), lazyRouteParamsSelector(store, key), (x, y) => {
        return y || x;
    });
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
function routeParamArraySelector(store, key) {
    return routeParamSelector(store, key, []).pipe(map(x => toArray(x)));
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
function routeParamIdSelector(store, key) {
    return routeParamIntSelector(store, key);
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
function routeParamIntSelector(store, key) {
    return routeParamSelector(store, key, 0).pipe(map(x => toInt(x)));
}
/**
 * @param {?} store
 * @return {?}
 */
function urlSelector(store) {
    return routeSelector(store).pipe(map(r => r.url), distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
function querySelector(store) {
    const /** @type {?} */ skip$ = routeParamIntSelector(store, 'skip');
    const /** @type {?} */ take$ = routeParamIntSelector(store, 'take');
    const /** @type {?} */ term$ = routeParamSelector(store, 'term');
    return combineLatest$1(skip$, take$, term$, (skip$$1, take$$1, term) => (Object.assign(new QueryModel(), {
        skip: skip$$1,
        take: take$$1,
        term
    })));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Token {
    constructor() {
        this.access_token = '';
        this.expiresIn = 0;
    }
    /**
     * @return {?}
     */
    get authenticated() {
        return !this.expired;
    }
    /**
     * @return {?}
     */
    get expires_in() {
        return this.expiresIn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set expires_in(value) {
        this.expiresIn = value;
        this.expiresInDate = new Date();
    }
    /**
     * @return {?}
     */
    get expirationDate() {
        const /** @type {?} */ t = new Date(this.expiresInDate);
        t.setSeconds(t.getSeconds() + this.expiresIn);
        return t;
    }
    /**
     * @return {?}
     */
    get expired() {
        const /** @type {?} */ now = new Date();
        return this.access_token && this.expiresIn && this.expiresInDate ? now > this.expirationDate : true;
    }
    /**
     * @return {?}
     */
    toString() {
        return this.expired ? '' : this.access_token;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Window {
    constructor() {
        this.windowHeight = 0;
        this.windowWidth = 0;
    }
    /**
     * @return {?}
     */
    get windowWidthSmall() {
        return this.windowWidth < 1200;
    }
    /**
     * @return {?}
     */
    get windowWidthMedium() {
        return !this.windowWidthSmall && this.windowWidth < 1300;
    }
    /**
     * @return {?}
     */
    get windowWidthLarge() {
        return this.windowWidth >= 1300;
    }
}
class WindowResize {
    constructor() {
        this.windowHeight = 0;
        this.windowWidth = 0;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} store
 * @return {?}
 */
function allSelector(store) {
    return store.pipe(map(x => x));
}
/**
 * @param {?} store
 * @return {?}
 */
function emptySelector(store) {
    return of({});
}
/**
 * @param {?} store
 * @return {?}
 */
function currentUserSelector(store) {
    return store.select('currentUser');
}
/**
 * @param {?} store
 * @return {?}
 */
function authenticatedSelector(store) {
    return currentUserSelector(store).pipe(map(user => user.authenticated), distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
function configSelector(store) {
    return store.select('config');
}
/**
 * @param {?} store
 * @return {?}
 */
function windowSelector(store) {
    return store.select('window').pipe(map(w => build(Window, w)));
}
/**
 * @param {?} store
 * @return {?}
 */
function windowHeightSelector(store) {
    return windowSelector(store).pipe(map(window => window.windowHeight), distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
function windowWidthSelector(store) {
    return windowSelector(store).pipe(map(window => window.windowWidth), distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
function containerHeightSelector(store) {
    return windowHeightSelector(store).pipe(map(h => h === 0 ? 700 : h));
}
/**
 * @param {?} store
 * @return {?}
 */
function containerWidthSelector(store) {
    return windowWidthSelector(store).pipe(map(w => w === 0 ? 1200 : w));
}
/**
 * @param {?} store
 * @return {?}
 */
function contentHeightSelector(store) {
    return windowHeightSelector(store).pipe(map(h => h === 0 ? 700 : h));
}
/**
 * @param {?} store
 * @return {?}
 */
function contentWidthSelector(store) {
    return windowWidthSelector(store).pipe(map(w => w === 0 ? 1200 : w));
}
/**
 * @param {?} store
 * @return {?}
 */
function sidenavOpenedSelector(store) {
    return (/** @type {?} */ (store.select('sidenav'))).pipe(distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
function apiBaseUrlSelector(store) {
    return configSelector(store).pipe(map(config => config.apiBaseUrl));
}
/**
 * @param {?} store
 * @return {?}
 */
function authTokenSelector(store) {
    return currentUserSelector(store).pipe(map(user => {
        const /** @type {?} */ token = user && user.token ? build(Token, user.token) : new Token();
        return token.toString();
    }));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AuthenticatedGuard {
    /**
     * @param {?} store
     */
    constructor(store) {
        this.store = store;
        this.authenticated$ = authenticatedSelector(this.store);
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state$$1) {
        return this.authenticated$;
    }
}
AuthenticatedGuard.decorators = [
    { type: Injectable },
];
/** @nocollapse */
AuthenticatedGuard.ctorParameters = () => [
    { type: Store }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DumbComponent {
    constructor() {
        this.requestState = 'DEFAULT';
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    get inErrorState() {
        return this.requestState === 'ERROR';
    }
    /**
     * @return {?}
     */
    get inSuccessState() {
        return this.requestState === 'SUCCESS';
    }
    /**
     * @return {?}
     */
    get message() {
        return this.inErrorState ? `An error has occurred. Please try again later.`
            : this.inSuccessState ? `Saved successfully!` : '';
    }
    /**
     * @return {?}
     */
    get showMessage() {
        return this.inErrorState || this.inSuccessState;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeSubscriptions();
    }
    /**
     * @param {?} subscription
     * @return {?}
     */
    addSubscription(subscription) {
        this.subscriptions.push(subscription);
    }
    /**
     * @param {?} result
     * @return {?}
     */
    closeDialog(result) {
        this.dialogRef.unsubscribe();
    }
    /**
     * @param {?} component
     * @param {?=} config
     * @return {?}
     */
    openDialog(component, config = {}) {
        const /** @type {?} */ dialogRef = this.dialog.open(component, config);
        this.dialogRef = dialogRef.afterClosed().subscribe(result => {
            this.closeDialog(result);
        });
    }
    /**
     * @return {?}
     */
    removeSubscriptions() {
        this.subscriptions.forEach(s => {
            s.unsubscribe();
        });
    }
    /**
     * @param {?} subscriptions
     * @return {?}
     */
    subscribe(subscriptions) {
        subscriptions.forEach(s => {
            this.addSubscription(s);
        });
    }
    /**
     * @param {?=} duration
     * @return {?}
     */
    flashErrorMessage(duration = 5000) {
        this.toErrorState();
        setTimeout(() => {
            this.resetRequestState();
        }, duration);
    }
    /**
     * @param {?=} duration
     * @return {?}
     */
    flashSuccessMessage(duration = 5000) {
        this.toSucessState();
        setTimeout(() => {
            this.resetRequestState();
        }, duration);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onError(e) {
        this.flashErrorMessage();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onSuccess(e) {
        this.flashSuccessMessage();
    }
    /**
     * @return {?}
     */
    resetRequestState() {
        this.requestState = 'DEFAULT';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValue(value) {
        if (this.form && this.form.setValue) {
            this.form.setValue(getValue(value));
        }
    }
    /**
     * @return {?}
     */
    toErrorState() {
        this.requestState = 'ERROR';
    }
    /**
     * @return {?}
     */
    toSucessState() {
        this.requestState = 'SUCCESS';
    }
}
class FormComponent extends DumbComponent {
    /**
     * @return {?}
     */
    get editing() {
        return truthy(this.id);
    }
    /**
     * @return {?}
     */
    get id() {
        return this.model.id;
    }
    /**
     * @return {?}
     */
    get isValid() {
        return this.form.valid;
    }
    /**
     * @return {?}
     */
    markAsSubmitted() {
        this.form.markAsTouched();
        Object.keys(this.form.controls).forEach(key => {
            this.form.controls[key].markAsTouched();
        });
    }
}
class SmartComponent extends DumbComponent {
    /**
     * @param {?} store
     */
    constructor(store) {
        super();
        this.store = store;
    }
    /**
     * @param {?} action
     * @return {?}
     */
    dispatch(action) {
        this.store.dispatch(action);
    }
    /**
     * @param {?} action
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    dispatchAndSubscribe(action, onSuccess, onError) {
        const /** @type {?} */ f1 = onSuccess ? onSuccess : e => {
            this.flashSuccessMessage();
        };
        const /** @type {?} */ f2 = onError ? onError : e => {
            this.flashErrorMessage();
        };
        if (this.events && this.events.dispatch) {
            this.addSubscription(this.events.dispatch(action).subscribe(f1, f2));
        }
        else {
            this.store.dispatch(action);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Config {
    constructor() {
        this.dev = false;
        this.test = false;
        this.staging = false;
        this.production = false;
        this.apiBaseUrl = '';
    }
}
class ViewConfig extends Config {
    constructor() {
        super(...arguments);
        this.viewMode = 'Default';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Question {
    constructor() {
        this.question = '';
        this.title = '';
    }
}
class Questions extends Collection {
    /**
     * @param {?} questions
     * @param {?} answers
     * @return {?}
     */
    static AnswerQuestions(questions, answers) {
        return questions.map(question => Questions.AnswerQuestion(question, answers[question.key]));
    }
    /**
     * @param {?} question
     * @param {?} answerData
     * @return {?}
     */
    static AnswerQuestion(question, answerData) {
        let /** @type {?} */ answer = answerData;
        switch (question.type) {
            case 'date':
                answer = answerData;
                break;
            case 'monthyear':
                answer = DateHelper.ToMonthYearName(answerData);
                break;
            case 'yesno':
                answer = answerData ? 'Yes' : 'No';
                break;
        }
        return build(Question, question, { answer });
    }
    /**
     * @param {?} answers
     * @return {?}
     */
    answerQuestions(answers) {
        return Questions.AnswerQuestions(this.toArray(), answers);
    }
}
/**
 * @abstract
 */
class QuestionsModel {
    constructor() {
        this.ignore = ['isAdd', 'questions'];
    }
    /**
     * @return {?}
     */
    get answers() {
        return Questions.AnswerQuestions(this.questions, this);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class TreeItem {
    /**
     * @param {?} item
     * @param {?=} parent
     */
    constructor(item, parent) {
        this.item = item;
        this.parent = parent;
        this.id = 0;
        this.order = 0;
        this.parentId = 0;
        this.treeId = 0;
        this.index = 0;
    }
    /**
     * @template T
     * @param {?} item
     * @return {?}
     */
    static Build(item) {
        return /** @type {?} */ ({
            item: item,
            id: item['id'],
            order: item['order'],
            parentId: item['parentId']
        });
    }
    /**
     * @return {?}
     */
    get hasParent() {
        return this.parentId ? true : false;
    }
    /**
     * @return {?}
     */
    get sortOrder() {
        return this.parentId ? this.treeId + (.1 * this.order) : this.treeId;
    }
    /**
     * @return {?}
     */
    get treeOrder() {
        return this.parentId ? this.order : 0;
    }
}
/**
 * @template T
 */
class Tree {
    /**
     * @param {?} _treeItems
     * @param {?} ctor
     */
    constructor(_treeItems, ctor) {
        this._treeItems = _treeItems;
        this.ctor = ctor;
        this._activeId = 0;
        this._activeIndex = -1;
    }
    /**
     * @template T
     * @param {?} items
     * @param {?} item
     * @return {?}
     */
    static FindParent(items, item) {
        return items.find(x => x.id === item.parentId) || new TreeItem(/** @type {?} */ ({}));
    }
    /**
     * @template T
     * @param {?} items
     * @param {?} item
     * @return {?}
     */
    static FindParentOrder(items, item) {
        const /** @type {?} */ parent = Tree.FindParent(items, item);
        return parent.order;
    }
    /**
     * @template T
     * @param {?} items
     * @param {?} ctor
     * @return {?}
     */
    static Build(items, ctor) {
        const /** @type {?} */ treeItems = items.reduce((acc, item) => {
            item.treeId = item.parentId ? Tree.FindParentOrder(items, item) : item.order;
            const /** @type {?} */ treeItem = Object.assign(new TreeItem(/** @type {?} */ ({})), item);
            return [...acc, treeItem];
        }, []);
        const /** @type {?} */ orderedItems = items.sort((a, b) => compareNumbers(a.sortOrder, b.sortOrder))
            .reduce((acc, treeItem, index) => {
            const /** @type {?} */ item = treeItem.item;
            const /** @type {?} */ parent = treeItem.parent;
            return [...acc, /** @type {?} */ (Object.assign(new TreeItem(item, parent), treeItem, { index: index + 1 }))];
        }, []);
        return new Tree(orderedItems, ctor);
    }
    /**
     * @return {?}
     */
    get activeId() {
        return this._activeId;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    set activeId(id) {
        this._activeId = id;
        this._activeIndex = this.getIndexById(id);
    }
    /**
     * @return {?}
     */
    get activeIndex() {
        return this._activeIndex;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    set activeIndex(index) {
        this._activeIndex = index;
        this._activeId = this.getIdByIndex(index);
    }
    /**
     * @return {?}
     */
    get copy() {
        return Object.assign(new Tree(this._treeItems, this.ctor), this);
    }
    /**
     * @return {?}
     */
    get instance() {
        return new this.ctor() || /** @type {?} */ ({});
    }
    /**
     * @return {?}
     */
    get next() {
        return this.getNext(this.activeIndex);
    }
    /**
     * @return {?}
     */
    get nextId() {
        return this.next.id;
    }
    /**
     * @return {?}
     */
    get nextIndex() {
        return this.activeIndex + 1;
    }
    /**
     * @return {?}
     */
    get previous() {
        return this.getPrevious(this.activeIndex);
    }
    /**
     * @return {?}
     */
    get previousId() {
        return this.previous.id;
    }
    /**
     * @return {?}
     */
    get previousIndex() {
        return this.activeIndex - 1;
    }
    /**
     * @return {?}
     */
    get items() {
        return this._treeItems.map(x => x.item);
    }
    /**
     * @return {?}
     */
    get treeItems() {
        return this._treeItems;
    }
    /**
     * @return {?}
     */
    get orderedItems() {
        return this.treeItems.sort((a, b) => compareNumbers(a.index, b.index));
    }
    /**
     * @return {?}
     */
    get subtrees() {
        const /** @type {?} */ trees = this.treeItems.reduce((acc, item) => {
            const /** @type {?} */ treeId = item.treeId;
            const /** @type {?} */ subitems = acc[treeId] || [];
            acc[treeId] = [...subitems, item];
            return acc;
        }, {});
        return Object.keys(trees).map(key => Tree.Build(trees[key], this.ctor));
    }
    /**
     * @return {?}
     */
    get subtreeItems() {
        return this.subtrees.map(tree => tree.treeItems.sort((a, b) => compareNumbers(a.index, b.index)));
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getIdByIndex(index) {
        const /** @type {?} */ item = this.getItemByIndex(index);
        return item.id;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getIndexById(id) {
        return this.getItemById(id).index;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getItemById(id) {
        return this.treeItems.find(item => item.id === id) || new TreeItem(this.instance);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getItemByIndex(index) {
        return this.treeItems.find(item => item.index === index) || new TreeItem(this.instance);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getNext(index) {
        return this.getItemByIndex(index + 1);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getNextId(index) {
        return this.getNext(index).id;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getPrevious(index) {
        return this.getItemByIndex(index - 1);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getPreviousId(index) {
        return this.getPrevious(index).id;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class User {
    constructor() {
        this.email = '';
        this.firstName = '';
        this.lastName = '';
        this.fullName = '';
        this.password = '';
        this.confirmPassword = '';
        this.userName = '';
    }
}
class CurrentUser extends User {
    constructor() {
        super(...arguments);
        this.token = new Token();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    static Build(data) {
        const /** @type {?} */ token = data && data.token ? build(Token, data.token) : new Token();
        return build(CurrentUser, data, { token });
    }
    /**
     * @return {?}
     */
    get authenticated() {
        return this.token && this.token.authenticated;
    }
    /**
     * @return {?}
     */
    get userRoles() {
        return new UserRoles(this);
    }
}
class UserRoles {
    /**
     * @param {?=} user
     */
    constructor(user = new CurrentUser()) {
        this.user = user;
    }
}
class Login {
    constructor() {
        this.grant_type = 'password';
        this.userName = '';
        this.password = '';
    }
}
class ResetPassword {
    constructor() {
        this.passwordResetCode = '';
        this.password = '';
        this.confirmPassword = '';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StorageActions {
    /**
     * @param {?} localStore
     * @param {?} sessionStore
     * @return {?}
     */
    static initStore(localStore, sessionStore) {
        return {
            type: StorageActions.INIT_STORE,
            payload: { localStore, sessionStore }
        };
    }
}
StorageActions.UPDATE_LOCAL_STORAGE = '[Storage] Update Local Storage';
StorageActions.UPDATE_SESSION_STORAGE = '[Storage] Update Session Storage';
StorageActions.INIT_STORE = '[Storage] Init Store';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ActionStore {
    /**
     * @param {?} lastAction
     */
    constructor(lastAction) {
        this.lastAction = lastAction;
    }
}
class Storage$1 {
    constructor() {
        this.localStore = {};
        this.sessionStore = {};
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StorageService {
    /**
     * @param {?} store
     * @param {?} storeKey
     */
    constructor(store, storeKey) {
        this.store = store;
        this.storeKey = storeKey;
        this.localStorageActions = [];
        this.sessionStorageActions = [];
        this.localStorageMapper = s => s;
        this.sessionStorageMapper = s => s;
    }
    /**
     * @return {?}
     */
    get localStore() {
        return localStorage.getItem(this.storeKey);
    }
    /**
     * @return {?}
     */
    get sessionStore() {
        return sessionStorage.getItem(this.storeKey);
    }
    /**
     * @return {?}
     */
    get storage() {
        const /** @type {?} */ localStore = this.localStore;
        const /** @type {?} */ sessionStore = this.sessionStore;
        return build(Storage, Object.assign({}, localStore, sessionStore), {
            localStore,
            sessionStore
        });
    }
    /**
     * Initialize the use of local storage and/or session storage
     * @param {?=} localStorageMapper Mapper function for mapping state to local store
     * @param {?=} sessionStorageMapper Mapper function for mapping state to session store
     * @param {?=} localStorageActions Actions after which to save to local storage
     * @param {?=} sessionStorageActions Actions after which to save to session storage
     * @return {?}
     */
    init(localStorageMapper = s => s, sessionStorageMapper = s => s, localStorageActions = [], sessionStorageActions = []) {
        const /** @type {?} */ localStore = this.initLocalStore(localStorageMapper, localStorageActions);
        const /** @type {?} */ sessionStore = this.initSessionStore(sessionStorageMapper, sessionStorageActions);
        this.store.dispatch(StorageActions.initStore(localStore, sessionStore));
    }
    /**
     * Initialize the use of local storage
     * @param {?=} localStorageMapper Mapper function for mapping state to local store
     * @param {?=} localStorageActions Actions after which to save to local storage
     * @return {?}
     */
    initLocalStore(localStorageMapper = s => s, localStorageActions = []) {
        this.localStorageMapper = localStorageMapper;
        this.localStorageActions = localStorageActions;
        const /** @type {?} */ ls = this.localStore;
        const /** @type {?} */ localStore = ls ? JSON.parse(ls) : {};
        return localStore;
    }
    /**
     * Initialize the use of session storage
     * @param {?=} sessionStorageMapper Mapper function for mapping state to session store
     * @param {?=} sessionStorageActions Actions after which to save to session storage
     * @return {?}
     */
    initSessionStore(sessionStorageMapper = s => s, sessionStorageActions = []) {
        this.sessionStorageMapper = sessionStorageMapper;
        this.sessionStorageActions = sessionStorageActions;
        const /** @type {?} */ ss = this.sessionStore;
        const /** @type {?} */ sessionStore = ss ? JSON.parse(ss) : {};
        return sessionStorage;
    }
    /**
     * @param {?} actionType
     * @return {?}
     */
    inLocalStorage(actionType) {
        return inArray(this.localStorageActions, actionType);
    }
    /**
     * @param {?} actionType
     * @return {?}
     */
    inSessionStorage(actionType) {
        return inArray(this.sessionStorageActions, actionType);
    }
    /**
     * Store state to local storage.
     * @param {?} state
     * @param {?} action
     * @return {?}
     */
    storeLocal(state$$1, action) {
        try {
            // const filteredState = new ActionStore(action, this.filterState(Object.assign({}, state)));
            const /** @type {?} */ filteredState = Object.assign(filterState(new ActionStore(action)), filterState(Object.assign({}, this.localStorageMapper(state$$1))));
            const /** @type {?} */ serializedState = JSON.stringify(filteredState);
            localStorage.removeItem(this.storeKey);
            localStorage.setItem(this.storeKey, serializedState);
        }
        catch (/** @type {?} */ err) {
            console.error(`ERROR SAVING LOCAL STATE!\nAction:\t${action.actionType}\n`, err);
        }
    }
    /**
     * Store state to session storage.
     * @param {?} state
     * @param {?} action
     * @return {?}
     */
    storeSession(state$$1, action) {
        try {
            // const filteredState = new ActionStore(action, this.filterState(Object.assign({}, state)));
            // const filteredState = this.filterState(Object.assign({}, state));
            const /** @type {?} */ filteredState = Object.assign(filterState(new ActionStore(action)), filterState(Object.assign({}, this.sessionStorageMapper(state$$1))));
            const /** @type {?} */ serializedState = JSON.stringify(filteredState);
            localStorage.removeItem(this.storeKey);
            sessionStorage.setItem(this.storeKey, serializedState);
        }
        catch (/** @type {?} */ err) {
            console.error(`ERROR SAVING SESSION STATE!\nAction:\t${action.actionType}\n`, err);
        }
    }
}
StorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
StorageService.ctorParameters = () => [
    { type: Store },
    { type: String, decorators: [{ type: Inject, args: [STORE_KEY,] }] }
];
/** @nocollapse */ StorageService.ngInjectableDef = defineInjectable({ factory: function StorageService_Factory() { return new StorageService(inject(Store), inject(STORE_KEY)); }, token: StorageService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StorageEffects {
    /**
     * @param {?} actions$
     * @param {?} service
     * @param {?} state$
     */
    constructor(actions$, service, state$) {
        this.actions$ = actions$;
        this.service = service;
        this.state$ = state$;
        /**
         * Listens for dispatched actions, updates local storage in response.
         */
        this.onSyncLocalStorage = this.actions$.pipe(filter((action) => this.service.inLocalStorage(action.type)), map(action => ({
            type: StorageActions.UPDATE_LOCAL_STORAGE,
            payload: action
        })));
        /**
         * Listens for dispatched actions, updates session storage in response.
         */
        this.onSyncSessionStorage = this.actions$.pipe(filter((action) => this.service.inSessionStorage(action.type)), map(action => ({
            type: StorageActions.UPDATE_SESSION_STORAGE,
            payload: action
        })));
        /**
         * Stores state to local storage after each action.
         */
        this.onStoreLocal = this.actions$.pipe(ofType(StorageActions.UPDATE_LOCAL_STORAGE), map(toPayload), withLatestFrom(this.state$, (action, state$$1) => {
            this.service.storeLocal(state$$1, action);
        }));
        /**
         * Stores state to local storage after each action.
         */
        this.onStoreSession = this.actions$.pipe(ofType(StorageActions.UPDATE_SESSION_STORAGE), map(toPayload), withLatestFrom(this.state$, (action, state$$1) => {
            this.service.storeSession(state$$1, action);
        }));
    }
}
StorageEffects.decorators = [
    { type: Injectable },
];
/** @nocollapse */
StorageEffects.ctorParameters = () => [
    { type: Actions },
    { type: StorageService },
    { type: Store }
];
__decorate([
    Effect(),
    __metadata("design:type", Observable)
], StorageEffects.prototype, "onSyncLocalStorage", void 0);
__decorate([
    Effect(),
    __metadata("design:type", Observable)
], StorageEffects.prototype, "onSyncSessionStorage", void 0);
__decorate([
    Effect({ dispatch: false }),
    __metadata("design:type", Observable)
], StorageEffects.prototype, "onStoreLocal", void 0);
__decorate([
    Effect({ dispatch: false }),
    __metadata("design:type", Observable)
], StorageEffects.prototype, "onStoreSession", void 0);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ STORE_KEY = new InjectionToken('Local/Session Storage Key');
/**
 * @param {?} store
 * @param {?} storeKey
 * @return {?}
 */
function storageServiceFactory(store, storeKey) {
    return new StorageService(store, storeKey);
}
/**
 * @param {?} storeKey
 * @return {?}
 */
function provideStorage(storeKey) {
    return [
        StorageEffects,
        { provide: StorageService, useFactory: storageServiceFactory, deps: [Store, STORE_KEY] },
        { provide: STORE_KEY, useValue: storeKey },
    ];
}
class StorageModule {
    /**
     * Provides StorageModule with storage service and effects.
     * @param {?} storeKey - The name of the key containing the store in storage.
     * @return {?}
     */
    static forRoot(storeKey) {
        return {
            ngModule: StorageModule,
            providers: provideStorage(storeKey)
        };
    }
}
StorageModule.decorators = [
    { type: NgModule },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StoreModule$1 {
    /**
     * @template T, V
     * @param {?} reducers
     * @param {?=} config
     * @return {?}
     */
    static forRoot(reducers, config) {
        return StoreModule.forRoot(reducers, config);
    }
    /**
     * @template T, V
     * @param {?} featureName
     * @param {?} reducers
     * @param {?=} config
     * @return {?}
     */
    static forFeatures(featureName, reducers, config) {
        return StoreModule.forFeature(featureName, reducers, config);
    }
    /**
     * @template T, V
     * @param {?} featureName
     * @param {?} reducer
     * @param {?=} config
     * @return {?}
     */
    static forFeature(featureName, reducer, config) {
        return StoreModule.forFeature(featureName, reducer, config);
    }
}
StoreModule$1.decorators = [
    { type: NgModule, args: [{
                imports: [
                    StoreModule,
                ],
                declarations: [],
                exports: [
                    StoreModule,
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
const ActionTypes = {
    DEFAULT: 0,
    GET: 1,
    GET_SUCCESS: 2,
    GET_ERROR: 3,
    POST: 4,
    POST_SUCCESS: 5,
    POST_ERROR: 6,
    PUT: 7,
    PUT_SUCCESS: 8,
    PUT_ERROR: 9,
    DELETE: 10,
    DELETE_SUCCESS: 11,
    DELETE_ERROR: 12,
    SAVE: 13,
};
ActionTypes[ActionTypes.DEFAULT] = "DEFAULT";
ActionTypes[ActionTypes.GET] = "GET";
ActionTypes[ActionTypes.GET_SUCCESS] = "GET_SUCCESS";
ActionTypes[ActionTypes.GET_ERROR] = "GET_ERROR";
ActionTypes[ActionTypes.POST] = "POST";
ActionTypes[ActionTypes.POST_SUCCESS] = "POST_SUCCESS";
ActionTypes[ActionTypes.POST_ERROR] = "POST_ERROR";
ActionTypes[ActionTypes.PUT] = "PUT";
ActionTypes[ActionTypes.PUT_SUCCESS] = "PUT_SUCCESS";
ActionTypes[ActionTypes.PUT_ERROR] = "PUT_ERROR";
ActionTypes[ActionTypes.DELETE] = "DELETE";
ActionTypes[ActionTypes.DELETE_SUCCESS] = "DELETE_SUCCESS";
ActionTypes[ActionTypes.DELETE_ERROR] = "DELETE_ERROR";
ActionTypes[ActionTypes.SAVE] = "SAVE";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
function configReducer(state$$1 = new Config(), action) {
    switch (action.type) {
        case ConfigActions.INITIALIZE:
            return build(Config, state$$1, action.payload);
        default:
            return state$$1;
    }
}
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
function sidenavReducer(state$$1 = true, action) {
    switch (action.type) {
        case SidenavActions.CLOSE:
            return false;
        case SidenavActions.OPEN:
            return true;
        case SidenavActions.TOGGLE:
            return !state$$1;
        default:
            return state$$1;
    }
}
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
function windowReducer(state$$1 = new Window(), action) {
    switch (action.type) {
        case WindowActions.RESIZE:
            return build(Window, state$$1, /** @type {?} */ (action.payload));
        default:
            return state$$1;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { LibraryService, LibraryComponent, LibraryModule, AnimationsModule, AccordionModule, AccordionComponent, CollageModule, CollageComponent, Collage, DatepickerModule, DATEPICKER_ACCESSOR, DatepickerComponent, DATERANGE_ACCESSOR, DaterangeComponent, DialogModule, DialogComponent, DialogModel, DialogAction, EditorModule, EDITOR_ACCESSOR, EditorComponent, EditorWindowComponent, FileUploadModule, FILE_UPLOAD_ACCESSOR, FileUploadComponent, FileUpload, getReadyState, File, FilePreviewComponent, UploadComponent, UploadsComponent, GridModule$1 as GridModule, Grid, GridColumn, NotFoundModule, NotFoundComponent, TileModule, TileComponent, Tile, WallpaperModule, WallpaperComponent, EffectsModule$1 as EffectsModule, ErrorsModule, ErrorActions, ErrorEffects, Error, errorsReducer, errorsSelector, errorSelector, ErrorsService, GlobalErrorsService, EventsModule, EventActions, EventEffects, Event, Events, UpdateValuePayload, eventsReducer, eventsSelector, eventSelector, eventValueSelector, EventsService, FormsModule$1 as FormsModule, FormActions, Control, ArrayControl, FormArray$1 as FormArray, buildAbstractControl, buildArrayFromType, buildControl, buildControlFromModel, buildControlsConfig, buildFormArray, buildFormArrayControls, findFormArrayType, hasGroupValidators, hasValidators, isArrayValue, isFormArray, isFormControl, isFormGroup, isGroupValue, baseUrlFactory, authTokenFactory, httpServiceFactory, provideHttpContext, HttpModule, HttpActions, HttpCommands, HttpEffects, HttpDeletePayload, HttpGetPayload, HttpPutPayload, HttpPostPayload, HTTP_REQUEST_STATUS, HTTP_STATUS_CODES, HttpOptions, HttpService, LOOKUP_PATH, LOOKUP_KEYS, lookupServiceFactory, provideLookup, LookupModule, LookupActions, Lookup, LookupValue, Lookups, AddLookupPayload, lookupReducer, lookupSelector, lookupKeySelector, lookupValuesSelector, lookupValueSelector, LookupService, ListPipe, PhoneNumberPipe, TimeAgoPipe, YesNoPipe, RouterModule$1 as RouterModule, RouterActions, RouterEffects, ActivatedRoutePayload, Breadcrumbs, CustomRoute, LazyRoute, NavigationStatus, RouteSegment, RouterState, VisitedRoute, routerReducer, routeSelector, breadcrumbsSelector, routeNameSelector, routeParamsSelector, lazyRouteParamsSelector, routeParamSelector, routeParamArraySelector, routeParamIdSelector, routeParamIntSelector, urlSelector, querySelector, RouterService, AuthenticatedGuard, SharedModule, BaseEntity, Collection, DumbComponent, FormComponent, SmartComponent, Config, ViewConfig, DateRange, DateHelper, ActionCreator, ActionType, Class, Command, Dispatcher, Entity, EventHandler, LifecycleHook, Method, Parameter, Property, StaticMethod, StaticProperty, Address, Alert, Coordinates, Dimensions, Email, EMAIL_REGEX, Filters, Image, Metadata, MetadataType, PropertyMetadata, QueryItem, QueryModel, Search, StyleModel, Permutation, OrderedItem, Ordering, Question, Questions, QuestionsModel, Token, TreeItem, Tree, User, CurrentUser, UserRoles, Login, ResetPassword, applyDecorators, applyMixins, arrayUnion, assignProps, build, compareDates, compareNumbers, compareStrings, distinct, equals, extendObject, falsy, filterState, findMetadata, findSchoolYear, flattenKeys, formatPhoneNumber, format7DigitPhoneNumber, format10DigitPhoneNumber, formatPrice, getTypeNameForDebugging, getAllProps, getGetters, getKeyValues, getSetters, getStyle, getValue, guid, hasChanged, idChanged, ignoreKey, inArray, inArrayByKey, integerArray, isBetweenDates, isCyclic, nextState, positiveIntegerArray, removeCycles, removeProps, serialize, stringify, str2CharCode, str2Id, str2int, strArray2Id, throwException, throwNotImplementedException, toArray, toInt, toPayload, toPx, truthy, tryCast, valueChanged, valueEquals, Window, WindowResize, STORE_KEY, storageServiceFactory, provideStorage, StorageModule, StorageActions, StorageEffects, ActionStore, Storage$1 as Storage, StorageService, StoreModule$1 as StoreModule, AppActions, ConfigActions, SidenavActions, WindowActions, ActionTypes, configReducer, sidenavReducer, windowReducer, allSelector, emptySelector, currentUserSelector, authenticatedSelector, configSelector, windowSelector, windowHeightSelector, windowWidthSelector, containerHeightSelector, containerWidthSelector, contentHeightSelector, contentWidthSelector, sidenavOpenedSelector, apiBaseUrlSelector, authTokenSelector, GridCellComponent as Éµd, GridColumnComponent as Éµb, GridComponent as Éµa, SimpleGridComponent as Éµc };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,