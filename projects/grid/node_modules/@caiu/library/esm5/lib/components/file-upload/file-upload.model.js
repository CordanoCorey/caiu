/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { build } from '../../shared/utils';
var FileUpload = /** @class */ (function () {
    function FileUpload() {
        this.lastModified = 0;
        this.lastModifiedDate = new Date();
        this.name = '';
        this.size = 0;
        this.type = '';
        this.webkitRelativePath = '';
        this.order = 0;
        this.readyState = 'EMPTY';
        this.src = '';
    }
    /**
     * @param {?} file
     * @return {?}
     */
    FileUpload.BuildFromFile = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        return build(FileUpload, {
            name: file.fileName,
            size: file.fileSize,
            type: file.mimeType,
            src: file.src,
            order: file.order
        });
    };
    /**
     * @param {?} reader
     * @return {?}
     */
    FileUpload.GetReadyState = /**
     * @param {?} reader
     * @return {?}
     */
    function (reader) {
        switch (reader.readyState) {
            case 0:
                return 'EMPTY';
            case 1:
                return 'LOADING';
            case 2:
                return 'DONE';
            default:
                return 'EMPTY';
        }
    };
    Object.defineProperty(FileUpload.prototype, "extension", {
        get: /**
         * @return {?}
         */
        function () {
            return this.name.split('.').pop();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUpload.prototype, "isImage", {
        get: /**
         * @return {?}
         */
        function () {
            return this.type.split('/')[0] === 'image';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUpload.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this.readyState === 'LOADING';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUpload.prototype, "file", {
        get: /**
         * @return {?}
         */
        function () {
            return File.BuildFromFileUpload(this);
        },
        enumerable: true,
        configurable: true
    });
    return FileUpload;
}());
export { FileUpload };
function FileUpload_tsickle_Closure_declarations() {
    /** @type {?} */
    FileUpload.prototype.lastModified;
    /** @type {?} */
    FileUpload.prototype.lastModifiedDate;
    /** @type {?} */
    FileUpload.prototype.name;
    /** @type {?} */
    FileUpload.prototype.size;
    /** @type {?} */
    FileUpload.prototype.type;
    /** @type {?} */
    FileUpload.prototype.webkitRelativePath;
    /** @type {?} */
    FileUpload.prototype.order;
    /** @type {?} */
    FileUpload.prototype.readyState;
    /** @type {?} */
    FileUpload.prototype.src;
}
/**
 * @param {?} reader
 * @return {?}
 */
export function getReadyState(reader) {
    switch (reader.readyState) {
        case 0:
            return 'EMPTY';
        case 1:
            return 'LOADING';
        case 2:
            return 'DONE';
        default:
            return 'EMPTY';
    }
}
var File = /** @class */ (function () {
    function File() {
        this.id = 0;
        this.fileBinary = [];
        this.fileExtension = '';
        this.fileName = '';
        this.fileSize = 0;
        this.mimeType = '';
        this.order = 0;
    }
    /**
     * @param {?} upload
     * @return {?}
     */
    File.BuildFromFileUpload = /**
     * @param {?} upload
     * @return {?}
     */
    function (upload) {
        return build(File, {
            fileBinary: upload.src.replace(File.GetSrcPrefix(upload.type), ''),
            fileExtension: upload.extension,
            fileName: upload.name,
            fileSize: upload.size,
            mimeType: upload.type,
            order: upload.order
        });
    };
    /**
     * @param {?} img
     * @param {?=} defaultSrc
     * @return {?}
     */
    File.GetImageBinarySrc = /**
     * @param {?} img
     * @param {?=} defaultSrc
     * @return {?}
     */
    function (img, defaultSrc) {
        if (defaultSrc === void 0) { defaultSrc = ''; }
        if (Array.isArray(img)) {
            if (img.length > 0) {
                return "data:" + img[0].mimeType + ";base64," + img[0].fileBinary;
            }
            else {
                return defaultSrc;
            }
        }
        return img && img.mimeType && img.fileBinary ? "data:" + img.mimeType + ";base64," + img.fileBinary : defaultSrc;
    };
    /**
     * @param {?} mimeType
     * @return {?}
     */
    File.GetSrcPrefix = /**
     * @param {?} mimeType
     * @return {?}
     */
    function (mimeType) {
        return "data:" + mimeType + ";base64,";
    };
    Object.defineProperty(File.prototype, "src", {
        // get fileUpload(): FileUpload {
        //     return FileUpload.BuildFromFile(this);
        // }
        get: /**
         * @return {?}
         */
        function () {
            return File.GetImageBinarySrc(this);
        },
        enumerable: true,
        configurable: true
    });
    return File;
}());
export { File };
function File_tsickle_Closure_declarations() {
    /** @type {?} */
    File.prototype.id;
    /** @type {?} */
    File.prototype.fileBinary;
    /** @type {?} */
    File.prototype.fileExtension;
    /** @type {?} */
    File.prototype.fileName;
    /** @type {?} */
    File.prototype.fileSize;
    /** @type {?} */
    File.prototype.mimeType;
    /** @type {?} */
    File.prototype.order;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZmlsZS11cGxvYWQvZmlsZS11cGxvYWQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUzQyxJQUFBOzs0QkFDbUIsQ0FBQztnQ0FDUyxJQUFJLElBQUksRUFBRTtvQkFDNUIsRUFBRTtvQkFDRixDQUFDO29CQUNELEVBQUU7a0NBQ1ksRUFBRTtxQkFDZixDQUFDOzBCQUNrQyxPQUFPO21CQUM1QyxFQUFFOzs7Ozs7SUFFRCx3QkFBYTs7OztJQUFwQixVQUFxQixJQUFVO1FBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO1lBQ3JCLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNuQixJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDbkIsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ25CLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztTQUNwQixDQUFDLENBQUM7S0FDTjs7Ozs7SUFFTSx3QkFBYTs7OztJQUFwQixVQUFxQixNQUFrQjtRQUNuQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN4QixLQUFLLENBQUM7Z0JBQ0YsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNuQixLQUFLLENBQUM7Z0JBQ0YsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUNyQixLQUFLLENBQUM7Z0JBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNsQjtnQkFDSSxNQUFNLENBQUMsT0FBTyxDQUFDO1NBQ3RCO0tBQ0o7SUFFRCxzQkFBSSxpQ0FBUzs7OztRQUFiO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FB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QTVDRCxnQkE0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWlsZCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRmlsZVVwbG9hZCB7XHJcbiAgICBsYXN0TW9kaWZpZWQgPSAwO1xyXG4gICAgbGFzdE1vZGlmaWVkRGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBuYW1lID0gJyc7XHJcbiAgICBzaXplID0gMDtcclxuICAgIHR5cGUgPSAnJztcclxuICAgIHdlYmtpdFJlbGF0aXZlUGF0aCA9ICcnO1xyXG4gICAgb3JkZXI/PSAwO1xyXG4gICAgcmVhZHlTdGF0ZTogJ0VNUFRZJyB8ICdMT0FESU5HJyB8ICdET05FJyA9ICdFTVBUWSc7XHJcbiAgICBzcmMgPSAnJztcclxuXHJcbiAgICBzdGF0aWMgQnVpbGRGcm9tRmlsZShmaWxlOiBGaWxlKTogRmlsZVVwbG9hZCB7XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkKEZpbGVVcGxvYWQsIHtcclxuICAgICAgICAgICAgbmFtZTogZmlsZS5maWxlTmFtZSxcclxuICAgICAgICAgICAgc2l6ZTogZmlsZS5maWxlU2l6ZSxcclxuICAgICAgICAgICAgdHlwZTogZmlsZS5taW1lVHlwZSxcclxuICAgICAgICAgICAgc3JjOiBmaWxlLnNyYyxcclxuICAgICAgICAgICAgb3JkZXI6IGZpbGUub3JkZXJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgR2V0UmVhZHlTdGF0ZShyZWFkZXI6IEZpbGVSZWFkZXIpIHtcclxuICAgICAgICBzd2l0Y2ggKHJlYWRlci5yZWFkeVN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnRU1QVFknO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0xPQURJTkcnO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0RPTkUnO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdFTVBUWSc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBleHRlbnNpb24oKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lLnNwbGl0KCcuJykucG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzSW1hZ2UoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5zcGxpdCgnLycpWzBdID09PSAnaW1hZ2UnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBsb2FkaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlYWR5U3RhdGUgPT09ICdMT0FESU5HJztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZmlsZSgpOiBGaWxlIHtcclxuICAgICAgICByZXR1cm4gRmlsZS5CdWlsZEZyb21GaWxlVXBsb2FkKHRoaXMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVhZHlTdGF0ZShyZWFkZXI6IEZpbGVSZWFkZXIpIHtcclxuICAgIHN3aXRjaCAocmVhZGVyLnJlYWR5U3RhdGUpIHtcclxuICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgIHJldHVybiAnRU1QVFknO1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgcmV0dXJuICdMT0FESU5HJztcclxuICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgIHJldHVybiAnRE9ORSc7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuICdFTVBUWSc7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBGaWxlIHtcclxuXHJcbiAgICBpZCA9IDA7XHJcbiAgICBmaWxlQmluYXJ5OiBhbnlbXSA9IFtdO1xyXG4gICAgZmlsZUV4dGVuc2lvbiA9ICcnO1xyXG4gICAgZmlsZU5hbWUgPSAnJztcclxuICAgIGZpbGVTaXplID0gMDtcclxuICAgIG1pbWVUeXBlID0gJyc7XHJcbiAgICBvcmRlciA9IDA7XHJcblxyXG4gICAgc3RhdGljIEJ1aWxkRnJvbUZpbGVVcGxvYWQodXBsb2FkOiBGaWxlVXBsb2FkKTogRmlsZSB7XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkKEZpbGUsIHtcclxuICAgICAgICAgICAgZmlsZUJpbmFyeTogdXBsb2FkLnNyYy5yZXBsYWNlKEZpbGUuR2V0U3JjUHJlZml4KHVwbG9hZC50eXBlKSwgJycpLFxyXG4gICAgICAgICAgICBmaWxlRXh0ZW5zaW9uOiB1cGxvYWQuZXh0ZW5zaW9uLFxyXG4gICAgICAgICAgICBmaWxlTmFtZTogdXBsb2FkLm5hbWUsXHJcbiAgICAgICAgICAgIGZpbGVTaXplOiB1cGxvYWQuc2l6ZSxcclxuICAgICAgICAgICAgbWltZVR5cGU6IHVwbG9hZC50eXBlLFxyXG4gICAgICAgICAgICBvcmRlcjogdXBsb2FkLm9yZGVyXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEdldEltYWdlQmluYXJ5U3JjKGltZzogRmlsZSB8IEZpbGVbXSwgZGVmYXVsdFNyYyA9ICcnKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW1nKSkge1xyXG4gICAgICAgICAgICBpZiAoaW1nLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgZGF0YToke2ltZ1swXS5taW1lVHlwZX07YmFzZTY0LCR7aW1nWzBdLmZpbGVCaW5hcnl9YDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0U3JjO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbWcgJiYgaW1nLm1pbWVUeXBlICYmIGltZy5maWxlQmluYXJ5ID8gYGRhdGE6JHtpbWcubWltZVR5cGV9O2Jhc2U2NCwke2ltZy5maWxlQmluYXJ5fWAgOiBkZWZhdWx0U3JjO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBHZXRTcmNQcmVmaXgobWltZVR5cGU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGBkYXRhOiR7bWltZVR5cGV9O2Jhc2U2NCxgO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGdldCBmaWxlVXBsb2FkKCk6IEZpbGVVcGxvYWQge1xyXG4gICAgLy8gICAgIHJldHVybiBGaWxlVXBsb2FkLkJ1aWxkRnJvbUZpbGUodGhpcyk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgZ2V0IHNyYygpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBGaWxlLkdldEltYWdlQmluYXJ5U3JjKHRoaXMpO1xyXG4gICAgfVxyXG5cclxufSJdfQ==