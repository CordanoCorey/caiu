/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, forwardRef, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MatDialog } from '@angular/material';
import { EditorWindowComponent } from './editor-window/editor-window.component';
export var /** @type {?} */ EDITOR_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return EditorComponent; }),
    multi: true
};
var EditorComponent = /** @class */ (function () {
    function EditorComponent(dialog, ref) {
        this.dialog = dialog;
        this.ref = ref;
        this.type = 'full';
        this.expanded = false;
        this.height = 100;
        this.plugins = [
            'advlist autolink lists link image charmap print preview hr anchor pagebreak',
            'searchreplace wordcount visualblocks visualchars code fullscreen',
            'insertdatetime media nonbreaking save table contextmenu directionality',
            'emoticons template paste textcolor colorpicker textpattern imagetools toc help'
        ];
        this.skinUrl = '/assets/skins/lightgray-gradient';
        this.templates = [
            { title: 'Test template 1', content: 'Test 1' },
            { title: 'Test template 2', content: 'Test 2' }
        ];
        this.changes = new EventEmitter();
    }
    Object.defineProperty(EditorComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.setContent(this._value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "basic", {
        get: /**
         * @return {?}
         */
        function () {
            return this.type === 'basic';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "full", {
        get: /**
         * @return {?}
         */
        function () {
            return this.type === 'full';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "config", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.type) {
                case 'basic':
                    return this.configBasic;
                case 'full':
                    return this.configFull;
                default:
                    return this.configFull;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "configBasic", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            return {
                height: this.height,
                selector: '#' + this.elementId,
                menubar: false,
                skin_url: this.skinUrl,
                theme: 'modern',
                plugins: [
                    'advlist autolink lists link image charmap print preview anchor',
                    'searchreplace visualblocks code fullscreen',
                    'insertdatetime media table contextmenu paste code'
                ],
                toolbar: "undo redo | insert | styleselect | bold italic |\n       alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link",
                content_css: [
                    '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
                    '//www.tinymce.com/css/codepen.min.css'
                ],
                setup: function (editor) {
                    _this.editorRef = editor;
                    editor.on('keyup', function (e) {
                        e.preventDefault();
                        var /** @type {?} */ content = editor.getContent();
                        _this.onKeyup(content);
                    });
                    editor.on('change', function (e) {
                        e.preventDefault();
                        var /** @type {?} */ content = editor.getContent();
                        _this.onChange(content);
                    });
                    editor.on('viewcontentloaded', function (e) {
                        editor.setContent('');
                    });
                },
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "configFull", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            return {
                height: this.height,
                selector: '#' + this.elementId,
                plugins: this.plugins,
                skin_url: this.skinUrl,
                templates: this.templates,
                theme: 'modern',
                toolbar1: "undo redo | insert | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent",
                toolbar2: 'print preview | forecolor backcolor | link',
                setup: function (editor) {
                    _this.editorRef = editor;
                    editor.on('keyup', function (e) {
                        e.preventDefault();
                        var /** @type {?} */ content = editor.getContent();
                        _this.onKeyup(content);
                    });
                    editor.on('change', function (e) {
                        e.preventDefault();
                        var /** @type {?} */ content = editor.getContent();
                        _this.onChange(content);
                    });
                    editor.on('viewcontentloaded', function (e) {
                        editor.setContent('');
                    });
                },
                image_advtab: true,
                content_css: [
                    '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
                    '//www.tinymce.com/css/codepen.min.css'
                ]
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "hasValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.value ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "showExpand", {
        get: /**
         * @return {?}
         */
        function () {
            return this.full && !this.expanded;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    EditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    EditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        tinymce.init(this.config);
    };
    /**
     * @return {?}
     */
    EditorComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        tinymce.remove(this.editorRef);
    };
    /**
     * @return {?}
     */
    EditorComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.value = '';
    };
    /**
     * @param {?} e
     * @return {?}
     */
    EditorComponent.prototype.expand = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e && e.preventDefault) {
            e.preventDefault();
        }
        var /** @type {?} */ config = {
            data: this.editorRef.getContent(),
            width: '1200px'
        };
        this.openDialog(config);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    EditorComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    EditorComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouch = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EditorComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EditorComponent.prototype.onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        this.changes.emit(value);
        if (this.onModelChange) {
            this.onModelChange(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EditorComponent.prototype.onUpdate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.onChange(value);
        this.setContent(this.value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EditorComponent.prototype.onKeyup = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.onChange(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EditorComponent.prototype.onBlur = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.focused = '';
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EditorComponent.prototype.onFocus = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.focused = value;
        if (this.onTouch) {
            this.onTouch();
        }
    };
    /**
     * @param {?} config
     * @return {?}
     */
    EditorComponent.prototype.openDialog = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var _this = this;
        var /** @type {?} */ dialogRef = this.dialog.open(EditorWindowComponent, config);
        this.dialogRef = dialogRef.afterClosed().subscribe(function (result) {
            _this.closeDialog(result);
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EditorComponent.prototype.closeDialog = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.onChange(value);
        }
        this.dialogRef.unsubscribe();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EditorComponent.prototype.setContent = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.editorRef && this.editorRef.getContent) {
            var /** @type {?} */ content = this.editorRef.getContent();
            if (value && content != value) {
                this.editorRef.setContent(value);
            }
        }
    };
    EditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'iu-editor',
                    template: "<mat-card class=\"editor\">\n  <textarea [id]=\"elementId\">\n    <ng-content *ngIf=\"!hasValue\"></ng-content>\n    <span *ngIf=\"hasValue\">{{ value }}</span>\n  </textarea>\n  <button *ngIf=\"showExpand\" id=\"expand-editor\" (click)=\"expand($event)\" mat-button>\n    <mat-icon>fullscreen</mat-icon>\n  </button>\n</mat-card>\n",
                    styles: [".mat-card{display:block;clear:both;padding:1px 3px 1px 1px;border-radius:2px}#expand-editor{font-size:36px;position:absolute;right:3px;top:3px;color:#fff;text-align:center;min-width:36px;line-height:24px;padding:2px}.mat-icon{font-size:36px;position:relative;left:-6px;top:-7px}"],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [EDITOR_ACCESSOR]
                },] },
    ];
    /** @nocollapse */
    EditorComponent.ctorParameters = function () { return [
        { type: MatDialog },
        { type: ChangeDetectorRef }
    ]; };
    EditorComponent.propDecorators = {
        type: [{ type: Input }],
        elementId: [{ type: Input }],
        expanded: [{ type: Input }],
        height: [{ type: Input }],
        plugins: [{ type: Input }],
        skinUrl: [{ type: Input }],
        templates: [{ type: Input }],
        changes: [{ type: Output }],
        value: [{ type: Input }]
    };
    return EditorComponent;
}());
export { EditorComponent };
function EditorComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    EditorComponent.prototype.type;
    /** @type {?} */
    EditorComponent.prototype.elementId;
    /** @type {?} */
    EditorComponent.prototype.expanded;
    /** @type {?} */
    EditorComponent.prototype.height;
    /** @type {?} */
    EditorComponent.prototype.plugins;
    /** @type {?} */
    EditorComponent.prototype.skinUrl;
    /** @type {?} */
    EditorComponent.prototype.templates;
    /** @type {?} */
    EditorComponent.prototype.changes;
    /** @type {?} */
    EditorComponent.prototype.onModelChange;
    /** @type {?} */
    EditorComponent.prototype.onTouch;
    /** @type {?} */
    EditorComponent.prototype._value;
    /** @type {?} */
    EditorComponent.prototype.focused;
    /** @type {?} */
    EditorComponent.prototype.dialogRef;
    /** @type {?} */
    EditorComponent.prototype.editorRef;
    /** @type {?} */
    EditorComponent.prototype.dialog;
    /** @type {?} */
    EditorComponent.prototype.ref;
}

//# sourceMappingURL=data:application/json;base64,