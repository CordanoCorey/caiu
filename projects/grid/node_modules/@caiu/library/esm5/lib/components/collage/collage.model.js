/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Tile } from '../tile/tile.model';
import { Dimensions } from '../../shared/models';
import { integerArray, positiveIntegerArray } from '../../shared/utils';
var Collage = /** @class */ (function () {
    function Collage() {
        this.canvasHeight = 0;
        this.canvasWidth = 0;
        this.maxColumns = 4;
        this.maxRows = 4;
        this.totalColumns = 0;
        this.totalRows = 0;
        this._images = [];
        this._tiles = [];
    }
    /**
     * @param {?} startRow
     * @param {?} startColumn
     * @param {?} maxColumns
     * @param {?} cells
     * @return {?}
     */
    Collage.AvailableColumns = /**
     * @param {?} startRow
     * @param {?} startColumn
     * @param {?} maxColumns
     * @param {?} cells
     * @return {?}
     */
    function (startRow, startColumn, maxColumns, cells) {
        var /** @type {?} */ totalColumns = cells[0].length;
        return Math.max.apply(Math, tslib_1.__spread(positiveIntegerArray(maxColumns)
            .map(function (k) { return k <= maxColumns && startColumn + k <= totalColumns && cells[startRow] && cells[startRow][startColumn + k] ? k : 1; })));
    };
    /**
     * @param {?} startRow
     * @param {?} startColumn
     * @param {?} maxRows
     * @param {?} cells
     * @return {?}
     */
    Collage.AvailableRows = /**
     * @param {?} startRow
     * @param {?} startColumn
     * @param {?} maxRows
     * @param {?} cells
     * @return {?}
     */
    function (startRow, startColumn, maxRows, cells) {
        var /** @type {?} */ totalRows = cells[0].length;
        return Math.max.apply(Math, tslib_1.__spread(positiveIntegerArray(maxRows)
            .map(function (k) { return k <= maxRows && startRow + k <= totalRows && cells[startRow + k] && cells[startRow + k][startColumn] ? k : 1; })));
    };
    /**
     * @param {?} dimensions
     * @param {?} startRow
     * @param {?} startColumn
     * @param {?} maxRows
     * @param {?} maxColumns
     * @param {?} cells
     * @return {?}
     */
    Collage.AvailableDimensions = /**
     * @param {?} dimensions
     * @param {?} startRow
     * @param {?} startColumn
     * @param {?} maxRows
     * @param {?} maxColumns
     * @param {?} cells
     * @return {?}
     */
    function (dimensions, startRow, startColumn, maxRows, maxColumns, cells) {
        var /** @type {?} */ availableRows = Collage.AvailableRows(startRow, startColumn, maxRows, cells);
        var /** @type {?} */ availableColumns = Collage.AvailableColumns(startRow, startColumn, maxColumns, cells);
        return dimensions.filter(function (x) { return x.rows <= availableRows && x.columns <= availableColumns; });
    };
    /**
     * @param {?} images
     * @param {?} canvasHeight
     * @param {?} canvasWidth
     * @param {?=} totalRows
     * @param {?=} totalColumns
     * @param {?=} maxRows
     * @param {?=} maxColumns
     * @return {?}
     */
    Collage.Build = /**
     * @param {?} images
     * @param {?} canvasHeight
     * @param {?} canvasWidth
     * @param {?=} totalRows
     * @param {?=} totalColumns
     * @param {?=} maxRows
     * @param {?=} maxColumns
     * @return {?}
     */
    function (images, canvasHeight, canvasWidth, totalRows, totalColumns, maxRows, maxColumns) {
        if (totalRows === void 0) { totalRows = 0; }
        if (totalColumns === void 0) { totalColumns = 0; }
        if (maxRows === void 0) { maxRows = 0; }
        if (maxColumns === void 0) { maxColumns = 0; }
        var /** @type {?} */ collage = Object.assign(new Collage(), {
            canvasHeight: canvasHeight,
            canvasWidth: canvasWidth,
            totalRows: totalRows,
            totalColumns: totalColumns,
            maxRows: maxRows,
            maxColumns: maxColumns
        });
        collage.images = images;
        return collage;
    };
    /**
     * @param {?} rows
     * @param {?} cols
     * @return {?}
     */
    Collage.BuildEmptyCells = /**
     * @param {?} rows
     * @param {?} cols
     * @return {?}
     */
    function (rows, cols) {
        return integerArray(rows).map(function (x) { return integerArray(cols).map(function (y) { return true; }); });
    };
    /**
     * @param {?} collage
     * @return {?}
     */
    Collage.BuildTiles = /**
     * @param {?} collage
     * @return {?}
     */
    function (collage) {
        return collage.images.map(function (image, index) {
            var /** @type {?} */ dimensions = Collage.FindDimensions(image.height, image.width, collage.tileDimensions, collage.cellHeight, collage.cellWidth);
            return Object.assign(new Tile(), {
                image: image,
                dimensions: dimensions,
                id: index + 1,
                cellHeight: collage.cellHeight,
                cellWidth: collage.cellWidth
            });
        });
    };
    /**
     * @param {?} id
     * @param {?} tileIds
     * @return {?}
     */
    Collage.ChooseTileId = /**
     * @param {?} id
     * @param {?} tileIds
     * @return {?}
     */
    function (id, tileIds) {
        return tslib_1.__spread(tileIds.filter(function (x) { return x !== id; }), [id]);
    };
    /**
     * @param {?} index
     * @param {?} totalRows
     * @param {?} totalColumns
     * @return {?}
     */
    Collage.FindCoordinates = /**
     * @param {?} index
     * @param {?} totalRows
     * @param {?} totalColumns
     * @return {?}
     */
    function (index, totalRows, totalColumns) {
        var /** @type {?} */ remainder = (index + totalColumns) % totalColumns;
        return {
            row: (index - remainder) / totalColumns,
            column: remainder
        };
    };
    /**
     * @param {?} index
     * @param {?} totalRows
     * @param {?} totalColumns
     * @param {?} startRow
     * @param {?} startColumn
     * @return {?}
     */
    Collage.FindCoordinatesNested = /**
     * @param {?} index
     * @param {?} totalRows
     * @param {?} totalColumns
     * @param {?} startRow
     * @param {?} startColumn
     * @return {?}
     */
    function (index, totalRows, totalColumns, startRow, startColumn) {
        var /** @type {?} */ coordinates = Collage.FindCoordinates(index, totalRows, totalColumns);
        coordinates.column += startColumn;
        coordinates.row += startRow;
        return coordinates;
    };
    /**
     * @param {?} height
     * @param {?} width
     * @param {?} dimensions
     * @param {?} cellHeight
     * @param {?} cellWidth
     * @return {?}
     */
    Collage.FindDimensions = /**
     * @param {?} height
     * @param {?} width
     * @param {?} dimensions
     * @param {?} cellHeight
     * @param {?} cellWidth
     * @return {?}
     */
    function (height, width, dimensions, cellHeight, cellWidth) {
        var /** @type {?} */ filtered = dimensions.filter(function (x) { return x.rows * cellHeight <= height && x.columns * cellWidth <= width; });
        var /** @type {?} */ ordered = filtered.sort(function (a, b) { return Math.abs(height / width - a.ratio) - Math.abs(height / width - b.ratio); });
        var /** @type {?} */ closestMatch = ordered[0];
        var /** @type {?} */ rows = closestMatch && closestMatch.rows ? closestMatch.rows : [];
        var /** @type {?} */ columns = closestMatch && closestMatch.columns ? closestMatch.columns : [];
        return Object.assign(new Dimensions(), {
            rows: rows,
            columns: columns,
            height: height,
            width: width
        });
    };
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    Collage.FindNextTileId = /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    function (tiles, tileIds, dimensions) {
        var /** @type {?} */ nextMatch = Collage.FindNextMatchId(tiles, tileIds, dimensions);
        return nextMatch || Collage.FindBestMatchId(tiles, tileIds, dimensions);
    };
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    Collage.FindBestMatchId = /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    function (tiles, tileIds, dimensions) {
        var /** @type {?} */ diff = 999;
        return tileIds.reduce(function (acc, id) {
            var /** @type {?} */ tile = tiles.find(function (x) { return x.id === id; });
            diff = Math.abs(tile.ratio - dimensions.ratio);
            return acc === 0 || diff < acc ? id : acc;
        }, 0);
    };
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    Collage.FindNextMatchId = /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    function (tiles, tileIds, dimensions) {
        return tileIds.reduce(function (acc, id) {
            if (acc !== 0) {
                return acc;
            }
            var /** @type {?} */ tile = tiles.find(function (x) { return x.id === id; });
            return tile && tile.rows === dimensions.rows && tile.columns === dimensions.columns ? tile.id : 0;
        }, 0);
    };
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    Collage.FindBestMatch = /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    function (tiles, tileIds, dimensions) {
        var /** @type {?} */ id = Collage.FindBestMatchId(tiles, tileIds, dimensions);
        return tiles.find(function (x) { return x.id === id; });
    };
    /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    Collage.FindNextTile = /**
     * @param {?} tiles
     * @param {?} tileIds
     * @param {?} dimensions
     * @return {?}
     */
    function (tiles, tileIds, dimensions) {
        return tileIds.reduce(function (acc, id) {
            if (acc === null || acc.id === 0) {
                var /** @type {?} */ tile_1 = tiles.find(function (x) { return x.id === id; });
                var /** @type {?} */ dim = dimensions.find(function (x) { return tile_1.rows === x.rows && tile_1.columns === x.columns; });
                return dim ? Object.assign(new Tile(), tile_1, {
                    dimensions: Object.assign(new Dimensions(), tile_1.dimensions, {
                        rows: dim.rows,
                        columns: dim.columns
                    })
                }) : null;
            }
            return acc;
        }, new Tile()) || Collage.FindBestMatch(tiles, tileIds, dimensions[0]);
    };
    /**
     * @param {?} cellHeight
     * @param {?} cellWidth
     * @param {?} maxRows
     * @param {?} maxColumns
     * @return {?}
     */
    Collage.GetTileDimensions = /**
     * @param {?} cellHeight
     * @param {?} cellWidth
     * @param {?} maxRows
     * @param {?} maxColumns
     * @return {?}
     */
    function (cellHeight, cellWidth, maxRows, maxColumns) {
        return positiveIntegerArray(maxRows).reduce(function (acc, x) {
            var /** @type {?} */ dimensions = positiveIntegerArray(maxColumns)
                .map(function (y) { return Object.assign(new Dimensions(), {
                rows: x,
                columns: y,
                height: x * cellHeight,
                width: y * cellWidth
            }); });
            return tslib_1.__spread(acc, dimensions);
        }, []);
    };
    /**
     * @param {?} cells
     * @param {?} startIndex
     * @param {?} dimensions
     * @param {?} totalRows
     * @param {?} totalColumns
     * @return {?}
     */
    Collage.MarkCellsAsFilled = /**
     * @param {?} cells
     * @param {?} startIndex
     * @param {?} dimensions
     * @param {?} totalRows
     * @param {?} totalColumns
     * @return {?}
     */
    function (cells, startIndex, dimensions, totalRows, totalColumns) {
        var /** @type {?} */ start = Collage.FindCoordinates(startIndex, totalRows, totalColumns);
        return integerArray(dimensions.rows * dimensions.columns).reduce(function (acc, i) {
            var /** @type {?} */ coordinates = Collage.FindCoordinatesNested(i, dimensions.rows, dimensions.columns, start.row, start.column);
            cells[coordinates.row][coordinates.column] = false;
            return cells;
        }, cells);
    };
    /**
     * @param {?} tiles
     * @param {?} collage
     * @return {?}
     */
    Collage.PositionTiles = /**
     * @param {?} tiles
     * @param {?} collage
     * @return {?}
     */
    function (tiles, collage) {
        var /** @type {?} */ cells = Collage.BuildEmptyCells(collage.totalRows, collage.totalColumns);
        var /** @type {?} */ tileIds = tiles.map(function (x) { return x.id; });
        return integerArray(collage.totalCells).reduce(function (acc, i) {
            var /** @type {?} */ coordinates = Collage.FindCoordinates(i, collage.totalRows, collage.totalColumns);
            if (!cells[coordinates.row][coordinates.column]) {
                return acc;
            }
            var /** @type {?} */ availableDimensions = Collage.AvailableDimensions(collage.tileDimensions, coordinates.row, coordinates.column, collage.maxRows, collage.maxColumns, cells);
            var /** @type {?} */ tile = Collage.FindNextTile(tiles, tileIds, availableDimensions);
            tile.coordinates = coordinates;
            cells = Collage.MarkCellsAsFilled(cells, i, tile.dimensions, collage.totalRows, collage.totalColumns);
            tileIds = Collage.ChooseTileId(tile.id, tileIds);
            return tslib_1.__spread(acc, [tile]);
        }, []);
    };
    Object.defineProperty(Collage.prototype, "cellHeight", {
        get: /**
         * @return {?}
         */
        function () {
            return this.canvasHeight / this.totalRows;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collage.prototype, "cellWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this.canvasWidth / this.totalColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collage.prototype, "emptyCells", {
        get: /**
         * @return {?}
         */
        function () {
            return Collage.BuildEmptyCells(this.totalRows, this.totalColumns);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collage.prototype, "images", {
        get: /**
         * @return {?}
         */
        function () {
            return this._images;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._images = value;
            this.tiles = Collage.BuildTiles(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collage.prototype, "tileDimensions", {
        get: /**
         * @return {?}
         */
        function () {
            return Collage.GetTileDimensions(this.cellHeight, this.cellWidth, this.maxRows, this.maxColumns);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collage.prototype, "tiles", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tiles;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tiles = Collage.PositionTiles(value, this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collage.prototype, "totalCells", {
        get: /**
         * @return {?}
         */
        function () {
            return this.totalRows * this.totalColumns;
        },
        enumerable: true,
        configurable: true
    });
    return Collage;
}());
export { Collage };
function Collage_tsickle_Closure_declarations() {
    /** @type {?} */
    Collage.prototype.canvasHeight;
    /** @type {?} */
    Collage.prototype.canvasWidth;
    /** @type {?} */
    Collage.prototype.maxColumns;
    /** @type {?} */
    Collage.prototype.maxRows;
    /** @type {?} */
    Collage.prototype.totalColumns;
    /** @type {?} */
    Collage.prototype.totalRows;
    /** @type {?} */
    Collage.prototype._images;
    /** @type {?} */
    Collage.prototype._tiles;
}

//# sourceMappingURL=data:application/json;base64,