/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Input, Output, ViewChild, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MatDatepicker } from '@angular/material';
import { DateHelper } from '../../shared/date';
export var /** @type {?} */ DATEPICKER_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return DatepickerComponent; }),
    multi: true
};
var DatepickerComponent = /** @class */ (function () {
    function DatepickerComponent() {
        this.placeholder = 'Choose a date';
        this.startView = 'month';
        this.selectedChanged = new EventEmitter();
    }
    Object.defineProperty(DatepickerComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    DatepickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatepickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouch = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DatepickerComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DatepickerComponent.prototype.onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        if (this.onModelChange) {
            this.onModelChange(value);
        }
    };
    /**
     * @param {?} input
     * @return {?}
     */
    DatepickerComponent.prototype.onBlur = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        var /** @type {?} */ date = new Date(input.value);
        if (DateHelper.IsValidDate(date)) {
            this.changeSelected(date);
        }
        else {
            input.value = DateHelper.FormatDate(this.value);
        }
    };
    Object.defineProperty(DatepickerComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this.datepicker.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerComponent.prototype, "opened", {
        get: /**
         * @return {?}
         */
        function () {
            return this.datepicker.opened;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.startAt = this.value;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DatepickerComponent.prototype.changeSelected = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.onChange(date);
        this.selectedChanged.emit(date);
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.datepicker.close();
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        this.datepicker.open();
    };
    DatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'iu-datepicker',
                    template: "<mat-form-field>\n  <input matInput [placeholder]=\"placeholder\" [matDatepicker]=\"picker\" (blur)=\"onBlur(pickerInput)\" (change)=\"onChange(value)\"\n    [min]=\"min\" [max]=\"max\" [value]=\"value\" #pickerInput>\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n  <mat-datepicker #picker [startAt]=\"startAt\" [startView]=\"startView\" [touchUi]=\"touchUi\" (selectedChanged)=\"changeSelected($event)\"></mat-datepicker>\n</mat-form-field>",
                    styles: [".mat-input-container{float:left}"],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [DATEPICKER_ACCESSOR]
                },] },
    ];
    /** @nocollapse */
    DatepickerComponent.ctorParameters = function () { return []; };
    DatepickerComponent.propDecorators = {
        min: [{ type: Input }],
        max: [{ type: Input }],
        placeholder: [{ type: Input }],
        startAt: [{ type: Input }],
        startView: [{ type: Input }],
        touchUi: [{ type: Input }],
        selectedChanged: [{ type: Output }],
        datepicker: [{ type: ViewChild, args: ['picker',] }],
        value: [{ type: Input }]
    };
    return DatepickerComponent;
}());
export { DatepickerComponent };
function DatepickerComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    DatepickerComponent.prototype.min;
    /** @type {?} */
    DatepickerComponent.prototype.max;
    /** @type {?} */
    DatepickerComponent.prototype.placeholder;
    /** @type {?} */
    DatepickerComponent.prototype.startAt;
    /** @type {?} */
    DatepickerComponent.prototype.startView;
    /** @type {?} */
    DatepickerComponent.prototype.touchUi;
    /** @type {?} */
    DatepickerComponent.prototype.selectedChanged;
    /** @type {?} */
    DatepickerComponent.prototype.datepicker;
    /** @type {?} */
    DatepickerComponent.prototype.onModelChange;
    /** @type {?} */
    DatepickerComponent.prototype.onTouch;
    /** @type {?} */
    DatepickerComponent.prototype._value;
    /** @type {?} */
    DatepickerComponent.prototype.focused;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLFVBQVUsRUFDVixLQUFLLEVBRUwsTUFBTSxFQUNOLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRWxELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUcvQyxNQUFNLENBQUMscUJBQU0sbUJBQW1CLEdBQVE7SUFDdEMsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSxtQkFBbUIsRUFBbkIsQ0FBbUIsQ0FBQztJQUNsRCxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUM7O0lBNkJBOzJCQVh1QixlQUFlO3lCQUVDLE9BQU87K0JBRWxCLElBQUksWUFBWSxFQUFRO0tBT25DO0lBRWpCLHNCQUFJLHNDQUFLOzs7O1FBQVQ7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNwQjs7Ozs7UUFFRCxVQUNVLEdBQVM7WUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7U0FDbkI7OztPQUxBOzs7OztJQU9ELDhDQUFnQjs7OztJQUFoQixVQUFpQixFQUFZO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO0tBQ3pCOzs7OztJQUVELCtDQUFpQjs7OztJQUFqQixVQUFrQixFQUFZO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0tBQ25COzs7OztJQUVELHdDQUFVOzs7O0lBQVYsVUFBVyxLQUFXO1FBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0tBQ3BCOzs7OztJQUVELHNDQUFROzs7O0lBQVIsVUFBUyxLQUFXO1FBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7S0FDRjs7Ozs7SUFFRCxvQ0FBTTs7OztJQUFOLFVBQU8sS0FBVTtRQUNmLHFCQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQjtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sS0FBSyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqRDtLQUNGO0lBRUQsc0JBQUksbUNBQUU7Ozs7UUFBTjtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztTQUMzQjs7O09BQUE7SUFFRCxzQkFBSSx1Q0FBTTs7OztRQUFWO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1NBQy9COzs7T0FBQTs7OztJQUVELHNDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUMzQjs7Ozs7SUFFRCw0Q0FBYzs7OztJQUFkLFVBQWUsSUFBVTtRQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2pDOzs7O0lBRUQsbUNBQUs7OztJQUFMO1FBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUN6Qjs7OztJQUVELGtDQUFJOzs7SUFBSjtRQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDeEI7O2dCQXpGRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFFBQVEsRUFBRSw0ZEFLTTtvQkFDaEIsTUFBTSxFQUFFLENBQUMsa0NBQWtDLENBQUM7b0JBQzVDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztpQkFDakM7Ozs7O3NCQUdFLEtBQUs7c0JBQ0wsS0FBSzs4QkFDTCxLQUFLOzBCQUNMLEtBQUs7NEJBQ0wsS0FBSzswQkFDTCxLQUFLO2tDQUNMLE1BQU07NkJBQ04sU0FBUyxTQUFDLFFBQVE7d0JBWWxCLEtBQUs7OzhCQXZEUjs7U0FrQ2EsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBDb21wb25lbnQsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIGZvcndhcmRSZWYsXHJcbiAgSW5wdXQsXHJcbiAgT25Jbml0LFxyXG4gIE91dHB1dCxcclxuICBWaWV3Q2hpbGQsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgTWF0RGF0ZXBpY2tlciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcclxuXHJcbmltcG9ydCB7IERhdGVIZWxwZXIgfSBmcm9tICcuLi8uLi9zaGFyZWQvZGF0ZSc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IERBVEVQSUNLRVJfQUNDRVNTT1I6IGFueSA9IHtcclxuICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcclxuICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBEYXRlcGlja2VyQ29tcG9uZW50KSxcclxuICBtdWx0aTogdHJ1ZVxyXG59O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdpdS1kYXRlcGlja2VyJyxcclxuICB0ZW1wbGF0ZTogYDxtYXQtZm9ybS1maWVsZD5cclxuICA8aW5wdXQgbWF0SW5wdXQgW3BsYWNlaG9sZGVyXT1cInBsYWNlaG9sZGVyXCIgW21hdERhdGVwaWNrZXJdPVwicGlja2VyXCIgKGJsdXIpPVwib25CbHVyKHBpY2tlcklucHV0KVwiIChjaGFuZ2UpPVwib25DaGFuZ2UodmFsdWUpXCJcclxuICAgIFttaW5dPVwibWluXCIgW21heF09XCJtYXhcIiBbdmFsdWVdPVwidmFsdWVcIiAjcGlja2VySW5wdXQ+XHJcbiAgPG1hdC1kYXRlcGlja2VyLXRvZ2dsZSBtYXRTdWZmaXggW2Zvcl09XCJwaWNrZXJcIj48L21hdC1kYXRlcGlja2VyLXRvZ2dsZT5cclxuICA8bWF0LWRhdGVwaWNrZXIgI3BpY2tlciBbc3RhcnRBdF09XCJzdGFydEF0XCIgW3N0YXJ0Vmlld109XCJzdGFydFZpZXdcIiBbdG91Y2hVaV09XCJ0b3VjaFVpXCIgKHNlbGVjdGVkQ2hhbmdlZCk9XCJjaGFuZ2VTZWxlY3RlZCgkZXZlbnQpXCI+PC9tYXQtZGF0ZXBpY2tlcj5cclxuPC9tYXQtZm9ybS1maWVsZD5gLFxyXG4gIHN0eWxlczogW2AubWF0LWlucHV0LWNvbnRhaW5lcntmbG9hdDpsZWZ0fWBdLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHByb3ZpZGVyczogW0RBVEVQSUNLRVJfQUNDRVNTT1JdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRlcGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCB7XHJcblxyXG4gIEBJbnB1dCgpIG1pbjogRGF0ZTtcclxuICBASW5wdXQoKSBtYXg6IERhdGU7XHJcbiAgQElucHV0KCkgcGxhY2Vob2xkZXIgPSAnQ2hvb3NlIGEgZGF0ZSc7XHJcbiAgQElucHV0KCkgc3RhcnRBdDogRGF0ZTtcclxuICBASW5wdXQoKSBzdGFydFZpZXc6ICdtb250aCcgfCAneWVhcicgPSAnbW9udGgnO1xyXG4gIEBJbnB1dCgpIHRvdWNoVWk7XHJcbiAgQE91dHB1dCgpIHNlbGVjdGVkQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8RGF0ZT4oKTtcclxuICBAVmlld0NoaWxkKCdwaWNrZXInKSBkYXRlcGlja2VyOiBNYXREYXRlcGlja2VyPERhdGU+O1xyXG4gIHByaXZhdGUgb25Nb2RlbENoYW5nZTogRnVuY3Rpb247XHJcbiAgcHJpdmF0ZSBvblRvdWNoOiBGdW5jdGlvbjtcclxuICBfdmFsdWU6IERhdGU7XHJcbiAgZm9jdXNlZDogRGF0ZTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgZ2V0IHZhbHVlKCk6IERhdGUge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KClcclxuICBzZXQgdmFsdWUodmFsOiBEYXRlKSB7XHJcbiAgICB0aGlzLl92YWx1ZSA9IHZhbDtcclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IEZ1bmN0aW9uKSB7XHJcbiAgICB0aGlzLm9uTW9kZWxDaGFuZ2UgPSBmbjtcclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBGdW5jdGlvbikge1xyXG4gICAgdGhpcy5vblRvdWNoID0gZm47XHJcbiAgfVxyXG5cclxuICB3cml0ZVZhbHVlKHZhbHVlOiBEYXRlKSB7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZSh2YWx1ZTogRGF0ZSkge1xyXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgaWYgKHRoaXMub25Nb2RlbENoYW5nZSkge1xyXG4gICAgICB0aGlzLm9uTW9kZWxDaGFuZ2UodmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25CbHVyKGlucHV0OiBhbnkpIHtcclxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShpbnB1dC52YWx1ZSk7XHJcbiAgICBpZiAoRGF0ZUhlbHBlci5Jc1ZhbGlkRGF0ZShkYXRlKSkge1xyXG4gICAgICB0aGlzLmNoYW5nZVNlbGVjdGVkKGRhdGUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaW5wdXQudmFsdWUgPSBEYXRlSGVscGVyLkZvcm1hdERhdGUodGhpcy52YWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgaWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kYXRlcGlja2VyLmlkO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG9wZW5lZCgpIHtcclxuICAgIHJldHVybiB0aGlzLmRhdGVwaWNrZXIub3BlbmVkO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLnN0YXJ0QXQgPSB0aGlzLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgY2hhbmdlU2VsZWN0ZWQoZGF0ZTogRGF0ZSkge1xyXG4gICAgdGhpcy5vbkNoYW5nZShkYXRlKTtcclxuICAgIHRoaXMuc2VsZWN0ZWRDaGFuZ2VkLmVtaXQoZGF0ZSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMuZGF0ZXBpY2tlci5jbG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIHRoaXMuZGF0ZXBpY2tlci5vcGVuKCk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=