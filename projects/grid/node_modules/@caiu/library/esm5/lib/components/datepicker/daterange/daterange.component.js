/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, Component, forwardRef, Input, ViewChild, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DatepickerComponent } from '../datepicker.component';
import { DateRange } from '../../../shared/date';
import { build } from '../../../shared/utils';
export var /** @type {?} */ DATERANGE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return DaterangeComponent; }),
    multi: true
};
var DaterangeComponent = /** @class */ (function () {
    function DaterangeComponent(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.inline = false;
        this.startLabel = 'Start Date';
        this.endLabel = 'End Date';
        this.startDateChanged = new EventEmitter();
        this.endDateChanged = new EventEmitter();
        this._value = new DateRange();
        this.focused = new DateRange();
    }
    Object.defineProperty(DaterangeComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            if (this && this.changeDetectorRef && !this.changeDetectorRef['destroyed']) {
                this.changeDetectorRef.detectChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DaterangeComponent.prototype, "startDateId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.startDatepicker.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DaterangeComponent.prototype, "startDateOpened", {
        get: /**
         * @return {?}
         */
        function () {
            return this.startDatepicker.opened;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DaterangeComponent.prototype, "endDateId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.endDatepicker.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DaterangeComponent.prototype, "endDateOpened", {
        get: /**
         * @return {?}
         */
        function () {
            return this.endDatepicker.opened;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DaterangeComponent.prototype, "startDateValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.value.startDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeStartDate(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DaterangeComponent.prototype, "endDateValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.value.endDate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.changeEndDate(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} date
     * @return {?}
     */
    DaterangeComponent.prototype.changeStartDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.onChange(build(DateRange, {
            endDate: this.value.endDate,
            startDate: date
        }));
        this.startDateChanged.emit(date);
    };
    /**
     * @return {?}
     */
    DaterangeComponent.prototype.closeStartDate = /**
     * @return {?}
     */
    function () {
        this.startDatepicker.close();
    };
    /**
     * @return {?}
     */
    DaterangeComponent.prototype.openStateDate = /**
     * @return {?}
     */
    function () {
        this.startDatepicker.open();
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DaterangeComponent.prototype.changeEndDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.onChange(build(DateRange, {
            endDate: date,
            startDate: this.value.startDate
        }));
        this.endDateChanged.emit(date);
    };
    /**
     * @return {?}
     */
    DaterangeComponent.prototype.closeEndDate = /**
     * @return {?}
     */
    function () {
        this.endDatepicker.close();
    };
    /**
     * @return {?}
     */
    DaterangeComponent.prototype.openEndDate = /**
     * @return {?}
     */
    function () {
        this.endDatepicker.open();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DaterangeComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DaterangeComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouch = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DaterangeComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DaterangeComponent.prototype.onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        if (this.onModelChange) {
            this.onModelChange(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DaterangeComponent.prototype.onBlur = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DaterangeComponent.prototype.onFocus = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.focused = value;
        if (this.onTouch) {
            this.onTouch();
        }
    };
    DaterangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'iu-daterange',
                    template: "<div class=\"daterange\">\n  <div class=\"start-date\" [class.date]=\"!inline\" [class.inline-date]=\"inline\">\n    <label class=\"lbl-date iu-primary\">{{ startLabel }}:</label>\n    <iu-datepicker #startDate (selectedChanged)=\"changeStartDate($event)\" [value]=\"startDateValue\"></iu-datepicker>\n  </div>\n  <div class=\"end-date\" [class.date]=\"!inline\" [class.inline-date]=\"inline\">\n    <label class=\"lbl-date iu-primary\">{{ endLabel }}:</label>\n    <iu-datepicker #endDate (selectedChanged)=\"changeEndDate($event)\" [value]=\"endDateValue\"></iu-datepicker>\n  </div>\n</div>\n",
                    styles: [".daterange{display:inline-block;line-height:18px;padding:0 10px;border-radius:3px}.daterange .date{display:flex;padding:6px}.daterange .inline-date{display:inline-flex;padding:0}.daterange .inline-date.end-date{margin-left:32px}.daterange .lbl-date{width:76px;display:inline-block;font-size:14px;padding-top:22px}"],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [DATERANGE_ACCESSOR]
                },] },
    ];
    /** @nocollapse */
    DaterangeComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    DaterangeComponent.propDecorators = {
        inline: [{ type: Input }],
        min: [{ type: Input }],
        max: [{ type: Input }],
        startAt: [{ type: Input }],
        startLabel: [{ type: Input }],
        endLabel: [{ type: Input }],
        startView: [{ type: Input }],
        touchUi: [{ type: Input }],
        startDateChanged: [{ type: Output }],
        endDateChanged: [{ type: Output }],
        startDatepicker: [{ type: ViewChild, args: ['startDate',] }],
        endDatepicker: [{ type: ViewChild, args: ['endDate',] }],
        value: [{ type: Input }]
    };
    return DaterangeComponent;
}());
export { DaterangeComponent };
function DaterangeComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    DaterangeComponent.prototype.inline;
    /** @type {?} */
    DaterangeComponent.prototype.min;
    /** @type {?} */
    DaterangeComponent.prototype.max;
    /** @type {?} */
    DaterangeComponent.prototype.startAt;
    /** @type {?} */
    DaterangeComponent.prototype.startLabel;
    /** @type {?} */
    DaterangeComponent.prototype.endLabel;
    /** @type {?} */
    DaterangeComponent.prototype.startView;
    /** @type {?} */
    DaterangeComponent.prototype.touchUi;
    /** @type {?} */
    DaterangeComponent.prototype.startDateChanged;
    /** @type {?} */
    DaterangeComponent.prototype.endDateChanged;
    /** @type {?} */
    DaterangeComponent.prototype.startDatepicker;
    /** @type {?} */
    DaterangeComponent.prototype.endDatepicker;
    /** @type {?} */
    DaterangeComponent.prototype.onModelChange;
    /** @type {?} */
    DaterangeComponent.prototype.onTouch;
    /** @type {?} */
    DaterangeComponent.prototype._value;
    /** @type {?} */
    DaterangeComponent.prototype.focused;
    /** @type {?} */
    DaterangeComponent.prototype.changeDetectorRef;
}

//# sourceMappingURL=data:application/json;base64,