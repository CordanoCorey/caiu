/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Output, EventEmitter, forwardRef, Input, ViewEncapsulation, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { FileUpload } from './file-upload.model';
import { Ordering } from '../../shared/ordering';
import { build, guid, equals } from '../../shared/utils';
export var /** @type {?} */ FILE_UPLOAD_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return FileUploadComponent; }),
    multi: true
};
var FileUploadComponent = /** @class */ (function () {
    function FileUploadComponent(ref) {
        this.ref = ref;
        this.id = "files-" + guid();
        this.multiple = false;
        this.ordered = true;
        this.preview = true;
        this.upload = new EventEmitter();
        this.changes$ = new BehaviorSubject(new FileUpload());
        this.ordering = new Ordering([], FileUpload, 'order', 'name');
    }
    Object.defineProperty(FileUploadComponent.prototype, "activeFile", {
        get: /**
         * @return {?}
         */
        function () {
            return this.hasUploads ? this.uploads[0] : new FileUpload();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadComponent.prototype, "hasUploads", {
        get: /**
         * @return {?}
         */
        function () {
            return this.uploads.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadComponent.prototype, "showMultiple", {
        get: /**
         * @return {?}
         */
        function () {
            return this.preview && this.multiple;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadComponent.prototype, "uploads", {
        get: /**
         * @return {?}
         */
        function () {
            return this.ordering.items.filter(function (upload) { return upload.name !== ''; });
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.ordering.updateItems(value.filter(function (upload) { return upload.name !== ''; }));
            this.onChange(this.uploads);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadComponent.prototype, "orderedUploads", {
        get: /**
         * @return {?}
         */
        function () {
            return this.uploads;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FileUploadComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.changes$.subscribe(function (upload) {
            _this.onUpload(upload);
        });
    };
    /**
     * @param {?} f
     * @return {?}
     */
    FileUploadComponent.prototype.add = /**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        if (!this.multiple && this.hasUploads) {
            this.remove();
        }
        this.uploads = this.ordering.addItem(f);
    };
    /**
     * @return {?}
     */
    FileUploadComponent.prototype.emit = /**
     * @return {?}
     */
    function () {
        if (this.value.length > 0) {
            if (this.multiple) {
                this.upload.emit(this.value);
            }
            else {
                this.upload.emit(this.value[0]);
            }
        }
    };
    /**
     * @param {?} f
     * @return {?}
     */
    FileUploadComponent.prototype.moveUp = /**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        this.uploads = this.ordering.moveUp(f);
    };
    /**
     * @param {?} f
     * @return {?}
     */
    FileUploadComponent.prototype.moveDown = /**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        this.uploads = this.ordering.moveDown(f);
    };
    /**
     * @param {?=} f
     * @return {?}
     */
    FileUploadComponent.prototype.remove = /**
     * @param {?=} f
     * @return {?}
     */
    function (f) {
        var /** @type {?} */ removeFile = f || this.activeFile;
        this.uploads = this.ordering.removeItem(removeFile);
    };
    /**
     * @param {?} f
     * @return {?}
     */
    FileUploadComponent.prototype.update = /**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        var /** @type {?} */ index = this.uploads.findIndex(function (item) { return item['name'] === f.name; });
        if (index === -1) {
            this.add(f);
        }
        else {
            this.uploads = this.uploads.map(function (x, i) { return i === index ? build(FileUpload, f, { order: x.order }) : x; });
            this.ref.detectChanges();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FileUploadComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FileUploadComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouch = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FileUploadComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        this.uploadAll(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FileUploadComponent.prototype.onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!equals(this.value, value)) {
            this.value = value;
            if (value.every(function (x) { return x.readyState === 'DONE'; })) {
                this.emit();
            }
            if (this.onModelChange) {
                this.onModelChange(value);
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FileUploadComponent.prototype.onInputChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var /** @type {?} */ input = event.target;
        var /** @type {?} */ files = input['files'];
        if (files && files.length > 0) {
            for (var /** @type {?} */ i = 0; i < files.length; i++) {
                this.setupReader(files[i]);
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FileUploadComponent.prototype.onBlur = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.focused = [];
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FileUploadComponent.prototype.onFocus = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.focused = value;
        this.onTouch();
    };
    /**
     * @param {?} upload
     * @return {?}
     */
    FileUploadComponent.prototype.onUpload = /**
     * @param {?} upload
     * @return {?}
     */
    function (upload) {
        var /** @type {?} */ f = build(FileUpload, upload);
        this.update(f);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    FileUploadComponent.prototype.setupReader = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var /** @type {?} */ reader = new FileReader();
        var /** @type {?} */ changes$ = this.changes$;
        var /** @type {?} */ upload = build(FileUpload, {
            lastModified: file['lastModified'],
            lastModifiedDate: file['lastModifiedDate'],
            name: file['name'],
            size: file['size'],
            type: file['type'],
            webkitRelativePath: file['webkitRelativePath']
        });
        reader.onload = function (e) {
            var /** @type {?} */ src = reader.result;
            var /** @type {?} */ readyState = FileUpload.GetReadyState(reader);
            changes$.next(Object.assign(upload, { src: src, readyState: readyState }));
        };
        reader.readAsDataURL(file);
        this.onUpload(build(FileUpload, upload, { readyState: FileUpload.GetReadyState(reader) }));
    };
    /**
     * @param {?} uploads
     * @return {?}
     */
    FileUploadComponent.prototype.uploadAll = /**
     * @param {?} uploads
     * @return {?}
     */
    function (uploads) {
        var _this = this;
        uploads.forEach(function (upload) {
            _this.onUpload(upload);
        });
    };
    FileUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'iu-file-upload',
                    template: "<div class=\"file-upload\">\n  <div class=\"box\" fxLayout=\"row\" fxLayoutAlign=\"center end\">\n    <p id=\"dragdrop-message\" *ngIf=\"showMultiple\">\n      <strong>Choose files</strong>\n      <span class=\"dragndrop\"> or drag them here</span>.\n    </p>\n    <input id=\"file-upload\" *ngIf=\"showMultiple\" type=\"file\" (change)=\"onInputChange($event)\" [id]=\"id\" multiple/>\n    <p id=\"dragdrop-message\" *ngIf=\"!multiple\">\n      <strong>Choose a file</strong>\n      <span class=\"dragndrop\"> or drag it here</span>.\n    </p>\n    <input id=\"file-upload\" *ngIf=\"!multiple\" type=\"file\" (change)=\"onInputChange($event)\" [id]=\"id\" />\n    <label [for]=\"id\" class=\"custom-file-upload\">\n      <figure>\n        <mat-icon>cloud_upload</mat-icon>\n      </figure>\n    </label>\n  </div>\n  <iu-uploads *ngIf=\"multiple\" [uploads]=\"uploads\" [ordered]=\"ordered\" (moveUp)=\"moveUp($event)\" (moveDown)=\"moveDown($event)\"\n    (remove)=\"remove($event)\"></iu-uploads>\n  <iu-upload *ngIf=\"preview && !multiple && hasUploads\" [upload]=\"activeFile\" [height]=\"200\" (remove)=\"remove()\"></iu-upload>\n</div>\n",
                    styles: [".file-upload{margin:10px;padding:10px}.file-upload input[type=file]{width:.1px;height:.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.file-upload .box{padding:100px 20px;margin:10px;display:flex;outline:-webkit-focus-ring-color auto 5px;outline-offset:-10px;position:relative}.file-upload .box #dragdrop-message{position:absolute;top:60px;max-width:80%;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;display:inline-block;overflow:hidden;font-size:24px}.file-upload .box #dragdrop-message span{display:inline}.file-upload .custom-file-upload{box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12);max-width:80%;font-size:20px;font-weight:700;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;display:inline-block;overflow:hidden;padding:10px 20px;margin-top:50px}.file-upload .custom-file-upload figure{width:50px;height:70px;display:flex;position:relative;padding:30px;margin:0 auto 10px}.file-upload .custom-file-upload figure mat-icon{font-size:50px;height:50px;width:50px}.file-upload .custom-file-upload figure::after,.file-upload .custom-file-upload figure::before{width:0;height:0;content:'';position:absolute;top:0;right:0}.file-upload .custom-file-upload figure::before{border-left:20px solid transparent}.file-upload .custom-file-upload figure::after{border-right:20px solid transparent}"],
                    providers: [FILE_UPLOAD_ACCESSOR],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    FileUploadComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    FileUploadComponent.propDecorators = {
        id: [{ type: Input }],
        multiple: [{ type: Input }],
        ordered: [{ type: Input }],
        preview: [{ type: Input }],
        upload: [{ type: Output }]
    };
    return FileUploadComponent;
}());
export { FileUploadComponent };
function FileUploadComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    FileUploadComponent.prototype.id;
    /** @type {?} */
    FileUploadComponent.prototype.multiple;
    /** @type {?} */
    FileUploadComponent.prototype.ordered;
    /** @type {?} */
    FileUploadComponent.prototype.preview;
    /** @type {?} */
    FileUploadComponent.prototype.upload;
    /** @type {?} */
    FileUploadComponent.prototype.onModelChange;
    /** @type {?} */
    FileUploadComponent.prototype.onTouch;
    /** @type {?} */
    FileUploadComponent.prototype.changes$;
    /** @type {?} */
    FileUploadComponent.prototype.value;
    /** @type {?} */
    FileUploadComponent.prototype.focused;
    /** @type {?} */
    FileUploadComponent.prototype.ordering;
    /** @type {?} */
    FileUploadComponent.prototype.ref;
}

//# sourceMappingURL=data:application/json;base64,