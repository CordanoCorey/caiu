/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { orderBy } from '@progress/kendo-data-query';
import { Collection } from '../../shared/collection';
import { DateHelper } from '../../shared/date';
import { QueryModel, StyleModel } from '../../shared/models';
/**
 * @template T
 */
var /**
 * @template T
 */
Grid = /** @class */ (function () {
    function Grid(data) {
        this.data = data;
        this.query = new QueryModel();
        this.style = new StyleModel();
        this.filterable = true;
        this.sortable = { mode: 'multiple' };
    }
    /**
     * @param {?} acc
     * @param {?} operator
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    Grid.ApplyFilter = /**
     * @param {?} acc
     * @param {?} operator
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    function (acc, operator, field, value) {
        switch (operator) {
            case 'contains':
                return acc.filter(function (row) { return Grid.Contains(row[field], value); });
            case 'gte':
                return acc.filter(function (row) { return Grid.MatchDate(row[field], value); });
        }
    };
    /**
     * @template T
     * @param {?} items
     * @return {?}
     */
    Grid.Build = /**
     * @template T
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var /** @type {?} */ data = Object.assign(new Collection(), { items: items });
        return new Grid(data);
    };
    /**
     * @param {?} field
     * @param {?=} dir
     * @return {?}
     */
    Grid.BuildSort = /**
     * @param {?} field
     * @param {?=} dir
     * @return {?}
     */
    function (field, dir) {
        if (dir === void 0) { dir = 'asc'; }
        return /** @type {?} */ ({ dir: dir, field: field });
    };
    /**
     * @param {?} str
     * @param {?} substr
     * @return {?}
     */
    Grid.Contains = /**
     * @param {?} str
     * @param {?} substr
     * @return {?}
     */
    function (str, substr) {
        if (typeof (str) === 'string' && typeof (substr) === 'string') {
            return str.toLowerCase().includes(substr.toLowerCase());
        }
        return true;
    };
    /**
     * @param {?} rows
     * @param {?} filters
     * @return {?}
     */
    Grid.FilterRows = /**
     * @param {?} rows
     * @param {?} filters
     * @return {?}
     */
    function (rows, filters) {
        return filters.reduce(function (acc, filter) {
            var /** @type {?} */ operator = filter['operator'];
            var /** @type {?} */ field = filter['field'];
            var /** @type {?} */ value = filter['value'];
            return Grid.ApplyFilter(rows, operator, field, value);
        }, rows);
    };
    /**
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    Grid.MatchDate = /**
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    function (date1, date2) {
        return DateHelper.IsSameDay(date1, date2);
    };
    /**
     * @param {?} rows
     * @param {?} skip
     * @param {?} take
     * @return {?}
     */
    Grid.PageRows = /**
     * @param {?} rows
     * @param {?} skip
     * @param {?} take
     * @return {?}
     */
    function (rows, skip, take) {
        return rows.filter(function (row, index) { return index >= skip && index < skip + take; });
    };
    /**
     * @param {?} rows
     * @param {?} sort
     * @return {?}
     */
    Grid.SortRows = /**
     * @param {?} rows
     * @param {?} sort
     * @return {?}
     */
    function (rows, sort) {
        return orderBy(rows, sort);
    };
    /**
     * @param {?} grid
     * @return {?}
     */
    Grid.prototype.update = /**
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
    };
    return Grid;
}());
/**
 * @template T
 */
export { Grid };
function Grid_tsickle_Closure_declarations() {
    /** @type {?} */
    Grid.prototype.query;
    /** @type {?} */
    Grid.prototype.style;
    /** @type {?} */
    Grid.prototype.detailRowHeight;
    /** @type {?} */
    Grid.prototype.filter;
    /** @type {?} */
    Grid.prototype.filterable;
    /** @type {?} */
    Grid.prototype.groupable;
    /** @type {?} */
    Grid.prototype.height;
    /** @type {?} */
    Grid.prototype.pageSize;
    /** @type {?} */
    Grid.prototype.pageable;
    /** @type {?} */
    Grid.prototype.rowHeight;
    /** @type {?} */
    Grid.prototype.scrollable;
    /** @type {?} */
    Grid.prototype.selectable;
    /** @type {?} */
    Grid.prototype.skip;
    /** @type {?} */
    Grid.prototype.sortable;
    /** @type {?} */
    Grid.prototype.group;
    /** @type {?} */
    Grid.prototype.rowClass;
    /** @type {?} */
    Grid.prototype.sort;
    /** @type {?} */
    Grid.prototype.data;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9ncmlkL2dyaWQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUdyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7QUFFN0Q7OztBQUFBO0lBa0VJLGNBQW1CLElBQW1CO1FBQW5CLFNBQUksR0FBSixJQUFJLENBQWU7cUJBakVmLElBQUksVUFBVSxFQUFLO3FCQUN0QixJQUFJLFVBQVUsRUFBRTswQkFJdkIsSUFBSTt3QkFTUSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7S0FvRDVDOzs7Ozs7OztJQS9DTSxnQkFBVzs7Ozs7OztJQUFsQixVQUFtQixHQUFVLEVBQUUsUUFBZ0IsRUFBRSxLQUFhLEVBQUUsS0FBVTtRQUN0RSxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2YsS0FBSyxVQUFVO2dCQUNYLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQWhDLENBQWdDLENBQUMsQ0FBQztZQUMvRCxLQUFLLEtBQUs7Z0JBQ04sTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBakMsQ0FBaUMsQ0FBQyxDQUFDO1NBQ25FO0tBQ0o7Ozs7OztJQUVNLFVBQUs7Ozs7O0lBQVosVUFBZ0IsS0FBVTtRQUN0QixxQkFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsRUFBSyxFQUFFLEVBQUUsS0FBSyxPQUFBLEVBQUUsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBSSxJQUFJLENBQUMsQ0FBQztLQUM1Qjs7Ozs7O0lBRU0sY0FBUzs7Ozs7SUFBaEIsVUFBaUIsS0FBYSxFQUFFLEdBQTJCO1FBQTNCLG9CQUFBLEVBQUEsV0FBMkI7UUFDdkQsTUFBTSxtQkFBaUIsRUFBRSxHQUFHLEtBQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxFQUFDO0tBQ3pDOzs7Ozs7SUFFTSxhQUFROzs7OztJQUFmLFVBQWdCLEdBQVcsRUFBRSxNQUFjO1FBQ3ZDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDNUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7U0FDM0Q7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0tBQ2Y7Ozs7OztJQUVNLGVBQVU7Ozs7O0lBQWpCLFVBQWtCLElBQVcsRUFBRSxPQUFjO1FBQ3pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLE1BQU07WUFDOUIscUJBQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNwQyxxQkFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzlCLHFCQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDekQsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNaOzs7Ozs7SUFFTSxjQUFTOzs7OztJQUFoQixVQUFpQixLQUFXLEVBQUUsS0FBVztRQUNyQyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDN0M7Ozs7Ozs7SUFFTSxhQUFROzs7Ozs7SUFBZixVQUFnQixJQUFXLEVBQUUsSUFBWSxFQUFFLElBQVk7UUFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsS0FBSyxJQUFLLE9BQUEsS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEdBQUcsSUFBSSxHQUFHLElBQUksRUFBcEMsQ0FBb0MsQ0FBQyxDQUFDO0tBQzVFOzs7Ozs7SUFFTSxhQUFROzs7OztJQUFmLFVBQWdCLElBQVcsRUFBRSxJQUFzQjtRQUMvQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM5Qjs7Ozs7SUFLRCxxQkFBTTs7OztJQUFOLFVBQU8sSUFBbUI7S0FDekI7ZUE5RUw7SUFnRkMsQ0FBQTs7OztBQXhFRCxnQkF3RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvcmRlckJ5IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRhdGEtcXVlcnknO1xyXG5cclxuaW1wb3J0IHsgR3JpZENvbXBvbmVudCB9IGZyb20gJy4vZ3JpZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2NvbGxlY3Rpb24nO1xyXG5pbXBvcnQgeyBEYXRlSGVscGVyIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2RhdGUnO1xyXG5pbXBvcnQgeyBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yLCBHcm91cGFibGVTZXR0aW5ncywgU29ydERlc2NyaXB0b3IsIFNvcnRTZXR0aW5ncyB9IGZyb20gJy4uLy4uL3NoYXJlZC9rZW5kbyc7XHJcbmltcG9ydCB7IFF1ZXJ5TW9kZWwsIFN0eWxlTW9kZWwgfSBmcm9tICcuLi8uLi9zaGFyZWQvbW9kZWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBHcmlkPFQ+IHtcclxuICAgIHF1ZXJ5OiBRdWVyeU1vZGVsPFQ+ID0gbmV3IFF1ZXJ5TW9kZWw8VD4oKTtcclxuICAgIHN0eWxlOiBTdHlsZU1vZGVsID0gbmV3IFN0eWxlTW9kZWwoKTtcclxuXHJcbiAgICBkZXRhaWxSb3dIZWlnaHQ6IG51bWJlcjtcclxuICAgIGZpbHRlcjogQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvcjtcclxuICAgIGZpbHRlcmFibGUgPSB0cnVlO1xyXG4gICAgZ3JvdXBhYmxlOiBHcm91cGFibGVTZXR0aW5ncyB8IGJvb2xlYW47XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuICAgIHBhZ2VTaXplOiBudW1iZXI7XHJcbiAgICBwYWdlYWJsZTogYW55IHwgYm9vbGVhbjtcclxuICAgIHJvd0hlaWdodDogbnVtYmVyO1xyXG4gICAgc2Nyb2xsYWJsZTogYW55O1xyXG4gICAgc2VsZWN0YWJsZTogYm9vbGVhbjtcclxuICAgIHNraXA6IG51bWJlcjtcclxuICAgIHNvcnRhYmxlOiBTb3J0U2V0dGluZ3MgPSB7IG1vZGU6ICdtdWx0aXBsZScgfTtcclxuICAgIGdyb3VwOiBhbnlbXTtcclxuICAgIHJvd0NsYXNzOiBGdW5jdGlvbjtcclxuICAgIHNvcnQ6IGFueVtdO1xyXG5cclxuICAgIHN0YXRpYyBBcHBseUZpbHRlcihhY2M6IGFueVtdLCBvcGVyYXRvcjogc3RyaW5nLCBmaWVsZDogc3RyaW5nLCB2YWx1ZTogYW55KTogYW55W10ge1xyXG4gICAgICAgIHN3aXRjaCAob3BlcmF0b3IpIHtcclxuICAgICAgICAgICAgY2FzZSAnY29udGFpbnMnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYy5maWx0ZXIocm93ID0+IEdyaWQuQ29udGFpbnMocm93W2ZpZWxkXSwgdmFsdWUpKTtcclxuICAgICAgICAgICAgY2FzZSAnZ3RlJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBhY2MuZmlsdGVyKHJvdyA9PiBHcmlkLk1hdGNoRGF0ZShyb3dbZmllbGRdLCB2YWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgQnVpbGQ8VD4oaXRlbXM6IFRbXSk6IEdyaWQ8VD4ge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBPYmplY3QuYXNzaWduKG5ldyBDb2xsZWN0aW9uPFQ+KCksIHsgaXRlbXMgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBHcmlkPFQ+KGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBCdWlsZFNvcnQoZmllbGQ6IHN0cmluZywgZGlyOiAnYXNjJyB8ICdkZXNjJyA9ICdhc2MnKTogU29ydERlc2NyaXB0b3Ige1xyXG4gICAgICAgIHJldHVybiA8U29ydERlc2NyaXB0b3I+eyBkaXIsIGZpZWxkIH07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIENvbnRhaW5zKHN0cjogc3RyaW5nLCBzdWJzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgKHN0cikgPT09ICdzdHJpbmcnICYmIHR5cGVvZiAoc3Vic3RyKSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHN1YnN0ci50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEZpbHRlclJvd3Mocm93czogYW55W10sIGZpbHRlcnM6IGFueVtdKTogYW55W10ge1xyXG4gICAgICAgIHJldHVybiBmaWx0ZXJzLnJlZHVjZSgoYWNjLCBmaWx0ZXIpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgb3BlcmF0b3IgPSBmaWx0ZXJbJ29wZXJhdG9yJ107XHJcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gZmlsdGVyWydmaWVsZCddO1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGZpbHRlclsndmFsdWUnXTtcclxuICAgICAgICAgICAgcmV0dXJuIEdyaWQuQXBwbHlGaWx0ZXIocm93cywgb3BlcmF0b3IsIGZpZWxkLCB2YWx1ZSk7XHJcbiAgICAgICAgfSwgcm93cyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIE1hdGNoRGF0ZShkYXRlMTogRGF0ZSwgZGF0ZTI6IERhdGUpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gRGF0ZUhlbHBlci5Jc1NhbWVEYXkoZGF0ZTEsIGRhdGUyKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgUGFnZVJvd3Mocm93czogYW55W10sIHNraXA6IG51bWJlciwgdGFrZTogbnVtYmVyKTogYW55W10ge1xyXG4gICAgICAgIHJldHVybiByb3dzLmZpbHRlcigocm93LCBpbmRleCkgPT4gaW5kZXggPj0gc2tpcCAmJiBpbmRleCA8IHNraXAgKyB0YWtlKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgU29ydFJvd3Mocm93czogYW55W10sIHNvcnQ6IFNvcnREZXNjcmlwdG9yW10pOiBhbnlbXSB7XHJcbiAgICAgICAgcmV0dXJuIG9yZGVyQnkocm93cywgc29ydCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGRhdGE6IENvbGxlY3Rpb248VD4pIHtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZ3JpZDogR3JpZENvbXBvbmVudCkge1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=