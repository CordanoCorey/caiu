/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { build } from '../shared/utils';
var Lookup = /** @class */ (function () {
    function Lookup() {
        this.typeName = '';
        this.values = [];
        this._key = '';
    }
    Object.defineProperty(Lookup.prototype, "key", {
        get: /**
         * @return {?}
         */
        function () {
            return this._key || this.typeName;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._key = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Lookup.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return this.key;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.key = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Lookup.prototype, "names", {
        get: /**
         * @return {?}
         */
        function () {
            return this.values.map(function (x) { return x.name; });
        },
        enumerable: true,
        configurable: true
    });
    return Lookup;
}());
export { Lookup };
function Lookup_tsickle_Closure_declarations() {
    /** @type {?} */
    Lookup.prototype.expires;
    /** @type {?} */
    Lookup.prototype.typeName;
    /** @type {?} */
    Lookup.prototype.values;
    /** @type {?} */
    Lookup.prototype._key;
}
var LookupValue = /** @class */ (function () {
    function LookupValue() {
        this.id = 0;
        this.active = true;
        this.description = '';
        this.name = '';
        this.sort = 0;
        this.tooltip = '';
        this._label = '';
    }
    Object.defineProperty(LookupValue.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value || this.id;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupValue.prototype, "label", {
        get: /**
         * @return {?}
         */
        function () {
            return this._label || this.description;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._label = value;
        },
        enumerable: true,
        configurable: true
    });
    return LookupValue;
}());
export { LookupValue };
function LookupValue_tsickle_Closure_declarations() {
    /** @type {?} */
    LookupValue.prototype.id;
    /** @type {?} */
    LookupValue.prototype.active;
    /** @type {?} */
    LookupValue.prototype.description;
    /** @type {?} */
    LookupValue.prototype.name;
    /** @type {?} */
    LookupValue.prototype.sort;
    /** @type {?} */
    LookupValue.prototype.tooltip;
    /** @type {?} */
    LookupValue.prototype._label;
    /** @type {?} */
    LookupValue.prototype._value;
}
var Lookups = /** @class */ (function () {
    function Lookups() {
    }
    /**
     * @param {?} state
     * @param {?} lookups
     * @return {?}
     */
    Lookups.AddLookups = /**
     * @param {?} state
     * @param {?} lookups
     * @return {?}
     */
    function (state, lookups) {
        return lookups.reduce(function (acc, lookup) {
            return build(Lookups, acc, (_a = {}, _a[lookup.key] = build(Lookup, lookup), _a));
            var _a;
        }, state);
    };
    /**
     * @param {?} state
     * @param {?} lookup
     * @return {?}
     */
    Lookups.AddLookup = /**
     * @param {?} state
     * @param {?} lookup
     * @return {?}
     */
    function (state, lookup) {
        return build(Lookups, state, (_a = {},
            _a[lookup.key] = build(Lookup, lookup),
            _a));
        var _a;
    };
    /**
     * @param {?} values
     * @param {?} names
     * @return {?}
     */
    Lookups.BuildLookupValues = /**
     * @param {?} values
     * @param {?} names
     * @return {?}
     */
    function (values, names) {
        return names.reduce(function (acc, name) {
            var /** @type {?} */ value = values.find(function (x) { return x.name === name; });
            return value ? tslib_1.__spread(acc, [value]) : tslib_1.__spread(acc);
        }, []);
    };
    /**
     * @param {?} values
     * @param {?} name
     * @return {?}
     */
    Lookups.FindLookupIdByName = /**
     * @param {?} values
     * @param {?} name
     * @return {?}
     */
    function (values, name) {
        var /** @type {?} */ lkp = build(LookupValue, values.find(function (x) { return x.name === name; }));
        return lkp.id;
    };
    /**
     * @param {?} values
     * @param {?} id
     * @return {?}
     */
    Lookups.FindLookupNameById = /**
     * @param {?} values
     * @param {?} id
     * @return {?}
     */
    function (values, id) {
        var /** @type {?} */ lkp = build(LookupValue, values.find(function (x) { return x.id === id; }));
        return lkp.name;
    };
    /**
     * @param {?} state
     * @param {?} removeKey
     * @return {?}
     */
    Lookups.RemoveLookup = /**
     * @param {?} state
     * @param {?} removeKey
     * @return {?}
     */
    function (state, removeKey) {
        var /** @type {?} */ newState = new Lookups();
        var /** @type {?} */ keys = Object.keys(state).filter(function (key) { return key !== removeKey; });
        keys.forEach(function (key) {
            newState[key] = Object.assign({}, state[key]);
        });
        return newState;
    };
    return Lookups;
}());
export { Lookups };
var AddLookupPayload = /** @class */ (function () {
    function AddLookupPayload() {
        this.key = '';
    }
    return AddLookupPayload;
}());
export { AddLookupPayload };
function AddLookupPayload_tsickle_Closure_declarations() {
    /** @type {?} */
    AddLookupPayload.prototype.key;
    /** @type {?} */
    AddLookupPayload.prototype.value;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLm1vZGVscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvbG9va3VwL2xvb2t1cC5tb2RlbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFeEMsSUFBQTs7d0JBRWUsRUFBRTtzQkFDVyxFQUFFO29CQUNuQixFQUFFOztJQUVULHNCQUFJLHVCQUFHOzs7O1FBQVA7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ3JDOzs7OztRQUVELFVBQVEsS0FBYTtZQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztTQUNyQjs7O09BSkE7SUFNRCxzQkFBSSx3QkFBSTs7OztRQUFSO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDbkI7Ozs7O1FBRUQsVUFBUyxLQUFhO1lBQ2xCLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO1NBQ3BCOzs7T0FKQTtJQU1ELHNCQUFJLHlCQUFLOzs7O1FBQVQ7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxFQUFOLENBQU0sQ0FBQyxDQUFDO1NBQ3ZDOzs7T0FBQTtpQkExQkw7SUEyQkMsQ0FBQTtBQXpCRCxrQkF5QkM7Ozs7Ozs7Ozs7O0FBRUQsSUFBQTs7a0JBQ1MsQ0FBQztzQkFDRyxJQUFJOzJCQUNDLEVBQUU7b0JBQ1QsRUFBRTtvQkFDRixDQUFDO3VCQUNFLEVBQUU7c0JBQ0gsRUFBRTs7SUFHWCxzQkFBSSw4QkFBSzs7OztRQUFUO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQztTQUNqQzs7Ozs7UUFFRCxVQUFVLEtBQVU7WUFDaEIs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SCxNQUFNLENBQUMsUUFBUSxDQUFDO0tBQ25CO2tCQS9GTDtJQWlHQyxDQUFBO0FBeENELG1CQXdDQztBQUVELElBQUE7O21CQUNVLEVBQUU7OzJCQXBHWjtJQXNHQyxDQUFBO0FBSEQsNEJBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWlsZCB9IGZyb20gJy4uL3NoYXJlZC91dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgTG9va3VwIHtcclxuICAgIGV4cGlyZXM6IERhdGU7XHJcbiAgICB0eXBlTmFtZSA9ICcnO1xyXG4gICAgdmFsdWVzOiBMb29rdXBWYWx1ZVtdID0gW107XHJcbiAgICBfa2V5ID0gJyc7XHJcblxyXG4gICAgZ2V0IGtleSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9rZXkgfHwgdGhpcy50eXBlTmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQga2V5KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9rZXkgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmtleTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbmFtZSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5rZXkgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbmFtZXMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5tYXAoeCA9PiB4Lm5hbWUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTG9va3VwVmFsdWUge1xyXG4gICAgaWQgPSAwO1xyXG4gICAgYWN0aXZlID0gdHJ1ZTtcclxuICAgIGRlc2NyaXB0aW9uID0gJyc7XHJcbiAgICBuYW1lID0gJyc7XHJcbiAgICBzb3J0ID0gMDtcclxuICAgIHRvb2x0aXAgPSAnJzsgLy8gdXNlIHRoaXMgZm9yIGFjY2Vzc2liaWxpdHkgYW5kL29yIGhlbHAgdG9vbHRpcCBtZXNzYWdlc1xyXG4gICAgX2xhYmVsID0gJyc7XHJcbiAgICBfdmFsdWU6IGFueTtcclxuXHJcbiAgICBnZXQgdmFsdWUoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWUgfHwgdGhpcy5pZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdmFsdWUodmFsdWU6IGFueSkge1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGxhYmVsKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhYmVsIHx8IHRoaXMuZGVzY3JpcHRpb247XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGxhYmVsKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9sYWJlbCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvb2t1cHMge1xyXG4gICAgW2tleTogc3RyaW5nXTogTG9va3VwO1xyXG5cclxuICAgIHN0YXRpYyBBZGRMb29rdXBzKHN0YXRlOiBMb29rdXBzLCBsb29rdXBzOiBMb29rdXBbXSk6IExvb2t1cHMge1xyXG4gICAgICAgIHJldHVybiBsb29rdXBzLnJlZHVjZSgoYWNjOiBMb29rdXBzLCBsb29rdXA6IExvb2t1cCk6IExvb2t1cHMgPT5cclxuICAgICAgICAgICAgYnVpbGQoTG9va3VwcywgYWNjLCB7IFtsb29rdXAua2V5XTogYnVpbGQoTG9va3VwLCBsb29rdXApIH0pLCBzdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEFkZExvb2t1cChzdGF0ZTogTG9va3VwcywgbG9va3VwOiBMb29rdXApOiBMb29rdXBzIHtcclxuICAgICAgICByZXR1cm4gYnVpbGQoTG9va3Vwcywgc3RhdGUsIHtcclxuICAgICAgICAgICAgW2xvb2t1cC5rZXldOiBidWlsZChMb29rdXAsIGxvb2t1cClcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgQnVpbGRMb29rdXBWYWx1ZXModmFsdWVzOiBMb29rdXBWYWx1ZVtdLCBuYW1lczogc3RyaW5nW10pOiBMb29rdXBWYWx1ZVtdIHtcclxuICAgICAgICByZXR1cm4gbmFtZXMucmVkdWNlKChhY2MsIG5hbWUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXMuZmluZCh4ID0+IHgubmFtZSA9PT0gbmFtZSk7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA/IFsuLi5hY2MsIHZhbHVlXSA6IFsuLi5hY2NdO1xyXG4gICAgICAgIH0sIFtdKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgRmluZExvb2t1cElkQnlOYW1lKHZhbHVlczogTG9va3VwVmFsdWVbXSwgbmFtZTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBsa3AgPSBidWlsZChMb29rdXBWYWx1ZSwgdmFsdWVzLmZpbmQoeCA9PiB4Lm5hbWUgPT09IG5hbWUpKTtcclxuICAgICAgICByZXR1cm4gbGtwLmlkO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBGaW5kTG9va3VwTmFtZUJ5SWQodmFsdWVzOiBMb29rdXBWYWx1ZVtdLCBpZDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBsa3AgPSBidWlsZChMb29rdXBWYWx1ZSwgdmFsdWVzLmZpbmQoeCA9PiB4LmlkID09PSBpZCkpO1xyXG4gICAgICAgIHJldHVybiBsa3AubmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgUmVtb3ZlTG9va3VwKHN0YXRlOiBMb29rdXBzLCByZW1vdmVLZXk6IHN0cmluZyk6IExvb2t1cHMge1xyXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gbmV3IExvb2t1cHMoKTtcclxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc3RhdGUpLmZpbHRlcihrZXkgPT4ga2V5ICE9PSByZW1vdmVLZXkpO1xyXG4gICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBuZXdTdGF0ZVtrZXldID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGVba2V5XSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFkZExvb2t1cFBheWxvYWQge1xyXG4gICAga2V5ID0gJyc7XHJcbiAgICB2YWx1ZTogJyc7XHJcbn1cclxuIl19