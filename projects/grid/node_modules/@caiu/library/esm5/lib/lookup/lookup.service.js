/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { Store } from '@ngrx/store';
import { map } from 'rxjs/operators';
import { LookupActions } from './lookup.actions';
import { AddLookupPayload } from './lookup.models';
import { LOOKUP_PATH, LOOKUP_KEYS } from './lookup.module';
import { HttpActions } from '../http/http.actions';
import { build } from '../shared/utils';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "./lookup.module";
var LookupService = /** @class */ (function () {
    function LookupService(store, lookupPath, lookupKeys) {
        if (lookupPath === void 0) { lookupPath = 'lookup'; }
        if (lookupKeys === void 0) { lookupKeys = []; }
        this.store = store;
        this._keys = [];
        this.path = 'lookup';
        this.path = lookupPath;
        this.keys = lookupKeys;
    }
    Object.defineProperty(LookupService.prototype, "keys", {
        get: /**
         * @return {?}
         */
        function () {
            return this._keys;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._keys = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} keys
     * @param {?=} values
     * @return {?}
     */
    LookupService.prototype.load = /**
     * @param {?} keys
     * @param {?=} values
     * @return {?}
     */
    function (keys, values) {
        if (values) {
            this.loadValues(values);
        }
        this.loadKeys(keys);
    };
    /**
     * @param {?} keys
     * @return {?}
     */
    LookupService.prototype.loadKeys = /**
     * @param {?} keys
     * @return {?}
     */
    function (keys) {
        this.keys = keys;
        this.store.dispatch(HttpActions.get("" + this.path + this.buildQueryString(), LookupActions.ADD_KEYS));
    };
    /**
     * @param {?} values
     * @return {?}
     */
    LookupService.prototype.loadValues = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        this.store.dispatch(LookupActions.addValues(values));
    };
    /**
     * @param {?} key
     * @return {?}
     */
    LookupService.prototype.lookup = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.store.select('lookup').pipe(map(function (s) { return s[key]; }));
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    LookupService.prototype.addKey = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.store.dispatch(LookupActions.addKey(build(AddLookupPayload, {
            key: key,
            value: value
        })));
    };
    /**
     * @param {?} key
     * @return {?}
     */
    LookupService.prototype.removeKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this.store.dispatch(LookupActions.removeKey(key));
    };
    /**
     * @return {?}
     */
    LookupService.prototype.buildQueryString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ query = this.keys.length > 0 ? "?keys=" + this.keys[0] : '';
        this.keys.filter(function (key, index) { return index !== 0; })
            .forEach(function (key) {
            query += "&keys=" + key;
        });
        return query;
    };
    LookupService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    LookupService.ctorParameters = function () { return [
        { type: Store },
        { type: undefined, decorators: [{ type: Inject, args: [LOOKUP_PATH,] }] },
        { type: Array, decorators: [{ type: Inject, args: [LOOKUP_KEYS,] }] }
    ]; };
    /** @nocollapse */ LookupService.ngInjectableDef = i0.defineInjectable({ factory: function LookupService_Factory() { return new LookupService(i0.inject(i1.Store), i0.inject(i2.LOOKUP_PATH), i0.inject(i2.LOOKUP_KEYS)); }, token: LookupService, providedIn: "root" });
    return LookupService;
}());
export { LookupService };
function LookupService_tsickle_Closure_declarations() {
    /** @type {?} */
    LookupService.prototype._keys;
    /** @type {?} */
    LookupService.prototype.path;
    /** @type {?} */
    LookupService.prototype.store;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2xvb2t1cC9sb29rdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVwQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBVSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNELE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7SUFVdEMsdUJBQ1MsT0FDYyxVQUFxQixFQUNyQixVQUF5QjtRQUQ5QywyQkFBQSxFQUFBLHFCQUEwQztRQUMxQywyQkFBQSxFQUFBLGVBQThDO1FBRnZDLFVBQUssR0FBTCxLQUFLO3FCQUpJLEVBQUU7b0JBQ2IsUUFBUTtRQU9iLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO0tBQ3hCO0lBRUQsc0JBQUksK0JBQUk7Ozs7UUFBUjtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ25COzs7OztRQUVELFVBQVMsS0FBZTtZQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUNwQjs7O09BSkE7Ozs7OztJQU1ELDRCQUFJOzs7OztJQUFKLFVBQUssSUFBYyxFQUFFLE1BQWlCO1FBQ3BDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDWCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3pCO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNyQjs7Ozs7SUFFRCxnQ0FBUTs7OztJQUFSLFVBQVMsSUFBYztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUksRUFBRSxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztLQUN4Rzs7Ozs7SUFFRCxrQ0FBVTs7OztJQUFWLFVBQVcsTUFBZ0I7UUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0tBQ3REOzs7OztJQUVELDhCQUFNOzs7O0lBQU4sVUFBTyxHQUFXO1FBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQ3JDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBTixDQUFNLENBQUMsQ0FDakIsQ0FBQztLQUNIOzs7Ozs7SUFFRCw4QkFBTTs7Ozs7SUFBTixVQUFPLEdBQVcsRUFBRSxLQUFVO1FBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQ3RDLEtBQUssQ0FBQyxnQkFBZ0IsRUFDcEI7WUFDRSxHQUFHLEVBQUUsR0FBRztZQUNSLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FDRixDQUFDLENBQUMsQ0FBQztLQUNQOzs7OztJQUVELGlDQUFTOzs7O0lBQVQsVUFBVSxHQUFXO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNuRDs7OztJQUVPLHdDQUFnQjs7OztRQUN0QixxQkFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNoRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQVcsRUFBRSxLQUFhLElBQUssT0FBQSxLQUFLLEtBQUssQ0FBQyxFQUFYLENBQVcsQ0FBQzthQUMxRCxPQUFPLENBQUMsVUFBQSxHQUFHO1lBQ1YsS0FBSyxJQUFJLFdBQVMsR0FBSyxDQUFDO1NBQ3pCLENBQUMsQ0FBQztRQUNMLE1BQU0sQ0FBQyxLQUFLLENBQUM7OztnQkFuRWhCLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBWlEsS0FBSztnREFvQlQsTUFBTSxTQUFDLFdBQVc7NENBQ2xCLE1BQU0sU0FBQyxXQUFXOzs7d0JBdEJ2Qjs7U0FjYSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTG9va3VwQWN0aW9ucyB9IGZyb20gJy4vbG9va3VwLmFjdGlvbnMnO1xuaW1wb3J0IHsgTG9va3VwLCBBZGRMb29rdXBQYXlsb2FkIH0gZnJvbSAnLi9sb29rdXAubW9kZWxzJztcbmltcG9ydCB7IExPT0tVUF9QQVRILCBMT09LVVBfS0VZUyB9IGZyb20gJy4vbG9va3VwLm1vZHVsZSc7XG5pbXBvcnQgeyBIdHRwQWN0aW9ucyB9IGZyb20gJy4uL2h0dHAvaHR0cC5hY3Rpb25zJztcbmltcG9ydCB7IGJ1aWxkIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTG9va3VwU2VydmljZSB7XG5cbiAgX2tleXM6IHN0cmluZ1tdID0gW107XG4gIHBhdGggPSAnbG9va3VwJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgc3RvcmU6IFN0b3JlPGFueT4sXG4gICAgQEluamVjdChMT09LVVBfUEFUSCkgbG9va3VwUGF0aCA9ICdsb29rdXAnLFxuICAgIEBJbmplY3QoTE9PS1VQX0tFWVMpIGxvb2t1cEtleXM6IHN0cmluZ1tdID0gW11cbiAgKSB7XG4gICAgdGhpcy5wYXRoID0gbG9va3VwUGF0aDtcbiAgICB0aGlzLmtleXMgPSBsb29rdXBLZXlzO1xuICB9XG5cbiAgZ2V0IGtleXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl9rZXlzO1xuICB9XG5cbiAgc2V0IGtleXModmFsdWU6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5fa2V5cyA9IHZhbHVlO1xuICB9XG5cbiAgbG9hZChrZXlzOiBzdHJpbmdbXSwgdmFsdWVzPzogTG9va3VwW10pOiB2b2lkIHtcbiAgICBpZiAodmFsdWVzKSB7XG4gICAgICB0aGlzLmxvYWRWYWx1ZXModmFsdWVzKTtcbiAgICB9XG4gICAgdGhpcy5sb2FkS2V5cyhrZXlzKTtcbiAgfVxuXG4gIGxvYWRLZXlzKGtleXM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgdGhpcy5rZXlzID0ga2V5cztcbiAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKEh0dHBBY3Rpb25zLmdldChgJHt0aGlzLnBhdGh9JHt0aGlzLmJ1aWxkUXVlcnlTdHJpbmcoKX1gLCBMb29rdXBBY3Rpb25zLkFERF9LRVlTKSk7XG4gIH1cblxuICBsb2FkVmFsdWVzKHZhbHVlczogTG9va3VwW10pOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKExvb2t1cEFjdGlvbnMuYWRkVmFsdWVzKHZhbHVlcykpO1xuICB9XG5cbiAgbG9va3VwKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5zZWxlY3QoJ2xvb2t1cCcpLnBpcGUoXG4gICAgICBtYXAocyA9PiBzW2tleV0pXG4gICAgKTtcbiAgfVxuXG4gIGFkZEtleShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goTG9va3VwQWN0aW9ucy5hZGRLZXkoXG4gICAgICBidWlsZChBZGRMb29rdXBQYXlsb2FkLFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH1cbiAgICAgICkpKTtcbiAgfVxuXG4gIHJlbW92ZUtleShrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goTG9va3VwQWN0aW9ucy5yZW1vdmVLZXkoa2V5KSk7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkUXVlcnlTdHJpbmcoKTogc3RyaW5nIHtcbiAgICBsZXQgcXVlcnkgPSB0aGlzLmtleXMubGVuZ3RoID4gMCA/IGA/a2V5cz0ke3RoaXMua2V5c1swXX1gIDogJyc7XG4gICAgdGhpcy5rZXlzLmZpbHRlcigoa2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IGluZGV4ICE9PSAwKVxuICAgICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgcXVlcnkgKz0gYCZrZXlzPSR7a2V5fWA7XG4gICAgICB9KTtcbiAgICByZXR1cm4gcXVlcnk7XG4gIH1cblxufVxuIl19