/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { Store } from '@ngrx/store';
import { LookupService } from './lookup.service';
export var /** @type {?} */ LOOKUP_PATH = new InjectionToken('API lookup endpoint');
export var /** @type {?} */ LOOKUP_KEYS = new InjectionToken('API lookup keys');
/**
 * @param {?} store
 * @param {?=} LOOKUP_PATH
 * @param {?=} LOOKUP_KEYS
 * @return {?}
 */
export function lookupServiceFactory(store, LOOKUP_PATH, LOOKUP_KEYS) {
    if (LOOKUP_PATH === void 0) { LOOKUP_PATH = 'lookup'; }
    if (LOOKUP_KEYS === void 0) { LOOKUP_KEYS = []; }
    return new LookupService(store, LOOKUP_PATH, LOOKUP_KEYS);
}
/**
 * @param {?=} path
 * @param {?=} keys
 * @return {?}
 */
export function provideLookup(path, keys) {
    if (path === void 0) { path = ''; }
    if (keys === void 0) { keys = []; }
    return [
        { provide: LookupService, useFactory: lookupServiceFactory, deps: [Store, LOOKUP_PATH, LOOKUP_KEYS] },
        { provide: LOOKUP_PATH, useValue: path },
        { provide: LOOKUP_KEYS, useValue: keys },
    ];
}
var LookupModule = /** @class */ (function () {
    function LookupModule() {
    }
    /**
     * @return {?}
     */
    LookupModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: LookupModule,
            providers: provideLookup('lookup', [])
        };
    };
    /**
     * @param {?=} path
     * @return {?}
     */
    LookupModule.forRootWithPath = /**
     * @param {?=} path
     * @return {?}
     */
    function (path) {
        if (path === void 0) { path = ''; }
        return {
            ngModule: LookupModule,
            providers: provideLookup(path, [])
        };
    };
    /**
     * @param {?} keys
     * @return {?}
     */
    LookupModule.forRootWithKeys = /**
     * @param {?} keys
     * @return {?}
     */
    function (keys) {
        return {
            ngModule: LookupModule,
            providers: provideLookup('lookup', keys)
        };
    };
    /**
     * @param {?=} path
     * @param {?=} keys
     * @return {?}
     */
    LookupModule.forRootWithPathAndKeys = /**
     * @param {?=} path
     * @param {?=} keys
     * @return {?}
     */
    function (path, keys) {
        if (path === void 0) { path = ''; }
        return {
            ngModule: LookupModule,
            providers: provideLookup(path, keys)
        };
    };
    LookupModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: []
                },] },
    ];
    return LookupModule;
}());
export { LookupModule };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvbG9va3VwL2xvb2t1cC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXBDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxNQUFNLENBQUMscUJBQU0sV0FBVyxHQUFHLElBQUksY0FBYyxDQUFTLHFCQUFxQixDQUFDLENBQUM7QUFDN0UsTUFBTSxDQUFDLHFCQUFNLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBVyxpQkFBaUIsQ0FBQyxDQUFDOzs7Ozs7O0FBRTNFLE1BQU0sK0JBQStCLEtBQWlCLEVBQUUsV0FBc0IsRUFBRSxXQUEwQjtJQUFsRCw0QkFBQSxFQUFBLHNCQUFzQjtJQUFFLDRCQUFBLEVBQUEsZ0JBQTBCO0lBQ3hHLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0NBQzNEOzs7Ozs7QUFFRCxNQUFNLHdCQUF3QixJQUFTLEVBQUUsSUFBbUI7SUFBOUIscUJBQUEsRUFBQSxTQUFTO0lBQUUscUJBQUEsRUFBQSxTQUFtQjtJQUMxRCxNQUFNLENBQUM7UUFDTCxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDLEVBQUU7UUFDckcsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7UUFDeEMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7S0FDekMsQ0FBQztDQUNIOzs7Ozs7O0lBUVEsb0JBQU87OztJQUFkO1FBQ0UsTUFBTSxDQUFDO1lBQ0wsUUFBUSxFQUFFLFlBQVk7WUFDdEIsU0FBUyxFQUFFLGFBQWEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO1NBQ3ZDLENBQUM7S0FDSDs7Ozs7SUFFTSw0QkFBZTs7OztJQUF0QixVQUF1QixJQUFTO1FBQVQscUJBQUEsRUFBQSxTQUFTO1FBQzlCLE1BQU0sQ0FBQztZQUNMLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFNBQVMsRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztTQUNuQyxDQUFDO0tBQ0g7Ozs7O0lBRU0sNEJBQWU7Ozs7SUFBdEIsVUFBdUIsSUFBYztRQUNuQyxNQUFNLENBQUM7WUFDTCxRQUFRLEVBQUUsWUFBWTtZQUN0QixTQUFTLEVBQUUsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7U0FDekMsQ0FBQztLQUNIOzs7Ozs7SUFFTSxtQ0FBc0I7Ozs7O0lBQTdCLFVBQThCLElBQVMsRUFBRSxJQUFjO1FBQXpCLHFCQUFBLEVBQUEsU0FBUztRQUNyQyxNQUFNLENBQUM7WUFDTCxRQUFRLEVBQUUsWUFBWTtZQUN0QixTQUFTLEVBQUUsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7U0FDckMsQ0FBQztLQUNIOztnQkFoQ0YsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRSxFQUFFO29CQUNYLFlBQVksRUFBRSxFQUFFO2lCQUNqQjs7dUJBdkJEOztTQXdCYSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcblxuaW1wb3J0IHsgTG9va3VwU2VydmljZSB9IGZyb20gJy4vbG9va3VwLnNlcnZpY2UnO1xuXG5leHBvcnQgY29uc3QgTE9PS1VQX1BBVEggPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignQVBJIGxvb2t1cCBlbmRwb2ludCcpO1xuZXhwb3J0IGNvbnN0IExPT0tVUF9LRVlTID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZ1tdPignQVBJIGxvb2t1cCBrZXlzJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb29rdXBTZXJ2aWNlRmFjdG9yeShzdG9yZTogU3RvcmU8YW55PiwgTE9PS1VQX1BBVEggPSAnbG9va3VwJywgTE9PS1VQX0tFWVM6IHN0cmluZ1tdID0gW10pOiBMb29rdXBTZXJ2aWNlIHtcbiAgcmV0dXJuIG5ldyBMb29rdXBTZXJ2aWNlKHN0b3JlLCBMT09LVVBfUEFUSCwgTE9PS1VQX0tFWVMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUxvb2t1cChwYXRoID0gJycsIGtleXM6IHN0cmluZ1tdID0gW10pOiBhbnlbXSB7XG4gIHJldHVybiBbXG4gICAgeyBwcm92aWRlOiBMb29rdXBTZXJ2aWNlLCB1c2VGYWN0b3J5OiBsb29rdXBTZXJ2aWNlRmFjdG9yeSwgZGVwczogW1N0b3JlLCBMT09LVVBfUEFUSCwgTE9PS1VQX0tFWVNdIH0sXG4gICAgeyBwcm92aWRlOiBMT09LVVBfUEFUSCwgdXNlVmFsdWU6IHBhdGggfSxcbiAgICB7IHByb3ZpZGU6IExPT0tVUF9LRVlTLCB1c2VWYWx1ZToga2V5cyB9LFxuICBdO1xufVxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXSxcbiAgZGVjbGFyYXRpb25zOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBMb29rdXBNb2R1bGUge1xuXG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTG9va3VwTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBwcm92aWRlTG9va3VwKCdsb29rdXAnLCBbXSlcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGZvclJvb3RXaXRoUGF0aChwYXRoID0gJycpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IExvb2t1cE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogcHJvdmlkZUxvb2t1cChwYXRoLCBbXSlcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGZvclJvb3RXaXRoS2V5cyhrZXlzOiBzdHJpbmdbXSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTG9va3VwTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBwcm92aWRlTG9va3VwKCdsb29rdXAnLCBrZXlzKVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZm9yUm9vdFdpdGhQYXRoQW5kS2V5cyhwYXRoID0gJycsIGtleXM6IHN0cmluZ1tdKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBMb29rdXBNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IHByb3ZpZGVMb29rdXAocGF0aCwga2V5cylcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==