/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FormArray as Ng2FormArray } from '@angular/forms';
import { buildAbstractControl, buildControlsConfig } from './utils';
import { build, getValue, toArray } from '../shared/utils';
var FormArray = /** @class */ (function (_super) {
    tslib_1.__extends(FormArray, _super);
    function FormArray(fb, controls, validator, asyncValidator) {
        var _this = _super.call(this, controls, validator, asyncValidator) || this;
        _this.fb = fb;
        return _this;
    }
    /**
     * @template T
     * @param {?} fb
     * @param {?} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    FormArray.Build = /**
     * @template T
     * @param {?} fb
     * @param {?} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    function (fb, controls, validator, asyncValidator) {
        return new FormArray(fb, controls, validator, asyncValidator);
    };
    /**
     * @template T
     * @param {?} ctor
     * @param {?} fb
     * @param {?=} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    FormArray.BuildWithType = /**
     * @template T
     * @param {?} ctor
     * @param {?} fb
     * @param {?=} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    function (ctor, fb, controls, validator, asyncValidator) {
        if (controls === void 0) { controls = []; }
        var /** @type {?} */ fa = new FormArray(fb, controls, validator, asyncValidator);
        fa.ctor = ctor;
        return fa;
    };
    /**
     * @template T
     * @param {?} ctor
     * @param {?} value
     * @param {?} fb
     * @param {?=} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    FormArray.BuildWithTypeAndValue = /**
     * @template T
     * @param {?} ctor
     * @param {?} value
     * @param {?} fb
     * @param {?=} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    function (ctor, value, fb, controls, validator, asyncValidator) {
        if (controls === void 0) { controls = []; }
        var /** @type {?} */ fa = new FormArray(fb, controls, validator, asyncValidator);
        fa.ctor = ctor;
        fa.setValue(value);
        return fa;
    };
    /**
     * @template T
     * @param {?} value
     * @param {?} fb
     * @param {?=} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    FormArray.BuildWithValue = /**
     * @template T
     * @param {?} value
     * @param {?} fb
     * @param {?=} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    function (value, fb, controls, validator, asyncValidator) {
        if (controls === void 0) { controls = []; }
        var /** @type {?} */ fa = new FormArray(fb, controls, validator, asyncValidator);
        fa.setValue(value);
        return fa;
    };
    /**
     * @param {?} value
     * @param {?} ctor
     * @return {?}
     */
    FormArray.GetValue = /**
     * @param {?} value
     * @param {?} ctor
     * @return {?}
     */
    function (value, ctor) {
        return toArray(value).map(function (x) { return getValue(build(ctor, x)); });
    };
    Object.defineProperty(FormArray.prototype, "maxIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormArray.prototype, "values", {
        get: /**
         * @return {?}
         */
        function () {
            return tslib_1.__spread(this.value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} n
     * @return {?}
     */
    FormArray.prototype.buildControls = /**
     * @param {?} n
     * @return {?}
     */
    function (n) {
        var _this = this;
        return this.buildItems(n).map(function (x) { return buildAbstractControl(_this.fb, x); });
    };
    /**
     * @param {?} n
     * @return {?}
     */
    FormArray.prototype.buildItems = /**
     * @param {?} n
     * @return {?}
     */
    function (n) {
        var _this = this;
        return Array.from(Array(n).keys()).map(function (x) { return _this.ctor ? getValue(new _this.ctor()) : {}; });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FormArray.prototype.getValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        return this.ctor ? toArray(value).map(function (x) { return getValue(build(_this.ctor, x)); }) : value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FormArray.prototype.resetValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.removeAll();
        this.addControls(value);
        this.setValue(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FormArray.prototype.setLength = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.length < value) {
            this.add(value - this.length);
        }
        else if (this.length > value) {
            this.remove(this.length - value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FormArray.prototype.setValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.setLength(value.length);
        _super.prototype.setValue.call(this, this.getValue(value));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    FormArray.prototype.findControlById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.controls.find(function (control) { return control.value && control.value['id'] && control.value['id'] === id; });
    };
    /**
     * @return {?}
     */
    FormArray.prototype.removeAll = /**
     * @return {?}
     */
    function () {
        this.controls = [];
    };
    /**
     * @param {?} indexes
     * @return {?}
     */
    FormArray.prototype.removeIndexes = /**
     * @param {?} indexes
     * @return {?}
     */
    function (indexes) {
        var _this = this;
        indexes.forEach(function (index) {
            _this.removeAt(index);
        });
    };
    /**
     * @param {?} n
     * @return {?}
     */
    FormArray.prototype.add = /**
     * @param {?} n
     * @return {?}
     */
    function (n) {
        var _this = this;
        this.buildControls(n).forEach(function (x) {
            _this.push(x);
        });
    };
    /**
     * @param {?} n
     * @return {?}
     */
    FormArray.prototype.remove = /**
     * @param {?} n
     * @return {?}
     */
    function (n) {
        var _this = this;
        var /** @type {?} */ k = Math.min(n, this.length);
        Array.from(Array(k).keys()).forEach(function (x) {
            _this.removeAt(_this.maxIndex);
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FormArray.prototype.addControls = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        var /** @type {?} */ controls = value.map(function (x) { return _this.fb.group(buildControlsConfig(x, _this.fb)); });
        controls.forEach(function (control) {
            _this.push(control);
        });
    };
    /**
     * Set value of each control.
     * @param ctor Class constructor
     * @param props Values to assign to props of each control
     */
    /**
     * Set value of each control.
     * @param {?} ctor Class constructor
     * @param {?} props Values to assign to props of each control
     * @return {?}
     */
    FormArray.prototype.setAll = /**
     * Set value of each control.
     * @param {?} ctor Class constructor
     * @param {?} props Values to assign to props of each control
     * @return {?}
     */
    function (ctor, props) {
        this.controls.forEach(function (control) {
            control.setValue(build(new ctor(), control.value, props));
        });
    };
    return FormArray;
}(Ng2FormArray));
export { FormArray };
function FormArray_tsickle_Closure_declarations() {
    /** @type {?} */
    FormArray.prototype.ctor;
    /** @type {?} */
    FormArray.prototype.fb;
}

//# sourceMappingURL=data:application/json;base64,