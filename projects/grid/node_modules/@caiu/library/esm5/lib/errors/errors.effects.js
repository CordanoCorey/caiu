/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Effect, Actions } from '@ngrx/effects';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { ErrorActions } from './errors.actions';
import { ErrorsService } from './errors.service';
var ErrorEffects = /** @class */ (function () {
    function ErrorEffects(actions$, service) {
        this.actions$ = actions$;
        this.service = service;
        /**
         * Listens for thrown errors and handles them accordingly
         */
        this.handleError$ = this.actions$.pipe(filter(function (action) { return action.type === ErrorActions.THROW_ERROR; }), map(function (data) {
            return /** @type {?} */ ({ type: ErrorActions.HANDLE_ERROR });
        }));
    }
    ErrorEffects.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ErrorEffects.ctorParameters = function () { return [
        { type: Actions },
        { type: ErrorsService }
    ]; };
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], ErrorEffects.prototype, "handleError$", void 0);
    return ErrorEffects;
}());
export { ErrorEffects };
function ErrorEffects_tsickle_Closure_declarations() {
    /** @type {?} */
    ErrorEffects.prototype.actionTypes;
    /**
     * Listens for thrown errors and handles them accordingly
     * @type {?}
     */
    ErrorEffects.prototype.handleError$;
    /** @type {?} */
    ErrorEffects.prototype.actions$;
    /** @type {?} */
    ErrorEffects.prototype.service;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmVmZmVjdHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2Vycm9ycy9lcnJvcnMuZWZmZWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFaEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0lBaUI3QyxzQkFDWSxVQUNBO1FBREEsYUFBUSxHQUFSLFFBQVE7UUFDUixZQUFPLEdBQVAsT0FBTzs7Ozs0QkFUMEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQzNELE1BQU0sQ0FBQyxVQUFDLE1BQWMsSUFBSyxPQUFBLE1BQU0sQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLFdBQVcsRUFBeEMsQ0FBd0MsQ0FBQyxFQUNwRSxHQUFHLENBQUMsVUFBQyxJQUFJO1lBQ0wsTUFBTSxtQkFBUyxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsWUFBWSxFQUFFLEVBQUM7U0FDdEQsQ0FBQyxDQUNMO0tBS0k7O2dCQWpCUixVQUFVOzs7O2dCQVRNLE9BQU87Z0JBTWYsYUFBYTs7O1FBVWpCLE1BQU0sRUFBRTswQ0FBZSxVQUFVOzt1QkFqQnRDOztTQVdhLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEVmZmVjdCwgQWN0aW9ucyB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xyXG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBFcnJvckFjdGlvbnMgfSBmcm9tICcuL2Vycm9ycy5hY3Rpb25zJztcclxuaW1wb3J0IHsgRXJyb3JzU2VydmljZSB9IGZyb20gJy4vZXJyb3JzLnNlcnZpY2UnO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEVycm9yRWZmZWN0cyB7XHJcbiAgICBhY3Rpb25UeXBlczogc3RyaW5nW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMaXN0ZW5zIGZvciB0aHJvd24gZXJyb3JzIGFuZCBoYW5kbGVzIHRoZW0gYWNjb3JkaW5nbHlcclxuICAgICAqL1xyXG4gICAgQEVmZmVjdCgpIGhhbmRsZUVycm9yJDogT2JzZXJ2YWJsZTxBY3Rpb24+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxyXG4gICAgICAgIGZpbHRlcigoYWN0aW9uOiBBY3Rpb24pID0+IGFjdGlvbi50eXBlID09PSBFcnJvckFjdGlvbnMuVEhST1dfRVJST1IpLFxyXG4gICAgICAgIG1hcCgoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gPEFjdGlvbj57IHR5cGU6IEVycm9yQWN0aW9ucy5IQU5ETEVfRVJST1IgfTtcclxuICAgICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zLFxyXG4gICAgICAgIHByaXZhdGUgc2VydmljZTogRXJyb3JzU2VydmljZVxyXG4gICAgKSB7IH1cclxufVxyXG4iXX0=