/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { build, toInt } from './utils';
var DateRange = /** @class */ (function () {
    function DateRange() {
        this.startDate = new Date();
        this.endDate = new Date();
    }
    return DateRange;
}());
export { DateRange };
function DateRange_tsickle_Closure_declarations() {
    /** @type {?} */
    DateRange.prototype.startDate;
    /** @type {?} */
    DateRange.prototype.endDate;
}
var DateHelper = /** @class */ (function () {
    function DateHelper() {
    }
    /**
     * @param {?} startDate
     * @param {?} startHours
     * @param {?} startMinutes
     * @param {?} startMeridian
     * @return {?}
     */
    DateHelper.BuildStartTime = /**
     * @param {?} startDate
     * @param {?} startHours
     * @param {?} startMinutes
     * @param {?} startMeridian
     * @return {?}
     */
    function (startDate, startHours, startMinutes, startMeridian) {
        var /** @type {?} */ startTime = new Date(startDate);
        var /** @type {?} */ hours = startMeridian === 'AM' ? startHours : startHours + 12;
        startTime.setHours(hours);
        startTime.setMinutes(startMinutes);
        return startTime;
    };
    /**
     * @param {?} startTime
     * @param {?} dHours
     * @param {?} dMinutes
     * @return {?}
     */
    DateHelper.BuildEndTime = /**
     * @param {?} startTime
     * @param {?} dHours
     * @param {?} dMinutes
     * @return {?}
     */
    function (startTime, dHours, dMinutes) {
        var /** @type {?} */ endTime = new Date(startTime);
        endTime.setHours(endTime.getHours() + dHours);
        endTime.setMinutes(endTime.getMinutes() + dMinutes);
        return endTime;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DateHelper.FormatDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        var /** @type {?} */ d = new Date(date);
        var /** @type {?} */ month = '' + (d.getMonth() + 1);
        var /** @type {?} */ day = '' + d.getDate();
        var /** @type {?} */ year = d.getFullYear();
        return month && day && year ? [month, day, year].join('/') : null;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DateHelper.FormatDateDashes = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        var /** @type {?} */ d = new Date(date);
        var /** @type {?} */ month = '' + (d.getMonth() + 1);
        var /** @type {?} */ day = '' + d.getDate();
        var /** @type {?} */ year = d.getFullYear();
        if (month.length < 2) {
            month = '0' + month;
        }
        if (day.length < 2) {
            day = '0' + day;
        }
        return [year, month, day].join('-');
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DateHelper.FormatDateSlashes = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        var /** @type {?} */ d = new Date(date);
        var /** @type {?} */ month = '' + (d.getMonth() + 1);
        var /** @type {?} */ day = '' + d.getDate();
        var /** @type {?} */ year = d.getFullYear();
        if (month.length < 2) {
            month = '0' + month;
        }
        if (day.length < 2) {
            day = '0' + day;
        }
        return [month, day, year].join('/');
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DateHelper.TimeAgo = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (!date) {
            return '';
        }
        var /** @type {?} */ seconds = Math.floor(((new Date()).getTime() - (new Date(date)).getTime()) / 1000);
        var /** @type {?} */ interval = Math.floor(seconds / 31536000);
        if (interval > 1) {
            return interval + ' years';
        }
        interval = Math.floor(seconds / 2592000);
        if (interval > 1) {
            return interval + ' months';
        }
        interval = Math.floor(seconds / 86400);
        if (interval > 1) {
            return interval + ' days';
        }
        interval = Math.floor(seconds / 3600);
        if (interval > 1) {
            return interval + ' hours';
        }
        interval = Math.floor(seconds / 60);
        if (interval > 1) {
            return interval + ' minutes';
        }
        return Math.floor(seconds) + ' seconds';
    };
    /**
     * @param {?} d
     * @return {?}
     */
    DateHelper.ToMonthName = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        var /** @type {?} */ date = new Date(d);
        return DateHelper.MonthNames[date.getMonth()];
    };
    /**
     * @param {?} d
     * @return {?}
     */
    DateHelper.ToMonthNumber = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        var /** @type {?} */ date = new Date(d);
        return date.getMonth() + 1;
    };
    /**
     * @param {?} monthYear
     * @return {?}
     */
    DateHelper.ToMonthNumberFromMonthYear = /**
     * @param {?} monthYear
     * @return {?}
     */
    function (monthYear) {
        var /** @type {?} */ month = monthYear.substr(monthYear.length - 2);
        return toInt(month) - 1;
    };
    /**
     * @param {?} monthYear
     * @return {?}
     */
    DateHelper.ToMonthNumberFromMonthYearName = /**
     * @param {?} monthYear
     * @return {?}
     */
    function (monthYear) {
        var /** @type {?} */ parts = monthYear.split(/\s*,\s*/);
        var /** @type {?} */ month = DateHelper.MonthNumbers[parts[0]];
        return month;
    };
    /**
     * @param {?} d
     * @return {?}
     */
    DateHelper.ToMonthYear = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        var /** @type {?} */ date = new Date(d);
        var /** @type {?} */ monthNumber = DateHelper.ToMonthNumber(date);
        var /** @type {?} */ month = monthNumber < 10 ? "0" + monthNumber : monthNumber;
        return date.getFullYear() + "-" + month;
    };
    /**
     * @param {?} d
     * @return {?}
     */
    DateHelper.ToMonthYearName = /**
     * @param {?} d
     * @return {?}
     */
    function (d) {
        var /** @type {?} */ date = new Date(d);
        var /** @type {?} */ month = DateHelper.ToMonthName(date);
        var /** @type {?} */ year = date.getFullYear();
        return month && year ? month + " " + year : '';
    };
    /**
     * @param {?} monthYear
     * @return {?}
     */
    DateHelper.ToYearNumberFromMonthYear = /**
     * @param {?} monthYear
     * @return {?}
     */
    function (monthYear) {
        var /** @type {?} */ year = monthYear.substring(0, 4);
        return toInt(year);
    };
    /**
     * @param {?} monthYear
     * @return {?}
     */
    DateHelper.FromMonthYear = /**
     * @param {?} monthYear
     * @return {?}
     */
    function (monthYear) {
        var /** @type {?} */ year = DateHelper.ToYearNumberFromMonthYear(monthYear);
        var /** @type {?} */ month = DateHelper.ToMonthNumberFromMonthYear(monthYear);
        return year && month ? new Date(year, month) : new Date();
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DateHelper.IsDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return Object.prototype.toString.call(date) === '[object Date]';
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DateHelper.IsValidDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        var /** @type {?} */ dateWrapper = new Date(date);
        return !isNaN(dateWrapper.getDate());
    };
    Object.defineProperty(DateHelper, "Today", {
        get: /**
         * @return {?}
         */
        function () {
            return new Date();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateHelper, "Month", {
        get: /**
         * @return {?}
         */
        function () {
            return DateHelper.Today.getMonth();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateHelper, "MonthNumbers", {
        get: /**
         * @return {?}
         */
        function () {
            return DateHelper.MonthNames.reduce(function (acc, x, i) {
                return Object.assign({}, acc, (_a = {}, _a[x] = i, _a));
                var _a;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateHelper, "Year", {
        get: /**
         * @return {?}
         */
        function () {
            return DateHelper.Today.getFullYear();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateHelper, "NextSchoolYear", {
        get: /**
         * @return {?}
         */
        function () {
            return DateHelper.Month < 7 ? DateHelper.Year : DateHelper.Year + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateHelper, "NextSchoolYearStartDate", {
        get: /**
         * @return {?}
         */
        function () {
            return new Date(DateHelper.SchoolYearStart(DateHelper.NextSchoolYear));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateHelper, "PreviousSchoolYear", {
        get: /**
         * @return {?}
         */
        function () {
            return DateHelper.Month < 7 ? DateHelper.Year : DateHelper.Year + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateHelper, "PreviousSchoolYearEndDate", {
        get: /**
         * @return {?}
         */
        function () {
            return new Date(DateHelper.SchoolYearEnd(DateHelper.PreviousSchoolYear));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateHelper, "FutureDate", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ date = DateHelper.Today;
            return DateHelper.AddDays(date, 100000);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateHelper, "PastDate", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ date = DateHelper.Today;
            return DateHelper.SubtractDays(date, 100000);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} d
     * @param {?} days
     * @return {?}
     */
    DateHelper.AddDays = /**
     * @param {?} d
     * @param {?} days
     * @return {?}
     */
    function (d, days) {
        var /** @type {?} */ date = new Date(d);
        date.setDate(date.getDate() + days);
        return date;
    };
    /**
     * @param {?} d
     * @param {?} days
     * @return {?}
     */
    DateHelper.SubtractDays = /**
     * @param {?} d
     * @param {?} days
     * @return {?}
     */
    function (d, days) {
        var /** @type {?} */ date = new Date(d);
        date.setDate(date.getDate() - days);
        return date;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    DateHelper.BuildDate = /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    function (year, month, day) {
        var /** @type {?} */ date = new Date();
        date.setFullYear(year);
        date.setMonth(month);
        date.setDate(day);
        return date;
    };
    /**
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    DateHelper.DateChanged = /**
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    function (d1, d2) {
        var /** @type {?} */ date1 = new Date(d1);
        var /** @type {?} */ date2 = new Date(d2);
        return date1.getDate() !== date2.getDate() || date1.getMonth() !== date2.getMonth() || date1.getFullYear() !== date2.getFullYear();
    };
    /**
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    DateHelper.IsSameDay = /**
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    function (d1, d2) {
        return !DateHelper.DateChanged(d1, d2);
    };
    Object.defineProperty(DateHelper, "YearStartDate", {
        get: /**
         * @return {?}
         */
        function () {
            if (DateHelper.Month < 7) {
                return DateHelper.BuildDate(DateHelper.Year - 1, 6, 1);
            }
            else {
                return DateHelper.BuildDate(DateHelper.Year, 6, 1);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateHelper, "PreviousYearStartDate", {
        get: /**
         * @return {?}
         */
        function () {
            if (DateHelper.Month < 7) {
                return DateHelper.BuildDate(DateHelper.Year - 2, 6, 1);
            }
            else {
                return DateHelper.BuildDate(DateHelper.Year - 1, 6, 1);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} year
     * @return {?}
     */
    DateHelper.SchoolYearStart = /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        return DateHelper.BuildDate(year, 6, 1);
    };
    Object.defineProperty(DateHelper, "YearEndDate", {
        get: /**
         * @return {?}
         */
        function () {
            if (DateHelper.Month < 7) {
                return DateHelper.BuildDate(DateHelper.Year, 5, 30);
            }
            else {
                return DateHelper.BuildDate(DateHelper.Year + 1, 5, 30);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateHelper, "PreviousYearEndDate", {
        get: /**
         * @return {?}
         */
        function () {
            if (DateHelper.Month < 7) {
                return DateHelper.BuildDate(DateHelper.Year - 1, 5, 30);
            }
            else {
                return DateHelper.BuildDate(DateHelper.Year, 5, 30);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} year
     * @return {?}
     */
    DateHelper.SchoolYearEnd = /**
     * @param {?=} year
     * @return {?}
     */
    function (year) {
        return DateHelper.BuildDate(year - 1, 5, 30);
    };
    /**
     * @param {?} dateRangeId
     * @return {?}
     */
    DateHelper.BuildDateRange = /**
     * @param {?} dateRangeId
     * @return {?}
     */
    function (dateRangeId) {
        var /** @type {?} */ startDate;
        var /** @type {?} */ endDate;
        switch (dateRangeId) {
            case 0:
                break;
            case 1:
                break;
            case 2:
                // Today
                startDate = DateHelper.Today;
                endDate = startDate;
                break;
            case 3:
                // Next 15
                startDate = DateHelper.Today;
                endDate = DateHelper.AddDays(startDate, 15);
                break;
            case 4:
                // Next 30
                startDate = DateHelper.Today;
                endDate = DateHelper.AddDays(startDate, 30);
                break;
            case 5:
                // Next 60
                startDate = DateHelper.Today;
                endDate = DateHelper.AddDays(startDate, 60);
                break;
            case 6:
                // Previous 15
                endDate = DateHelper.Today;
                startDate = DateHelper.SubtractDays(endDate, 15);
                break;
            case 7:
                // Previous 30
                endDate = DateHelper.Today;
                startDate = DateHelper.SubtractDays(endDate, 30);
                break;
            case 8:
                // Previous 60
                endDate = DateHelper.Today;
                startDate = DateHelper.SubtractDays(endDate, 60);
                break;
            case 9:
                // School Year - Runs from July 1st Thru June 30th
                startDate = DateHelper.YearStartDate;
                endDate = DateHelper.YearEndDate;
                break;
            case 10:
                // Number of meetings = 10
                startDate = DateHelper.Today;
                endDate = DateHelper.FutureDate;
                break;
            case 11:
                // Previous School Year
                startDate = DateHelper.PreviousYearStartDate;
                endDate = DateHelper.PreviousYearEndDate;
                break;
        }
        return build(DateRange, { startDate: startDate, endDate: endDate });
    };
    DateHelper.MonthNames = [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
    ];
    return DateHelper;
}());
export { DateHelper };
function DateHelper_tsickle_Closure_declarations() {
    /** @type {?} */
    DateHelper.MonthNames;
}

//# sourceMappingURL=data:application/json;base64,