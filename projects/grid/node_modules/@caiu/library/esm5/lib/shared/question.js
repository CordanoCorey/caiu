/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Collection } from './collection';
import { DateHelper } from './date';
import { build } from './utils';
var Question = /** @class */ (function () {
    function Question() {
        this.question = '';
        this.title = '';
    }
    return Question;
}());
export { Question };
function Question_tsickle_Closure_declarations() {
    /** @type {?} */
    Question.prototype.answer;
    /** @type {?} */
    Question.prototype.lookup;
    /** @type {?} */
    Question.prototype.key;
    /** @type {?} */
    Question.prototype.question;
    /** @type {?} */
    Question.prototype.title;
    /** @type {?} */
    Question.prototype.type;
}
var Questions = /** @class */ (function (_super) {
    tslib_1.__extends(Questions, _super);
    function Questions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} questions
     * @param {?} answers
     * @return {?}
     */
    Questions.AnswerQuestions = /**
     * @param {?} questions
     * @param {?} answers
     * @return {?}
     */
    function (questions, answers) {
        return questions.map(function (question) { return Questions.AnswerQuestion(question, answers[question.key]); });
    };
    /**
     * @param {?} question
     * @param {?} answerData
     * @return {?}
     */
    Questions.AnswerQuestion = /**
     * @param {?} question
     * @param {?} answerData
     * @return {?}
     */
    function (question, answerData) {
        var /** @type {?} */ answer = answerData;
        switch (question.type) {
            case 'date':
                answer = answerData;
                break;
            case 'monthyear':
                answer = DateHelper.ToMonthYearName(answerData);
                break;
            case 'yesno':
                answer = answerData ? 'Yes' : 'No';
                break;
        }
        return build(Question, question, { answer: answer });
    };
    /**
     * @param {?} answers
     * @return {?}
     */
    Questions.prototype.answerQuestions = /**
     * @param {?} answers
     * @return {?}
     */
    function (answers) {
        return Questions.AnswerQuestions(this.toArray(), answers);
    };
    return Questions;
}(Collection));
export { Questions };
/**
 * @abstract
 */
var /**
 * @abstract
 */
QuestionsModel = /** @class */ (function () {
    function QuestionsModel() {
        this.ignore = ['isAdd', 'questions'];
    }
    Object.defineProperty(QuestionsModel.prototype, "answers", {
        get: /**
         * @return {?}
         */
        function () {
            return Questions.AnswerQuestions(this.questions, this);
        },
        enumerable: true,
        configurable: true
    });
    return QuestionsModel;
}());
/**
 * @abstract
 */
export { QuestionsModel };
function QuestionsModel_tsickle_Closure_declarations() {
    /** @type {?} */
    QuestionsModel.prototype.ignore;
    /** @type {?} */
    QuestionsModel.prototype.questions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL3NoYXJlZC9xdWVzdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDLElBQUE7O3dCQUllLEVBQUU7cUJBQ0wsRUFBRTs7bUJBVGQ7SUFXQyxDQUFBO0FBUEQsb0JBT0M7Ozs7Ozs7Ozs7Ozs7OztBQUlELElBQUE7SUFBK0IscUNBQW9COzs7Ozs7Ozs7SUFFeEMseUJBQWU7Ozs7O0lBQXRCLFVBQXVCLFNBQXFCLEVBQUUsT0FBWTtRQUN0RCxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBekQsQ0FBeUQsQ0FBQyxDQUFDO0tBQy9GOzs7Ozs7SUFFTSx3QkFBYzs7Ozs7SUFBckIsVUFBc0IsUUFBa0IsRUFBRSxVQUFlO1FBQ3JELHFCQUFJLE1BQU0sR0FBRyxVQUFVLENBQUM7UUFDeEIsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDcEIsS0FBSyxNQUFNO2dCQUNQLE1BQU0sR0FBRyxVQUFVLENBQUM7Z0JBQ3BCLEtBQUssQ0FBQztZQUNWLEtBQUssV0FBVztnQkFDWixNQUFNLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDaEQsS0FBSyxDQUFDO1lBQ1YsS0FBSyxPQUFPO2dCQUNSLE1BQU0sR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNuQyxLQUFLLENBQUM7U0FDYjtRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFLE1BQU0sUUFBQSxFQUFFLENBQUMsQ0FBQztLQUNoRDs7Ozs7SUFFRCxtQ0FBZTs7OztJQUFmLFVBQWdCLE9BQVk7UUFDeEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzdEO29CQXZDTDtFQWUrQixVQUFVLEVBeUJ4QyxDQUFBO0FBekJELHFCQXlCQzs7OztBQUVEOzs7QUFBQTs7c0JBQ2EsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDOztJQUcvQixzQkFBSSxtQ0FBTzs7OztRQUFYO1lBQ0ksTUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUMxRDs7O09BQUE7eUJBaERMO0lBaURDLENBQUE7Ozs7QUFQRCwwQkFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICcuL2NvbGxlY3Rpb24nO1xyXG5pbXBvcnQgeyBEYXRlSGVscGVyIH0gZnJvbSAnLi9kYXRlJztcclxuaW1wb3J0IHsgYnVpbGQgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBRdWVzdGlvbiB7XHJcbiAgICBhbnN3ZXI/OiBhbnk7XHJcbiAgICBsb29rdXA/OiBhbnk7XHJcbiAgICBrZXk6IHN0cmluZyB8IG51bWJlcjtcclxuICAgIHF1ZXN0aW9uID0gJyc7XHJcbiAgICB0aXRsZT89ICcnO1xyXG4gICAgdHlwZT86IHN0cmluZyB8IEFuc3dlclR5cGU7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEFuc3dlclR5cGUgPSAnZGF0ZScgfCAnbW9udGh5ZWFyJyB8ICd5ZXNubyc7XHJcblxyXG5leHBvcnQgY2xhc3MgUXVlc3Rpb25zIGV4dGVuZHMgQ29sbGVjdGlvbjxRdWVzdGlvbj4ge1xyXG5cclxuICAgIHN0YXRpYyBBbnN3ZXJRdWVzdGlvbnMocXVlc3Rpb25zOiBRdWVzdGlvbltdLCBhbnN3ZXJzOiBhbnkpOiBRdWVzdGlvbltdIHtcclxuICAgICAgICByZXR1cm4gcXVlc3Rpb25zLm1hcChxdWVzdGlvbiA9PiBRdWVzdGlvbnMuQW5zd2VyUXVlc3Rpb24ocXVlc3Rpb24sIGFuc3dlcnNbcXVlc3Rpb24ua2V5XSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBBbnN3ZXJRdWVzdGlvbihxdWVzdGlvbjogUXVlc3Rpb24sIGFuc3dlckRhdGE6IGFueSk6IFF1ZXN0aW9uIHtcclxuICAgICAgICBsZXQgYW5zd2VyID0gYW5zd2VyRGF0YTtcclxuICAgICAgICBzd2l0Y2ggKHF1ZXN0aW9uLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XHJcbiAgICAgICAgICAgICAgICBhbnN3ZXIgPSBhbnN3ZXJEYXRhO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoeWVhcic6XHJcbiAgICAgICAgICAgICAgICBhbnN3ZXIgPSBEYXRlSGVscGVyLlRvTW9udGhZZWFyTmFtZShhbnN3ZXJEYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd5ZXNubyc6XHJcbiAgICAgICAgICAgICAgICBhbnN3ZXIgPSBhbnN3ZXJEYXRhID8gJ1llcycgOiAnTm8nO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBidWlsZChRdWVzdGlvbiwgcXVlc3Rpb24sIHsgYW5zd2VyIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFuc3dlclF1ZXN0aW9ucyhhbnN3ZXJzOiBhbnkpOiBRdWVzdGlvbltdIHtcclxuICAgICAgICByZXR1cm4gUXVlc3Rpb25zLkFuc3dlclF1ZXN0aW9ucyh0aGlzLnRvQXJyYXkoKSwgYW5zd2Vycyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBRdWVzdGlvbnNNb2RlbCB7XHJcbiAgICBpZ25vcmUgPSBbJ2lzQWRkJywgJ3F1ZXN0aW9ucyddO1xyXG4gICAgYWJzdHJhY3QgcXVlc3Rpb25zOiBRdWVzdGlvbltdO1xyXG5cclxuICAgIGdldCBhbnN3ZXJzKCk6IFF1ZXN0aW9uW10ge1xyXG4gICAgICAgIHJldHVybiBRdWVzdGlvbnMuQW5zd2VyUXVlc3Rpb25zKHRoaXMucXVlc3Rpb25zLCB0aGlzKTtcclxuICAgIH1cclxufVxyXG4iXX0=