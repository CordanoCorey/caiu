/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { build } from './utils';
/**
 * @template T
 */
var /**
 * @template T
 */
Permutation = /** @class */ (function () {
    function Permutation(order) {
        this.order = order;
        this._timestamp = new Date();
    }
    Object.defineProperty(Permutation.prototype, "ranks", {
        get: /**
         * @return {?}
         */
        function () {
            return this.order.sort(function (a, b) { return a.order - b.order; })
                .map(function (x, index) { return Object.assign(/** @type {?} */ ({}), x, { rank: index + 1 }); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Permutation.prototype, "timestamp", {
        get: /**
         * @return {?}
         */
        function () {
            return this._timestamp;
        },
        enumerable: true,
        configurable: true
    });
    return Permutation;
}());
/**
 * @template T
 */
export { Permutation };
function Permutation_tsickle_Closure_declarations() {
    /** @type {?} */
    Permutation.prototype._timestamp;
    /** @type {?} */
    Permutation.prototype.order;
}
/**
 * @template T
 */
var /**
 * @template T
 */
OrderedItem = /** @class */ (function () {
    function OrderedItem(item) {
        this.item = item;
    }
    return OrderedItem;
}());
/**
 * @template T
 */
export { OrderedItem };
function OrderedItem_tsickle_Closure_declarations() {
    /** @type {?} */
    OrderedItem.prototype.id;
    /** @type {?} */
    OrderedItem.prototype.order;
    /** @type {?} */
    OrderedItem.prototype.rank;
    /** @type {?} */
    OrderedItem.prototype.item;
}
/**
 * @template T
 */
var /**
 * @template T
 */
Ordering = /** @class */ (function () {
    function Ordering(_items, ctor, orderKey, idKey) {
        if (idKey === void 0) { idKey = 'id'; }
        this._items = _items;
        this.ctor = ctor;
        this.orderKey = orderKey;
        this.idKey = idKey;
        this._history = [];
    }
    Object.defineProperty(Ordering.prototype, "count", {
        get: /**
         * @return {?}
         */
        function () {
            return this.items.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ordering.prototype, "history", {
        get: /**
         * @return {?}
         */
        function () {
            return this._history;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ordering.prototype, "instance", {
        get: /**
         * @return {?}
         */
        function () {
            return new this.ctor();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ordering.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            return this._items.sort(function (a, b) { return _this.getItemOrder(a) - _this.getItemOrder(b); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ordering.prototype, "maxIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.count === 0 ? 0 : Math.max.apply(Math, tslib_1.__spread(this.order.map(function (x) { return x.order; })));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ordering.prototype, "order", {
        get: /**
         * @return {?}
         */
        function () {
            return this.permutation.ranks;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ordering.prototype, "permutation", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            return new Permutation(this.items.map(function (item) { return ({
                id: _this.getItemId(item),
                order: _this.getItemOrder(item)
            }); }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ordering.prototype, "nextPosition", {
        get: /**
         * @return {?}
         */
        function () {
            return this.maxIndex + 1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} item
     * @return {?}
     */
    Ordering.prototype.addItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.addItemAtPosition(item, this.nextPosition);
    };
    /**
     * @param {?} item
     * @param {?} pos
     * @return {?}
     */
    Ordering.prototype.addItemAtPosition = /**
     * @param {?} item
     * @param {?} pos
     * @return {?}
     */
    function (item, pos) {
        var _this = this;
        var /** @type {?} */ newItemId = this.getItemId(item);
        return tslib_1.__spread(this.items, [build(this.ctor, item, { order: pos })]).map(function (x) {
            var /** @type {?} */ order = _this.getItemOrder(x);
            var /** @type {?} */ id = _this.getItemId(x);
            return (order <= pos || id === newItemId) ? x : build(_this.ctor, x, { order: order + 1 });
        });
    };
    /**
     * @param {?=} items
     * @return {?}
     */
    Ordering.prototype.archive = /**
     * @param {?=} items
     * @return {?}
     */
    function (items) {
        var /** @type {?} */ permutation = items ? this.getPermutation(items) : this.permutation;
        this._history = tslib_1.__spread(this._history, [permutation]);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Ordering.prototype.getItemId = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return item[this.idKey];
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Ordering.prototype.getItemOrder = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return item[this.orderKey];
    };
    /**
     * @param {?} items
     * @return {?}
     */
    Ordering.prototype.getPermutation = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        return new Permutation(items.map(function (item) { return ({
            id: _this.getItemId(item),
            order: _this.getItemOrder(item)
        }); }));
    };
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    Ordering.prototype.move = /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    function (item, to) {
        var _this = this;
        var /** @type {?} */ from = this.getItemOrder(item);
        var /** @type {?} */ itemId = this.getItemId(item);
        if (to === from) {
            return tslib_1.__spread(this.items);
        }
        else if (to < from) {
            return this.items.map(function (x) {
                var /** @type {?} */ order = _this.getItemOrder(x);
                var /** @type {?} */ id = _this.getItemId(x);
                return id === itemId ? build(_this.ctor, x, { order: to })
                    : (order < to || order > from) ? x : build(_this.ctor, x, { order: order + 1 });
            });
        }
        else {
            // to > from
            return this.items.map(function (x) {
                var /** @type {?} */ order = _this.getItemOrder(x);
                var /** @type {?} */ id = _this.getItemId(x);
                return id === itemId ? build(_this.ctor, x, { order: to })
                    : (order < from || order > to) ? x : build(_this.ctor, x, { order: order - 1 });
            });
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Ordering.prototype.moveDown = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.move(item, this.getItemOrder(item) + 1);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Ordering.prototype.moveUp = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.move(item, this.getItemOrder(item) - 1);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Ordering.prototype.removeItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.removeItemAtPosition(this.getItemOrder(item));
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    Ordering.prototype.removeItemAtPosition = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        var _this = this;
        return this.items.filter(function (item) { return _this.getItemOrder(item) !== pos; })
            .map(function (x) {
            var /** @type {?} */ order = _this.getItemOrder(x);
            return order < pos ? x : build(_this.ctor, x, { order: order - 1 });
        });
    };
    /**
     * @param {?} items
     * @return {?}
     */
    Ordering.prototype.updateItems = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        this.archive();
        this._items = items;
    };
    return Ordering;
}());
/**
 * @template T
 */
export { Ordering };
function Ordering_tsickle_Closure_declarations() {
    /** @type {?} */
    Ordering.prototype._history;
    /** @type {?} */
    Ordering.prototype._items;
    /** @type {?} */
    Ordering.prototype.ctor;
    /** @type {?} */
    Ordering.prototype.orderKey;
    /** @type {?} */
    Ordering.prototype.idKey;
}

//# sourceMappingURL=data:application/json;base64,