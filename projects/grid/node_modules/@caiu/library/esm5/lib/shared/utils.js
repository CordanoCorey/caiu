/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Metadata } from './models';
/**
 * @param {?} derived
 * @param {?} baseCtors
 * @return {?}
 */
export function applyDecorators(derived, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
            derived[name] = baseCtor.prototype[name];
        });
    });
}
/**
 * @param {?} derivedCtor The clas Constructor
 * @param {?} baseCtors
 * @return {?}
 */
export function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
            derivedCtor.prototype[name] = baseCtor.prototype[name];
        });
    });
}
/**
 * Find distinct elements in the union of 2 arrays.
 * @param {?} array1
 * @param {?} array2
 * @return {?}
 */
export function arrayUnion(array1, array2) {
    var /** @type {?} */ a = tslib_1.__spread(array1, array2);
    for (var /** @type {?} */ i = 0; i < a.length; ++i) {
        for (var /** @type {?} */ j = i + 1; j < a.length; ++j) {
            if (a[i] === a[j]) {
                a.splice(j--, 1);
            }
        }
    }
    return a;
}
/**
 * @param {?} target
 * @param {?} props
 * @return {?}
 */
export function assignProps(target, props) {
    Object.keys(props).forEach(function (key) {
        if (target[key]) {
            target[key] = props[key];
        }
    });
}
/**
 * @template T
 * @param {?} ctor
 * @param {...?} args
 * @return {?}
 */
export function build(ctor) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var /** @type {?} */ instance = new ctor();
    return args.reduce(function (acc, next) {
        var /** @type {?} */ ret;
        try {
            ret = Object.assign(acc, next);
        }
        catch (/** @type {?} */ e) {
            console.warn(e);
            ret = acc;
        }
        finally {
            return ret;
        }
    }, instance);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function compareDates(a, b) {
    return new Date(b).getTime() - new Date(a).getTime();
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function compareNumbers(a, b) {
    return a - b;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function compareStrings(a, b) {
    var /** @type {?} */ x = a.toLowerCase();
    var /** @type {?} */ y = b.toLowerCase();
    if (x < y) {
        return -1;
    }
    else if (x > y) {
        return 1;
    }
    return 0;
}
/**
 * @param {?} arr
 * @param {?=} key
 * @return {?}
 */
export function distinct(arr, key) {
    if (key === void 0) { key = ''; }
    return key ? arr.reduce(function (acc, x) { return acc.findIndex(function (y) { return y[key] === x[key]; }) === -1 ? tslib_1.__spread(acc, [x]) : acc; }, [])
        : arr.reduce(function (acc, x) { return acc.indexOf(x) === -1 ? tslib_1.__spread(acc, [x]) : acc; }, []);
}
/**
 * @param {?} x1
 * @param {?} x2
 * @return {?}
 */
export function equals(x1, x2) {
    // check whether x1 and x2 have the same type
    if (typeof (x1) !== typeof (x2)) {
        return false;
    }
    // check whether x1 and x2 are both null or both undefined
    if ((x1 === null && x2 === null) || (x1 === undefined && x2 === undefined)) {
        return true;
    }
    // account for non-matching null and undefined values
    if (((x1 === null || x1 === undefined) && x2 !== null && x2 !== undefined)
        || ((x2 === null || x2 === undefined) && x1 !== null && x1 !== undefined)) {
        return false;
    }
    // compare two arrays
    if (Array.isArray(x1) && Array.isArray(x2) && x1.length === x2.length) {
        return x1.findIndex(function (x, index) { return !equals(x, x2[index]); }) === -1 ? true : false;
    }
    // compare two objects
    if (x1 && typeof (x1) === 'object' && typeof (x2) === 'object'
        && Object.keys(x1).length === Object.keys(x2).length
        && Object.keys(x2).length === arrayUnion(Object.keys(x1), Object.keys(x2)).length) {
        return Object.keys(x1).findIndex(function (key) { return !equals(x1[key], x2[key]); }) === -1;
    }
    // compare two primitives with the same type
    return x1 === x2;
}
/**
 * Extends an object with the *enumerable* and *own* properties of one or more source objects,
 * similar to Object.assign.
 *
 * @param {?} dest The object which will have properties copied to it.
 * @param {...?} sources The source objects from which properties will be copied.
 * @return {?}
 */
export function extendObject(dest) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    if (dest == null) {
        throw TypeError('Cannot convert undefined or null to object');
    }
    try {
        for (var sources_1 = tslib_1.__values(sources), sources_1_1 = sources_1.next(); !sources_1_1.done; sources_1_1 = sources_1.next()) {
            var source = sources_1_1.value;
            if (source != null) {
                for (var /** @type {?} */ key in source) {
                    if (source.hasOwnProperty(key)) {
                        dest[key] = source[key];
                    }
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (sources_1_1 && !sources_1_1.done && (_a = sources_1.return)) _a.call(sources_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return dest;
    var e_1, _a;
}
/**
 * @param {?} value
 * @return {?}
 */
export function falsy(value) {
    return value === null || value === 0 || value === '' || value === undefined;
}
/**
 * Remove problematic or undesired store properties.
 * @param {?} obj
 * @return {?}
 */
export function filterState(obj) {
    return removeCycles(removeProps(obj));
}
/**
 * @param {?} ctor
 * @return {?}
 */
export function findMetadata(ctor) {
    var /** @type {?} */ instance = new ctor();
    return instance && instance.metadata ? instance.metadata : new Metadata();
}
/**
 * @return {?}
 */
export function findSchoolYear() {
    var /** @type {?} */ date = new Date();
    var /** @type {?} */ year = date.getFullYear();
    var /** @type {?} */ month = date.getMonth();
    return month >= 7 ? year + "-" + (year + 1) : year - 1 + "-" + year;
}
/**
 * @param {?} obj
 * @param {?} parents
 * @return {?}
 */
export function flattenKeys(obj, parents) {
    return Object.keys(obj).reduce(function (acc, key) {
        var /** @type {?} */ pathToRoot = tslib_1.__spread(parents, [key]);
        var /** @type {?} */ val = obj[key];
        if (!Array.isArray(val) && Object.keys(val).length > 0) {
            return tslib_1.__spread(acc, flattenKeys(val, pathToRoot));
        }
        return tslib_1.__spread(acc, pathToRoot);
    }, []);
}
/**
 * @param {?=} number
 * @return {?}
 */
export function formatPhoneNumber(number) {
    if (number === void 0) { number = ''; }
    if (!number) {
        return '000-000-0000';
    }
    var /** @type {?} */ l = number.length;
    return number && (l === 7 || l === 10) ?
        l === 7 ? format7DigitPhoneNumber(number)
            : format10DigitPhoneNumber(number)
        : '000-000-0000';
}
/**
 * @param {?=} number
 * @return {?}
 */
export function format7DigitPhoneNumber(number) {
    if (number === void 0) { number = '0000000'; }
    var /** @type {?} */ first3 = number.substring(0, 3);
    var /** @type {?} */ last4 = number.substring(3, 7);
    return first3 + " -" + last4 + " ";
}
/**
 * @param {?=} number
 * @return {?}
 */
export function format10DigitPhoneNumber(number) {
    if (number === void 0) { number = '0000000000'; }
    var /** @type {?} */ first3 = number.substring(0, 3);
    var /** @type {?} */ last7 = format7DigitPhoneNumber(number.substring(3, 10));
    return first3 + " -" + last7 + " ";
}
/**
 * @param {?} total
 * @return {?}
 */
export function formatPrice(total) {
    var /** @type {?} */ dollars = total.toFixed(2).replace(/./g, function (c, i, a) {
        return i && c !== '.' && ((a.length - i) % 3 === 0) ? ',' + c : c;
    });
    return "$" + dollars;
}
/**
 * @param {?} type
 * @return {?}
 */
export function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
}
/**
 * @param {?} obj
 * @return {?}
 */
export function getAllProps(obj) {
    var /** @type {?} */ mapped = obj['metadata'] && obj['metadata']['include'] && Array.isArray(obj['metadata']['include']) ?
        obj['metadata']['include'].reduce(function (acc, key) {
            return Object.assign({}, acc, (_a = {}, _a[key] = obj[key], _a));
            var _a;
        }, {}) : obj;
    if (obj['metadata'] && obj['metadata']['exclude'] && Array.isArray(obj['metadata']['exclude'])) {
        obj['metadata']['exclude'].forEach(function (key) {
            delete mapped[key];
        });
    }
    return tslib_1.__spread(Object.keys(mapped), getGetters(mapped));
}
/**
 * @param {?} obj
 * @return {?}
 */
export function getGetters(obj) {
    return Object.keys(obj.constructor.prototype).filter(function (name) {
        return typeof Object.getOwnPropertyDescriptor(obj.constructor.prototype, name)['get'] === 'function';
    });
}
/**
 * @param {?} model
 * @return {?}
 */
export function getKeyValues(model) {
    var /** @type {?} */ keys = getAllProps(model);
    return model['metadata'] && model['metadata']['include'] ?
        toArray(model['metadata']['include']).reduce(function (acc, key) {
            return Object.assign({}, acc, (_a = {}, _a[key] = model[key], _a));
            var _a;
        }, {})
        : keys.reduce(function (acc, key) {
            return Object.assign({}, acc, (_a = {}, _a[key] = model[key], _a));
            var _a;
        }, {});
}
/**
 * @param {?} obj
 * @return {?}
 */
export function getSetters(obj) {
    return Object.keys(obj.prototype).filter(function (name) {
        return typeof Object.getOwnPropertyDescriptor(obj.prototype, name)['set'] === 'function';
    });
}
/**
 * @param {?} el
 * @param {?} styleProp
 * @return {?}
 */
export function getStyle(el, styleProp) {
    var /** @type {?} */ value;
    var /** @type {?} */ defaultView = el.ownerDocument.defaultView;
    // W3C standard way:
    if (defaultView && defaultView.getComputedStyle) {
        // sanitize property name to css notation (hypen separated words eg. font-Size)
        styleProp = styleProp.replace(/([A-Z])/g, '-$1').toLowerCase();
        return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);
    }
    else if (el['currentStyle']) {
        // IE
        // sanitize property name to camelCase
        styleProp = styleProp.replace(/\-(\w)/g, function (str, letter) {
            return letter.toUpperCase();
        });
        value = el['currentStyle'][styleProp];
        return value;
    }
    return '';
}
/**
 * @param {?} model
 * @return {?}
 */
export function getValue(model) {
    if (model === null || typeof (model) === 'string' || typeof (model) === 'string' || model instanceof Date) {
        return model;
    }
    var /** @type {?} */ keys = getAllProps(model);
    var /** @type {?} */ props = keys.filter(function (key) { return key !== 'metadata' && !ignoreKey(model, key); })
        .map(function (key) {
        var /** @type {?} */ obj = {};
        obj[key] = model[key] && typeof model[key] === 'object' ?
            (Array.isArray(model[key]) ?
                (model[key].length > 0 ?
                    model[key].map(function (x) { return (typeof x === 'object' ? getValue(x) : x); }) : [])
                : getValue(model[key])) : model[key];
        return obj;
    });
    return props.reduce(function (acc, val) {
        return Object.assign({}, acc, val);
    }, {});
}
/**
 * @return {?}
 */
export function guid() {
    /**
     * @return {?}
     */
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
        s4() + '-' + s4() + s4() + s4();
}
/**
 * @param {?} changes
 * @param {?} key
 * @param {?} props
 * @return {?}
 */
export function hasChanged(changes, key, props) {
    var /** @type {?} */ currentValue = changes[key] && changes[key].currentValue ? changes[key].currentValue : {};
    var /** @type {?} */ previousValue = changes[key] && changes[key].previousValue ? changes[key].previousValue : {};
    return props.reduce(function (acc, prop) {
        return acc ? true : currentValue[prop] !== previousValue[prop];
    }, false);
}
/**
 * @param {?} changes
 * @param {?} key
 * @return {?}
 */
export function idChanged(changes, key) {
    var /** @type {?} */ newId = changes[key].currentValue ? changes[key].currentValue['id'] || 0 : 0;
    var /** @type {?} */ oldId = changes[key].previousValue ? changes[key].previousValue['id'] || 0 : 0;
    return newId !== oldId;
}
/**
 * @param {?} model
 * @param {?} key
 * @return {?}
 */
export function ignoreKey(model, key) {
    if (model['metadata'] && model['metadata']['ignore']) {
        return inArray(model['metadata']['ignore'], key);
    }
    return false;
}
/**
 * @param {?} arr
 * @param {?} val
 * @return {?}
 */
export function inArray(arr, val) {
    return arr.filter(function (item) { return item === val; }).length > 0;
}
/**
 * @param {?} arr
 * @param {?} val
 * @param {?} key
 * @return {?}
 */
export function inArrayByKey(arr, val, key) {
    return arr.findIndex(function (item) { return item[key] === val; }) !== -1;
}
/**
 * @param {?} n
 * @return {?}
 */
export function integerArray(n) {
    return Array.from(Array(n).keys());
}
/**
 * @param {?} dateFrom
 * @param {?} dateTo
 * @param {?} dateCheck
 * @return {?}
 */
export function isBetweenDates(dateFrom, dateTo, dateCheck) {
    var /** @type {?} */ d1 = dateFrom.toLocaleDateString().split('/');
    var /** @type {?} */ d2 = dateTo.toLocaleDateString().split('/');
    var /** @type {?} */ c = dateCheck.toLocaleDateString().split('/');
    var /** @type {?} */ from = new Date(d1[2], toInt(d1[1]) - 1, d1[0]); // -1 because months are from 0 to 11
    var /** @type {?} */ to = new Date(d2[2], toInt(d2[1]) - 1, d2[0]);
    var /** @type {?} */ check = new Date(c[2], toInt(c[1]) - 1, c[0]);
    return (check >= from && check <= to);
}
/**
 * Detects cycles in an object.
 * @param {?} obj
 * @return {?}
 */
export function isCyclic(obj) {
    var /** @type {?} */ seenObjects = [];
    var /** @type {?} */ detect = function (x) {
        if (x && typeof x === 'object') {
            if (seenObjects.indexOf(x) !== -1) {
                return true;
            }
            seenObjects.push(x);
            for (var /** @type {?} */ key in x) {
                if (x.hasOwnProperty(key) && detect(x[key])) {
                    return true;
                }
            }
        }
        return false;
    };
    return detect(obj);
}
/**
 * @param {?} fromState The last state object from the store
 * @param {?} dState A partial class containing all properties that have changed wrt fromState
 * @return {?} The current/updated state of the application (toState)
 */
export function nextState(fromState, dState) {
    var /** @type {?} */ toState = Object.assign({}, fromState, dState);
    return toState;
}
/**
 * @param {?} n
 * @return {?}
 */
export function positiveIntegerArray(n) {
    return integerArray(n).map(function (x) { return x + 1; });
}
/**
 * Remove store props that contain cycles.
 * @param {?} obj
 * @return {?}
 */
export function removeCycles(obj) {
    if (obj && typeof obj === 'object') {
        for (var /** @type {?} */ key in obj) {
            if (obj.hasOwnProperty(key) && isCyclic(obj[key])) {
                delete obj[key];
            }
        }
    }
    return obj;
}
/**
 * Remove any props that should not appear in the store.
 * @param {?} obj
 * @return {?}
 */
export function removeProps(obj) {
    return obj;
}
/**
 * @param {?} model
 * @return {?}
 */
export function serialize(model) {
    if (Array.isArray(model)) {
        return model.map(function (x) { return serialize(x); });
    }
    if (model.serialize && typeof model.serialize === 'function') {
        return serialize(model.serialize());
    }
    if (model === null || typeof (model) === 'number' || typeof (model) === 'string' || model instanceof Date) {
        return model;
    }
    var /** @type {?} */ keys = getAllProps(model);
    if (keys.length === 0) {
        return model;
    }
    return keys.reduce(function (acc, key) {
        var /** @type {?} */ val = null;
        if (model[key] !== null && typeof (model[key]) === 'object' && !(model[key] instanceof Date)) {
            if (model[key].serialize && typeof model[key].serialize === 'function') {
                val = model[key].serialize();
            }
            else {
                val = serialize(model[key]);
            }
        }
        else {
            val = model[key];
        }
        return Object.assign({}, acc, (_a = {},
            _a[key] = val,
            _a));
        var _a;
    }, {});
}
/**
 * @param {?} token
 * @return {?}
 */
export function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return "" + token.overriddenName;
    }
    if (token.name) {
        return "" + token.name;
    }
    var /** @type {?} */ res = token.toString();
    var /** @type {?} */ newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
/**
 * @param {?} str
 * @return {?}
 */
export function str2CharCode(str) {
    return str.charCodeAt(0);
}
/**
 * @param {?} str
 * @return {?}
 */
export function str2Id(str) {
    var /** @type {?} */ charCodes = str ? str.split('').reduce(function (acc, x) { return "" + acc + str2CharCode(x); }, '') : '';
    return toInt(charCodes);
}
/**
 * @param {?} str
 * @return {?}
 */
export function str2int(str) {
    return parseInt(str, 10);
}
/**
 * @param {?} strArray
 * @return {?}
 */
export function strArray2Id(strArray) {
    var /** @type {?} */ str = strArray.reduce(function (acc, x) { return "" + acc + x; }, '');
    return str2Id(str);
}
/**
 * @param {?} errorName
 * @param {?} errorMessage
 * @return {?}
 */
export function throwException(errorName, errorMessage) {
    throw {
        name: errorName,
        level: 'Show Stopper',
        message: errorMessage,
        htmlMessage: 'Error detected. Please contact the <a href=\'mailto:agendamanager@caiu.com\'>system administrator</a>.',
        toString: function () { return errorName + ': ' + errorMessage; }
    };
}
/**
 * @return {?}
 */
export function throwNotImplementedException() {
    throwException('Not Implemented', 'Not Implemented');
}
/**
 * @param {?} val
 * @return {?}
 */
export function toArray(val) {
    return val ? (Array.isArray(val) ? val : [val]) : [];
}
/**
 * @param {?} val
 * @return {?}
 */
export function toInt(val) {
    return val && val.toString ? str2int(val.toString()) : 0;
}
/**
 * @param {?} action
 * @return {?}
 */
export function toPayload(action) {
    return action ? action.payload : null;
}
/**
 * @param {?} n
 * @return {?}
 */
export function toPx(n) {
    return n + "px";
}
/**
 * @param {?} value
 * @return {?}
 */
export function truthy(value) {
    return !falsy(value);
}
/**
 * @param {?} obj
 * @param {?} type
 * @return {?}
 */
export function tryCast(obj, type) {
    var /** @type {?} */ retObj = new type();
    for (var /** @type {?} */ key in obj) {
        if (typeof (retObj[key]) !== 'undefined') {
            retObj[key] = obj[key];
        }
    }
    return retObj;
}
/**
 * @param {?} changes
 * @param {?=} key
 * @return {?}
 */
export function valueChanged(changes, key) {
    if (key === void 0) { key = ''; }
    return key ? changes[key].currentValue !== changes[key].previousValue
        : Object.keys(changes).reduce(function (acc, currentKey) {
            return acc ? true : changes[currentKey].currentValue !== changes[currentKey].previousValue;
        }, false);
}
/**
 * @param {?} value
 * @param {?} formValue
 * @return {?}
 */
export function valueEquals(value, formValue) {
    return equals(getValue(value), formValue);
}

//# sourceMappingURL=data:application/json;base64,