/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * A basic filter expression. Usually part of
 * [`CompositeFilterDescriptor`]({% slug api_kendo-data-query_compositefilterdescriptor_kendouiforangular %}).
 *
 * For more information, refer to the [`filterBy`]({% slug api_kendo-data-query_filterby_kendouiforangular %}) method.
 * @record
 */
export function FilterDescriptor() { }
function FilterDescriptor_tsickle_Closure_declarations() {
    /**
     * The data item field to which the filter operator is applied.
     * @type {?|undefined}
     */
    FilterDescriptor.prototype.field;
    /**
     * The filter operator (comparison).
     *
     * The supported operators are:
     *
     * * `"eq"` (equal to)
     * * `"neq"` (not equal to)
     * * `"isnull"` (is equal to null)
     * * `"isnotnull"` (is not equal to null)
     * * `"lt"` (less than)
     * * `"lte"` (less than or equal to)
     * * `"gt"` (greater than)
     * * `"gte"` (greater than or equal to)
     *
     * The following operators are supported for string fields only:
     *
     * * `"startswith"`
     * * `"endswith"`
     * * `"contains"`
     * * `"doesnotcontain"`
     * * `"isempty"`
     * * `"isnotempty"`
     * @type {?}
     */
    FilterDescriptor.prototype.operator;
    /**
     * The value to which the field is compared. Has to be of the same type as the field.
     * @type {?|undefined}
     */
    FilterDescriptor.prototype.value;
    /**
     * Determines if the string comparison is case-insensitive.
     * @type {?|undefined}
     */
    FilterDescriptor.prototype.ignoreCase;
}
/**
 * A complex filter expression.
 *
 * For more information, refer to the [`filterBy`]({% slug api_kendo-data-query_filterby_kendouiforangular %}) method.
 * @record
 */
export function CompositeFilterDescriptor() { }
function CompositeFilterDescriptor_tsickle_Closure_declarations() {
    /**
     * The logical operation to use when the `filter.filters` option is set.
     *
     * The supported values are:
     * * `"and"`
     * * `"or"`
     * @type {?}
     */
    CompositeFilterDescriptor.prototype.logic;
    /**
     * The nested filter expressions&mdash;either
     * [`FilterDescriptor`]({% slug api_kendo-data-query_filterdescriptor_kendouiforangular %}), or
     * [`CompositeFilterDescriptor`]({% slug api_kendo-data-query_compositefilterdescriptor_kendouiforangular %}).
     * Supports the same options as `filter`. Filters can be nested indefinitely.
     * @type {?}
     */
    CompositeFilterDescriptor.prototype.filters;
}
/**
 * The grouping settings of the Grid component.
 * @record
 */
export function GroupableSettings() { }
function GroupableSettings_tsickle_Closure_declarations() {
    /**
     * Determines if grouping by dragging and dropping the column headers is allowed.
     * @type {?}
     */
    GroupableSettings.prototype.enabled;
    /**
     * The text that is displayed when the grouping area is empty.
     * The default value is **Drag a column header and drop it here to group by that column.**
     * If set to `true`, the user can group the Grid by dragging the column header cells.
     * By default, grouping is disabled.
     * @type {?|undefined}
     */
    GroupableSettings.prototype.emptyText;
    /**
     * Determines if the group footer template is visible when the group is collapsed. The default value is `false`.
     * @type {?}
     */
    GroupableSettings.prototype.showFooter;
}
/**
 * The sort descriptor used by the `orderBy` method.
 *
 * It has the following properties:
 * @record
 */
export function SortDescriptor() { }
function SortDescriptor_tsickle_Closure_declarations() {
    /**
     * The field that is sorted.
     * @type {?}
     */
    SortDescriptor.prototype.field;
    /**
     * The sort direction.
     *
     * The available values are:
     * - `asc`
     * - `desc`
     * @type {?|undefined}
     */
    SortDescriptor.prototype.dir;
}
/**
 * The result of the [`process`]({% slug api_kendo-data-query_process%}) method applied to a data structure.
 * @record
 */
export function DataResult() { }
function DataResult_tsickle_Closure_declarations() {
    /**
     * The data that will be rendered by the Grid as an array.
     * @type {?}
     */
    DataResult.prototype.data;
    /**
     * The total number of records that are available.
     * @type {?}
     */
    DataResult.prototype.total;
}
/**
 * The data type that is expected by the Grid.
 * @record
 */
export function GridDataResult() { }
function GridDataResult_tsickle_Closure_declarations() {
}
/**
 * The returned type of the data state `change` event.
 * @record
 */
export function DataStateChangeEvent() { }
function DataStateChangeEvent_tsickle_Closure_declarations() {
    /**
     * The number of records to skip.
     * @type {?}
     */
    DataStateChangeEvent.prototype.skip;
    /**
     * The number of records to take.
     * @type {?}
     */
    DataStateChangeEvent.prototype.take;
    /**
     * The sort descriptors by which the data is sorted.
     * @type {?|undefined}
     */
    DataStateChangeEvent.prototype.sort;
    /**
     * The group descriptors by which the data is grouped.
     * @type {?|undefined}
     */
    DataStateChangeEvent.prototype.group;
    /**
     * The filter descriptor by which the data is filtered.
     * @type {?|undefined}
     */
    DataStateChangeEvent.prototype.filter;
}
/**
 * The group descriptor used by the `groupBy` method.
 *
 * It has the following properties:
 * @record
 */
export function GroupDescriptor() { }
function GroupDescriptor_tsickle_Closure_declarations() {
    /**
     * The data item field to group by.
     * @type {?}
     */
    GroupDescriptor.prototype.field;
    /**
     * The sort order of the group.
     * @type {?|undefined}
     */
    GroupDescriptor.prototype.dir;
    /**
     * The aggregates which are calculated during grouping.
     * @type {?|undefined}
     */
    GroupDescriptor.prototype.aggregates;
}
/**
 * The aggregate operation.
 *
 * For more information, refer to the [`aggregateBy`]({% slug api_kendo-data-query_aggregateby %}) method.
 * @record
 */
export function AggregateDescriptor() { }
function AggregateDescriptor_tsickle_Closure_declarations() {
    /**
     * The name of the record field on which the function will be executed.
     * @type {?}
     */
    AggregateDescriptor.prototype.field;
    /**
     * The aggregate function that will be calculated.
     * @type {?}
     */
    AggregateDescriptor.prototype.aggregate;
}
/**
 * The returned type of the page `change` event.
 * @record
 */
export function PageChangeEvent() { }
function PageChangeEvent_tsickle_Closure_declarations() {
    /**
     * The number of records to skip.
     * @type {?}
     */
    PageChangeEvent.prototype.skip;
    /**
     * The number of records to take.
     * @type {?}
     */
    PageChangeEvent.prototype.take;
}

//# sourceMappingURL=data:application/json;base64,