/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Address = /** @class */ (function () {
    function Address() {
        this.firstName = '';
        this.lastName = '';
        this.streetAddress = '';
        this.address2 = '';
        this.city = '';
        this.state = '';
        this.stateId = 45;
        this.zipCode = 0;
        this.metadata = {
            streetAddress: {},
            address2: {},
            city: {},
            stateId: {},
            zipCode: {}
        };
    }
    Object.defineProperty(Address.prototype, "cityStateZip", {
        get: /**
         * @return {?}
         */
        function () {
            return this.hasCityStateZip ?
                this.city + ", " + this.state + " " + this.zipCode + " " : '';
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Address.prototype, "fullName", {
        get: /**
         * @return {?}
         */
        function () {
            return this.firstName && this.lastName ? this.firstName + " " + this.lastName : '';
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Address.prototype, "hasAddress", {
        get: /**
         * @return {?}
         */
        function () {
            return this.hasStreetAddress && this.hasCityStateZip;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Address.prototype, "hasCityStateZip", {
        get: /**
         * @return {?}
         */
        function () {
            return this.city !== '' && (this.state !== '' || this.stateId !== 0) && this.zipCode !== 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Address.prototype, "hasStreetAddress", {
        get: /**
         * @return {?}
         */
        function () {
            return this.streetAddress !== '';
        },
        enumerable: true,
        configurable: true
    });
    return Address;
}());
export { Address };
function Address_tsickle_Closure_declarations() {
    /** @type {?} */
    Address.prototype.firstName;
    /** @type {?} */
    Address.prototype.lastName;
    /** @type {?} */
    Address.prototype.streetAddress;
    /** @type {?} */
    Address.prototype.address2;
    /** @type {?} */
    Address.prototype.city;
    /** @type {?} */
    Address.prototype.state;
    /** @type {?} */
    Address.prototype.stateId;
    /** @type {?} */
    Address.prototype.zipCode;
    /** @type {?} */
    Address.prototype.metadata;
}
var Alert = /** @class */ (function () {
    function Alert() {
        this.message = '';
    }
    return Alert;
}());
export { Alert };
function Alert_tsickle_Closure_declarations() {
    /** @type {?} */
    Alert.prototype.message;
    /** @type {?} */
    Alert.prototype.type;
}
var Coordinates = /** @class */ (function () {
    function Coordinates() {
        this.row = 0;
        this.column = 0;
    }
    return Coordinates;
}());
export { Coordinates };
function Coordinates_tsickle_Closure_declarations() {
    /** @type {?} */
    Coordinates.prototype.row;
    /** @type {?} */
    Coordinates.prototype.column;
}
/**
 * @record
 * @template T
 */
export function Dictionary() { }
function Dictionary_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    [id: string]: T;
    */
}
var Dimensions = /** @class */ (function () {
    function Dimensions() {
        this.height = 0;
        this.width = 0;
        this.rows = 0;
        this.columns = 0;
    }
    Object.defineProperty(Dimensions.prototype, "approxRatio", {
        get: /**
         * @return {?}
         */
        function () {
            return this.rows / this.columns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dimensions.prototype, "ratio", {
        get: /**
         * @return {?}
         */
        function () {
            return this.height / this.width;
        },
        enumerable: true,
        configurable: true
    });
    return Dimensions;
}());
export { Dimensions };
function Dimensions_tsickle_Closure_declarations() {
    /** @type {?} */
    Dimensions.prototype.height;
    /** @type {?} */
    Dimensions.prototype.width;
    /** @type {?} */
    Dimensions.prototype.rows;
    /** @type {?} */
    Dimensions.prototype.columns;
}
var Email = /** @class */ (function () {
    function Email() {
        this.id = 0;
        this.bcc = '';
        this.body = '';
        this.cc = '';
        this.failed = '';
        this.from = '';
        this.sent = false;
        this.sentDate = new Date();
        this.subject = '';
        this.to = '';
        this.createdById = null;
        this.createdDate = new Date();
        this.attachments = [];
    }
    return Email;
}());
export { Email };
function Email_tsickle_Closure_declarations() {
    /** @type {?} */
    Email.prototype.id;
    /** @type {?} */
    Email.prototype.bcc;
    /** @type {?} */
    Email.prototype.body;
    /** @type {?} */
    Email.prototype.cc;
    /** @type {?} */
    Email.prototype.failed;
    /** @type {?} */
    Email.prototype.from;
    /** @type {?} */
    Email.prototype.sent;
    /** @type {?} */
    Email.prototype.sentDate;
    /** @type {?} */
    Email.prototype.subject;
    /** @type {?} */
    Email.prototype.to;
    /** @type {?} */
    Email.prototype.createdById;
    /** @type {?} */
    Email.prototype.createdDate;
    /** @type {?} */
    Email.prototype.createdBy;
    /** @type {?} */
    Email.prototype.attachments;
}
export var /** @type {?} */ EMAIL_REGEX = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
var Filters = /** @class */ (function () {
    function Filters() {
        this.skip = 0;
        this.sortBy = '';
        this.take = 0;
    }
    return Filters;
}());
export { Filters };
function Filters_tsickle_Closure_declarations() {
    /** @type {?} */
    Filters.prototype.skip;
    /** @type {?} */
    Filters.prototype.sortBy;
    /** @type {?} */
    Filters.prototype.take;
}
/**
 * @record
 */
export function HasId() { }
function HasId_tsickle_Closure_declarations() {
    /** @type {?} */
    HasId.prototype.id;
}
/**
 * @record
 */
export function HasMetadata() { }
function HasMetadata_tsickle_Closure_declarations() {
    /** @type {?} */
    HasMetadata.prototype.metadata;
}
var Image = /** @class */ (function () {
    function Image() {
        this.src = '';
        this.height = 0;
        this.width = 0;
    }
    Object.defineProperty(Image.prototype, "horizontal", {
        get: /**
         * @return {?}
         */
        function () {
            return this.orientation === 'h';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "vertical", {
        get: /**
         * @return {?}
         */
        function () {
            return this.orientation === 'v';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "colspan", {
        get: /**
         * @return {?}
         */
        function () {
            return this.vertical ? 1 : 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Image.prototype, "rowspan", {
        get: /**
         * @return {?}
         */
        function () {
            return this.vertical ? 2 : 1;
        },
        enumerable: true,
        configurable: true
    });
    return Image;
}());
export { Image };
function Image_tsickle_Closure_declarations() {
    /** @type {?} */
    Image.prototype.src;
    /** @type {?} */
    Image.prototype.orientation;
    /** @type {?} */
    Image.prototype.height;
    /** @type {?} */
    Image.prototype.width;
}
var Metadata = /** @class */ (function () {
    function Metadata() {
        this.controls = [];
        this.ignore = [];
        this.label = '';
        this.name = '';
    }
    return Metadata;
}());
export { Metadata };
function Metadata_tsickle_Closure_declarations() {
    /** @type {?} */
    Metadata.prototype.controls;
    /** @type {?} */
    Metadata.prototype.ignore;
    /** @type {?} */
    Metadata.prototype.label;
    /** @type {?} */
    Metadata.prototype.name;
    /** @type {?} */
    Metadata.prototype.value;
}
/** @enum {number} */
var MetadataType = {
    CLASS: 0,
    METHOD: 1,
    PROPERTY: 2,
    PARAMETER: 3,
    STATIC_METHOD: 4,
    STATIC_PROPERTY: 5,
};
export { MetadataType };
MetadataType[MetadataType.CLASS] = "CLASS";
MetadataType[MetadataType.METHOD] = "METHOD";
MetadataType[MetadataType.PROPERTY] = "PROPERTY";
MetadataType[MetadataType.PARAMETER] = "PARAMETER";
MetadataType[MetadataType.STATIC_METHOD] = "STATIC_METHOD";
MetadataType[MetadataType.STATIC_PROPERTY] = "STATIC_PROPERTY";
/**
 * @template T
 */
var /**
 * @template T
 */
PropertyMetadata = /** @class */ (function () {
    function PropertyMetadata() {
        this.ignore = [];
        this.label = '';
        this.name = '';
    }
    return PropertyMetadata;
}());
/**
 * @template T
 */
export { PropertyMetadata };
function PropertyMetadata_tsickle_Closure_declarations() {
    /** @type {?} */
    PropertyMetadata.prototype.ignore;
    /** @type {?} */
    PropertyMetadata.prototype.label;
    /** @type {?} */
    PropertyMetadata.prototype.name;
    /** @type {?} */
    PropertyMetadata.prototype.value;
}
var QueryItem = /** @class */ (function () {
    function QueryItem() {
        this.label = '';
    }
    return QueryItem;
}());
export { QueryItem };
function QueryItem_tsickle_Closure_declarations() {
    /** @type {?} */
    QueryItem.prototype.label;
    /** @type {?} */
    QueryItem.prototype.value;
}
/**
 * @template T
 */
var /**
 * @template T
 */
QueryModel = /** @class */ (function () {
    function QueryModel() {
        this.userId = 0;
        this.accountId = 0;
        this.fields = [];
        this.filters = [];
        this.groups = [];
        this.params = {};
        this.skip = 0;
        this.sort = [];
        this.take = 0;
        this.term = '';
    }
    Object.defineProperty(QueryModel.prototype, "hasParams", {
        get: /**
         * @return {?}
         */
        function () {
            return this.totalParams > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryModel.prototype, "keys", {
        get: /**
         * @return {?}
         */
        function () {
            return Object.keys(new QueryModel());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryModel.prototype, "totalParams", {
        get: /**
         * @return {?}
         */
        function () {
            return Object.keys(this.params).length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} query
     * @return {?}
     */
    QueryModel.AppendQueryString = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        var /** @type {?} */ obj = QueryModel.BuildQueryObject(query);
        return Object.keys(obj).reduce(function (acc, key) {
            var /** @type {?} */ str = obj[key];
            return str ? QueryModel.AppendToQueryString(acc, str) : acc;
        }, '');
    };
    /**
     * @param {?} path
     * @param {?} str
     * @return {?}
     */
    QueryModel.AppendToQueryString = /**
     * @param {?} path
     * @param {?} str
     * @return {?}
     */
    function (path, str) {
        return path ? path + "&" + str : str;
    };
    /**
     * @param {?} query
     * @return {?}
     */
    QueryModel.BuildQueryString = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        var /** @type {?} */ path = QueryModel.AppendQueryString(query);
        return path ? "?" + path : '';
    };
    /**
     * @param {?} query
     * @return {?}
     */
    QueryModel.BuildQueryObject = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return Object.assign({
            skip: QueryModel.QuerySkip(query),
            take: QueryModel.QueryTake(query),
            term: QueryModel.QueryTerm(query)
        }, QueryModel.QueryParams(query));
    };
    /**
     * @param {?} date
     * @return {?}
     */
    QueryModel.FormatDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        var /** @type {?} */ d = new Date(date);
        var /** @type {?} */ month = '' + (d.getMonth() + 1);
        var /** @type {?} */ day = '' + d.getDate();
        var /** @type {?} */ year = d.getFullYear();
        if (month.length < 2) {
            month = '0' + month;
        }
        if (day.length < 2) {
            day = '0' + day;
        }
        return [year, month, day].join('-');
    };
    /**
     * @param {?} queryString
     * @return {?}
     */
    QueryModel.ParseQuery = /**
     * @param {?} queryString
     * @return {?}
     */
    function (queryString) {
        var /** @type {?} */ query = {};
        var /** @type {?} */ pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');
        for (var /** @type {?} */ i = 0; i < pairs.length; i++) {
            var /** @type {?} */ pair = pairs[i].split('=');
            query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');
        }
        return query;
    };
    /**
     * @param {?} query
     * @return {?}
     */
    QueryModel.QueryParams = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return Object.keys(query.params)
            .reduce(function (acc, key) {
            return Object.assign({}, acc, (_a = {}, _a[key] = key + "=" + query.params[key], _a));
            var _a;
        }, {});
    };
    /**
     * @param {?} query
     * @return {?}
     */
    QueryModel.QuerySkip = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return query.skip ? "skip=" + query.skip : '';
    };
    /**
     * @param {?} query
     * @return {?}
     */
    QueryModel.QueryTake = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return query.take ? "take=" + query.take : '';
    };
    /**
     * @param {?} query
     * @return {?}
     */
    QueryModel.QueryTerm = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return query.term ? "term=" + query.term : '';
    };
    Object.defineProperty(QueryModel.prototype, "queryParams", {
        get: /**
         * @return {?}
         */
        function () {
            return QueryModel.QueryParams(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryModel.prototype, "queryString", {
        get: /**
         * @return {?}
         */
        function () {
            return QueryModel.BuildQueryString(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryModel.prototype, "queryObject", {
        get: /**
         * @return {?}
         */
        function () {
            return QueryModel.BuildQueryObject(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryModel.prototype, "querySkip", {
        get: /**
         * @return {?}
         */
        function () {
            return this.skip ? "skip=" + this.skip : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryModel.prototype, "queryTake", {
        get: /**
         * @return {?}
         */
        function () {
            return this.take ? "take=" + this.take : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryModel.prototype, "queryTerm", {
        get: /**
         * @return {?}
         */
        function () {
            return this.term ? "term=" + this.term : '';
        },
        enumerable: true,
        configurable: true
    });
    return QueryModel;
}());
/**
 * @template T
 */
export { QueryModel };
function QueryModel_tsickle_Closure_declarations() {
    /** @type {?} */
    QueryModel.prototype.userId;
    /** @type {?} */
    QueryModel.prototype.accountId;
    /** @type {?} */
    QueryModel.prototype.fields;
    /** @type {?} */
    QueryModel.prototype.filterBy;
    /** @type {?} */
    QueryModel.prototype.filters;
    /** @type {?} */
    QueryModel.prototype.groupBy;
    /** @type {?} */
    QueryModel.prototype.groups;
    /** @type {?} */
    QueryModel.prototype.include;
    /** @type {?} */
    QueryModel.prototype.map;
    /** @type {?} */
    QueryModel.prototype.orderBy;
    /** @type {?} */
    QueryModel.prototype.params;
    /** @type {?} */
    QueryModel.prototype.skip;
    /** @type {?} */
    QueryModel.prototype.sort;
    /** @type {?} */
    QueryModel.prototype.take;
    /** @type {?} */
    QueryModel.prototype.term;
}
/**
 * @template T
 */
var /**
 * @template T
 */
Search = /** @class */ (function () {
    function Search() {
        this.query = new QueryModel();
        this.results = [];
        this.total = 0;
    }
    return Search;
}());
/**
 * @template T
 */
export { Search };
function Search_tsickle_Closure_declarations() {
    /** @type {?} */
    Search.prototype.query;
    /** @type {?} */
    Search.prototype.results;
    /** @type {?} */
    Search.prototype.total;
}
var StyleModel = /** @class */ (function () {
    function StyleModel() {
    }
    Object.defineProperty(StyleModel.prototype, "styles", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ s = {};
            if (this.backgroundColor) {
                s['backgroundColor'] = this.backgroundColor;
            }
            if (this.border) {
                s['border'] = this.border;
            }
            if (this.borderRadius) {
                s['borderRadius.px'] = this.borderRadius;
            }
            if (this.color) {
                s['color'] = this.color;
            }
            if (this.cursor) {
                s['color'] = this.cursor;
            }
            if (this.display) {
                s['display'] = this.display;
            }
            if (this.fontSize) {
                s['fontSize'] = this.fontSize;
            }
            if (this.height) {
                s['height.px'] = this.height;
            }
            if (this.lineHeight) {
                s['line-height.px'] = this.lineHeight;
            }
            if (this.padding) {
                s['padding.px'] = this.padding;
            }
            if (this.paddingTop) {
                s['padding-top.px'] = this.paddingTop;
            }
            if (this.paddingBottom) {
                s['padding-bottom.px'] = this.paddingBottom;
            }
            if (this.paddingLeft) {
                s['padding-left.px'] = this.paddingLeft;
            }
            if (this.paddingRight) {
                s['padding-right.px'] = this.paddingRight;
            }
            if (this.textDecoration) {
                s['textDecoration'] = this.textDecoration;
            }
            if (this.width) {
                s['width.px'] = this.width;
            }
            return s;
        },
        enumerable: true,
        configurable: true
    });
    return StyleModel;
}());
export { StyleModel };
function StyleModel_tsickle_Closure_declarations() {
    /** @type {?} */
    StyleModel.prototype.backgroundColor;
    /** @type {?} */
    StyleModel.prototype.border;
    /** @type {?} */
    StyleModel.prototype.borderRadius;
    /** @type {?} */
    StyleModel.prototype.color;
    /** @type {?} */
    StyleModel.prototype.cursor;
    /** @type {?} */
    StyleModel.prototype.display;
    /** @type {?} */
    StyleModel.prototype.fontSize;
    /** @type {?} */
    StyleModel.prototype.height;
    /** @type {?} */
    StyleModel.prototype.lineHeight;
    /** @type {?} */
    StyleModel.prototype.padding;
    /** @type {?} */
    StyleModel.prototype.paddingTop;
    /** @type {?} */
    StyleModel.prototype.paddingBottom;
    /** @type {?} */
    StyleModel.prototype.paddingLeft;
    /** @type {?} */
    StyleModel.prototype.paddingRight;
    /** @type {?} */
    StyleModel.prototype.textDecoration;
    /** @type {?} */
    StyleModel.prototype.width;
}
/**
 * @record
 * @template T
 */
export function Type() { }
function Type_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    new(...args: any[]): T;
    */
}
/**
 * @record
 * @template T
 */
export function TypeConstructor() { }
function TypeConstructor_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    new(): T;
    */
}

//# sourceMappingURL=data:application/json;base64,