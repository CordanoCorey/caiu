/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { compareNumbers } from './utils';
/**
 * @template T
 */
var /**
 * @template T
 */
TreeItem = /** @class */ (function () {
    function TreeItem(item, parent) {
        this.item = item;
        this.parent = parent;
        this.id = 0;
        this.order = 0;
        this.parentId = 0;
        this.treeId = 0;
        this.index = 0;
    }
    /**
     * @template T
     * @param {?} item
     * @return {?}
     */
    TreeItem.Build = /**
     * @template T
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return /** @type {?} */ ({
            item: item,
            id: item['id'],
            order: item['order'],
            parentId: item['parentId']
        });
    };
    Object.defineProperty(TreeItem.prototype, "hasParent", {
        get: /**
         * @return {?}
         */
        function () {
            return this.parentId ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeItem.prototype, "sortOrder", {
        get: /**
         * @return {?}
         */
        function () {
            return this.parentId ? this.treeId + (.1 * this.order) : this.treeId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeItem.prototype, "treeOrder", {
        get: /**
         * @return {?}
         */
        function () {
            return this.parentId ? this.order : 0;
        },
        enumerable: true,
        configurable: true
    });
    return TreeItem;
}());
/**
 * @template T
 */
export { TreeItem };
function TreeItem_tsickle_Closure_declarations() {
    /** @type {?} */
    TreeItem.prototype.id;
    /** @type {?} */
    TreeItem.prototype.order;
    /** @type {?} */
    TreeItem.prototype.parentId;
    /** @type {?} */
    TreeItem.prototype.treeId;
    /** @type {?} */
    TreeItem.prototype.index;
    /** @type {?} */
    TreeItem.prototype.item;
    /** @type {?} */
    TreeItem.prototype.parent;
}
/**
 * @template T
 */
var /**
 * @template T
 */
Tree = /** @class */ (function () {
    function Tree(_treeItems, ctor) {
        this._treeItems = _treeItems;
        this.ctor = ctor;
        this._activeId = 0;
        this._activeIndex = -1;
    }
    /**
     * @template T
     * @param {?} items
     * @param {?} item
     * @return {?}
     */
    Tree.FindParent = /**
     * @template T
     * @param {?} items
     * @param {?} item
     * @return {?}
     */
    function (items, item) {
        return items.find(function (x) { return x.id === item.parentId; }) || new TreeItem(/** @type {?} */ ({}));
    };
    /**
     * @template T
     * @param {?} items
     * @param {?} item
     * @return {?}
     */
    Tree.FindParentOrder = /**
     * @template T
     * @param {?} items
     * @param {?} item
     * @return {?}
     */
    function (items, item) {
        var /** @type {?} */ parent = Tree.FindParent(items, item);
        return parent.order;
    };
    /**
     * @template T
     * @param {?} items
     * @param {?} ctor
     * @return {?}
     */
    Tree.Build = /**
     * @template T
     * @param {?} items
     * @param {?} ctor
     * @return {?}
     */
    function (items, ctor) {
        var /** @type {?} */ treeItems = items.reduce(function (acc, item) {
            item.treeId = item.parentId ? Tree.FindParentOrder(items, item) : item.order;
            var /** @type {?} */ treeItem = Object.assign(new TreeItem(/** @type {?} */ ({})), item);
            return tslib_1.__spread(acc, [treeItem]);
        }, []);
        var /** @type {?} */ orderedItems = items.sort(function (a, b) { return compareNumbers(a.sortOrder, b.sortOrder); })
            .reduce(function (acc, treeItem, index) {
            var /** @type {?} */ item = treeItem.item;
            var /** @type {?} */ parent = treeItem.parent;
            return tslib_1.__spread(acc, [/** @type {?} */ (Object.assign(new TreeItem(item, parent), treeItem, { index: index + 1 }))]);
        }, []);
        return new Tree(orderedItems, ctor);
    };
    Object.defineProperty(Tree.prototype, "activeId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._activeId;
        },
        set: /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            this._activeId = id;
            this._activeIndex = this.getIndexById(id);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "activeIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this._activeIndex;
        },
        set: /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            this._activeIndex = index;
            this._activeId = this.getIdByIndex(index);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "copy", {
        get: /**
         * @return {?}
         */
        function () {
            return Object.assign(new Tree(this._treeItems, this.ctor), this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "instance", {
        get: /**
         * @return {?}
         */
        function () {
            return new this.ctor() || /** @type {?} */ ({});
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "next", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getNext(this.activeIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "nextId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.next.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "nextIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.activeIndex + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "previous", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getPrevious(this.activeIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "previousId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.previous.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "previousIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.activeIndex - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._treeItems.map(function (x) { return x.item; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "treeItems", {
        get: /**
         * @return {?}
         */
        function () {
            return this._treeItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "orderedItems", {
        get: /**
         * @return {?}
         */
        function () {
            return this.treeItems.sort(function (a, b) { return compareNumbers(a.index, b.index); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "subtrees", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            var /** @type {?} */ trees = this.treeItems.reduce(function (acc, item) {
                var /** @type {?} */ treeId = item.treeId;
                var /** @type {?} */ subitems = acc[treeId] || [];
                acc[treeId] = tslib_1.__spread(subitems, [item]);
                return acc;
            }, {});
            return Object.keys(trees).map(function (key) { return Tree.Build(trees[key], _this.ctor); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tree.prototype, "subtreeItems", {
        get: /**
         * @return {?}
         */
        function () {
            return this.subtrees.map(function (tree) { return tree.treeItems.sort(function (a, b) { return compareNumbers(a.index, b.index); }); });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @return {?}
     */
    Tree.prototype.getIdByIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var /** @type {?} */ item = this.getItemByIndex(index);
        return item.id;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    Tree.prototype.getIndexById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.getItemById(id).index;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    Tree.prototype.getItemById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.treeItems.find(function (item) { return item.id === id; }) || new TreeItem(this.instance);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    Tree.prototype.getItemByIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.treeItems.find(function (item) { return item.index === index; }) || new TreeItem(this.instance);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    Tree.prototype.getNext = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.getItemByIndex(index + 1);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    Tree.prototype.getNextId = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.getNext(index).id;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    Tree.prototype.getPrevious = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.getItemByIndex(index - 1);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    Tree.prototype.getPreviousId = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.getPrevious(index).id;
    };
    return Tree;
}());
/**
 * @template T
 */
export { Tree };
function Tree_tsickle_Closure_declarations() {
    /** @type {?} */
    Tree.prototype._activeId;
    /** @type {?} */
    Tree.prototype._activeIndex;
    /** @type {?} */
    Tree.prototype._treeItems;
    /** @type {?} */
    Tree.prototype.ctor;
}

//# sourceMappingURL=data:application/json;base64,