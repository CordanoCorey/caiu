/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Metadata } from './models';
import { build } from './utils';
var BaseEntity = /** @class */ (function () {
    function BaseEntity() {
        this.createdBy = null;
        this.createdById = 0;
        this.createdDate = new Date();
        this.formId = 0;
        this.lastModifiedBy = null;
        this.lastModifiedById = 0;
        this.lastModifiedDate = new Date();
        this.matches = [];
        this.ignore = [
            '_metadata',
            'metadata',
            'ignore',
            'createdBy',
            'createdById',
            'createdDate',
            'formId',
            'lastModifiedBy',
            'lastModifiedById',
            'lastModifiedDate',
            'lastModifiedOn',
            'lastUpdated',
            'matches',
        ];
        this._metadata = new Metadata();
    }
    Object.defineProperty(BaseEntity.prototype, "metadata", {
        get: /**
         * @return {?}
         */
        function () {
            return build(Metadata, this._metadata, {
                ignore: this.ignore
            });
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._metadata = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BaseEntity.getGetters = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Object.keys(this.prototype).filter(function (name) {
            return typeof Object.getOwnPropertyDescriptor(_this.prototype, name)['get'] === 'function';
        });
    };
    /**
     * @return {?}
     */
    BaseEntity.getSetters = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Object.keys(this.prototype).filter(function (name) {
            return typeof Object.getOwnPropertyDescriptor(_this.prototype, name)['set'] === 'function';
        });
    };
    /**
     * @return {?}
     */
    BaseEntity.prototype.getGetters = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Object.keys(this.constructor.prototype).filter(function (name) {
            return typeof Object.getOwnPropertyDescriptor(_this.constructor.prototype, name)['get'] === 'function';
        });
    };
    /**
     * @return {?}
     */
    BaseEntity.prototype.getSetters = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Object.keys(this.constructor.prototype).filter(function (name) {
            return typeof Object.getOwnPropertyDescriptor(_this.constructor.prototype, name)['set'] === 'function';
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BaseEntity.prototype.update = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Object.assign(new BaseEntity(), value);
    };
    return BaseEntity;
}());
export { BaseEntity };
function BaseEntity_tsickle_Closure_declarations() {
    /** @type {?} */
    BaseEntity.prototype.createdBy;
    /** @type {?} */
    BaseEntity.prototype.createdById;
    /** @type {?} */
    BaseEntity.prototype.createdDate;
    /** @type {?} */
    BaseEntity.prototype.formId;
    /** @type {?} */
    BaseEntity.prototype.lastModifiedBy;
    /** @type {?} */
    BaseEntity.prototype.lastModifiedById;
    /** @type {?} */
    BaseEntity.prototype.lastModifiedDate;
    /** @type {?} */
    BaseEntity.prototype.matches;
    /** @type {?} */
    BaseEntity.prototype.ignore;
    /** @type {?} */
    BaseEntity.prototype._metadata;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1lbnRpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL3NoYXJlZC9iYXNlLWVudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNwQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDLElBQUE7O3lCQUNnQixJQUFJOzJCQUNGLENBQUM7MkJBQ0ssSUFBSSxJQUFJLEVBQUU7c0JBQ3JCLENBQUM7OEJBQ08sSUFBSTtnQ0FDRixDQUFDO2dDQUNLLElBQUksSUFBSSxFQUFFO3VCQUNmLEVBQUU7c0JBQ2I7WUFDTCxXQUFXO1lBQ1gsVUFBVTtZQUNWLFFBQVE7WUFDUixXQUFXO1lBQ1gsYUFBYTtZQUNiLGFBQWE7WUFDYixRQUFRO1lBQ1IsZ0JBQWdCO1lBQ2hCLGtCQUFrQjtZQUNsQixrQkFBa0I7WUFDbEIsZ0JBQWdCO1lBQ2hCLGFBQWE7WUFDYixTQUFTO1NBQ1o7eUJBQ3FCLElBQUksUUFBUSxFQUFFOztJQUVwQyxzQkFBSSxnQ0FBUTs7OztRQUFaO1lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbkMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO2FBQ3RCLENBQUMsQ0FBQztTQUNOOzs7OztRQUVELFVBQWEsS0FBZTtZQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztTQUMxQjs7O09BSkE7Ozs7SUFNTSxxQkFBVTs7O0lBQWpCO1FBQUEsaUJBSUM7UUFIRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSTtZQUMxQyxNQUFNLENBQUMsT0FBTyxNQUFNLENBQUMsd0JBQXdCLENBQUMsS0FBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxVQUFVLENBQUM7U0FDN0YsQ0FBQyxDQUFDO0tBQ047Ozs7SUFFTSxxQkFBVTs7O0lBQWpCO1FBQUEsaUJBSUM7UUFIRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSTtZQUMxQyxNQUFNLENBQUMsT0FBTyxNQUFNLENBQUMsd0JBQXdCLENBQUMsS0FBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxVQUFVLENBQUM7U0FDN0YsQ0FBQyxDQUFDO0tBQ047Ozs7SUFFRCwrQkFBVTs7O0lBQVY7UUFBQSxpQkFJQztRQUhHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSTtZQUN0RCxNQUFNLENBQUMsT0FBTyxNQUFNLENBQUMsd0JBQXdCLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssVUFBVSxDQUFDO1NBQ3pHLENBQUMsQ0FBQztLQUNOOzs7O0lBRUQsK0JBQVU7OztJQUFWO1FBQUEsaUJBSUM7UUFIRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFBLElBQUk7WUFDdEQsTUFBTSxDQUFDLE9BQU8sTUFBTSxDQUFDLHdCQUF3QixDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLFVBQVUsQ0FBQztTQUN6RyxDQUFDLENBQUM7S0FDTjs7Ozs7SUFFRCwyQkFBTTs7OztJQUFOLFVBQU8sS0FBVTtRQUNiLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDakQ7cUJBakVMO0lBa0VDLENBQUE7QUEvREQsc0JBK0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWV0YWRhdGEgfSBmcm9tICcuL21vZGVscyc7XHJcbmltcG9ydCB7IGJ1aWxkIH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQmFzZUVudGl0eSB7XHJcbiAgICBjcmVhdGVkQnkgPSBudWxsO1xyXG4gICAgY3JlYXRlZEJ5SWQgPSAwO1xyXG4gICAgY3JlYXRlZERhdGU6IERhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgZm9ybUlkID0gMDtcclxuICAgIGxhc3RNb2RpZmllZEJ5ID0gbnVsbDtcclxuICAgIGxhc3RNb2RpZmllZEJ5SWQgPSAwO1xyXG4gICAgbGFzdE1vZGlmaWVkRGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBtYXRjaGVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgaWdub3JlID0gW1xyXG4gICAgICAgICdfbWV0YWRhdGEnLFxyXG4gICAgICAgICdtZXRhZGF0YScsXHJcbiAgICAgICAgJ2lnbm9yZScsXHJcbiAgICAgICAgJ2NyZWF0ZWRCeScsXHJcbiAgICAgICAgJ2NyZWF0ZWRCeUlkJyxcclxuICAgICAgICAnY3JlYXRlZERhdGUnLFxyXG4gICAgICAgICdmb3JtSWQnLFxyXG4gICAgICAgICdsYXN0TW9kaWZpZWRCeScsXHJcbiAgICAgICAgJ2xhc3RNb2RpZmllZEJ5SWQnLFxyXG4gICAgICAgICdsYXN0TW9kaWZpZWREYXRlJyxcclxuICAgICAgICAnbGFzdE1vZGlmaWVkT24nLFxyXG4gICAgICAgICdsYXN0VXBkYXRlZCcsXHJcbiAgICAgICAgJ21hdGNoZXMnLFxyXG4gICAgXTtcclxuICAgIF9tZXRhZGF0YTogTWV0YWRhdGEgPSBuZXcgTWV0YWRhdGEoKTtcclxuXHJcbiAgICBnZXQgbWV0YWRhdGEoKTogTWV0YWRhdGEge1xyXG4gICAgICAgIHJldHVybiBidWlsZChNZXRhZGF0YSwgdGhpcy5fbWV0YWRhdGEsIHtcclxuICAgICAgICAgICAgaWdub3JlOiB0aGlzLmlnbm9yZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBtZXRhZGF0YSh2YWx1ZTogTWV0YWRhdGEpIHtcclxuICAgICAgICB0aGlzLl9tZXRhZGF0YSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRHZXR0ZXJzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5wcm90b3R5cGUpLmZpbHRlcihuYW1lID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMucHJvdG90eXBlLCBuYW1lKVsnZ2V0J10gPT09ICdmdW5jdGlvbic7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldFNldHRlcnMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnByb3RvdHlwZSkuZmlsdGVyKG5hbWUgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcy5wcm90b3R5cGUsIG5hbWUpWydzZXQnXSA9PT0gJ2Z1bmN0aW9uJztcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRHZXR0ZXJzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUpLmZpbHRlcihuYW1lID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLCBuYW1lKVsnZ2V0J10gPT09ICdmdW5jdGlvbic7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2V0dGVycygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlKS5maWx0ZXIobmFtZSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgbmFtZSlbJ3NldCddID09PSAnZnVuY3Rpb24nO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSh2YWx1ZTogYW55KTogQmFzZUVudGl0eSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IEJhc2VFbnRpdHkoKSwgdmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==