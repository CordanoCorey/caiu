/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { arrayUnion, build, inArray } from './utils';
/**
 * @template T
 */
var /**
 * @template T
 */
Collection = /** @class */ (function () {
    function Collection(ctor) {
        this.activeId = 0;
        this.metadata = {};
        this._items = {};
        if (ctor) {
            this.ctor = ctor;
        }
    }
    /**
     * @template T
     * @param {?} state
     * @param {?} key
     * @param {?} item
     * @return {?}
     */
    Collection.AddItem = /**
     * @template T
     * @param {?} state
     * @param {?} key
     * @param {?} item
     * @return {?}
     */
    function (state, key, item) {
        var /** @type {?} */ newState = {};
        Object.keys(state)
            .forEach(function (k) {
            newState[k] = state[k];
        });
        newState[key] = item;
        return newState;
    };
    /**
     * @template T
     * @param {?} items
     * @param {?=} findByKey
     * @return {?}
     */
    Collection.BuildCollection = /**
     * @template T
     * @param {?} items
     * @param {?=} findByKey
     * @return {?}
     */
    function (items, findByKey) {
        if (findByKey === void 0) { findByKey = 'id'; }
        var /** @type {?} */ dictionary = Collection.BuildItems(items, findByKey);
        return Object.assign(new Collection(), { items: dictionary });
    };
    /**
     * @template T
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    Collection.BuildDictionaryFromArray = /**
     * @template T
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    function (value, key) {
        if (key === void 0) { key = 'id'; }
        var /** @type {?} */ obj = {};
        value.forEach(function (item) {
            obj[item[key]] = item;
        });
        return obj;
    };
    /**
     * @template T
     * @param {?} items
     * @param {?=} findByKey
     * @return {?}
     */
    Collection.BuildFromArray = /**
     * @template T
     * @param {?} items
     * @param {?=} findByKey
     * @return {?}
     */
    function (items, findByKey) {
        if (findByKey === void 0) { findByKey = 'id'; }
        var /** @type {?} */ dictionary = Collection.BuildItems(items, findByKey);
        return Object.assign(new Collection(), { items: dictionary });
    };
    /**
     * @template T
     * @param {?} items
     * @param {?=} findByKey
     * @return {?}
     */
    Collection.BuildItems = /**
     * @template T
     * @param {?} items
     * @param {?=} findByKey
     * @return {?}
     */
    function (items, findByKey) {
        if (findByKey === void 0) { findByKey = 'id'; }
        var /** @type {?} */ dictionary = {};
        items.forEach(function (item) {
            var /** @type {?} */ key = item[findByKey];
            dictionary[key] = item;
        });
        return dictionary;
    };
    /**
     * @template T
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    Collection.Filter = /**
     * @template T
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    function (item, path) {
        return Array.isArray(item['matches']) && inArray(item['matches'], path);
    };
    /**
     * @template T
     * @param {?} item
     * @param {?} paths
     * @return {?}
     */
    Collection.FilterAnd = /**
     * @template T
     * @param {?} item
     * @param {?} paths
     * @return {?}
     */
    function (item, paths) {
        return Array.isArray(item['matches']) && paths.every(function (path) { return inArray(item['matches'], path); });
    };
    /**
     * @template T
     * @param {?} item
     * @param {?} paths
     * @return {?}
     */
    Collection.FilterOr = /**
     * @template T
     * @param {?} item
     * @param {?} paths
     * @return {?}
     */
    function (item, paths) {
        return Array.isArray(item['matches']) && paths.some(function (path) { return inArray(item['matches'], path); });
    };
    /**
     * @template T
     * @param {?} state
     * @param {?} key
     * @return {?}
     */
    Collection.RemoveItem = /**
     * @template T
     * @param {?} state
     * @param {?} key
     * @return {?}
     */
    function (state, key) {
        var /** @type {?} */ newState = {};
        Object.keys(state)
            .filter(function (k) { return k !== key; })
            .forEach(function (k) {
            newState[k] = state[k];
        });
        return newState;
    };
    Object.defineProperty(Collection.prototype, "active", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ item = this.items[this.activeId] || /** @type {?} */ ({});
            return this.ctor ? build(this.ctor, item) : item;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collection.prototype, "ctor", {
        get: /**
         * @return {?}
         */
        function () {
            return this._ctor;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._ctor = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collection.prototype, "count", {
        get: /**
         * @return {?}
         */
        function () {
            return this.toArray().length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collection.prototype, "defaultItem", {
        get: /**
         * @return {?}
         */
        function () {
            return this.ctor ? new this.ctor() : /** @type {?} */ ({});
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collection.prototype, "empty", {
        get: /**
         * @return {?}
         */
        function () {
            return this.toArray().length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collection.prototype, "instance", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ activeId = this.activeId;
            var /** @type {?} */ ctor = this.ctor;
            var /** @type {?} */ lastUpdated = this.lastUpdated;
            var /** @type {?} */ metadata = this.metadata;
            // const collection = this.constructor();
            var /** @type {?} */ collection = new Collection();
            collection.activeId = activeId;
            collection.ctor = ctor;
            collection.lastUpdated = lastUpdated;
            collection.metadata = metadata;
            return collection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collection.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._items = value;
            this.lastUpdated = new Date();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collection.prototype, "keys", {
        get: /**
         * @return {?}
         */
        function () {
            return Object.keys(this.items);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collection.prototype, "asArray", {
        get: /**
         * @return {?}
         */
        function () {
            return this.toArray();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Collection.prototype, "itemsArray", {
        get: /**
         * @return {?}
         */
        function () {
            return this.asArray;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Collection.prototype.toArray = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Object.keys(this.items).map(function (key) { return (_this.items[key]); });
    };
    /**
     * @param {?} id
     * @param {?=} key
     * @return {?}
     */
    Collection.prototype.activate = /**
     * @param {?} id
     * @param {?=} key
     * @return {?}
     */
    function (id, key) {
        if (key === void 0) { key = 'id'; }
        var /** @type {?} */ items = this.items[id] ? this.copyItems() : Object.assign(this.copyItems(), (_a = {}, _a[id] = (_b = {}, _b[key] = id, _b), _a));
        return Object.assign(new Collection(), this, { activeId: id, items: items });
        var _a, _b;
    };
    /**
     * @param {?} item
     * @param {?=} key
     * @return {?}
     */
    Collection.prototype.addItem = /**
     * @param {?} item
     * @param {?=} key
     * @return {?}
     */
    function (item, key) {
        var /** @type {?} */ items = this.copyItems();
        return Object.assign(this.constructor(), this, {
            items: Object.assign(items, (_a = {}, _a[key] = item, _a))
        });
        var _a;
    };
    /**
     * @param {?} items
     * @param {?=} key
     * @return {?}
     */
    Collection.prototype.addItems = /**
     * @param {?} items
     * @param {?=} key
     * @return {?}
     */
    function (items, key) {
        var _this = this;
        if (key === void 0) { key = 'id'; }
        var /** @type {?} */ newItems = {};
        this.toArray().forEach(function (item) {
            newItems[item[key]] = item;
        });
        items.forEach(function (item) {
            var /** @type {?} */ existingItem = newItems[item[key]] ? newItems[item[key]] : /** @type {?} */ ({});
            var /** @type {?} */ existingMatches = existingItem['matches'] || [];
            var /** @type {?} */ newMatches = item['matches'] || [];
            var /** @type {?} */ matches = arrayUnion(existingMatches, newMatches);
            var /** @type {?} */ newItem = _this.buildItem(item, { matches: matches });
            newItems[item[key]] = _this.buildItem(existingItem, newItem);
        });
        this.items = newItems;
        return Object.assign(new Collection(), this);
    };
    /**
     * @param {?} items
     * @param {?=} ctor
     * @return {?}
     */
    Collection.prototype.build = /**
     * @param {?} items
     * @param {?=} ctor
     * @return {?}
     */
    function (items, ctor) {
        return ctor ? build(ctor, { items: items })
            : /** @type {?} */ (Object.assign(this.instance, { items: items }));
    };
    /**
     * @param {?} existingItem
     * @param {?} newItem
     * @param {?=} ctor
     * @return {?}
     */
    Collection.prototype.buildItem = /**
     * @param {?} existingItem
     * @param {?} newItem
     * @param {?=} ctor
     * @return {?}
     */
    function (existingItem, newItem, ctor) {
        var /** @type {?} */ existing = existingItem || {};
        var /** @type {?} */ item = ctor ? build(ctor, existing, newItem)
            : this.ctor ? build(this.ctor, existing, newItem)
                : Object.assign({}, existing, newItem);
        return item;
    };
    /**
     * @param {?} items
     * @param {?=} ctor
     * @return {?}
     */
    Collection.prototype.buildItems = /**
     * @param {?} items
     * @param {?=} ctor
     * @return {?}
     */
    function (items, ctor) {
        var /** @type {?} */ factory = ctor ? ctor : this.ctor;
        return items.map(function (x) { return factory ? build(factory, x) : Object.assign(/** @type {?} */ ({}), x); });
    };
    /**
     * @return {?}
     */
    Collection.prototype.copyItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Object.keys(this.items)
            .reduce(function (acc, key) {
            acc[key] = _this.get(key);
            return acc;
        }, {});
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Collection.prototype.delete = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.removeAt(key);
    };
    /**
     * @param {?} f
     * @return {?}
     */
    Collection.prototype.filter = /**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        var /** @type {?} */ items = Collection.BuildDictionaryFromArray(this.toArray().filter(f));
        return Object.assign(new Collection(), this, { items: items });
    };
    /**
     * @param {?} f
     * @return {?}
     */
    Collection.prototype.filterBy = /**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        return this.filterItems(f);
    };
    /**
     * @param {?} f
     * @return {?}
     */
    Collection.prototype.filterItems = /**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        return this.toArray().filter(f);
    };
    /**
     * @param {?} f
     * @return {?}
     */
    Collection.prototype.findBy = /**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        return this.asArray.find(f) || this.defaultItem;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    Collection.prototype.get = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ existing = this.items[id];
        return this.ctor ? build(this.ctor, existing)
            : Object.assign(/** @type {?} */ ({}), existing);
    };
    /**
     * @param {?} f
     * @return {?}
     */
    Collection.prototype.map = /**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        var /** @type {?} */ items = Collection.BuildDictionaryFromArray(this.toArray().map(f));
        return Object.assign(new Collection(), this, { items: items });
    };
    /**
     * @param {?} path
     * @return {?}
     */
    Collection.prototype.query = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return this.toArray().filter(function (item) { return Collection.Filter(item, path); });
    };
    /**
     * @param {?} paths
     * @return {?}
     */
    Collection.prototype.queryAnd = /**
     * @param {?} paths
     * @return {?}
     */
    function (paths) {
        return this.toArray().filter(function (item) { return Collection.FilterAnd(item, paths); });
    };
    /**
     * @param {?} paths
     * @return {?}
     */
    Collection.prototype.queryOr = /**
     * @param {?} paths
     * @return {?}
     */
    function (paths) {
        return this.toArray().filter(function (item) { return Collection.FilterOr(item, paths); });
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Collection.prototype.removeAt = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        var /** @type {?} */ keys = Object.keys(this.items);
        var /** @type {?} */ items = Collection.BuildDictionaryFromArray(keys.filter(function (x) { return x.toString() !== key.toString(); }).map(function (y) { return _this.items[y]; }));
        return Object.assign(new Collection(), this, { items: items });
    };
    /**
     * @param {?} key
     * @return {?}
     */
    Collection.prototype.removeItem = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        var /** @type {?} */ collection = this.constructor();
        var /** @type {?} */ keys = Object.keys(this.items).filter(function (k) { return k !== key; });
        keys.forEach(function (k) {
            collection.items[k] = /** @type {?} */ (Object.assign({}, _this.items[k]));
        });
        return collection;
    };
    /**
     * @param {?} filter
     * @param {?=} key
     * @return {?}
     */
    Collection.prototype.removeItems = /**
     * @param {?} filter
     * @param {?=} key
     * @return {?}
     */
    function (filter, key) {
        if (key === void 0) { key = 'id'; }
        var /** @type {?} */ keys = this.toArray().filter(filter).map(function (x) { return x[key]; });
        this.removeKeys(keys);
    };
    /**
     * @param {?} keys
     * @return {?}
     */
    Collection.prototype.removeKeys = /**
     * @param {?} keys
     * @return {?}
     */
    function (keys) {
        var _this = this;
        keys.forEach(function (key) {
            _this.removeItem(key);
        });
    };
    /**
     * @param {?} itemsArray
     * @return {?}
     */
    Collection.prototype.replace = /**
     * @param {?} itemsArray
     * @return {?}
     */
    function (itemsArray) {
        var /** @type {?} */ items = Collection.BuildDictionaryFromArray(this.buildItems(itemsArray));
        return Object.assign(new Collection(), this, { items: items });
    };
    /**
     * @param {?} items
     * @param {?=} filter
     * @return {?}
     */
    Collection.prototype.replaceItems = /**
     * @param {?} items
     * @param {?=} filter
     * @return {?}
     */
    function (items, filter) {
        if (filter) {
            var /** @type {?} */ f = function (x) { return !filter(x); };
            return this.replaceItems(tslib_1.__spread(this.filterItems(f), items));
        }
        return Object.assign(new Collection(), this, { items: items });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Collection.prototype.setValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Object.assign(new Collection(), this, value);
    };
    /**
     * @param {?} value
     * @param {?=} ctor
     * @param {?=} key
     * @return {?}
     */
    Collection.prototype.update = /**
     * @param {?} value
     * @param {?=} ctor
     * @param {?=} key
     * @return {?}
     */
    function (value, ctor, key) {
        if (key === void 0) { key = 'id'; }
        if (Array.isArray(value)) {
            return this.updateItems(value, ctor, key);
        }
        return this.updateItem(value, value[key], ctor);
    };
    /**
     * @param {?} item
     * @param {?} key
     * @param {?=} ctor
     * @return {?}
     */
    Collection.prototype.updateItem = /**
     * @param {?} item
     * @param {?} key
     * @param {?=} ctor
     * @return {?}
     */
    function (item, key, ctor) {
        var /** @type {?} */ items = this.copyItems();
        var /** @type {?} */ updatedItem = this.buildItem(items[key], item, ctor);
        return this.build(Object.assign(items, (_a = {}, _a[key] = updatedItem, _a)));
        var _a;
    };
    /**
     * @param {?} items
     * @param {?=} ctor
     * @param {?=} key
     * @return {?}
     */
    Collection.prototype.updateItems = /**
     * @param {?} items
     * @param {?=} ctor
     * @param {?=} key
     * @return {?}
     */
    function (items, ctor, key) {
        var _this = this;
        if (key === void 0) { key = 'id'; }
        var /** @type {?} */ existingItems = this.copyItems();
        var /** @type {?} */ updatedItems = items.reduce(function (acc, item) {
            var /** @type {?} */ existingItem = acc[item[key]];
            acc[item[key]] = _this.buildItem(existingItem, item, ctor);
            return acc;
        }, existingItems);
        return this.build(updatedItems);
    };
    return Collection;
}());
/**
 * @template T
 */
export { Collection };
function Collection_tsickle_Closure_declarations() {
    /** @type {?} */
    Collection.prototype.activeId;
    /** @type {?} */
    Collection.prototype.lastUpdated;
    /** @type {?} */
    Collection.prototype.metadata;
    /** @type {?} */
    Collection.prototype._ctor;
    /** @type {?} */
    Collection.prototype._items;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvc2hhcmVkL2NvbGxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxTQUFTLENBQUM7Ozs7QUFFckQ7OztBQUFBO0lBa0VJLG9CQUFZLElBQXlCO3dCQWpFVCxDQUFDO3dCQUVSLEVBQUU7c0JBRUMsRUFBRTtRQThEdEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNQLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQ3BCO0tBQ0o7Ozs7Ozs7O0lBL0RNLGtCQUFPOzs7Ozs7O0lBQWQsVUFBa0IsS0FBb0IsRUFBRSxHQUFvQixFQUFFLElBQU87UUFDakUscUJBQU0sUUFBUSxHQUFrQixFQUFFLENBQUM7UUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDYixPQUFPLENBQUMsVUFBQSxDQUFDO1lBQ04sUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMxQixDQUFDLENBQUM7UUFDUCxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxRQUFRLENBQUM7S0FDbkI7Ozs7Ozs7SUFFTSwwQkFBZTs7Ozs7O0lBQXRCLFVBQTBCLEtBQVUsRUFBRSxTQUFnQjtRQUFoQiwwQkFBQSxFQUFBLGdCQUFnQjtRQUNsRCxxQkFBTSxVQUFVLEdBQWtCLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxFQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztLQUNwRTs7Ozs7OztJ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QUNuQztxQkEvU0w7SUFpVEMsQ0FBQTs7OztBQTlTRCxzQkE4U0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXRhZGF0YSwgRGljdGlvbmFyeSwgVHlwZUNvbnN0cnVjdG9yIH0gZnJvbSAnLi9tb2RlbHMnO1xyXG5pbXBvcnQgeyBhcnJheVVuaW9uLCBidWlsZCwgaW5BcnJheSB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbGxlY3Rpb248VD4ge1xyXG4gICAgYWN0aXZlSWQ6IG51bWJlciB8IHN0cmluZyA9IDA7XHJcbiAgICBsYXN0VXBkYXRlZDogRGF0ZTtcclxuICAgIG1ldGFkYXRhOiBNZXRhZGF0YSA9IHt9O1xyXG4gICAgX2N0b3I6IFR5cGVDb25zdHJ1Y3RvcjxUPjtcclxuICAgIF9pdGVtczogRGljdGlvbmFyeTxUPiA9IHt9O1xyXG5cclxuICAgIHN0YXRpYyBBZGRJdGVtPFQ+KHN0YXRlOiBEaWN0aW9uYXJ5PFQ+LCBrZXk6IG51bWJlciB8IHN0cmluZywgaXRlbTogVCk6IERpY3Rpb25hcnk8VD4ge1xyXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlOiBEaWN0aW9uYXJ5PFQ+ID0ge307XHJcbiAgICAgICAgT2JqZWN0LmtleXMoc3RhdGUpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKGsgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmV3U3RhdGVba10gPSBzdGF0ZVtrXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgbmV3U3RhdGVba2V5XSA9IGl0ZW07XHJcbiAgICAgICAgcmV0dXJuIG5ld1N0YXRlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBCdWlsZENvbGxlY3Rpb248VD4oaXRlbXM6IFRbXSwgZmluZEJ5S2V5ID0gJ2lkJyk6IENvbGxlY3Rpb248VD4ge1xyXG4gICAgICAgIGNvbnN0IGRpY3Rpb25hcnk6IERpY3Rpb25hcnk8VD4gPSBDb2xsZWN0aW9uLkJ1aWxkSXRlbXMoaXRlbXMsIGZpbmRCeUtleSk7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IENvbGxlY3Rpb248VD4oKSwgeyBpdGVtczogZGljdGlvbmFyeSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgQnVpbGREaWN0aW9uYXJ5RnJvbUFycmF5PFQ+KHZhbHVlOiBhbnlbXSwga2V5ID0gJ2lkJyk6IERpY3Rpb25hcnk8VD4ge1xyXG4gICAgICAgIGNvbnN0IG9iajogRGljdGlvbmFyeTxUPiA9IHt9O1xyXG4gICAgICAgIHZhbHVlLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIG9ialtpdGVtW2tleV1dID0gaXRlbTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBCdWlsZEZyb21BcnJheTxUPihpdGVtczogVFtdLCBmaW5kQnlLZXkgPSAnaWQnKTogQ29sbGVjdGlvbjxUPiB7XHJcbiAgICAgICAgY29uc3QgZGljdGlvbmFyeTogRGljdGlvbmFyeTxUPiA9IENvbGxlY3Rpb24uQnVpbGRJdGVtcyhpdGVtcywgZmluZEJ5S2V5KTtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgQ29sbGVjdGlvbjxUPigpLCB7IGl0ZW1zOiBkaWN0aW9uYXJ5IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBCdWlsZEl0ZW1zPFQ+KGl0ZW1zOiBUW10sIGZpbmRCeUtleSA9ICdpZCcpOiBEaWN0aW9uYXJ5PFQ+IHtcclxuICAgICAgICBjb25zdCBkaWN0aW9uYXJ5OiBEaWN0aW9uYXJ5PFQ+ID0ge307XHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgY29uc3Qga2V5ID0gaXRlbVtmaW5kQnlLZXldO1xyXG4gICAgICAgICAgICBkaWN0aW9uYXJ5W2tleV0gPSBpdGVtO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBkaWN0aW9uYXJ5O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBGaWx0ZXI8VD4oaXRlbTogVCwgcGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaXRlbVsnbWF0Y2hlcyddKSAmJiBpbkFycmF5KGl0ZW1bJ21hdGNoZXMnXSwgcGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEZpbHRlckFuZDxUPihpdGVtOiBULCBwYXRoczogc3RyaW5nW10pOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShpdGVtWydtYXRjaGVzJ10pICYmIHBhdGhzLmV2ZXJ5KHBhdGggPT4gaW5BcnJheShpdGVtWydtYXRjaGVzJ10sIHBhdGgpKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgRmlsdGVyT3I8VD4oaXRlbTogVCwgcGF0aHM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaXRlbVsnbWF0Y2hlcyddKSAmJiBwYXRocy5zb21lKHBhdGggPT4gaW5BcnJheShpdGVtWydtYXRjaGVzJ10sIHBhdGgpKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgUmVtb3ZlSXRlbTxUPihzdGF0ZTogRGljdGlvbmFyeTxUPiwga2V5OiBudW1iZXIgfCBzdHJpbmcpOiBEaWN0aW9uYXJ5PFQ+IHtcclxuICAgICAgICBjb25zdCBuZXdTdGF0ZTogRGljdGlvbmFyeTxUPiA9IHt9O1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHN0YXRlKVxyXG4gICAgICAgICAgICAuZmlsdGVyKGsgPT4gayAhPT0ga2V5KVxyXG4gICAgICAgICAgICAuZm9yRWFjaChrID0+IHtcclxuICAgICAgICAgICAgICAgIG5ld1N0YXRlW2tdID0gc3RhdGVba107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXdTdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjdG9yPzogVHlwZUNvbnN0cnVjdG9yPFQ+KSB7XHJcbiAgICAgICAgaWYgKGN0b3IpIHtcclxuICAgICAgICAgICAgdGhpcy5jdG9yID0gY3RvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGFjdGl2ZSgpOiBUIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5pdGVtc1t0aGlzLmFjdGl2ZUlkXSB8fCA8VD57fTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jdG9yID8gYnVpbGQodGhpcy5jdG9yLCBpdGVtKSA6IGl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGN0b3IoKTogVHlwZUNvbnN0cnVjdG9yPFQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3RvcjtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgY3Rvcih2YWx1ZTogVHlwZUNvbnN0cnVjdG9yPFQ+KSB7XHJcbiAgICAgICAgdGhpcy5fY3RvciA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjb3VudCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRlZmF1bHRJdGVtKCk6IFQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN0b3IgPyBuZXcgdGhpcy5jdG9yKCkgOiA8VD57fTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG9BcnJheSgpLmxlbmd0aCA9PT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaW5zdGFuY2UoKTogQ29sbGVjdGlvbjxUPiB7XHJcbiAgICAgICAgY29uc3QgYWN0aXZlSWQgPSB0aGlzLmFjdGl2ZUlkO1xyXG4gICAgICAgIGNvbnN0IGN0b3IgPSB0aGlzLmN0b3I7XHJcbiAgICAgICAgY29uc3QgbGFzdFVwZGF0ZWQgPSB0aGlzLmxhc3RVcGRhdGVkO1xyXG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5tZXRhZGF0YTtcclxuICAgICAgICAvLyBjb25zdCBjb2xsZWN0aW9uID0gdGhpcy5jb25zdHJ1Y3RvcigpO1xyXG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBuZXcgQ29sbGVjdGlvbjxUPigpO1xyXG4gICAgICAgIGNvbGxlY3Rpb24uYWN0aXZlSWQgPSBhY3RpdmVJZDtcclxuICAgICAgICBjb2xsZWN0aW9uLmN0b3IgPSBjdG9yO1xyXG4gICAgICAgIGNvbGxlY3Rpb24ubGFzdFVwZGF0ZWQgPSBsYXN0VXBkYXRlZDtcclxuICAgICAgICBjb2xsZWN0aW9uLm1ldGFkYXRhID0gbWV0YWRhdGE7XHJcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGl0ZW1zKCk6IERpY3Rpb25hcnk8VD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtcztcclxuICAgIH1cclxuXHJcbiAgICBzZXQgaXRlbXModmFsdWU6IERpY3Rpb25hcnk8VD4pIHtcclxuICAgICAgICB0aGlzLl9pdGVtcyA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMubGFzdFVwZGF0ZWQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBrZXlzKCk6IG51bWJlcltdIHwgc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLml0ZW1zKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgYXNBcnJheSgpOiBUW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXRlbXNBcnJheSgpOiBUW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFzQXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9BcnJheSgpOiBUW10ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLml0ZW1zKS5tYXAoKGtleTogbnVtYmVyIHwgc3RyaW5nKSA9PiA8VD50aGlzLml0ZW1zW2tleV0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFjdGl2YXRlKGlkOiBudW1iZXIsIGtleTogc3RyaW5nID0gJ2lkJyk6IENvbGxlY3Rpb248VD4ge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtc1tpZF0gPyB0aGlzLmNvcHlJdGVtcygpIDogT2JqZWN0LmFzc2lnbih0aGlzLmNvcHlJdGVtcygpLCB7IFtpZF06IHsgW2tleV06IGlkIH0gfSk7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IENvbGxlY3Rpb248VD4oKSwgdGhpcywgeyBhY3RpdmVJZDogaWQsIGl0ZW1zIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEl0ZW0oaXRlbTogVCwga2V5PzogbnVtYmVyIHwgc3RyaW5nKTogQ29sbGVjdGlvbjxUPiB7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLmNvcHlJdGVtcygpO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHRoaXMuY29uc3RydWN0b3IoKSwgdGhpcywge1xyXG4gICAgICAgICAgICBpdGVtczogT2JqZWN0LmFzc2lnbihpdGVtcywgeyBba2V5XTogaXRlbSB9KVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEl0ZW1zKGl0ZW1zOiBUW10sIGtleSA9ICdpZCcpOiBDb2xsZWN0aW9uPFQ+IHtcclxuICAgICAgICBjb25zdCBuZXdJdGVtczogRGljdGlvbmFyeTxUPiA9IHt9O1xyXG4gICAgICAgIHRoaXMudG9BcnJheSgpLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIG5ld0l0ZW1zW2l0ZW1ba2V5XV0gPSBpdGVtO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSXRlbSA9IG5ld0l0ZW1zW2l0ZW1ba2V5XV0gPyBuZXdJdGVtc1tpdGVtW2tleV1dIDogPFQ+e307XHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nTWF0Y2hlcyA9IGV4aXN0aW5nSXRlbVsnbWF0Y2hlcyddIHx8IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdNYXRjaGVzID0gaXRlbVsnbWF0Y2hlcyddIHx8IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gYXJyYXlVbmlvbihleGlzdGluZ01hdGNoZXMsIG5ld01hdGNoZXMpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdJdGVtID0gdGhpcy5idWlsZEl0ZW0oaXRlbSwgeyBtYXRjaGVzOiBtYXRjaGVzIH0pO1xyXG4gICAgICAgICAgICBuZXdJdGVtc1tpdGVtW2tleV1dID0gdGhpcy5idWlsZEl0ZW0oZXhpc3RpbmdJdGVtLCBuZXdJdGVtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLml0ZW1zID0gbmV3SXRlbXM7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IENvbGxlY3Rpb248VD4oKSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgYnVpbGQoaXRlbXM6IERpY3Rpb25hcnk8VD4sIGN0b3I/OiBUeXBlQ29uc3RydWN0b3I8Q29sbGVjdGlvbjxUPj4pOiBDb2xsZWN0aW9uPFQ+IHtcclxuICAgICAgICByZXR1cm4gY3RvciA/IGJ1aWxkKGN0b3IsIHsgaXRlbXMgfSlcclxuICAgICAgICAgICAgOiA8Q29sbGVjdGlvbjxUPj5PYmplY3QuYXNzaWduKHRoaXMuaW5zdGFuY2UsIHsgaXRlbXMgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYnVpbGRJdGVtKGV4aXN0aW5nSXRlbTogVCwgbmV3SXRlbTogYW55LCBjdG9yPzogVHlwZUNvbnN0cnVjdG9yPFQ+KTogVCB7XHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBleGlzdGluZ0l0ZW0gfHwge307XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IGN0b3IgPyBidWlsZChjdG9yLCBleGlzdGluZywgbmV3SXRlbSlcclxuICAgICAgICAgICAgOiB0aGlzLmN0b3IgPyBidWlsZCh0aGlzLmN0b3IsIGV4aXN0aW5nLCBuZXdJdGVtKVxyXG4gICAgICAgICAgICAgICAgOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZywgbmV3SXRlbSk7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgYnVpbGRJdGVtcyhpdGVtczogVFtdLCBjdG9yPzogVHlwZUNvbnN0cnVjdG9yPFQ+KTogVFtdIHtcclxuICAgICAgICBjb25zdCBmYWN0b3J5ID0gY3RvciA/IGN0b3IgOiB0aGlzLmN0b3I7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcCh4ID0+IGZhY3RvcnkgPyBidWlsZChmYWN0b3J5LCB4KSA6IE9iamVjdC5hc3NpZ24oPFQ+e30sIHgpKTtcclxuICAgIH1cclxuXHJcbiAgICBjb3B5SXRlbXMoKTogRGljdGlvbmFyeTxUPiB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuaXRlbXMpXHJcbiAgICAgICAgICAgIC5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhY2Nba2V5XSA9IHRoaXMuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlKGtleTogc3RyaW5nIHwgbnVtYmVyKTogQ29sbGVjdGlvbjxUPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlQXQoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBmaWx0ZXIoZjogKGl0ZW06IFQpID0+IGJvb2xlYW4pOiBDb2xsZWN0aW9uPFQ+IHtcclxuICAgICAgICBjb25zdCBpdGVtcyA9IENvbGxlY3Rpb24uQnVpbGREaWN0aW9uYXJ5RnJvbUFycmF5KHRoaXMudG9BcnJheSgpLmZpbHRlcihmKSk7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IENvbGxlY3Rpb248VD4oKSwgdGhpcywgeyBpdGVtcyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmaWx0ZXJCeShmOiAoaXRlbTogVCwgaW5kZXg/OiBudW1iZXIpID0+IGJvb2xlYW4pOiBUW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlckl0ZW1zKGYpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbHRlckl0ZW1zKGY6IChpdGVtOiBULCBpbmRleD86IG51bWJlcikgPT4gYm9vbGVhbik6IFRbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG9BcnJheSgpLmZpbHRlcihmKTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kQnkoZjogKGl0ZW06IFQpID0+IGJvb2xlYW4pOiBUIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hc0FycmF5LmZpbmQoZikgfHwgdGhpcy5kZWZhdWx0SXRlbTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQoaWQ6IG51bWJlciB8IHN0cmluZyk6IFQge1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy5pdGVtc1tpZF07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3RvciA/IGJ1aWxkKHRoaXMuY3RvciwgZXhpc3RpbmcpXHJcbiAgICAgICAgICAgIDogT2JqZWN0LmFzc2lnbig8VD57fSwgZXhpc3RpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIG1hcChmOiAoaXRlbTogVCkgPT4gVCk6IENvbGxlY3Rpb248VD4ge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gQ29sbGVjdGlvbi5CdWlsZERpY3Rpb25hcnlGcm9tQXJyYXkodGhpcy50b0FycmF5KCkubWFwKGYpKTtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgQ29sbGVjdGlvbjxUPigpLCB0aGlzLCB7IGl0ZW1zIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHF1ZXJ5KHBhdGg6IHN0cmluZyk6IFRbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG9BcnJheSgpLmZpbHRlcihpdGVtID0+IENvbGxlY3Rpb24uRmlsdGVyKGl0ZW0sIHBhdGgpKTtcclxuICAgIH1cclxuXHJcbiAgICBxdWVyeUFuZChwYXRoczogc3RyaW5nW10pOiBUW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKS5maWx0ZXIoaXRlbSA9PiBDb2xsZWN0aW9uLkZpbHRlckFuZChpdGVtLCBwYXRocykpO1xyXG4gICAgfVxyXG5cclxuICAgIHF1ZXJ5T3IocGF0aHM6IHN0cmluZ1tdKTogVFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b0FycmF5KCkuZmlsdGVyKGl0ZW0gPT4gQ29sbGVjdGlvbi5GaWx0ZXJPcihpdGVtLCBwYXRocykpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUF0KGtleTogbnVtYmVyIHwgc3RyaW5nKTogQ29sbGVjdGlvbjxUPiB7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuaXRlbXMpO1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gQ29sbGVjdGlvbi5CdWlsZERpY3Rpb25hcnlGcm9tQXJyYXkoa2V5cy5maWx0ZXIoeCA9PiB4LnRvU3RyaW5nKCkgIT09IGtleS50b1N0cmluZygpKS5tYXAoeSA9PiB0aGlzLml0ZW1zW3ldKSk7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IENvbGxlY3Rpb248VD4oKSwgdGhpcywgeyBpdGVtcyB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlSXRlbShrZXk6IG51bWJlciB8IHN0cmluZyk6IENvbGxlY3Rpb248VD4ge1xyXG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSB0aGlzLmNvbnN0cnVjdG9yKCk7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuaXRlbXMpLmZpbHRlcihrID0+IGsgIT09IGtleSk7XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKChrOiBudW1iZXIgfCBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgY29sbGVjdGlvbi5pdGVtc1trXSA9IDxUPk9iamVjdC5hc3NpZ24oe30sIHRoaXMuaXRlbXNba10pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUl0ZW1zKGZpbHRlcjogKGl0ZW06IFQpID0+IGJvb2xlYW4sIGtleSA9ICdpZCcpIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gdGhpcy50b0FycmF5KCkuZmlsdGVyKGZpbHRlcikubWFwKHggPT4geFtrZXldKTtcclxuICAgICAgICB0aGlzLnJlbW92ZUtleXMoa2V5cyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlS2V5cyhrZXlzOiBhbnlbXSkge1xyXG4gICAgICAgIGtleXMuZm9yRWFjaCgoa2V5OiBudW1iZXIgfCBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVwbGFjZShpdGVtc0FycmF5OiBUW10pOiBDb2xsZWN0aW9uPFQ+IHtcclxuICAgICAgICBjb25zdCBpdGVtcyA9IENvbGxlY3Rpb24uQnVpbGREaWN0aW9uYXJ5RnJvbUFycmF5KHRoaXMuYnVpbGRJdGVtcyhpdGVtc0FycmF5KSk7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IENvbGxlY3Rpb248VD4oKSwgdGhpcywgeyBpdGVtcyB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXBsYWNlSXRlbXMoaXRlbXM6IFRbXSwgZmlsdGVyPzogKGl0ZW06IFQpID0+IGJvb2xlYW4pOiBDb2xsZWN0aW9uPFQ+IHtcclxuICAgICAgICBpZiAoZmlsdGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGYgPSAoeDogVCkgPT4gIWZpbHRlcih4KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZUl0ZW1zKFsuLi50aGlzLmZpbHRlckl0ZW1zKGYpLCAuLi5pdGVtc10pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgQ29sbGVjdGlvbjxUPigpLCB0aGlzLCB7IGl0ZW1zIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFZhbHVlKHZhbHVlOiBDb2xsZWN0aW9uPFQ+KTogQ29sbGVjdGlvbjxUPiB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IENvbGxlY3Rpb248VD4oKSwgdGhpcywgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSh2YWx1ZTogYW55IHwgYW55W10sIGN0b3I/OiBUeXBlQ29uc3RydWN0b3I8VD4sIGtleSA9ICdpZCcpOiBDb2xsZWN0aW9uPFQ+IHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlSXRlbXModmFsdWUsIGN0b3IsIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUl0ZW0odmFsdWUsIHZhbHVlW2tleV0sIGN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUl0ZW0oaXRlbTogYW55LCBrZXk6IG51bWJlciB8IHN0cmluZywgY3Rvcj86IFR5cGVDb25zdHJ1Y3RvcjxUPik6IENvbGxlY3Rpb248VD4ge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5jb3B5SXRlbXMoKTtcclxuICAgICAgICBjb25zdCB1cGRhdGVkSXRlbSA9IHRoaXMuYnVpbGRJdGVtKGl0ZW1zW2tleV0sIGl0ZW0sIGN0b3IpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkKE9iamVjdC5hc3NpZ24oaXRlbXMsIHsgW2tleV06IHVwZGF0ZWRJdGVtIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVJdGVtcyhpdGVtczogYW55W10sIGN0b3I/OiBUeXBlQ29uc3RydWN0b3I8VD4sIGtleTogc3RyaW5nID0gJ2lkJyk6IENvbGxlY3Rpb248VD4ge1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nSXRlbXMgPSB0aGlzLmNvcHlJdGVtcygpO1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRJdGVtcyA9IGl0ZW1zLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSXRlbSA9IGFjY1tpdGVtW2tleV1dO1xyXG4gICAgICAgICAgICBhY2NbaXRlbVtrZXldXSA9IHRoaXMuYnVpbGRJdGVtKGV4aXN0aW5nSXRlbSwgaXRlbSwgY3Rvcik7XHJcbiAgICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgfSwgZXhpc3RpbmdJdGVtcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGQodXBkYXRlZEl0ZW1zKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19