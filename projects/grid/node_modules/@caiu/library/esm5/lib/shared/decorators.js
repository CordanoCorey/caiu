/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { BaseEntity } from './base-entity';
export var /** @type {?} */ ActionCreator = function (actionType) {
    return function (target, propertySignature) {
        var /** @type {?} */ method = target[propertySignature];
        var /** @type {?} */ decoratedMethod = function () {
            var /** @type {?} */ $this = this;
            var /** @type {?} */ action = method.apply($this, arguments);
            action.actionType = actionType;
            return action;
        };
        target[propertySignature] = decoratedMethod;
        return target;
    };
};
export var /** @type {?} */ ActionType = function () {
    return function (target, propertySignature) {
        return target;
    };
};
/**
 * Class Decorator Factory
 * Decorates a class.
 */
export var /** @type {?} */ Class = function (metadata) {
    var /** @type {?} */ classDecorator = function (target) {
        return target;
    };
    return classDecorator;
};
export var /** @type {?} */ Command = function () {
    return function (target, propertySignature) {
        return target;
    };
};
export var /** @type {?} */ Dispatcher = function () {
    return function (target, propertySignature) {
        return target;
    };
};
/**
 * Decorates a class with properties from BaseEntity
 */
export var /** @type {?} */ Entity = function (metadata) {
    /**
     * @template TFunction
     * @param {?} target
     * @return {?}
     */
    function classDecorator(target) {
        var /** @type {?} */ ctor = function () {
            Object.assign(this, new BaseEntity(), { metadata: metadata || {} });
        };
        ctor.prototype = Object.create(target.prototype);
        ctor.prototype.constructor = target;
        return /** @type {?} */ (ctor);
    }
    ;
    return classDecorator;
};
export var /** @type {?} */ EventHandler = function () {
    return function (target, propertySignature) {
        return target;
    };
};
export var /** @type {?} */ LifecycleHook = function () {
    return function (target, propertySignature) {
        return target;
    };
};
/**
 * Method Decorator Factory
 * Decorates a method.
 */
export var /** @type {?} */ Method = function (metadata) {
    var /** @type {?} */ methodDecorator = function (target, propertySignature, descriptor) {
        return target;
    };
    return methodDecorator;
};
/**
 * Parameter Decorator Factory
 * Decorates a parameter.
 */
export var /** @type {?} */ Parameter = function (metadata) {
    var /** @type {?} */ parameterDecorator = function (target, propertySignature, parameterIndex) {
        return target;
    };
    return parameterDecorator;
};
/**
 * Property Decorator Factory
 * Decorates a Property.
 */
export var /** @type {?} */ Property = function (metadata) {
    var /** @type {?} */ propertyDecorator = function (target, propertySignature) {
        if (!target.metadata) {
            target.metadata = {};
        }
        target.metadata[propertySignature] = Object.assign(metadata, { propertyName: propertySignature });
        return target;
    };
    return propertyDecorator;
};
/**
 * Static Method Decorator Factory
 * Decorates a static method.
 */
export var /** @type {?} */ StaticMethod = function (metadata) {
    var /** @type {?} */ staticMethodDecorator = function (target, propertySignature) {
        return target;
    };
    return staticMethodDecorator;
};
/**
 *  Static Property Decorator Factory
 * Decorates a static property.
 */
export var /** @type {?} */ StaticProperty = function (metadata) {
    var /** @type {?} */ staticPropertyDecorator = function (target, propertySignature) {
        return target;
    };
    return staticPropertyDecorator;
};

//# sourceMappingURL=data:application/json;base64,