/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Event, UpdateValuePayload } from './events.models';
import { build, guid } from '../shared/utils';
var EventActions = /** @class */ (function () {
    function EventActions() {
    }
    /**
     * @param {?} onAction
     * @param {?=} handler
     * @param {?=} value
     * @return {?}
     */
    EventActions.addEvent = /**
     * @param {?} onAction
     * @param {?=} handler
     * @param {?=} value
     * @return {?}
     */
    function (onAction, handler, value) {
        if (value === void 0) { value = null; }
        var /** @type {?} */ e = build(Event, {
            onAction: onAction,
            handler: handler,
            value: value,
            key: guid()
        });
        return {
            type: EventActions.ADD_EVENT,
            payload: e,
            key: e.key
        };
    };
    /**
     * @param {?} key
     * @return {?}
     */
    EventActions.removeEvent = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return {
            type: EventActions.REMOVE_EVENT,
            payload: key
        };
    };
    /**
     * @param {?} action
     * @return {?}
     */
    EventActions.triggerEvent = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        return {
            type: EventActions.TRIGGER_EVENT,
            payload: action
        };
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    EventActions.updateValue = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        var /** @type {?} */ payload = build(UpdateValuePayload, {
            key: key,
            value: value
        });
        return {
            type: EventActions.UPDATE_VALUE,
            payload: payload
        };
    };
    EventActions.ADD_EVENT = '[Events] Add Event';
    EventActions.REMOVE_EVENT = '[Events] Remove Event';
    EventActions.TRIGGER_EVENT = '[Events] Trigger Event';
    EventActions.UPDATE_VALUE = '[Events] Update Value';
    return EventActions;
}());
export { EventActions };
function EventActions_tsickle_Closure_declarations() {
    /** @type {?} */
    EventActions.ADD_EVENT;
    /** @type {?} */
    EventActions.REMOVE_EVENT;
    /** @type {?} */
    EventActions.TRIGGER_EVENT;
    /** @type {?} */
    EventActions.UPDATE_VALUE;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmFjdGlvbnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2V2ZW50cy9ldmVudHMuYWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTVELE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7Ozs7SUFRbkMscUJBQVE7Ozs7OztJQUFmLFVBQWdCLFFBQTJCLEVBQUUsT0FBaUMsRUFBRSxLQUFZO1FBQVosc0JBQUEsRUFBQSxZQUFZO1FBQ3hGLHFCQUFNLENBQUMsR0FBVSxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQzFCLFFBQVEsVUFBQTtZQUNSLE9BQU8sU0FBQTtZQUNQLEtBQUssT0FBQTtZQUNMLEdBQUcsRUFBRSxJQUFJLEVBQUU7U0FDZCxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUM7WUFDSCxJQUFJLEVBQUUsWUFBWSxDQUFDLFNBQVM7WUFDNUIsT0FBTyxFQUFFLENBQUM7WUFDVixHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUc7U0FDYixDQUFDO0tBQ0w7Ozs7O0lBRU0sd0JBQVc7Ozs7SUFBbEIsVUFBbUIsR0FBVztRQUMxQixNQUFNLENBQUM7WUFDSCxJQUFJLEVBQUUsWUFBWSxDQUFDLFlBQVk7WUFDL0IsT0FBTyxFQUFFLEdBQUc7U0FDZixDQUFDO0tBQ0w7Ozs7O0lBRU0seUJBQVk7Ozs7SUFBbkIsVUFBb0IsTUFBYztRQUM5QixNQUFNLENBQUM7WUFDSCxJQUFJLEVBQUUsWUFBWSxDQUFDLGFBQWE7WUFDaEMsT0FBTyxFQUFFLE1BQU07U0FDbEIsQ0FBQztLQUNMOzs7Ozs7SUFFTSx3QkFBVzs7Ozs7SUFBbEIsVUFBbUIsR0FBVyxFQUFFLEtBQVU7UUFDdEMscUJBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsRUFDcEM7WUFDSSxHQUFHLEtBQUE7WUFDSCxLQUFLLE9BQUE7U0FDUixDQUNKLENBQUM7UUFDRixNQUFNLENBQUM7WUFDSCxJQUFJLEVBQUUsWUFBWSxDQUFDLFlBQVk7WUFDL0IsT0FBTyxFQUFFLE9BQU87U0FDbkIsQ0FBQztLQUNMOzZCQTVDa0Isb0JBQW9CO2dDQUNqQix1QkFBdUI7aUNBQ3RCLHdCQUF3QjtnQ0FDekIsdUJBQXVCO3VCQVJqRDs7U0FJYSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnQsIFVwZGF0ZVZhbHVlUGF5bG9hZCB9IGZyb20gJy4vZXZlbnRzLm1vZGVscyc7XHJcbmltcG9ydCB7IEFjdGlvbiwgQWN0aW9uV2l0aEtleSB9IGZyb20gJy4uL3N0b3JlL21vZGVscyc7XHJcbmltcG9ydCB7IGJ1aWxkLCBndWlkIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudEFjdGlvbnMge1xyXG4gICAgc3RhdGljIEFERF9FVkVOVCA9ICdbRXZlbnRzXSBBZGQgRXZlbnQnO1xyXG4gICAgc3RhdGljIFJFTU9WRV9FVkVOVCA9ICdbRXZlbnRzXSBSZW1vdmUgRXZlbnQnO1xyXG4gICAgc3RhdGljIFRSSUdHRVJfRVZFTlQgPSAnW0V2ZW50c10gVHJpZ2dlciBFdmVudCc7XHJcbiAgICBzdGF0aWMgVVBEQVRFX1ZBTFVFID0gJ1tFdmVudHNdIFVwZGF0ZSBWYWx1ZSc7XHJcblxyXG4gICAgc3RhdGljIGFkZEV2ZW50KG9uQWN0aW9uOiBzdHJpbmcgfCBzdHJpbmdbXSwgaGFuZGxlcj86IChhY3Rpb246IEFjdGlvbikgPT4gYW55LCB2YWx1ZSA9IG51bGwpOiBBY3Rpb25XaXRoS2V5IHtcclxuICAgICAgICBjb25zdCBlOiBFdmVudCA9IGJ1aWxkKEV2ZW50LCB7XHJcbiAgICAgICAgICAgIG9uQWN0aW9uLFxyXG4gICAgICAgICAgICBoYW5kbGVyLFxyXG4gICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAga2V5OiBndWlkKClcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiBFdmVudEFjdGlvbnMuQUREX0VWRU5ULFxyXG4gICAgICAgICAgICBwYXlsb2FkOiBlLFxyXG4gICAgICAgICAgICBrZXk6IGUua2V5XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVtb3ZlRXZlbnQoa2V5OiBzdHJpbmcpOiBBY3Rpb24ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHR5cGU6IEV2ZW50QWN0aW9ucy5SRU1PVkVfRVZFTlQsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IGtleVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRyaWdnZXJFdmVudChhY3Rpb246IEFjdGlvbik6IEFjdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogRXZlbnRBY3Rpb25zLlRSSUdHRVJfRVZFTlQsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IGFjdGlvblxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHVwZGF0ZVZhbHVlKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogQWN0aW9uIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gYnVpbGQoVXBkYXRlVmFsdWVQYXlsb2FkLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBrZXksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiBFdmVudEFjdGlvbnMuVVBEQVRFX1ZBTFVFLFxyXG4gICAgICAgICAgICBwYXlsb2FkOiBwYXlsb2FkXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19