/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Collection } from '../shared/collection';
import { build } from '../shared/utils';
var Event = /** @class */ (function () {
    function Event() {
        this.emittedCount = 0;
        this.key = '';
        this.onAction = '';
        this.value = null;
    }
    return Event;
}());
export { Event };
function Event_tsickle_Closure_declarations() {
    /** @type {?} */
    Event.prototype.emittedCount;
    /** @type {?} */
    Event.prototype.handler;
    /** @type {?} */
    Event.prototype.key;
    /** @type {?} */
    Event.prototype.onAction;
    /** @type {?} */
    Event.prototype.value;
}
var Events = /** @class */ (function (_super) {
    tslib_1.__extends(Events, _super);
    function Events() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Events.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.toArray().reduce(function (acc, event) {
                var /** @type {?} */ addValues = !event.onAction ?
                    [] : typeof event.onAction === 'string' ?
                    acc.indexOf(event.onAction) === -1 ? [event.onAction] : []
                    : event.onAction.filter(function (x) { return acc.indexOf(x) === -1; });
                return tslib_1.__spread(acc, addValues);
            }, []);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Events.prototype, "eventsByAction", {
        get: /**
         * @return {?}
         */
        function () {
            return this.toArray().reduce(function (acc, event) {
                if (typeof event.onAction === 'string') {
                    var /** @type {?} */ val = acc[event.onAction] || [];
                    acc[event.onAction] = tslib_1.__spread(val, [event]);
                }
                else {
                    event.onAction.forEach(function (actionType) {
                        var /** @type {?} */ val = acc[actionType] || [];
                        acc[actionType] = tslib_1.__spread(val, [event]);
                    });
                }
                return acc;
            }, {});
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} payload
     * @return {?}
     */
    Events.prototype.addEvent = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return build(Events, this.addItem(payload, payload.key));
    };
    /**
     * @param {?} actionType
     * @return {?}
     */
    Events.prototype.getActionEvents = /**
     * @param {?} actionType
     * @return {?}
     */
    function (actionType) {
        return this.eventsByAction[actionType];
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    Events.prototype.removeEvent = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return build(Events, this.removeItem(payload));
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    Events.prototype.replaceEvents = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        var /** @type {?} */ events = this.copyItems();
        payload.forEach(function (e) {
            events[e.key] = e;
        });
        return build(Events, this, { items: events });
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    Events.prototype.triggerEvent = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        var /** @type {?} */ events = this.getActionEvents(payload.type)
            .map(function (e) { return build(Event, e, { value: e.handler ? e.handler(payload) : payload }); });
        return this.replaceEvents(events);
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    Events.prototype.updateValue = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        var /** @type {?} */ event = build(Event, this.items[payload.key], { value: payload.value });
        return build(Events, this.updateItem(event, payload.key, Event));
    };
    return Events;
}(Collection));
export { Events };
var UpdateValuePayload = /** @class */ (function () {
    function UpdateValuePayload() {
    }
    return UpdateValuePayload;
}());
export { UpdateValuePayload };
function UpdateValuePayload_tsickle_Closure_declarations() {
    /** @type {?} */
    UpdateValuePayload.prototype.key;
    /** @type {?} */
    UpdateValuePayload.prototype.value;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLm1vZGVscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvZXZlbnRzL2V2ZW50cy5tb2RlbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXhDLElBQUE7OzRCQUNtQixDQUFDO21CQUVWLEVBQUU7d0JBQ3NCLEVBQUU7cUJBQ25CLElBQUk7O2dCQVZyQjtJQVdDLENBQUE7QUFORCxpQkFNQzs7Ozs7Ozs7Ozs7OztBQUVELElBQUE7SUFBNEIsa0NBQWlCOzs7O0lBRXpDLHNCQUFJLDJCQUFPOzs7O1FBQVg7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQVUsRUFBRSxLQUFZO2dCQUNsRCxxQkFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQy9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFDO29CQUNyQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQzFELENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQztnQkFDNUQsTUFBTSxrQkFBSyxHQUFHLEVBQUssU0FBUyxFQUFFO2FBQ2pDLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDVjs7O09B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QyxDQUFDO0tBQ3BFO2lCQXJFTDtFQWE0QixVQUFVLEVBMERyQyxDQUFBO0FBMURELGtCQTBEQztBQUVELElBQUE7Ozs2QkF6RUE7SUE0RUMsQ0FBQTtBQUhELDhCQUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi4vc3RvcmUvbW9kZWxzJztcclxuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4uL3NoYXJlZC9jb2xsZWN0aW9uJztcclxuaW1wb3J0IHsgRGljdGlvbmFyeSB9IGZyb20gJy4uL3NoYXJlZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBidWlsZCB9IGZyb20gJy4uL3NoYXJlZC91dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRXZlbnQge1xyXG4gICAgZW1pdHRlZENvdW50ID0gMDtcclxuICAgIGhhbmRsZXI6IChhY3Rpb246IEFjdGlvbikgPT4gYW55O1xyXG4gICAga2V5ID0gJyc7XHJcbiAgICBvbkFjdGlvbjogc3RyaW5nIHwgc3RyaW5nW10gPSAnJztcclxuICAgIHZhbHVlOiBhbnkgPSBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRXZlbnRzIGV4dGVuZHMgQ29sbGVjdGlvbjxFdmVudD4ge1xyXG5cclxuICAgIGdldCBhY3Rpb25zKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b0FycmF5KCkucmVkdWNlKChhY2M6IGFueVtdLCBldmVudDogRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYWRkVmFsdWVzID0gIWV2ZW50Lm9uQWN0aW9uID9cclxuICAgICAgICAgICAgICAgIFtdIDogdHlwZW9mIGV2ZW50Lm9uQWN0aW9uID09PSAnc3RyaW5nJyA/XHJcbiAgICAgICAgICAgICAgICAgICAgYWNjLmluZGV4T2YoZXZlbnQub25BY3Rpb24pID09PSAtMSA/IFtldmVudC5vbkFjdGlvbl0gOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIDogZXZlbnQub25BY3Rpb24uZmlsdGVyKHggPT4gYWNjLmluZGV4T2YoeCkgPT09IC0xKTtcclxuICAgICAgICAgICAgcmV0dXJuIFsuLi5hY2MsIC4uLmFkZFZhbHVlc107XHJcbiAgICAgICAgfSwgW10pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBldmVudHNCeUFjdGlvbigpOiBEaWN0aW9uYXJ5PEV2ZW50W10+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b0FycmF5KCkucmVkdWNlKChhY2M6IERpY3Rpb25hcnk8RXZlbnRbXT4sIGV2ZW50OiBFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50Lm9uQWN0aW9uID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsOiBFdmVudFtdID0gYWNjW2V2ZW50Lm9uQWN0aW9uXSB8fCBbXTtcclxuICAgICAgICAgICAgICAgIGFjY1tldmVudC5vbkFjdGlvbl0gPSBbLi4udmFsLCBldmVudF07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5vbkFjdGlvbi5mb3JFYWNoKGFjdGlvblR5cGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbDogRXZlbnRbXSA9IGFjY1thY3Rpb25UeXBlXSB8fCBbXTtcclxuICAgICAgICAgICAgICAgICAgICBhY2NbYWN0aW9uVHlwZV0gPSBbLi4udmFsLCBldmVudF07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgIH0sIHt9KTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRFdmVudChwYXlsb2FkOiBFdmVudCk6IEV2ZW50cyB7XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkKEV2ZW50cywgdGhpcy5hZGRJdGVtKHBheWxvYWQsIHBheWxvYWQua2V5KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWN0aW9uRXZlbnRzKGFjdGlvblR5cGU6IHN0cmluZyk6IEV2ZW50W10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50c0J5QWN0aW9uW2FjdGlvblR5cGVdO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUV2ZW50KHBheWxvYWQ6IHN0cmluZyk6IEV2ZW50cyB7XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkKEV2ZW50cywgdGhpcy5yZW1vdmVJdGVtKHBheWxvYWQpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXBsYWNlRXZlbnRzKHBheWxvYWQ6IEV2ZW50W10pOiBFdmVudHMge1xyXG4gICAgICAgIGNvbnN0IGV2ZW50cyA9IHRoaXMuY29weUl0ZW1zKCk7XHJcbiAgICAgICAgcGF5bG9hZC5mb3JFYWNoKGUgPT4ge1xyXG4gICAgICAgICAgICBldmVudHNbZS5rZXldID0gZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gYnVpbGQoRXZlbnRzLCB0aGlzLCB7IGl0ZW1zOiBldmVudHMgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJpZ2dlckV2ZW50KHBheWxvYWQ6IEFjdGlvbik6IEV2ZW50cyB7XHJcbiAgICAgICAgY29uc3QgZXZlbnRzID0gdGhpcy5nZXRBY3Rpb25FdmVudHMocGF5bG9hZC50eXBlKVxyXG4gICAgICAgICAgICAubWFwKGUgPT4gYnVpbGQoRXZlbnQsIGUsIHsgdmFsdWU6IGUuaGFuZGxlciA/IGUuaGFuZGxlcihwYXlsb2FkKSA6IHBheWxvYWQgfSkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2VFdmVudHMoZXZlbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVWYWx1ZShwYXlsb2FkOiBVcGRhdGVWYWx1ZVBheWxvYWQpOiBFdmVudHMge1xyXG4gICAgICAgIGNvbnN0IGV2ZW50ID0gYnVpbGQoRXZlbnQsIHRoaXMuaXRlbXNbcGF5bG9hZC5rZXldLCB7IHZhbHVlOiBwYXlsb2FkLnZhbHVlIH0pO1xyXG4gICAgICAgIHJldHVybiBidWlsZChFdmVudHMsIHRoaXMudXBkYXRlSXRlbShldmVudCwgcGF5bG9hZC5rZXksIEV2ZW50KSk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVXBkYXRlVmFsdWVQYXlsb2FkIHtcclxuICAgIGtleTogc3RyaW5nO1xyXG4gICAgdmFsdWU6IGFueTtcclxufVxyXG4iXX0=