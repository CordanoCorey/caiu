/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { EventActions } from './events.actions';
import { Events } from './events.models';
var EventEffects = /** @class */ (function () {
    function EventEffects(actions$, store) {
        var _this = this;
        this.actions$ = actions$;
        this.store = store;
        this.events = new Events();
        /**
         * Trigger event if action is a registered trigger.
         */
        this.onTriggerEvent = this.actions$.pipe(filter(function (action) { return _this.events.actions.indexOf(action.type) !== -1; }), map(this.trigger));
        this.store.select(function (s) { return s['events']; })
            .subscribe(function (events) {
            _this.events = events;
        });
    }
    /**
     * @param {?} action
     * @return {?}
     */
    EventEffects.prototype.trigger = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        return EventActions.triggerEvent(action);
    };
    EventEffects.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    EventEffects.ctorParameters = function () { return [
        { type: Actions },
        { type: Store }
    ]; };
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], EventEffects.prototype, "onTriggerEvent", void 0);
    return EventEffects;
}());
export { EventEffects };
function EventEffects_tsickle_Closure_declarations() {
    /** @type {?} */
    EventEffects.prototype.events;
    /**
     * Trigger event if action is a registered trigger.
     * @type {?}
     */
    EventEffects.prototype.onTriggerEvent;
    /** @type {?} */
    EventEffects.prototype.actions$;
    /** @type {?} */
    EventEffects.prototype.store;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmVmZmVjdHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2V2ZW50cy9ldmVudHMuZWZmZWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7SUFnQnJDLHNCQUNZLFVBQ0E7UUFGWixpQkFRQztRQVBXLGFBQVEsR0FBUixRQUFRO1FBQ1IsVUFBSyxHQUFMLEtBQUs7c0JBWkEsSUFBSSxNQUFNLEVBQUU7Ozs7OEJBS2tCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUM3RCxNQUFNLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxLQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUEvQyxDQUErQyxDQUFDLEVBQ2pFLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQ3BCO1FBTUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQVgsQ0FBVyxDQUFDO2FBQzlCLFNBQVMsQ0FBQyxVQUFBLE1BQU07WUFDYixLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztTQUN4QixDQUFDLENBQUM7S0FDVjs7Ozs7SUFFRCw4QkFBTzs7OztJQUFQLFVBQVEsTUFBYztRQUNsQixNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUM1Qzs7Z0JBekJKLFVBQVU7Ozs7Z0JBVEYsT0FBTztnQkFDUCxLQUFLOzs7UUFnQlQsTUFBTSxFQUFFOzBDQUFpQixVQUFVOzt1QkFsQnhDOztTQVdhLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFjdGlvbnMsIEVmZmVjdCB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IEV2ZW50QWN0aW9ucyB9IGZyb20gJy4vZXZlbnRzLmFjdGlvbnMnO1xyXG5pbXBvcnQgeyBFdmVudHMgfSBmcm9tICcuL2V2ZW50cy5tb2RlbHMnO1xyXG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuLi9zdG9yZS9tb2RlbHMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRXZlbnRFZmZlY3RzIHtcclxuXHJcbiAgICBldmVudHM6IEV2ZW50cyA9IG5ldyBFdmVudHMoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXIgZXZlbnQgaWYgYWN0aW9uIGlzIGEgcmVnaXN0ZXJlZCB0cmlnZ2VyLlxyXG4gICAgICovXHJcbiAgICBARWZmZWN0KCkgb25UcmlnZ2VyRXZlbnQ6IE9ic2VydmFibGU8QWN0aW9uPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgICAgICBmaWx0ZXIoYWN0aW9uID0+IHRoaXMuZXZlbnRzLmFjdGlvbnMuaW5kZXhPZihhY3Rpb24udHlwZSkgIT09IC0xKSxcclxuICAgICAgICBtYXAodGhpcy50cmlnZ2VyKVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zLFxyXG4gICAgICAgIHByaXZhdGUgc3RvcmU6IFN0b3JlPGFueT5cclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuc3RvcmUuc2VsZWN0KHMgPT4gc1snZXZlbnRzJ10pXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoZXZlbnRzID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzID0gZXZlbnRzO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0cmlnZ2VyKGFjdGlvbjogQWN0aW9uKTogQWN0aW9uIHtcclxuICAgICAgICByZXR1cm4gRXZlbnRBY3Rpb25zLnRyaWdnZXJFdmVudChhY3Rpb24pO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=