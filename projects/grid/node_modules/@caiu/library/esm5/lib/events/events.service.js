/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { of } from 'rxjs';
import { combineLatest, skip, take } from 'rxjs/operators';
import { EventActions } from './events.actions';
import { eventValueSelector } from './events.selectors';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
var EventsService = /** @class */ (function () {
    function EventsService(store) {
        this.store = store;
        this.eventIndex = 0;
        this.events = [];
    }
    Object.defineProperty(EventsService.prototype, "eventKey", {
        get: /**
         * @return {?}
         */
        function () {
            this.eventIndex++;
            return "event-" + this.eventIndex;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} actionType
     * @param {?=} handler
     * @return {?}
     */
    EventsService.prototype.addEvent = /**
     * @param {?} actionType
     * @param {?=} handler
     * @return {?}
     */
    function (actionType, handler) {
        var /** @type {?} */ f = handler ? handler : function (action) { return true; };
        var /** @type {?} */ actionWithKey = EventActions.addEvent(actionType, f, false);
        this.store.dispatch(actionWithKey);
        return actionWithKey.key;
    };
    /**
     * @param {?} action
     * @param {?=} handler
     * @return {?}
     */
    EventsService.prototype.dispatch = /**
     * @param {?} action
     * @param {?=} handler
     * @return {?}
     */
    function (action, handler) {
        return this.dispatchHttpAction(action, handler);
    };
    /**
     * @param {?} action
     * @param {?=} handler
     * @return {?}
     */
    EventsService.prototype.dispatchHttpAction = /**
     * @param {?} action
     * @param {?=} handler
     * @return {?}
     */
    function (action, handler) {
        var /** @type {?} */ successAction = action.payload.onSuccess;
        var /** @type {?} */ errorAction = typeof (action.payload.onError) === 'string' ? action.payload.onError : null;
        var /** @type {?} */ success = this.takeOne(successAction, handler);
        var /** @type {?} */ obs = errorAction ? success.pipe(combineLatest(this.takeOne(errorAction, handler), function (x, y) { return true; })) : success;
        this.store.dispatch(action);
        return obs;
    };
    /**
     * @param {?} eventKey
     * @return {?}
     */
    EventsService.prototype.removeEvent = /**
     * @param {?} eventKey
     * @return {?}
     */
    function (eventKey) {
        this.store.dispatch(EventActions.removeEvent(eventKey));
    };
    /**
     * @param {?} action
     * @param {?} handler
     * @return {?}
     */
    EventsService.prototype.subscribe = /**
     * @param {?} action
     * @param {?} handler
     * @return {?}
     */
    function (action, handler) {
        return this.take(1, action).subscribe(handler);
    };
    /**
     * @param {?=} n
     * @param {?=} actionType
     * @param {?=} handler
     * @return {?}
     */
    EventsService.prototype.take = /**
     * @param {?=} n
     * @param {?=} actionType
     * @param {?=} handler
     * @return {?}
     */
    function (n, actionType, handler) {
        if (n === void 0) { n = 1; }
        var /** @type {?} */ key = this.addEvent(actionType, handler);
        return eventValueSelector(this.store, key).pipe(skip(1), take(n));
    };
    /**
     * @param {?=} n
     * @param {?=} actions
     * @param {?=} handler
     * @return {?}
     */
    EventsService.prototype.takeFrom = /**
     * @param {?=} n
     * @param {?=} actions
     * @param {?=} handler
     * @return {?}
     */
    function (n, actions, handler) {
        var _this = this;
        if (n === void 0) { n = 1; }
        var /** @type {?} */ keys = actions.map(function (action) { return _this.addEvent(action, handler); });
        return keys.map(function (key) { return eventValueSelector(_this.store, key); })
            .reduce(function (acc, obs) {
            return acc.pipe(combineLatest(obs, function (x, y) { return true; }));
        }, of(false)).pipe(skip(1), take(n));
    };
    /**
     * @param {?} actionType
     * @param {?=} handler
     * @return {?}
     */
    EventsService.prototype.takeOne = /**
     * @param {?} actionType
     * @param {?=} handler
     * @return {?}
     */
    function (actionType, handler) {
        return this.take(1, actionType, handler);
    };
    EventsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    EventsService.ctorParameters = function () { return [
        { type: Store }
    ]; };
    /** @nocollapse */ EventsService.ngInjectableDef = i0.defineInjectable({ factory: function EventsService_Factory() { return new EventsService(i0.inject(i1.Store)); }, token: EventsService, providedIn: "root" });
    return EventsService;
}());
export { EventsService };
function EventsService_tsickle_Closure_declarations() {
    /** @type {?} */
    EventsService.prototype.eventIndex;
    /** @type {?} */
    EventsService.prototype.events;
    /** @type {?} */
    EventsService.prototype.store;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2V2ZW50cy9ldmVudHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBNEIsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7OztJQVl0RCx1QkFBbUIsS0FBaUI7UUFBakIsVUFBSyxHQUFMLEtBQUssQ0FBWTswQkFIdkIsQ0FBQztzQkFDSSxFQUFFO0tBR25CO0lBRUQsc0JBQUksbUNBQVE7Ozs7UUFBWjtZQUNFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNsQixNQUFNLENBQUMsV0FBUyxJQUFJLENBQUMsVUFBWSxDQUFDO1NBQ25DOzs7T0FBQTs7Ozs7O0lBRUQsZ0NBQVE7Ozs7O0lBQVIsVUFBUyxVQUFrQixFQUFFLE9BQWlDO1FBQzVELHFCQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBQyxNQUFjLElBQUssT0FBQSxJQUFJLEVBQUosQ0FBSSxDQUFDO1FBQ3ZELHFCQUFNLGFBQWEsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLGFB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QUFDLENBQUMsQ0FBQyxFQUNQLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDUixDQUFDO0tBQ0w7Ozs7OztJQUVELCtCQUFPOzs7OztJQUFQLFVBQVEsVUFBa0IsRUFBRSxPQUFpQztRQUMzRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzFDOztnQkFyRUYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFYUSxLQUFLOzs7d0JBRGQ7O1NBYWEsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgc2tpcCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IEV2ZW50QWN0aW9ucyB9IGZyb20gJy4vZXZlbnRzLmFjdGlvbnMnO1xyXG5pbXBvcnQgeyBldmVudFZhbHVlU2VsZWN0b3IgfSBmcm9tICcuL2V2ZW50cy5zZWxlY3RvcnMnO1xyXG5pbXBvcnQgeyBIdHRwQWN0aW9uIH0gZnJvbSAnLi4vaHR0cC9odHRwLm1vZGVscyc7XHJcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4uL3N0b3JlL21vZGVscyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFdmVudHNTZXJ2aWNlIHtcclxuXHJcbiAgZXZlbnRJbmRleCA9IDA7XHJcbiAgZXZlbnRzOiBFdmVudFtdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzdG9yZTogU3RvcmU8YW55Pikge1xyXG4gIH1cclxuXHJcbiAgZ2V0IGV2ZW50S2V5KCk6IHN0cmluZyB7XHJcbiAgICB0aGlzLmV2ZW50SW5kZXgrKztcclxuICAgIHJldHVybiBgZXZlbnQtJHt0aGlzLmV2ZW50SW5kZXh9YDtcclxuICB9XHJcblxyXG4gIGFkZEV2ZW50KGFjdGlvblR5cGU6IHN0cmluZywgaGFuZGxlcj86IChhY3Rpb246IEFjdGlvbikgPT4gYW55KTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGYgPSBoYW5kbGVyID8gaGFuZGxlciA6IChhY3Rpb246IEFjdGlvbikgPT4gdHJ1ZTtcclxuICAgIGNvbnN0IGFjdGlvbldpdGhLZXkgPSBFdmVudEFjdGlvbnMuYWRkRXZlbnQoYWN0aW9uVHlwZSwgZiwgZmFsc2UpO1xyXG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaChhY3Rpb25XaXRoS2V5KTtcclxuICAgIHJldHVybiBhY3Rpb25XaXRoS2V5LmtleTtcclxuICB9XHJcblxyXG4gIGRpc3BhdGNoKGFjdGlvbjogSHR0cEFjdGlvbiwgaGFuZGxlcj86IChhY3Rpb246IEFjdGlvbikgPT4gYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoSHR0cEFjdGlvbihhY3Rpb24sIGhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgZGlzcGF0Y2hIdHRwQWN0aW9uKGFjdGlvbjogSHR0cEFjdGlvbiwgaGFuZGxlcj86IChhY3Rpb246IEFjdGlvbikgPT4gYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHN1Y2Nlc3NBY3Rpb24gPSBhY3Rpb24ucGF5bG9hZC5vblN1Y2Nlc3M7XHJcbiAgICBjb25zdCBlcnJvckFjdGlvbiA9IHR5cGVvZiAoYWN0aW9uLnBheWxvYWQub25FcnJvcikgPT09ICdzdHJpbmcnID8gYWN0aW9uLnBheWxvYWQub25FcnJvciA6IG51bGw7XHJcbiAgICBjb25zdCBzdWNjZXNzID0gdGhpcy50YWtlT25lKHN1Y2Nlc3NBY3Rpb24sIGhhbmRsZXIpO1xyXG4gICAgY29uc3Qgb2JzID0gZXJyb3JBY3Rpb24gPyBzdWNjZXNzLnBpcGUoXHJcbiAgICAgIGNvbWJpbmVMYXRlc3QodGhpcy50YWtlT25lKGVycm9yQWN0aW9uLCBoYW5kbGVyKSwgKHgsIHkpID0+IHRydWUpXHJcbiAgICApIDogc3VjY2VzcztcclxuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goYWN0aW9uKTtcclxuICAgIHJldHVybiBvYnM7XHJcbiAgfVxyXG5cclxuICByZW1vdmVFdmVudChldmVudEtleTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKEV2ZW50QWN0aW9ucy5yZW1vdmVFdmVudChldmVudEtleSkpO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlKGFjdGlvbjogc3RyaW5nLCBoYW5kbGVyOiAoZTogYW55KSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uIHtcclxuICAgIHJldHVybiB0aGlzLnRha2UoMSwgYWN0aW9uKS5zdWJzY3JpYmUoaGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICB0YWtlKG4gPSAxLCBhY3Rpb25UeXBlOiBzdHJpbmcsIGhhbmRsZXI/OiAoYWN0aW9uOiBBY3Rpb24pID0+IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBrZXkgPSB0aGlzLmFkZEV2ZW50KGFjdGlvblR5cGUsIGhhbmRsZXIpO1xyXG4gICAgcmV0dXJuIGV2ZW50VmFsdWVTZWxlY3Rvcih0aGlzLnN0b3JlLCBrZXkpLnBpcGUoXHJcbiAgICAgIHNraXAoMSksXHJcbiAgICAgIHRha2UobilcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICB0YWtlRnJvbShuID0gMSwgYWN0aW9uczogc3RyaW5nW10sIGhhbmRsZXI/OiAoYWN0aW9uOiBBY3Rpb24pID0+IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBrZXlzID0gYWN0aW9ucy5tYXAoYWN0aW9uID0+IHRoaXMuYWRkRXZlbnQoYWN0aW9uLCBoYW5kbGVyKSk7XHJcbiAgICByZXR1cm4ga2V5cy5tYXAoa2V5ID0+IGV2ZW50VmFsdWVTZWxlY3Rvcih0aGlzLnN0b3JlLCBrZXkpKVxyXG4gICAgICAucmVkdWNlKChhY2MsIG9icykgPT4ge1xyXG4gICAgICAgIHJldHVybiBhY2MucGlwZShcclxuICAgICAgICAgIGNvbWJpbmVMYXRlc3Qob2JzLCAoeCwgeSkgPT4gdHJ1ZSlcclxuICAgICAgICApO1xyXG4gICAgICB9LCBvZihmYWxzZSkpLnBpcGUoXHJcbiAgICAgICAgc2tpcCgxKSxcclxuICAgICAgICB0YWtlKG4pXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICB0YWtlT25lKGFjdGlvblR5cGU6IHN0cmluZywgaGFuZGxlcj86IChhY3Rpb246IEFjdGlvbikgPT4gYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLnRha2UoMSwgYWN0aW9uVHlwZSwgaGFuZGxlcik7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=