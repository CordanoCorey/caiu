/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Effect, Actions, ofType } from '@ngrx/effects';
import { Observable, of } from 'rxjs';
import { map, switchMap, catchError } from 'rxjs/operators';
import { RouterActions } from './actions';
import { RouterService } from './router.service';
var RouterEffects = /** @class */ (function () {
    function RouterEffects(actions$, router) {
        var _this = this;
        this.actions$ = actions$;
        this.router = router;
        /**
         * All imperative navigation should be performed using this effects
         * so that the state is aware of the navigation.
         */
        this.navigate = this.actions$.pipe(ofType(RouterActions.NAVIGATE), switchMap(function (action) { return _this.navigate$(action.payload); }));
    }
    /**
     * @param {?} r
     * @return {?}
     */
    RouterEffects.prototype.navigate$ = /**
     * @param {?} r
     * @return {?}
     */
    function (r) {
        var /** @type {?} */ nav$ = typeof (r) === 'string' ? this.router.navigateByUrl(r) : this.router.navigate(r);
        return nav$.pipe(map(function () { return RouterActions.navigateSuccess(); }), catchError(function (e) {
            return of(RouterActions.navigateError());
        }));
    };
    RouterEffects.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    RouterEffects.ctorParameters = function () { return [
        { type: Actions },
        { type: RouterService }
    ]; };
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], RouterEffects.prototype, "navigate", void 0);
    return RouterEffects;
}());
export { RouterEffects };
function RouterEffects_tsickle_Closure_declarations() {
    /** @type {?} */
    RouterEffects.prototype.actionTypes;
    /**
     * All imperative navigation should be performed using this effects
     * so that the state is aware of the navigation.
     * @type {?}
     */
    RouterEffects.prototype.navigate;
    /** @type {?} */
    RouterEffects.prototype.actions$;
    /** @type {?} */
    RouterEffects.prototype.router;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLmVmZmVjdHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL3JvdXRlci9yb3V0ZXIuZWZmZWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTVELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDMUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztJQWdCN0MsdUJBQ1ksVUFDQTtRQUZaLGlCQUdLO1FBRk8sYUFBUSxHQUFSLFFBQVE7UUFDUixXQUFNLEdBQU4sTUFBTTs7Ozs7d0JBUHVCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUN2RCxNQUFNLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUM5QixTQUFTLENBQUMsVUFBQyxNQUFjLElBQUssT0FBQSxLQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBOUIsQ0FBOEIsQ0FBQyxDQUNoRTtLQUtJOzs7OztJQUVMLGlDQUFTOzs7O0lBQVQsVUFBVSxDQUFpQjtRQUN2QixxQkFBTSxJQUFJLEdBQXdCLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuSCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDWixHQUFHLENBQUMsY0FBTSxPQUFBLGFBQWEsQ0FBQyxlQUFlLEVBQUUsRUFBL0IsQ0FBK0IsQ0FBQyxFQUMxQyxVQUFVLENBQUMsVUFBQyxDQUFDO1lBQ1QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztTQUM1QyxDQUFDLENBQ0wsQ0FBQztLQUNMOztnQkExQkosVUFBVTs7OztnQkFSTSxPQUFPO2dCQUtmLGFBQWE7OztRQVdqQixNQUFNLEVBQUU7MENBQVcsVUFBVTs7d0JBakJsQzs7U0FVYSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFZmZlY3QsIEFjdGlvbnMsIG9mVHlwZSB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IFJvdXRlckFjdGlvbnMgfSBmcm9tICcuL2FjdGlvbnMnO1xyXG5pbXBvcnQgeyBSb3V0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9yb3V0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4uL3N0b3JlL21vZGVscyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBSb3V0ZXJFZmZlY3RzIHtcclxuICAgIGFjdGlvblR5cGVzOiBzdHJpbmdbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsbCBpbXBlcmF0aXZlIG5hdmlnYXRpb24gc2hvdWxkIGJlIHBlcmZvcm1lZCB1c2luZyB0aGlzIGVmZmVjdHNcclxuICAgICAqIHNvIHRoYXQgdGhlIHN0YXRlIGlzIGF3YXJlIG9mIHRoZSBuYXZpZ2F0aW9uLlxyXG4gICAgICovXHJcbiAgICBARWZmZWN0KCkgbmF2aWdhdGU6IE9ic2VydmFibGU8QWN0aW9uPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgICAgICBvZlR5cGUoUm91dGVyQWN0aW9ucy5OQVZJR0FURSksXHJcbiAgICAgICAgc3dpdGNoTWFwKChhY3Rpb246IEFjdGlvbikgPT4gdGhpcy5uYXZpZ2F0ZSQoYWN0aW9uLnBheWxvYWQpKVxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zLFxyXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXJTZXJ2aWNlXHJcbiAgICApIHsgfVxyXG5cclxuICAgIG5hdmlnYXRlJChyOiBzdHJpbmcgfCBhbnlbXSk6IE9ic2VydmFibGU8QWN0aW9uPiB7XHJcbiAgICAgICAgY29uc3QgbmF2JDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHR5cGVvZiAocikgPT09ICdzdHJpbmcnID8gdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybChyKSA6IHRoaXMucm91dGVyLm5hdmlnYXRlKHIpO1xyXG4gICAgICAgIHJldHVybiBuYXYkLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCgoKSA9PiBSb3V0ZXJBY3Rpb25zLm5hdmlnYXRlU3VjY2VzcygpKSxcclxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mKFJvdXRlckFjdGlvbnMubmF2aWdhdGVFcnJvcigpKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==