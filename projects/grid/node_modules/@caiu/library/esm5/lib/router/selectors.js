/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { of, combineLatest } from 'rxjs';
import { map, distinctUntilChanged } from 'rxjs/operators';
import { Breadcrumbs } from './models';
import { QueryModel } from '../shared/models';
import { toArray, toInt } from '../shared/utils';
/**
 * @param {?} store
 * @return {?}
 */
export function routeSelector(store) {
    return store.select('route');
}
/**
 * @param {?} store
 * @return {?}
 */
export function breadcrumbsSelector(store) {
    return routeSelector(store).pipe(map(function (r) {
        var /** @type {?} */ outlets = r.activatedOutlets;
        return new Breadcrumbs(Object.keys(outlets).map(function (key) { return outlets[key]; }));
    }));
}
/**
 * @param {?} store
 * @return {?}
 */
export function routeNameSelector(store) {
    return routeSelector(store).pipe(map(function (r) { return r.routeName; }), distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
export function routeParamsSelector(store) {
    return routeSelector(store).pipe(map(function (r) { return r.params; }), distinctUntilChanged());
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
export function lazyRouteParamsSelector(store, key) {
    return routeParamsSelector(store).pipe(map(function (params) { return params[key]; }), distinctUntilChanged());
}
/**
 * @param {?} store
 * @param {?} key
 * @param {?=} defaultValue
 * @return {?}
 */
export function routeParamSelector(store, key, defaultValue) {
    if (defaultValue === void 0) { defaultValue = null; }
    return combineLatest(of(defaultValue), lazyRouteParamsSelector(store, key), function (x, y) {
        return y || x;
    });
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
export function routeParamArraySelector(store, key) {
    return routeParamSelector(store, key, []).pipe(map(function (x) { return toArray(x); }));
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
export function routeParamIdSelector(store, key) {
    return routeParamIntSelector(store, key);
}
/**
 * @param {?} store
 * @param {?} key
 * @return {?}
 */
export function routeParamIntSelector(store, key) {
    return routeParamSelector(store, key, 0).pipe(map(function (x) { return toInt(x); }));
}
/**
 * @param {?} store
 * @return {?}
 */
export function urlSelector(store) {
    return routeSelector(store).pipe(map(function (r) { return r.url; }), distinctUntilChanged());
}
/**
 * @param {?} store
 * @return {?}
 */
export function querySelector(store) {
    var /** @type {?} */ skip$ = routeParamIntSelector(store, 'skip');
    var /** @type {?} */ take$ = routeParamIntSelector(store, 'take');
    var /** @type {?} */ term$ = routeParamSelector(store, 'term');
    return combineLatest(skip$, take$, term$, function (skip, take, term) { return (Object.assign(new QueryModel(), {
        skip: skip,
        take: take,
        term: term
    })); });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNhaXUvbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9yb3V0ZXIvc2VsZWN0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQWMsRUFBRSxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyRCxPQUFPLEVBQUUsR0FBRyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0QsT0FBTyxFQUFlLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7QUFFakQsTUFBTSx3QkFBd0IsS0FBaUI7SUFDM0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDaEM7Ozs7O0FBRUQsTUFBTSw4QkFBOEIsS0FBaUI7SUFDakQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQzVCLEdBQUcsQ0FBQyxVQUFBLENBQUM7UUFDRCxxQkFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixDQUFDO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBWixDQUFZLENBQUMsQ0FBQyxDQUFDO0tBQ3pFLENBQUMsQ0FDTCxDQUFDO0NBQ0w7Ozs7O0FBRUQsTUFBTSw0QkFBNEIsS0FBaUI7SUFDL0MsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQzVCLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxTQUFTLEVBQVgs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b3J0IHsgT2JzZXJ2YWJsZSwgb2YsIGNvbWJpbmVMYXRlc3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IFJvdXRlclN0YXRlLCBCcmVhZGNydW1icyB9IGZyb20gJy4vbW9kZWxzJztcclxuaW1wb3J0IHsgUXVlcnlNb2RlbCB9IGZyb20gJy4uL3NoYXJlZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyB0b0FycmF5LCB0b0ludCB9IGZyb20gJy4uL3NoYXJlZC91dGlscyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm91dGVTZWxlY3RvcihzdG9yZTogU3RvcmU8YW55Pik6IE9ic2VydmFibGU8Um91dGVyU3RhdGU+IHtcclxuICAgIHJldHVybiBzdG9yZS5zZWxlY3QoJ3JvdXRlJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBicmVhZGNydW1ic1NlbGVjdG9yKHN0b3JlOiBTdG9yZTxhbnk+KTogT2JzZXJ2YWJsZTxCcmVhZGNydW1icz4ge1xyXG4gICAgcmV0dXJuIHJvdXRlU2VsZWN0b3Ioc3RvcmUpLnBpcGUoXHJcbiAgICAgICAgbWFwKHIgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvdXRsZXRzID0gci5hY3RpdmF0ZWRPdXRsZXRzO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEJyZWFkY3J1bWJzKE9iamVjdC5rZXlzKG91dGxldHMpLm1hcChrZXkgPT4gb3V0bGV0c1trZXldKSk7XHJcbiAgICAgICAgfSlcclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3V0ZU5hbWVTZWxlY3RvcihzdG9yZTogU3RvcmU8YW55Pik6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gcm91dGVTZWxlY3RvcihzdG9yZSkucGlwZShcclxuICAgICAgICBtYXAociA9PiByLnJvdXRlTmFtZSksXHJcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdXRlUGFyYW1zU2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHJvdXRlU2VsZWN0b3Ioc3RvcmUpLnBpcGUoXHJcbiAgICAgICAgbWFwKHIgPT4gci5wYXJhbXMpLFxyXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsYXp5Um91dGVQYXJhbXNTZWxlY3RvcihzdG9yZTogU3RvcmU8YW55Piwga2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHJvdXRlUGFyYW1zU2VsZWN0b3Ioc3RvcmUpLnBpcGUoXHJcbiAgICAgICAgbWFwKHBhcmFtcyA9PiBwYXJhbXNba2V5XSksXHJcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdXRlUGFyYW1TZWxlY3RvcihzdG9yZTogU3RvcmU8YW55Piwga2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZSA9IG51bGwpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIGNvbWJpbmVMYXRlc3Qob2YoZGVmYXVsdFZhbHVlKSwgbGF6eVJvdXRlUGFyYW1zU2VsZWN0b3Ioc3RvcmUsIGtleSksICh4LCB5KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHkgfHwgeDtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm91dGVQYXJhbUFycmF5U2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4sIGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnlbXT4ge1xyXG4gICAgcmV0dXJuIHJvdXRlUGFyYW1TZWxlY3RvcihzdG9yZSwga2V5LCBbXSkucGlwZShcclxuICAgICAgICBtYXAoeCA9PiB0b0FycmF5KHgpKVxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdXRlUGFyYW1JZFNlbGVjdG9yKHN0b3JlOiBTdG9yZTxhbnk+LCBrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8bnVtYmVyPiB7XHJcbiAgICByZXR1cm4gcm91dGVQYXJhbUludFNlbGVjdG9yKHN0b3JlLCBrZXkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm91dGVQYXJhbUludFNlbGVjdG9yKHN0b3JlOiBTdG9yZTxhbnk+LCBrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8bnVtYmVyPiB7XHJcbiAgICByZXR1cm4gcm91dGVQYXJhbVNlbGVjdG9yKHN0b3JlLCBrZXksIDApLnBpcGUoXHJcbiAgICAgICAgbWFwKHggPT4gdG9JbnQoeCkpXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXJsU2VsZWN0b3Ioc3RvcmU6IFN0b3JlPGFueT4pOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuIHJvdXRlU2VsZWN0b3Ioc3RvcmUpLnBpcGUoXHJcbiAgICAgICAgbWFwKHIgPT4gci51cmwpLFxyXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBxdWVyeVNlbGVjdG9yKHN0b3JlOiBTdG9yZTxhbnk+KTogT2JzZXJ2YWJsZTxRdWVyeU1vZGVsPGFueT4+IHtcclxuICAgIGNvbnN0IHNraXAkID0gcm91dGVQYXJhbUludFNlbGVjdG9yKHN0b3JlLCAnc2tpcCcpO1xyXG4gICAgY29uc3QgdGFrZSQgPSByb3V0ZVBhcmFtSW50U2VsZWN0b3Ioc3RvcmUsICd0YWtlJyk7XHJcbiAgICBjb25zdCB0ZXJtJCA9IHJvdXRlUGFyYW1TZWxlY3RvcihzdG9yZSwgJ3Rlcm0nKTtcclxuICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KHNraXAkLCB0YWtlJCwgdGVybSQsXHJcbiAgICAgICAgKHNraXAsIHRha2UsIHRlcm0pID0+IChcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihuZXcgUXVlcnlNb2RlbDxhbnk+KCksXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2tpcCxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlcm1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkpO1xyXG59XHJcbiJdfQ==