/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { build, assignProps } from '../shared/utils';
var ActivatedRoutePayload = /** @class */ (function () {
    function ActivatedRoutePayload() {
        this.routeName = '';
    }
    return ActivatedRoutePayload;
}());
export { ActivatedRoutePayload };
function ActivatedRoutePayload_tsickle_Closure_declarations() {
    /** @type {?} */
    ActivatedRoutePayload.prototype.routeName;
    /** @type {?} */
    ActivatedRoutePayload.prototype.parent;
}
var Breadcrumbs = /** @class */ (function () {
    function Breadcrumbs(segments) {
        this.segments = segments;
    }
    return Breadcrumbs;
}());
export { Breadcrumbs };
function Breadcrumbs_tsickle_Closure_declarations() {
    /** @type {?} */
    Breadcrumbs.prototype.segments;
}
var CustomRoute = /** @class */ (function () {
    function CustomRoute(props) {
        this.children = [];
        this.lazyChildren = [];
        this._path = '';
        assignProps(this, props);
    }
    Object.defineProperty(CustomRoute.prototype, "path", {
        get: /**
         * @return {?}
         */
        function () {
            return this._path;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._path = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomRoute.prototype, "route", {
        get: /**
         * @return {?}
         */
        function () {
            return {
                component: this.component,
                children: tslib_1.__spread(this.children, this.lazyChildren)
            };
        },
        enumerable: true,
        configurable: true
    });
    return CustomRoute;
}());
export { CustomRoute };
function CustomRoute_tsickle_Closure_declarations() {
    /** @type {?} */
    CustomRoute.prototype.children;
    /** @type {?} */
    CustomRoute.prototype.lazyChildren;
    /** @type {?} */
    CustomRoute.prototype.component;
    /** @type {?} */
    CustomRoute.prototype._path;
}
var LazyRoute = /** @class */ (function (_super) {
    tslib_1.__extends(LazyRoute, _super);
    function LazyRoute(props) {
        var _this = _super.call(this, props) || this;
        _this.path = '';
        return _this;
    }
    return LazyRoute;
}(CustomRoute));
export { LazyRoute };
/**
 * @record
 */
export function RouterEvent() { }
function RouterEvent_tsickle_Closure_declarations() {
    /** @type {?} */
    RouterEvent.prototype.eventType;
    /** @type {?} */
    RouterEvent.prototype.event;
    /** @type {?|undefined} */
    RouterEvent.prototype.navigationCancel;
    /** @type {?|undefined} */
    RouterEvent.prototype.navigationEnd;
    /** @type {?|undefined} */
    RouterEvent.prototype.navigationError;
    /** @type {?|undefined} */
    RouterEvent.prototype.navigationStart;
    /** @type {?|undefined} */
    RouterEvent.prototype.routesRecognized;
}
/** @enum {number} */
var NavigationStatus = {
    Default: 0,
    NavigationStart: 1,
    NavigationCancel: 2,
    NavigationError: 3,
    RoutesRecognized: 4,
    NavigationEnd: 5,
};
export { NavigationStatus };
NavigationStatus[NavigationStatus.Default] = "Default";
NavigationStatus[NavigationStatus.NavigationStart] = "NavigationStart";
NavigationStatus[NavigationStatus.NavigationCancel] = "NavigationCancel";
NavigationStatus[NavigationStatus.NavigationError] = "NavigationError";
NavigationStatus[NavigationStatus.RoutesRecognized] = "RoutesRecognized";
NavigationStatus[NavigationStatus.NavigationEnd] = "NavigationEnd";
var RouteSegment = /** @class */ (function () {
    function RouteSegment() {
        /**
         * The URL fragment shared by all the routes
         */
        this.fragment = '';
        /**
         * The order of the segment in the route
         */
        this.order = 0;
        /**
         * The outlet name of the route
         */
        this.outlet = '';
        /**
         * The label to pass to the anchor tag
         */
        this.routeLabel = '';
        /**
         * The unique identifier for the route segment
         */
        this.routeName = '';
    }
    Object.defineProperty(RouteSegment.prototype, "routerLink", {
        /** The link to pass to the anchor tag */
        get: /**
         * The link to pass to the anchor tag
         * @return {?}
         */
        function () {
            return this.pathFromRoot
                .map(function (r) { return r.url; })
                .reduce(function (acc, x) {
                var /** @type {?} */ segment = RouterState.BuildUrlSegment(x);
                return segment && segment !== '/' ? "" + acc + segment : acc;
            }, '');
        },
        enumerable: true,
        configurable: true
    });
    return RouteSegment;
}());
export { RouteSegment };
function RouteSegment_tsickle_Closure_declarations() {
    /**
     * The static and resolved data of this route
     * @type {?}
     */
    RouteSegment.prototype.data;
    /**
     * The URL fragment shared by all the routes
     * @type {?}
     */
    RouteSegment.prototype.fragment;
    /**
     * The order of the segment in the route
     * @type {?}
     */
    RouteSegment.prototype.order;
    /**
     * The outlet name of the route
     * @type {?}
     */
    RouteSegment.prototype.outlet;
    /**
     * The path from the root of the router state tree to this route
     * @type {?}
     */
    RouteSegment.prototype.pathFromRoot;
    /**
     * The matrix parameters scoped to this route
     * @type {?}
     */
    RouteSegment.prototype.params;
    /**
     * The label to pass to the anchor tag
     * @type {?}
     */
    RouteSegment.prototype.routeLabel;
    /**
     * The unique identifier for the route segment
     * @type {?}
     */
    RouteSegment.prototype.routeName;
    /**
     * The URL segments matched by this route
     * @type {?}
     */
    RouteSegment.prototype.url;
}
var RouterState = /** @class */ (function () {
    function RouterState() {
        this.id = 0;
        this.error = undefined;
        this.events = [];
        this.history = [];
        this.navigationStatus = NavigationStatus.Default;
        this.reason = '';
        this.state = undefined;
        this.url = '';
        this.urlAfterRedirects = '';
    }
    /**
     * @param {?} props
     * @return {?}
     */
    RouterState.BuildRoute = /**
     * @param {?} props
     * @return {?}
     */
    function (props) {
        var /** @type {?} */ r = new CustomRoute(props);
        return /** @type {?} */ (r);
    };
    /**
     * @param {?} props
     * @return {?}
     */
    RouterState.BuildLazyRoute = /**
     * @param {?} props
     * @return {?}
     */
    function (props) {
        var /** @type {?} */ r = new LazyRoute(props);
        return /** @type {?} */ (r);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    RouterState.BuildUrlSegment = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return url.reduce(function (acc, segment) { return segment.path && segment.path !== '/' ? acc + "/" + segment.path : acc; }, '');
    };
    /**
     * @param {?} root
     * @param {?=} index
     * @return {?}
     */
    RouterState.GetActivatedOutlets = /**
     * @param {?} root
     * @param {?=} index
     * @return {?}
     */
    function (root, index) {
        if (index === void 0) { index = 0; }
        return root ? root.children.reduce(function (acc, r, currentIndex) {
            var /** @type {?} */ i = index + currentIndex;
            var /** @type {?} */ routeName = RouterState.GetRouteName(r);
            var /** @type {?} */ existing = build(RouteSegment, acc[routeName]);
            var /** @type {?} */ outlet = RouterState.GetRouteSegment(r, existing, i);
            return routeName ? Object.assign(acc, RouterState.GetActivatedOutlets(r, i + 1), (_a = {}, _a[routeName] = outlet, _a))
                : Object.assign(acc, RouterState.GetActivatedOutlets(r, i + 1));
            var _a;
        }, {}) : {};
    };
    /**
     * @param {?} root
     * @return {?}
     */
    RouterState.GetActivatedRoute = /**
     * @param {?} root
     * @return {?}
     */
    function (root) {
        return root.children.reduce(function (acc, r) {
            return RouterState.GetActivatedRoute(r);
        }, root);
    };
    /**
     * @param {?} route
     * @return {?}
     */
    RouterState.GetAllParams = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return route ? route.children.reduce(function (acc, r) {
            return Object.assign({}, acc, RouterState.GetAllParams(r));
        }, Object.assign({}, route.params, route.queryParams)) : {};
    };
    /**
     * @param {?} route
     * @return {?}
     */
    RouterState.GetRouteData = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return route.data;
    };
    /**
     * @param {?} route
     * @param {?=} existing
     * @param {?=} index
     * @return {?}
     */
    RouterState.GetRouteSegment = /**
     * @param {?} route
     * @param {?=} existing
     * @param {?=} index
     * @return {?}
     */
    function (route, existing, index) {
        if (existing === void 0) { existing = new RouteSegment(); }
        if (index === void 0) { index = 0; }
        var /** @type {?} */ routeName = RouterState.GetRouteName(route);
        return build(RouteSegment, existing, {
            data: route.data,
            fragment: route.fragment,
            order: index,
            outlet: route.outlet,
            pathFromRoot: route.pathFromRoot,
            params: route.params,
            routeName: routeName,
            routeLabel: RouterState.GetRouteData(route)['routeLabel'] || existing.routeLabel
        });
    };
    /**
     * @param {?} route
     * @return {?}
     */
    RouterState.GetRouteName = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return route ? RouterState.GetRouteData(route)['routeName'] : '';
    };
    Object.defineProperty(RouterState.prototype, "activatedOutlets", {
        get: /**
         * @return {?}
         */
        function () {
            return RouterState.GetActivatedOutlets(this.rootRoute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterState.prototype, "lastEvent", {
        get: /**
         * @return {?}
         */
        function () {
            return this.events[-1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterState.prototype, "params", {
        get: /**
         * @return {?}
         */
        function () {
            return RouterState.GetAllParams(this.rootRoute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterState.prototype, "routeName", {
        get: /**
         * @return {?}
         */
        function () {
            return RouterState.GetRouteName(this.activatedRoute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterState.prototype, "visited", {
        get: /**
         * @return {?}
         */
        function () {
            return this.history.map(function (x) { return x.link; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @param {?} eventType
     * @return {?}
     */
    RouterState.prototype.addRouterEvent = /**
     * @param {?} e
     * @param {?} eventType
     * @return {?}
     */
    function (e, eventType) {
        var /** @type {?} */ newEvent = /** @type {?} */ ({ eventType: eventType, event: e });
        return tslib_1.__spread(this.events, [
            newEvent
        ]);
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    RouterState.prototype.navigationCancel = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return build(RouterState, this, {
            navigationStatus: NavigationStatus.NavigationCancel,
            events: this.addRouterEvent(payload, NavigationStatus.NavigationCancel),
            id: payload.id,
            url: payload.url,
            reason: payload.reason
        });
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    RouterState.prototype.navigationEnd = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        var /** @type {?} */ history = tslib_1.__spread([payload.toString()], this.history);
        return build(RouterState, this, {
            history: history,
            navigationStatus: NavigationStatus.NavigationEnd,
            events: this.addRouterEvent(payload, NavigationStatus.NavigationEnd),
            id: payload.id,
            url: payload.url,
            urlAfterRedirects: payload.urlAfterRedirects
        });
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    RouterState.prototype.navigationError = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return build(RouterState, this, {
            navigationStatus: NavigationStatus.NavigationError,
            events: this.addRouterEvent(payload, NavigationStatus.NavigationError),
            id: payload.id,
            url: payload.url,
            error: payload.error
        });
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    RouterState.prototype.navigationStart = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return build(RouterState, this, {
            navigationStatus: NavigationStatus.NavigationStart,
            events: this.addRouterEvent(payload, NavigationStatus.NavigationStart),
            id: payload.id,
            url: payload.url
        });
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    RouterState.prototype.routesRecognized = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        var /** @type {?} */ rootRoute = payload.state.root;
        var /** @type {?} */ activatedRoute = RouterState.GetActivatedRoute(rootRoute);
        return build(RouterState, this, {
            activatedRoute: activatedRoute,
            rootRoute: rootRoute,
            navigationStatus: NavigationStatus.RoutesRecognized,
            events: this.addRouterEvent(payload, NavigationStatus.RoutesRecognized),
            id: payload.id,
            state: payload.state,
            url: payload.url,
            urlAfterRedirects: payload.urlAfterRedirects
        });
    };
    return RouterState;
}());
export { RouterState };
function RouterState_tsickle_Closure_declarations() {
    /** @type {?} */
    RouterState.prototype.id;
    /** @type {?} */
    RouterState.prototype.activatedRoute;
    /** @type {?} */
    RouterState.prototype.error;
    /** @type {?} */
    RouterState.prototype.events;
    /** @type {?} */
    RouterState.prototype.history;
    /** @type {?} */
    RouterState.prototype.navigationStatus;
    /** @type {?} */
    RouterState.prototype.reason;
    /** @type {?} */
    RouterState.prototype.rootRoute;
    /** @type {?} */
    RouterState.prototype.state;
    /** @type {?} */
    RouterState.prototype.url;
    /** @type {?} */
    RouterState.prototype.urlAfterRedirects;
}
var VisitedRoute = /** @class */ (function () {
    function VisitedRoute() {
        this.label = '';
        this.link = '';
        this.name = '';
        this.visitTime = new Date();
    }
    return VisitedRoute;
}());
export { VisitedRoute };
function VisitedRoute_tsickle_Closure_declarations() {
    /** @type {?} */
    VisitedRoute.prototype.label;
    /** @type {?} */
    VisitedRoute.prototype.link;
    /** @type {?} */
    VisitedRoute.prototype.name;
    /** @type {?} */
    VisitedRoute.prototype.visitTime;
}

//# sourceMappingURL=data:application/json;base64,