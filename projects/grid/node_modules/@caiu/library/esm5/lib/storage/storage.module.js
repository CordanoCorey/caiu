/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { Store } from '@ngrx/store';
import { StorageEffects } from './storage.effects';
import { StorageService } from './storage.service';
export var /** @type {?} */ STORE_KEY = new InjectionToken('Local/Session Storage Key');
/**
 * @param {?} store
 * @param {?} storeKey
 * @return {?}
 */
export function storageServiceFactory(store, storeKey) {
    return new StorageService(store, storeKey);
}
/**
 * @param {?} storeKey
 * @return {?}
 */
export function provideStorage(storeKey) {
    return [
        StorageEffects,
        { provide: StorageService, useFactory: storageServiceFactory, deps: [Store, STORE_KEY] },
        { provide: STORE_KEY, useValue: storeKey },
    ];
}
var StorageModule = /** @class */ (function () {
    function StorageModule() {
    }
    /**
     * Provides StorageModule with storage service and effects.
     * @param storeKey - The name of the key containing the store in storage.
     */
    /**
     * Provides StorageModule with storage service and effects.
     * @param {?} storeKey - The name of the key containing the store in storage.
     * @return {?}
     */
    StorageModule.forRoot = /**
     * Provides StorageModule with storage service and effects.
     * @param {?} storeKey - The name of the key containing the store in storage.
     * @return {?}
     */
    function (storeKey) {
        return {
            ngModule: StorageModule,
            providers: provideStorage(storeKey)
        };
    };
    StorageModule.decorators = [
        { type: NgModule },
    ];
    return StorageModule;
}());
export { StorageModule };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL3N0b3JhZ2Uvc3RvcmFnZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXBDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbkQsTUFBTSxDQUFDLHFCQUFNLFNBQVMsR0FBRyxJQUFJLGNBQWMsQ0FBUywyQkFBMkIsQ0FBQyxDQUFDOzs7Ozs7QUFFakYsTUFBTSxnQ0FBZ0MsS0FBaUIsRUFBRSxRQUFnQjtJQUN2RSxNQUFNLENBQUMsSUFBSSxjQUFjLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQzVDOzs7OztBQUVELE1BQU0seUJBQXlCLFFBQWdCO0lBQzdDLE1BQU0sQ0FBQztRQUNMLGNBQWM7UUFDZCxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsRUFBRTtRQUN4RixFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRTtLQUMzQyxDQUFDO0NBQ0g7Ozs7SUFLQzs7O09BR0c7Ozs7OztJQUNJLHFCQUFPOzs7OztJQUFkLFVBQWUsUUFBZ0I7UUFDN0IsTUFBTSxDQUFDO1lBQ0wsUUFBUSxFQUFFLGFBQWE7WUFDdkIsU0FBUyxFQUFFLGNBQWMsQ0FBQyxRQUFRLENBQUM7U0FDcEMsQ0FBQztLQUNIOztnQkFaRixRQUFROzt3QkFwQlQ7O1NBcUJhLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcblxyXG5pbXBvcnQgeyBTdG9yYWdlRWZmZWN0cyB9IGZyb20gJy4vc3RvcmFnZS5lZmZlY3RzJztcclxuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JhZ2Uuc2VydmljZSc7XHJcblxyXG5leHBvcnQgY29uc3QgU1RPUkVfS0VZID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ0xvY2FsL1Nlc3Npb24gU3RvcmFnZSBLZXknKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdG9yYWdlU2VydmljZUZhY3Rvcnkoc3RvcmU6IFN0b3JlPGFueT4sIHN0b3JlS2V5OiBzdHJpbmcpOiBTdG9yYWdlU2VydmljZSB7XHJcbiAgcmV0dXJuIG5ldyBTdG9yYWdlU2VydmljZShzdG9yZSwgc3RvcmVLZXkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVN0b3JhZ2Uoc3RvcmVLZXk6IHN0cmluZyk6IGFueVtdIHtcclxuICByZXR1cm4gW1xyXG4gICAgU3RvcmFnZUVmZmVjdHMsXHJcbiAgICB7IHByb3ZpZGU6IFN0b3JhZ2VTZXJ2aWNlLCB1c2VGYWN0b3J5OiBzdG9yYWdlU2VydmljZUZhY3RvcnksIGRlcHM6IFtTdG9yZSwgU1RPUkVfS0VZXSB9LFxyXG4gICAgeyBwcm92aWRlOiBTVE9SRV9LRVksIHVzZVZhbHVlOiBzdG9yZUtleSB9LFxyXG4gIF07XHJcbn1cclxuXHJcbkBOZ01vZHVsZSgpXHJcbmV4cG9ydCBjbGFzcyBTdG9yYWdlTW9kdWxlIHtcclxuXHJcbiAgLyoqXHJcbiAgICogUHJvdmlkZXMgU3RvcmFnZU1vZHVsZSB3aXRoIHN0b3JhZ2Ugc2VydmljZSBhbmQgZWZmZWN0cy5cclxuICAgKiBAcGFyYW0gc3RvcmVLZXkgLSBUaGUgbmFtZSBvZiB0aGUga2V5IGNvbnRhaW5pbmcgdGhlIHN0b3JlIGluIHN0b3JhZ2UuXHJcbiAgICovXHJcbiAgc3RhdGljIGZvclJvb3Qoc3RvcmVLZXk6IHN0cmluZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IFN0b3JhZ2VNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogcHJvdmlkZVN0b3JhZ2Uoc3RvcmVLZXkpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn1cclxuIl19