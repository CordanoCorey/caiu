/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Effect, ofType, Actions } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { map, filter, withLatestFrom } from 'rxjs/operators';
import { StorageActions } from './storage.actions';
import { StorageService } from './storage.service';
import { toPayload } from '../shared/utils';
var StorageEffects = /** @class */ (function () {
    function StorageEffects(actions$, service, state$) {
        var _this = this;
        this.actions$ = actions$;
        this.service = service;
        this.state$ = state$;
        /**
         * Listens for dispatched actions, updates local storage in response.
         */
        this.onSyncLocalStorage = this.actions$.pipe(filter(function (action) { return _this.service.inLocalStorage(action.type); }), map(function (action) { return ({
            type: StorageActions.UPDATE_LOCAL_STORAGE,
            payload: action
        }); }));
        /**
         * Listens for dispatched actions, updates session storage in response.
         */
        this.onSyncSessionStorage = this.actions$.pipe(filter(function (action) { return _this.service.inSessionStorage(action.type); }), map(function (action) { return ({
            type: StorageActions.UPDATE_SESSION_STORAGE,
            payload: action
        }); }));
        /**
         * Stores state to local storage after each action.
         */
        this.onStoreLocal = this.actions$.pipe(ofType(StorageActions.UPDATE_LOCAL_STORAGE), map(toPayload), withLatestFrom(this.state$, function (action, state) {
            _this.service.storeLocal(state, action);
        }));
        /**
         * Stores state to local storage after each action.
         */
        this.onStoreSession = this.actions$.pipe(ofType(StorageActions.UPDATE_SESSION_STORAGE), map(toPayload), withLatestFrom(this.state$, function (action, state) {
            _this.service.storeSession(state, action);
        }));
    }
    StorageEffects.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    StorageEffects.ctorParameters = function () { return [
        { type: Actions },
        { type: StorageService },
        { type: Store }
    ]; };
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], StorageEffects.prototype, "onSyncLocalStorage", void 0);
    tslib_1.__decorate([
        Effect(),
        tslib_1.__metadata("design:type", Observable)
    ], StorageEffects.prototype, "onSyncSessionStorage", void 0);
    tslib_1.__decorate([
        Effect({ dispatch: false }),
        tslib_1.__metadata("design:type", Observable)
    ], StorageEffects.prototype, "onStoreLocal", void 0);
    tslib_1.__decorate([
        Effect({ dispatch: false }),
        tslib_1.__metadata("design:type", Observable)
    ], StorageEffects.prototype, "onStoreSession", void 0);
    return StorageEffects;
}());
export { StorageEffects };
function StorageEffects_tsickle_Closure_declarations() {
    /** @type {?} */
    StorageEffects.prototype.actionTypes;
    /**
     * Listens for dispatched actions, updates local storage in response.
     * @type {?}
     */
    StorageEffects.prototype.onSyncLocalStorage;
    /**
     * Listens for dispatched actions, updates session storage in response.
     * @type {?}
     */
    StorageEffects.prototype.onSyncSessionStorage;
    /**
     * Stores state to local storage after each action.
     * @type {?}
     */
    StorageEffects.prototype.onStoreLocal;
    /**
     * Stores state to local storage after each action.
     * @type {?}
     */
    StorageEffects.prototype.onStoreSession;
    /** @type {?} */
    StorageEffects.prototype.actions$;
    /** @type {?} */
    StorageEffects.prototype.service;
    /** @type {?} */
    StorageEffects.prototype.state$;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5lZmZlY3RzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNhaXUvbGlicmFyeS8iLCJzb3VyY2VzIjpbImxpYi9zdG9yYWdlL3N0b3JhZ2UuZWZmZWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7SUFvRHhDLHdCQUNZLFVBQ0EsU0FDQTtRQUhaLGlCQUlLO1FBSE8sYUFBUSxHQUFSLFFBQVE7UUFDUixZQUFPLEdBQVAsT0FBTztRQUNQLFdBQU0sR0FBTixNQUFNOzs7O2tDQTVDaUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2pFLE1BQU0sQ0FBQyxVQUFDLE1BQWMsSUFBSyxPQUFBLEtBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBeEMsQ0FBd0MsQ0FBQyxFQUNwRSxHQUFHLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxDQUFDO1lBQ1gsSUFBSSxFQUFFLGNBQWMsQ0FBQyxvQkFBb0I7WUFDekMsT0FBTyxFQUFFLE1BQU07U0FDbEIsQ0FBQyxFQUhZLENBR1osQ0FBQyxDQUNOOzs7O29DQUtvRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDbkUsTUFBTSxDQUFDLFVBQUMsTUFBYyxJQUFLLE9BQUEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQTFDLENBQTBDLENBQUMsRUFDdEUsR0FBRyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsQ0FBQztZQUNYLElBQUksRUFBRSxjQUFjLENBQUMsc0JBQXNCO1lBQzNDLE9BQU8sRUFBRSxNQUFNO1NBQ2xCLENBQUMsRUFIWSxDQUdaLENBQUMsQ0FDTjs7Ozs0QkFLNkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQzVFLE1BQU0sQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsRUFDM0MsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUNkLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQUMsTUFBYyxFQUFFLEtBQVU7WUFDbkQsS0FBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQzFDLENBQUMsQ0FDTDs7Ozs4QkFLK0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQzlFLE1BQU0sQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsRUFDN0MsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUNkLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQUMsTUFBYyxFQUFFLEtBQVU7WUFDbkQsS0FBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQzVDLENBQUMsQ0FDTDtLQU1JOztnQkFyRFIsVUFBVTs7OztnQkFYYyxPQUFPO2dCQU12QixjQUFjO2dCQUxkLEtBQUs7OztRQWtCVCxNQUFNLEVBQUU7MENBQXFCLFVBQVU7OztRQVd2QyxNQUFNLEVBQUU7MENBQXVCLFVBQVU7OztRQVd6QyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7MENBQWUsVUFBVTs7O1FBV3BELE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQzswQ0FBaUIsVUFBVTs7eUJBckQzRDs7U0FhYSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFZmZlY3QsIG9mVHlwZSwgQWN0aW9ucyB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIGZpbHRlciwgd2l0aExhdGVzdEZyb20gfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBTdG9yYWdlQWN0aW9ucyB9IGZyb20gJy4vc3RvcmFnZS5hY3Rpb25zJztcclxuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4uL3N0b3JlL21vZGVscyc7XHJcbmltcG9ydCB7IHRvUGF5bG9hZCB9IGZyb20gJy4uL3NoYXJlZC91dGlscyc7XHJcblxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU3RvcmFnZUVmZmVjdHMge1xyXG5cclxuICAgIGFjdGlvblR5cGVzOiBzdHJpbmdbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExpc3RlbnMgZm9yIGRpc3BhdGNoZWQgYWN0aW9ucywgdXBkYXRlcyBsb2NhbCBzdG9yYWdlIGluIHJlc3BvbnNlLlxyXG4gICAgICovXHJcbiAgICBARWZmZWN0KCkgb25TeW5jTG9jYWxTdG9yYWdlOiBPYnNlcnZhYmxlPEFjdGlvbj4gPSB0aGlzLmFjdGlvbnMkLnBpcGUoXHJcbiAgICAgICAgZmlsdGVyKChhY3Rpb246IEFjdGlvbikgPT4gdGhpcy5zZXJ2aWNlLmluTG9jYWxTdG9yYWdlKGFjdGlvbi50eXBlKSksXHJcbiAgICAgICAgbWFwKGFjdGlvbiA9PiAoe1xyXG4gICAgICAgICAgICB0eXBlOiBTdG9yYWdlQWN0aW9ucy5VUERBVEVfTE9DQUxfU1RPUkFHRSxcclxuICAgICAgICAgICAgcGF5bG9hZDogYWN0aW9uXHJcbiAgICAgICAgfSkpXHJcbiAgICApO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTGlzdGVucyBmb3IgZGlzcGF0Y2hlZCBhY3Rpb25zLCB1cGRhdGVzIHNlc3Npb24gc3RvcmFnZSBpbiByZXNwb25zZS5cclxuICAgICAqL1xyXG4gICAgQEVmZmVjdCgpIG9uU3luY1Nlc3Npb25TdG9yYWdlOiBPYnNlcnZhYmxlPEFjdGlvbj4gPSB0aGlzLmFjdGlvbnMkLnBpcGUoXHJcbiAgICAgICAgZmlsdGVyKChhY3Rpb246IEFjdGlvbikgPT4gdGhpcy5zZXJ2aWNlLmluU2Vzc2lvblN0b3JhZ2UoYWN0aW9uLnR5cGUpKSxcclxuICAgICAgICBtYXAoYWN0aW9uID0+ICh7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0b3JhZ2VBY3Rpb25zLlVQREFURV9TRVNTSU9OX1NUT1JBR0UsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IGFjdGlvblxyXG4gICAgICAgIH0pKVxyXG4gICAgKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN0b3JlcyBzdGF0ZSB0byBsb2NhbCBzdG9yYWdlIGFmdGVyIGVhY2ggYWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBARWZmZWN0KHsgZGlzcGF0Y2g6IGZhbHNlIH0pIG9uU3RvcmVMb2NhbDogT2JzZXJ2YWJsZTx2b2lkPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgICAgICBvZlR5cGUoU3RvcmFnZUFjdGlvbnMuVVBEQVRFX0xPQ0FMX1NUT1JBR0UpLFxyXG4gICAgICAgIG1hcCh0b1BheWxvYWQpLFxyXG4gICAgICAgIHdpdGhMYXRlc3RGcm9tKHRoaXMuc3RhdGUkLCAoYWN0aW9uOiBBY3Rpb24sIHN0YXRlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLnN0b3JlTG9jYWwoc3RhdGUsIGFjdGlvbik7XHJcbiAgICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZXMgc3RhdGUgdG8gbG9jYWwgc3RvcmFnZSBhZnRlciBlYWNoIGFjdGlvbi5cclxuICAgICAqL1xyXG4gICAgQEVmZmVjdCh7IGRpc3BhdGNoOiBmYWxzZSB9KSBvblN0b3JlU2Vzc2lvbjogT2JzZXJ2YWJsZTx2b2lkPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcclxuICAgICAgICBvZlR5cGUoU3RvcmFnZUFjdGlvbnMuVVBEQVRFX1NFU1NJT05fU1RPUkFHRSksXHJcbiAgICAgICAgbWFwKHRvUGF5bG9hZCksXHJcbiAgICAgICAgd2l0aExhdGVzdEZyb20odGhpcy5zdGF0ZSQsIChhY3Rpb246IEFjdGlvbiwgc3RhdGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNlcnZpY2Uuc3RvcmVTZXNzaW9uKHN0YXRlLCBhY3Rpb24pO1xyXG4gICAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgYWN0aW9ucyQ6IEFjdGlvbnMsXHJcbiAgICAgICAgcHJpdmF0ZSBzZXJ2aWNlOiBTdG9yYWdlU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHN0YXRlJDogU3RvcmU8YW55PlxyXG4gICAgKSB7IH1cclxuXHJcbn1cclxuIl19