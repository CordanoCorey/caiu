/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpService } from './http.service';
import { HttpGetPayload, HttpPostPayload, HttpPutPayload, HttpDeletePayload } from './http.models';
import { Command } from '../shared/decorators';
import * as i0 from "@angular/core";
import * as i1 from "./http.service";
/**
 * @template T
 */
var HttpCommands = /** @class */ (function () {
    function HttpCommands(http) {
        this.http = http;
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    HttpCommands.prototype.delete$ = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return this.http.delete(payload.path, payload.headers, payload.options);
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    HttpCommands.prototype.get$ = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return this.http.get(payload.path, payload.headers, payload.options);
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    HttpCommands.prototype.post$ = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return this.http.post(payload.path, payload.model, payload.headers, payload.options);
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    HttpCommands.prototype.postFormUrlEncoded$ = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return this.http.postFormUrlEncoded(payload.path, payload.model, payload.headers, payload.options);
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    HttpCommands.prototype.put$ = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return this.http.put(payload.path, payload.model, payload.headers, payload.options);
    };
    HttpCommands.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    HttpCommands.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    /** @nocollapse */ HttpCommands.ngInjectableDef = i0.defineInjectable({ factory: function HttpCommands_Factory() { return new HttpCommands(i0.inject(i1.HttpService)); }, token: HttpCommands, providedIn: "root" });
    tslib_1.__decorate([
        Command(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [HttpDeletePayload]),
        tslib_1.__metadata("design:returntype", Observable)
    ], HttpCommands.prototype, "delete$", null);
    tslib_1.__decorate([
        Command(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [HttpGetPayload]),
        tslib_1.__metadata("design:returntype", Observable)
    ], HttpCommands.prototype, "get$", null);
    tslib_1.__decorate([
        Command(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [HttpPostPayload]),
        tslib_1.__metadata("design:returntype", Observable)
    ], HttpCommands.prototype, "post$", null);
    tslib_1.__decorate([
        Command(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [HttpPostPayload]),
        tslib_1.__metadata("design:returntype", Observable)
    ], HttpCommands.prototype, "postFormUrlEncoded$", null);
    tslib_1.__decorate([
        Command(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [HttpPutPayload]),
        tslib_1.__metadata("design:returntype", Observable)
    ], HttpCommands.prototype, "put$", null);
    return HttpCommands;
}());
export { HttpCommands };
function HttpCommands_tsickle_Closure_declarations() {
    /** @type {?} */
    HttpCommands.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5jb21tYW5kcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjYWl1L2xpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvaHR0cC9odHRwLmNvbW1hbmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRWxDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7Ozs7O0lBTzdDLHNCQUFvQixJQUFpQjtRQUFqQixTQUFJLEdBQUosSUFBSSxDQUFhO0tBQ3BDOzs7OztJQUdELDhCQUFPOzs7O2NBQUMsT0FBNkI7UUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDekU7Ozs7O0lBR0QsMkJBQUk7Ozs7Y0FBQyxPQUEwQjtRQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN0RTs7Ozs7SUFHRCw0QkFBSzs7OztjQUFDLE9BQTJCO1FBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDdEY7Ozs7O0lBR0QsMENBQW1COzs7O2NBQUMsT0FBMkI7UUFDN0MsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3BHOzs7OztJQUdELDJCQUFJOzs7O2NBQUMsT0FBMEI7UUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNyRjs7Z0JBL0JGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBTlEsV0FBVzs7OztRQVlqQixPQUFPLEVBQUU7O2lEQUNPLGlCQUFpQjtnREFBTSxVQUFVOytDQUVqRDs7UUFFQSxPQUFPLEVBQUU7O2lEQUNJLGNBQWM7Z0RBQU0sVUFBVTs0Q0FFM0M7O1FBRUEsT0FBTyxFQUFFOztpREFDSyxlQUFlO2dEQUFNLFVBQVU7NkNBRTdDOztRQUVBLE9BQU8sRUFBRTs7aURBQ21CLGVBQWU7Z0RBQU0sVUFBVTsyREFFM0Q7O1FBRUEsT0FBTyxFQUFFOztpREFDSSxjQUFjO2dEQUFNLFVBQVU7NENBRTNDO3VCQXRDSDs7U0FVYSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJy4vaHR0cC5zZXJ2aWNlJztcbmltcG9ydCB7IEh0dHBHZXRQYXlsb2FkLCBIdHRwUG9zdFBheWxvYWQsIEh0dHBQdXRQYXlsb2FkLCBIdHRwRGVsZXRlUGF5bG9hZCB9IGZyb20gJy4vaHR0cC5tb2RlbHMnO1xuaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gJy4uL3NoYXJlZC9kZWNvcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSHR0cENvbW1hbmRzPFQ+IHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBTZXJ2aWNlKSB7XG4gIH1cblxuICBAQ29tbWFuZCgpXG4gIGRlbGV0ZSQocGF5bG9hZDogSHR0cERlbGV0ZVBheWxvYWQ8VD4pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKHBheWxvYWQucGF0aCwgcGF5bG9hZC5oZWFkZXJzLCBwYXlsb2FkLm9wdGlvbnMpO1xuICB9XG5cbiAgQENvbW1hbmQoKVxuICBnZXQkKHBheWxvYWQ6IEh0dHBHZXRQYXlsb2FkPFQ+KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChwYXlsb2FkLnBhdGgsIHBheWxvYWQuaGVhZGVycywgcGF5bG9hZC5vcHRpb25zKTtcbiAgfVxuXG4gIEBDb21tYW5kKClcbiAgcG9zdCQocGF5bG9hZDogSHR0cFBvc3RQYXlsb2FkPFQ+KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QocGF5bG9hZC5wYXRoLCBwYXlsb2FkLm1vZGVsLCBwYXlsb2FkLmhlYWRlcnMsIHBheWxvYWQub3B0aW9ucyk7XG4gIH1cblxuICBAQ29tbWFuZCgpXG4gIHBvc3RGb3JtVXJsRW5jb2RlZCQocGF5bG9hZDogSHR0cFBvc3RQYXlsb2FkPFQ+KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3RGb3JtVXJsRW5jb2RlZChwYXlsb2FkLnBhdGgsIHBheWxvYWQubW9kZWwsIHBheWxvYWQuaGVhZGVycywgcGF5bG9hZC5vcHRpb25zKTtcbiAgfVxuXG4gIEBDb21tYW5kKClcbiAgcHV0JChwYXlsb2FkOiBIdHRwUHV0UGF5bG9hZDxUPik6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQocGF5bG9hZC5wYXRoLCBwYXlsb2FkLm1vZGVsLCBwYXlsb2FkLmhlYWRlcnMsIHBheWxvYWQub3B0aW9ucyk7XG4gIH1cblxufVxuIl19