/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, of, throwError } from 'rxjs';
import { catchError, debounceTime, distinctUntilChanged, finalize, map } from 'rxjs/operators';
import { HttpActions } from './http.actions';
import { HttpOptions } from './http.models';
import { QueryModel } from '../shared/models';
import { serialize } from '../shared/utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "rxjs/internal/Observable";
var HttpService = /** @class */ (function () {
    function HttpService(http, baseUrl$, authToken$) {
        var _this = this;
        this.http = http;
        this.baseUrl$ = baseUrl$;
        this.authToken$ = authToken$;
        this._authToken = '';
        this._baseUrl = '';
        this.headers = {};
        this.logEvents = true;
        this.useDefaultHeaders = true;
        this.authTokenChanges = this.authToken$.subscribe(function (x) {
            _this.authToken = x;
        });
        this.baseUrlChanges = this.baseUrl$.subscribe(function (x) {
            _this.baseUrl = x;
        });
    }
    Object.defineProperty(HttpService.prototype, "authToken", {
        get: /**
         * @return {?}
         */
        function () {
            return this._authToken;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._authToken = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpService.prototype, "baseUrl", {
        get: /**
         * @return {?}
         */
        function () {
            return this._baseUrl;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._baseUrl = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpService.prototype, "defaultHeaders", {
        get: /**
         * @return {?}
         */
        function () {
            var /** @type {?} */ headers = new HttpHeaders();
            headers = headers.append('Content-type', 'application/json');
            if (this.authToken) {
                headers = headers.append('Authorization', 'Bearer ' + this.authToken);
            }
            return headers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpService.prototype, "requestHeaders", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            var /** @type {?} */ headers = this.useDefaultHeaders ? this.defaultHeaders : new HttpHeaders();
            Object.keys(this.headers).forEach(function (key) {
                headers = headers.append(key, _this.headers[key]);
            });
            return headers;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} headers
     * @return {?}
     */
    HttpService.prototype.appendHeaders = /**
     * @param {?=} headers
     * @return {?}
     */
    function (headers) {
        var _this = this;
        if (headers === void 0) { headers = {}; }
        var /** @type {?} */ requestHeaders = this.requestHeaders;
        Object.keys(headers).forEach(function (key) {
            requestHeaders = requestHeaders.append(key, _this.headers[key]);
        });
        return requestHeaders;
    };
    /**
     * Make a DELETE request.
     * @param relativePath
     * @param headers
     * @param options
     */
    /**
     * Make a DELETE request.
     * @param {?} relativePath
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    HttpService.prototype.delete = /**
     * Make a DELETE request.
     * @param {?} relativePath
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    function (relativePath, headers, options) {
        var _this = this;
        if (headers === void 0) { headers = {}; }
        if (options === void 0) { options = new HttpOptions(); }
        var /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        var /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        var /** @type {?} */ obs = this.http.delete(url, {
            headers: httpHeaders
        });
        return obs.pipe(map(function (res) { return res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res; }), catchError(function (err) { return _this.onError(err); }), finalize(function () {
            _this.onComplete('DELETE', url);
        }));
    };
    /**
     * Make a GET request.
     * @param relativePath
     * @param headers
     * @param options
     */
    /**
     * Make a GET request.
     * @param {?} relativePath
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    HttpService.prototype.get = /**
     * Make a GET request.
     * @param {?} relativePath
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    function (relativePath, headers, options) {
        var _this = this;
        if (headers === void 0) { headers = {}; }
        if (options === void 0) { options = new HttpOptions(); }
        var /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        var /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        var /** @type {?} */ obs = this.http.get(url, {
            headers: httpHeaders
        });
        return obs.pipe(map(function (res) { return res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res; }), catchError(function (err) { return _this.onError(err); }), finalize(function () {
            _this.onComplete('GET', url);
        }));
    };
    ;
    /**
     * Make an autocomplete GET request.
     * @param relativePath
     * @param headers
     * @param options
     */
    /**
     * Make an autocomplete GET request.
     * @param {?} relativePath
     * @param {?} query
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    HttpService.prototype.autocomplete = /**
     * Make an autocomplete GET request.
     * @param {?} relativePath
     * @param {?} query
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    function (relativePath, query, headers, options) {
        var _this = this;
        if (headers === void 0) { headers = {}; }
        if (options === void 0) { options = new HttpOptions(); }
        if (!query.term || query.term.length < 1) {
            return of([]);
        }
        var /** @type {?} */ path = relativePath + "/" + QueryModel.BuildQueryString(query);
        var /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        var /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        var /** @type {?} */ obs = this.http.get(url, {
            headers: httpHeaders
        });
        return obs.pipe(map(function (res) { return res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res; }), debounceTime(500), distinctUntilChanged(), map(function (json) { return HttpActions.matchPath(path, json); }), catchError(function (err) { return _this.onError(err); }), finalize(function () {
            _this.onComplete('GET', url);
        }));
    };
    ;
    /**
     * Make a POST request.
     * @param relativePath
     * @param body
     * @param headers
     * @param options
     */
    /**
     * Make a POST request.
     * @param {?} relativePath
     * @param {?} body
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    HttpService.prototype.post = /**
     * Make a POST request.
     * @param {?} relativePath
     * @param {?} body
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    function (relativePath, body, headers, options) {
        var _this = this;
        if (headers === void 0) { headers = {}; }
        if (options === void 0) { options = new HttpOptions(); }
        var /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        var /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        var /** @type {?} */ obs = this.http.post(url, serialize(body), {
            headers: httpHeaders
        });
        return obs.pipe(map(function (res) { return res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res; }), catchError(function (err) { return _this.onError(err); }), finalize(function () {
            _this.onComplete('POST', url);
        }));
    };
    /**
     * Make a POST request with form url-encoded content type.
     * @param relativePath
     * @param body
     * @param headers
     * @param options
     */
    /**
     * Make a POST request with form url-encoded content type.
     * @param {?} relativePath
     * @param {?} body
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    HttpService.prototype.postFormUrlEncoded = /**
     * Make a POST request with form url-encoded content type.
     * @param {?} relativePath
     * @param {?} body
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    function (relativePath, body, headers, options) {
        var _this = this;
        if (headers === void 0) { headers = {}; }
        if (options === void 0) { options = new HttpOptions(); }
        var /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        var /** @type {?} */ httpHeaders = new HttpHeaders({ 'content-type': 'application/x-www-form-urlencoded' });
        var /** @type {?} */ obs = this.http.post(url, body, {
            headers: httpHeaders
        });
        return obs.pipe(map(function (res) { return res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res; }), catchError(function (err) { return _this.onError(err); }), finalize(function () {
            _this.onComplete('POST FORM URL-ENCODED', url);
        }));
    };
    /**
     * Make a PUT request.
     * @param relativePath
     * @param body
     * @param headers
     * @param options
     */
    /**
     * Make a PUT request.
     * @param {?} relativePath
     * @param {?} body
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    HttpService.prototype.put = /**
     * Make a PUT request.
     * @param {?} relativePath
     * @param {?} body
     * @param {?=} headers
     * @param {?=} options
     * @return {?}
     */
    function (relativePath, body, headers, options) {
        var _this = this;
        if (headers === void 0) { headers = {}; }
        if (options === void 0) { options = new HttpOptions(); }
        var /** @type {?} */ url = options.prependBaseUrl ? this.formatUrl(relativePath) : relativePath;
        var /** @type {?} */ httpHeaders = this.appendHeaders(headers);
        var /** @type {?} */ obs = this.http.put(url, serialize(body), {
            headers: httpHeaders
        });
        return obs.pipe(map(function (res) { return res && res['json'] && typeof res['json'] === 'function' ? res['json']() : res; }), catchError(function (err) { return _this.onError(err); }), finalize(function () {
            _this.onComplete('PUT', url);
        }));
    };
    /**
     * This method will be used to format URLs for all cross-origin requests.
     */
    /**
     * This method will be used to format URLs for all cross-origin requests.
     * @param {?} path
     * @return {?}
     */
    HttpService.prototype.formatUrl = /**
     * This method will be used to format URLs for all cross-origin requests.
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return this.baseUrl + "/" + path;
    };
    /**
     * Use this method when a promise is preferred over an observable.
     */
    /**
     * Use this method when a promise is preferred over an observable.
     * @param {?} url
     * @return {?}
     */
    HttpService.prototype.getPromise = /**
     * Use this method when a promise is preferred over an observable.
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.get(url)
            .toPromise()
            .then(function (res) { return res.json(); });
    };
    /**
     * @param {?} error
     * @return {?}
     */
    HttpService.prototype.onError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        var /** @type {?} */ errorBody;
        try {
            errorBody = (error._body) ? JSON.parse(error._body) : { message: 'Internal server error', statusCode: error.status };
        }
        catch (/** @type {?} */ e) {
            if (error.status <= 0) {
                errorBody = { message: 'Internal server error.', statusCode: 500 };
            }
        }
        if (errorBody.message) {
            errorBody.message = errorBody.message.replace('An error has occured in the api.System.Exception: ', '');
            errorBody.message = errorBody.message.substring(0, errorBody.message.indexOf(' at'));
        }
        return throwError(errorBody);
    };
    /**
     * @param {?} method
     * @param {?} url
     * @return {?}
     */
    HttpService.prototype.onComplete = /**
     * @param {?} method
     * @param {?} url
     * @return {?}
     */
    function (method, url) {
        if (this.logEvents) {
            console.log("Completed " + method + " request to " + url);
        }
    };
    HttpService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    HttpService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Observable },
        { type: Observable }
    ]; };
    /** @nocollapse */ HttpService.ngInjectableDef = i0.defineInjectable({ factory: function HttpService_Factory() { return new HttpService(i0.inject(i1.HttpClient), i0.inject(i2.Observable), i0.inject(i2.Observable)); }, token: HttpService, providedIn: "root" });
    return HttpService;
}());
export { HttpService };
function HttpService_tsickle_Closure_declarations() {
    /** @type {?} */
    HttpService.prototype._authToken;
    /** @type {?} */
    HttpService.prototype._baseUrl;
    /** @type {?} */
    HttpService.prototype.authTokenChanges;
    /** @type {?} */
    HttpService.prototype.baseUrlChanges;
    /** @type {?} */
    HttpService.prototype.headers;
    /** @type {?} */
    HttpService.prototype.logEvents;
    /** @type {?} */
    HttpService.prototype.useDefaultHeaders;
    /** @type {?} */
    HttpService.prototype.http;
    /** @type {?} */
    HttpService.prototype.baseUrl$;
    /** @type {?} */
    HttpService.prototype.authToken$;
}

//# sourceMappingURL=data:application/json;base64,