/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { Store } from '@ngrx/store';
import { HttpCommands } from './http.commands';
import { HttpEffects } from './http.effects';
import { HttpService } from './http.service';
import { HttpClient } from '@angular/common/http';
var /** @type {?} */ BASE_URL$ = new InjectionToken('API Base URL');
var /** @type {?} */ AUTH_TOKEN$ = new InjectionToken('API Auth Token');
/**
 * @param {?} store
 * @param {?} baseUrlSelector
 * @return {?}
 */
export function baseUrlFactory(store, baseUrlSelector) {
    return store.pipe(baseUrlSelector);
}
/**
 * @param {?} store
 * @param {?} authTokenSelector
 * @return {?}
 */
export function authTokenFactory(store, authTokenSelector) {
    return store.pipe(authTokenSelector);
}
/**
 * @param {?} http
 * @param {?} baseUrl$
 * @param {?} authToken$
 * @return {?}
 */
export function httpServiceFactory(http, baseUrl$, authToken$) {
    return new HttpService(http, baseUrl$, authToken$);
}
/**
 * @param {?} urlSelector
 * @param {?} authTokenSelector
 * @return {?}
 */
export function provideHttpContext(urlSelector, authTokenSelector) {
    return [
        HttpEffects,
        HttpCommands,
        { provide: HttpService, useFactory: httpServiceFactory, deps: [HttpClient, 'BASE_URL$', 'AUTH_TOKEN$'] },
        { provide: 'URL_SELECTOR', useValue: urlSelector },
        { provide: 'BASE_URL$', useFactory: baseUrlFactory, deps: [Store, 'URL_SELECTOR'] },
        { provide: 'TOKEN_SELECTOR', useValue: authTokenSelector },
        { provide: 'AUTH_TOKEN$', useFactory: authTokenFactory, deps: [Store, 'TOKEN_SELECTOR'] },
    ];
}
var HttpModule = /** @class */ (function () {
    function HttpModule() {
    }
    /**
     * @param {?} baseUrlSelector
     * @param {?} authTokenSelector
     * @return {?}
     */
    HttpModule.forRoot = /**
     * @param {?} baseUrlSelector
     * @param {?} authTokenSelector
     * @return {?}
     */
    function (baseUrlSelector, authTokenSelector) {
        return {
            ngModule: HttpModule,
            providers: provideHttpContext(baseUrlSelector, authTokenSelector)
        };
    };
    HttpModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        HttpClientModule,
                    ],
                    exports: [
                        HttpClientModule,
                    ]
                },] },
    ];
    return HttpModule;
}());
export { HttpModule };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FpdS9saWJyYXJ5LyIsInNvdXJjZXMiOlsibGliL2h0dHAvaHR0cC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXBDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUdsRCxxQkFBTSxTQUFTLEdBQUcsSUFBSSxjQUFjLENBQXFCLGNBQWMsQ0FBQyxDQUFDO0FBQ3pFLHFCQUFNLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBcUIsZ0JBQWdCLENBQUMsQ0FBQzs7Ozs7O0FBRTdFLE1BQU0seUJBQXlCLEtBQWlCLEVBQUUsZUFBaUM7SUFDakYsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7Q0FDcEM7Ozs7OztBQUVELE1BQU0sMkJBQTJCLEtBQWlCLEVBQUUsaUJBQW1DO0lBQ3JGLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7Q0FDdEM7Ozs7Ozs7QUFFRCxNQUFNLDZCQUE2QixJQUFnQixFQUFFLFFBQTRCLEVBQUUsVUFBOEI7SUFDL0csTUFBTSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7Q0FDcEQ7Ozs7OztBQUVELE1BQU0sNkJBQTZCLFdBQTZCLEVBQUUsaUJBQW1DO0lBQ25HLE1BQU0sQ0FBQztRQUNMLFdBQVc7UUFDWCxZQUFZO1FBQ1osRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUUsV0FBVyxFQUFFLGFBQWEsQ0FBQyxFQUFFO1FBQ3hHLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFO1FBQ2xELEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsRUFBRTtRQUNuRixFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUU7UUFDMUQsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsRUFBRTtLQUMxRixDQUFDO0NBQ0g7Ozs7Ozs7OztJQVlRLGtCQUFPOzs7OztJQUFkLFVBQWUsZUFBaUMsRUFBRSxpQkFBbUM7UUFDbkYsTUFBTSxDQUFDO1lBQ0wsUUFBUSxFQUFFLFVBQVU7WUFDcEIsU0FBUyxFQUFFLGtCQUFrQixDQUFDLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQztTQUNsRSxDQUFDO0tBQ0g7O2dCQWZGLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUU7d0JBQ1AsZ0JBQWdCO3FCQUNqQjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsZ0JBQWdCO3FCQUNqQjtpQkFDRjs7cUJBN0NEOztTQThDYSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5cbmltcG9ydCB7IEh0dHBDb21tYW5kcyB9IGZyb20gJy4vaHR0cC5jb21tYW5kcyc7XG5pbXBvcnQgeyBIdHRwRWZmZWN0cyB9IGZyb20gJy4vaHR0cC5lZmZlY3RzJztcbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSAnLi9odHRwLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VsZWN0b3IgfSBmcm9tICcuLi9zdG9yZS9tb2RlbHMnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuY29uc3QgQkFTRV9VUkwkID0gbmV3IEluamVjdGlvblRva2VuPE9ic2VydmFibGU8c3RyaW5nPj4oJ0FQSSBCYXNlIFVSTCcpO1xuY29uc3QgQVVUSF9UT0tFTiQgPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2YWJsZTxzdHJpbmc+PignQVBJIEF1dGggVG9rZW4nKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGJhc2VVcmxGYWN0b3J5KHN0b3JlOiBTdG9yZTxhbnk+LCBiYXNlVXJsU2VsZWN0b3I6IFNlbGVjdG9yPHN0cmluZz4pOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICByZXR1cm4gc3RvcmUucGlwZShiYXNlVXJsU2VsZWN0b3IpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXV0aFRva2VuRmFjdG9yeShzdG9yZTogU3RvcmU8YW55PiwgYXV0aFRva2VuU2VsZWN0b3I6IFNlbGVjdG9yPHN0cmluZz4pOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICByZXR1cm4gc3RvcmUucGlwZShhdXRoVG9rZW5TZWxlY3Rvcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodHRwU2VydmljZUZhY3RvcnkoaHR0cDogSHR0cENsaWVudCwgYmFzZVVybCQ6IE9ic2VydmFibGU8c3RyaW5nPiwgYXV0aFRva2VuJDogT2JzZXJ2YWJsZTxzdHJpbmc+KTogSHR0cFNlcnZpY2Uge1xuICByZXR1cm4gbmV3IEh0dHBTZXJ2aWNlKGh0dHAsIGJhc2VVcmwkLCBhdXRoVG9rZW4kKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVIdHRwQ29udGV4dCh1cmxTZWxlY3RvcjogU2VsZWN0b3I8c3RyaW5nPiwgYXV0aFRva2VuU2VsZWN0b3I6IFNlbGVjdG9yPHN0cmluZz4pOiBhbnlbXSB7XG4gIHJldHVybiBbXG4gICAgSHR0cEVmZmVjdHMsXG4gICAgSHR0cENvbW1hbmRzLFxuICAgIHsgcHJvdmlkZTogSHR0cFNlcnZpY2UsIHVzZUZhY3Rvcnk6IGh0dHBTZXJ2aWNlRmFjdG9yeSwgZGVwczogW0h0dHBDbGllbnQsICdCQVNFX1VSTCQnLCAnQVVUSF9UT0tFTiQnXSB9LFxuICAgIHsgcHJvdmlkZTogJ1VSTF9TRUxFQ1RPUicsIHVzZVZhbHVlOiB1cmxTZWxlY3RvciB9LFxuICAgIHsgcHJvdmlkZTogJ0JBU0VfVVJMJCcsIHVzZUZhY3Rvcnk6IGJhc2VVcmxGYWN0b3J5LCBkZXBzOiBbU3RvcmUsICdVUkxfU0VMRUNUT1InXSB9LFxuICAgIHsgcHJvdmlkZTogJ1RPS0VOX1NFTEVDVE9SJywgdXNlVmFsdWU6IGF1dGhUb2tlblNlbGVjdG9yIH0sXG4gICAgeyBwcm92aWRlOiAnQVVUSF9UT0tFTiQnLCB1c2VGYWN0b3J5OiBhdXRoVG9rZW5GYWN0b3J5LCBkZXBzOiBbU3RvcmUsICdUT0tFTl9TRUxFQ1RPUiddIH0sXG4gIF07XG59XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBIdHRwQ2xpZW50TW9kdWxlLFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgSHR0cENsaWVudE1vZHVsZSxcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBIdHRwTW9kdWxlIHtcblxuICBzdGF0aWMgZm9yUm9vdChiYXNlVXJsU2VsZWN0b3I6IFNlbGVjdG9yPHN0cmluZz4sIGF1dGhUb2tlblNlbGVjdG9yOiBTZWxlY3RvcjxzdHJpbmc+KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBIdHRwTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBwcm92aWRlSHR0cENvbnRleHQoYmFzZVVybFNlbGVjdG9yLCBhdXRoVG9rZW5TZWxlY3RvcilcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==