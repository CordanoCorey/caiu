/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpGetPayload, HttpPutPayload, HttpPostPayload, HttpDeletePayload } from './http.models';
import { ErrorActions } from '../errors/errors.actions';
import { inArray } from '../shared/utils';
var HttpActions = /** @class */ (function () {
    function HttpActions() {
    }
    /**
     * @param {?} path
     * @param {?} target
     * @return {?}
     */
    HttpActions.addPath = /**
     * @param {?} path
     * @param {?} target
     * @return {?}
     */
    function (path, target) {
        var /** @type {?} */ existingMatches = target['matches'] || [];
        var /** @type {?} */ matches = inArray(existingMatches, path) ? existingMatches : tslib_1.__spread(existingMatches, [path]);
        return Object.assign(target, { matches: matches });
    };
    /**
     * @param {?} path
     * @param {?} payload
     * @return {?}
     */
    HttpActions.matchPath = /**
     * @param {?} path
     * @param {?} payload
     * @return {?}
     */
    function (path, payload) {
        if (payload && payload['results']) {
            return Object.assign(payload, { results: HttpActions.matchPath(path, payload['results']) });
        }
        if (Array.isArray(payload)) {
            return payload.map(function (x) { return HttpActions.addPath(path, x); });
        }
        return HttpActions.addPath(path, payload);
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    HttpActions.buildError = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return ErrorActions.add(payload);
    };
    /**
     * @param {?} key
     * @param {?} e
     * @return {?}
     */
    HttpActions.buildErrorPayload = /**
     * @param {?} key
     * @param {?} e
     * @return {?}
     */
    function (key, e) {
        return {
            key: key,
            error: e
        };
    };
    /**
     * @param {?} e
     * @param {?} onError
     * @return {?}
     */
    HttpActions.handleError = /**
     * @param {?} e
     * @param {?} onError
     * @return {?}
     */
    function (e, onError) {
        return {
            type: onError,
            payload: e
        };
    };
    /**
     * @param {?} e
     * @param {?} outlet
     * @return {?}
     */
    HttpActions.handleErrorOutlet = /**
     * @param {?} e
     * @param {?} outlet
     * @return {?}
     */
    function (e, outlet) {
        return ErrorActions.addAtOutlet(e, outlet);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    HttpActions.handleErrorDefault = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return {
            type: HttpActions.DELETE_ERROR,
            payload: HttpActions.buildErrorPayload('lastError', e)
        };
    };
    /**
     * @param {?} path
     * @param {?} onSuccessPayload
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    HttpActions.delete = /**
     * @param {?} path
     * @param {?} onSuccessPayload
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    function (path, onSuccessPayload, onSuccess, onError) {
        var /** @type {?} */ payload = Object.assign(new HttpDeletePayload(), {
            path: path,
            onSuccess: onSuccess || HttpActions.DELETE_SUCCESS,
            onSuccessPayload: onSuccessPayload,
            onError: onError || HttpActions.DELETE_ERROR
        });
        return HttpActions.httpDelete(payload);
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    HttpActions.httpDelete = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return {
            type: HttpActions.DELETE,
            payload: payload
        };
    };
    /**
     * @param {?} model
     * @param {?=} actionType
     * @return {?}
     */
    HttpActions.deleteSuccess = /**
     * @param {?} model
     * @param {?=} actionType
     * @return {?}
     */
    function (model, actionType) {
        return {
            type: actionType || HttpActions.DELETE_SUCCESS,
            payload: model
        };
    };
    /**
     * @param {?} e
     * @param {?=} onError
     * @return {?}
     */
    HttpActions.deleteError = /**
     * @param {?} e
     * @param {?=} onError
     * @return {?}
     */
    function (e, onError) {
        if (typeof onError === 'string') {
            return HttpActions.handleError(e, onError);
        }
        // else if (typeof onError === 'ErrorOutlet') {
        //     return HttpActions.handleErrorOutlet(e, onError);
        // }
        return HttpActions.handleErrorDefault(e);
    };
    /**
     * @param {?} path
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    HttpActions.get = /**
     * @param {?} path
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    function (path, onSuccess, onError) {
        var /** @type {?} */ payload = Object.assign(new HttpGetPayload(), {
            path: path,
            onSuccess: onSuccess || HttpActions.GET_SUCCESS,
            onError: onError || HttpActions.GET_ERROR
        });
        return HttpActions.httpGet(payload);
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    HttpActions.httpGet = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return {
            type: HttpActions.GET,
            payload: payload
        };
    };
    /**
     * @param {?} response
     * @param {?=} actionType
     * @return {?}
     */
    HttpActions.getSuccess = /**
     * @param {?} response
     * @param {?=} actionType
     * @return {?}
     */
    function (response, actionType) {
        return {
            type: actionType || HttpActions.GET_SUCCESS,
            payload: response
        };
    };
    /**
     * @param {?} e
     * @param {?=} onError
     * @return {?}
     */
    HttpActions.getError = /**
     * @param {?} e
     * @param {?=} onError
     * @return {?}
     */
    function (e, onError) {
        if (typeof onError === 'string') {
            return HttpActions.handleError(e, onError);
        }
        // else if (typeof onError === 'ErrorOutlet') {
        //     return HttpActions.handleErrorOutlet(e, onError);
        // }
        return HttpActions.handleErrorDefault(e);
    };
    /**
     * @param {?} path
     * @param {?} model
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    HttpActions.post = /**
     * @param {?} path
     * @param {?} model
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    function (path, model, onSuccess, onError) {
        var /** @type {?} */ payload = Object.assign(new HttpPostPayload(), {
            path: path,
            model: model,
            onSuccess: onSuccess || HttpActions.POST_SUCCESS,
            onError: onError || HttpActions.POST_ERROR
        });
        return HttpActions.httpPost(payload);
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    HttpActions.httpPost = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return {
            type: HttpActions.POST,
            payload: payload
        };
    };
    /**
     * @param {?} path
     * @param {?} model
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    HttpActions.postFormUrlEncoded = /**
     * @param {?} path
     * @param {?} model
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    function (path, model, onSuccess, onError) {
        var /** @type {?} */ payload = Object.assign(new HttpPostPayload(), {
            path: path,
            model: model,
            onSuccess: onSuccess || HttpActions.GET_SUCCESS,
            onError: onError || HttpActions.GET_ERROR
        });
        return {
            type: HttpActions.POST_FORM_URL_ENCODED,
            payload: payload
        };
    };
    /**
     * @param {?} model
     * @param {?=} actionType
     * @return {?}
     */
    HttpActions.postSuccess = /**
     * @param {?} model
     * @param {?=} actionType
     * @return {?}
     */
    function (model, actionType) {
        return {
            type: actionType || HttpActions.POST_SUCCESS,
            payload: model
        };
    };
    /**
     * @param {?} e
     * @param {?=} onError
     * @return {?}
     */
    HttpActions.postError = /**
     * @param {?} e
     * @param {?=} onError
     * @return {?}
     */
    function (e, onError) {
        if (typeof onError === 'string') {
            return HttpActions.handleError(e, onError);
        }
        else if (typeof onError === 'object') {
            return HttpActions.handleErrorOutlet(e, onError);
        }
        return HttpActions.handleErrorDefault(e);
    };
    /**
     * @param {?} path
     * @param {?} model
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    HttpActions.put = /**
     * @param {?} path
     * @param {?} model
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    function (path, model, onSuccess, onError) {
        var /** @type {?} */ payload = Object.assign(new HttpPutPayload(), {
            path: path,
            model: model,
            onSuccess: onSuccess || HttpActions.PUT_SUCCESS,
            onError: onError || HttpActions.PUT_ERROR
        });
        return HttpActions.httpPut(payload);
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    HttpActions.httpPut = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        return {
            type: HttpActions.PUT,
            payload: payload
        };
    };
    /**
     * @param {?} model
     * @param {?=} actionType
     * @return {?}
     */
    HttpActions.putSuccess = /**
     * @param {?} model
     * @param {?=} actionType
     * @return {?}
     */
    function (model, actionType) {
        return {
            type: actionType || HttpActions.PUT_SUCCESS,
            payload: model
        };
    };
    /**
     * @param {?} e
     * @param {?=} onError
     * @return {?}
     */
    HttpActions.putError = /**
     * @param {?} e
     * @param {?=} onError
     * @return {?}
     */
    function (e, onError) {
        if (typeof onError === 'string') {
            return HttpActions.handleError(e, onError);
        }
        // else if (typeof onError === 'ErrorOutlet') {
        //     return HttpActions.handleErrorOutlet(e, onError);
        // }
        return HttpActions.handleErrorDefault(e);
    };
    /**
     * @param {?} path
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    HttpActions.search = /**
     * @param {?} path
     * @param {?=} onSuccess
     * @param {?=} onError
     * @return {?}
     */
    function (path, onSuccess, onError) {
        var /** @type {?} */ payload = Object.assign(new HttpGetPayload(), {
            path: path,
            onSuccess: onSuccess || HttpActions.SEARCH_SUCCESS,
            onError: onError || HttpActions.SEARCH_ERROR
        });
        return {
            type: HttpActions.SEARCH,
            payload: payload
        };
    };
    /**
     * @param {?} response
     * @param {?=} actionType
     * @param {?=} path
     * @return {?}
     */
    HttpActions.searchSuccess = /**
     * @param {?} response
     * @param {?=} actionType
     * @param {?=} path
     * @return {?}
     */
    function (response, actionType, path) {
        var /** @type {?} */ payload = path ? HttpActions.matchPath(path, response) : response;
        return {
            type: actionType || HttpActions.SEARCH_SUCCESS,
            payload: payload
        };
    };
    HttpActions.DELETE = "[Http] DELETE";
    HttpActions.DELETE_SUCCESS = "[Http] DELETE Success";
    HttpActions.DELETE_ERROR = "[Http] DELETE Error";
    HttpActions.GET = "[Http] GET";
    HttpActions.GET_SUCCESS = "[Http] GET Success";
    HttpActions.GET_ERROR = "[Http] GET Error";
    HttpActions.POST = "[Http] POST";
    HttpActions.POST_SUCCESS = "[Http] POST Success";
    HttpActions.POST_ERROR = "[Http] POST Error";
    HttpActions.POST_FORM_URL_ENCODED = "[Http] POST Form URL Encoded";
    HttpActions.PUT = "[Http] PUT";
    HttpActions.PUT_SUCCESS = "[Http] PUT Success";
    HttpActions.PUT_ERROR = "[Http] PUT Error";
    HttpActions.SEARCH = "[Http] SEARCH";
    HttpActions.SEARCH_SUCCESS = "[Http] SEARCH Success";
    HttpActions.SEARCH_ERROR = "[Http] SEARCH Error";
    return HttpActions;
}());
export { HttpActions };
function HttpActions_tsickle_Closure_declarations() {
    /** @type {?} */
    HttpActions.DELETE;
    /** @type {?} */
    HttpActions.DELETE_SUCCESS;
    /** @type {?} */
    HttpActions.DELETE_ERROR;
    /** @type {?} */
    HttpActions.GET;
    /** @type {?} */
    HttpActions.GET_SUCCESS;
    /** @type {?} */
    HttpActions.GET_ERROR;
    /** @type {?} */
    HttpActions.POST;
    /** @type {?} */
    HttpActions.POST_SUCCESS;
    /** @type {?} */
    HttpActions.POST_ERROR;
    /** @type {?} */
    HttpActions.POST_FORM_URL_ENCODED;
    /** @type {?} */
    HttpActions.PUT;
    /** @type {?} */
    HttpActions.PUT_SUCCESS;
    /** @type {?} */
    HttpActions.PUT_ERROR;
    /** @type {?} */
    HttpActions.SEARCH;
    /** @type {?} */
    HttpActions.SEARCH_SUCCESS;
    /** @type {?} */
    HttpActions.SEARCH_ERROR;
}

//# sourceMappingURL=data:application/json;base64,