import { AbstractControl, FormBuilder, FormArray as Ng2FormArray, ValidatorFn, AsyncValidatorFn } from '@angular/forms';
import { TypeConstructor } from '../shared/models';
export declare class FormArray extends Ng2FormArray {
    fb: FormBuilder;
    ctor: TypeConstructor<any>;
    static Build<T>(fb: FormBuilder, controls: AbstractControl[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn): FormArray;
    static BuildWithType<T>(ctor: TypeConstructor<T>, fb: FormBuilder, controls?: AbstractControl[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn): FormArray;
    static BuildWithTypeAndValue<T>(ctor: TypeConstructor<T>, value: T[], fb: FormBuilder, controls?: AbstractControl[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn): FormArray;
    static BuildWithValue<T>(value: T[], fb: FormBuilder, controls?: AbstractControl[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn): FormArray;
    static GetValue(value: any[], ctor: TypeConstructor<any>): any[];
    constructor(fb: FormBuilder, controls: AbstractControl[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn);
    readonly maxIndex: number;
    readonly values: any[];
    buildControls(n: number): AbstractControl[];
    buildItems(n: number): any[];
    getValue(value: any[]): any[];
    resetValue(value: any[]): void;
    setLength(value: number): void;
    setValue(value: any[]): void;
    findControlById(id: any): AbstractControl;
    removeAll(): void;
    removeIndexes(indexes: any[]): void;
    add(n: number): void;
    remove(n: number): void;
    addControls(value: any[]): void;
    /**
     * Set value of each control.
     * @param ctor Class constructor
     * @param props Values to assign to props of each control
     */
    setAll(ctor: TypeConstructor<any>, props: any): void;
}
