import { FormGroup, FormBuilder, AbstractControl, FormControl, ValidatorFn, AsyncValidatorFn } from '@angular/forms';
import { FormArray } from './models';
import { Dictionary, TypeConstructor } from '../shared/models';
export declare function buildAbstractControl(fb: FormBuilder, value: any): FormGroup | FormArray | FormControl;
/**
 * Construct form builder and initialize new form array
 */
export declare function buildArrayFromType<T>(ctor: TypeConstructor<T>, validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn): FormArray;
export declare function buildControl(fb: FormBuilder, model: any, key: string): FormGroup | FormArray | any[];
/**
 * Construct form builder and initialize new form group.
 */
export declare function buildControlFromModel<T>(model: T): FormGroup;
/**
 * Function to recursively construct form control config object.
 */
export declare function buildControlsConfig(model: any, fb: FormBuilder): Dictionary<any>;
/**
 * Initialize new form array.
 */
export declare function buildFormArray<T>(fb: FormBuilder, model: any, key: string): FormArray;
export declare function buildFormArrayControls<T>(fb: FormBuilder, value: T[], ctor?: TypeConstructor<T>): AbstractControl[];
export declare function findFormArrayType(model: any, key: string): TypeConstructor<any>;
export declare function hasGroupValidators(model: any): boolean;
export declare function hasValidators(model: any, key: string): boolean;
export declare function isArrayValue(value: any): boolean;
export declare function isFormArray(model: any, key: string): boolean;
export declare function isFormControl(model: any, key: string): boolean;
export declare function isFormGroup(model: any, key: string): boolean;
export declare function isGroupValue(value: any): boolean;
