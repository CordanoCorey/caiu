import { AfterContentInit, ElementRef, OnChanges, OnInit, QueryList, Renderer2, EventEmitter } from '@angular/core';
import { Grid } from './grid.model';
import { GridColumnComponent } from './grid-column/grid-column.component';
import { CompositeFilterDescriptor, GroupableSettings, SortDescriptor, SortSettings, GridDataResult, DataStateChangeEvent, PageChangeEvent } from '../../shared/kendo';
export declare class GridComponent implements OnChanges, OnInit, AfterContentInit {
    private _elementRef;
    private _renderer;
    model: Grid<any>;
    advancedFilter: boolean;
    autoCalculateHeight: boolean;
    buttonColor: string;
    buttonCount: number;
    buttonClass: string;
    pagerInfo: boolean;
    pagerType: 'numeric' | 'input';
    pageSizes: boolean;
    previousNext: boolean;
    detailRowHeight: number;
    export: boolean;
    fileName: string;
    filter: CompositeFilterDescriptor;
    filterable: boolean;
    groupable: GroupableSettings | boolean;
    height: number;
    pageSize: number;
    pageable: any | boolean;
    pager: any;
    pdfHeader: string;
    rowHeight: number;
    rowHeightMax: number;
    scrollable: any;
    selectable: boolean;
    skip: number;
    sortable: SortSettings;
    group: any[];
    rowClass: Function;
    sort: SortDescriptor[];
    total: number;
    changes: EventEmitter<DataStateChangeEvent>;
    grid: ElementRef;
    contentChildren: QueryList<GridColumnComponent>;
    columns: GridColumnComponent[];
    private _color;
    private filtering;
    constructor(_elementRef: ElementRef, _renderer: Renderer2);
    /** The color of the toolbar. Can be primary, accent, or warn. */
    color: string;
    private _updateColor(newColor);
    private _setElementColor(color, isAdd);
    readonly activeRows: any[];
    readonly computedRowHeight: number;
    readonly dynamicHeight: number;
    readonly excelFileName: string;
    readonly filters: any[];
    readonly gridData: GridDataResult;
    readonly headerHeight: number;
    readonly numericHeight: number;
    readonly pagerHeight: number;
    readonly pagerSettings: any;
    readonly pdfFileName: string;
    readonly rows: any[];
    readonly showFilters: boolean;
    readonly take: number;
    readonly toolbarHeight: number;
    ngOnChanges(): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    dataStateChange(state: DataStateChangeEvent): void;
    save(component: any): void;
    protected filterChange(e: CompositeFilterDescriptor): void;
    protected pageChange(e: PageChangeEvent): void;
    protected sortChange(sort: SortDescriptor[]): void;
    private filterRows(rows);
    protected pageRows(rows: any[]): any[];
    protected sortRows(rows: any[]): any[];
}
