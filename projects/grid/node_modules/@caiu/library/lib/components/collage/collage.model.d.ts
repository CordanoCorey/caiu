import { Tile } from '../tile/tile.model';
import { Image, Dimensions, Coordinates } from '../../shared/models';
export declare class Collage {
    canvasHeight: number;
    canvasWidth: number;
    maxColumns: number;
    maxRows: number;
    totalColumns: number;
    totalRows: number;
    _images: Image[];
    _tiles: Tile[];
    static AvailableColumns(startRow: number, startColumn: number, maxColumns: number, cells: boolean[][]): number;
    static AvailableRows(startRow: number, startColumn: number, maxRows: number, cells: boolean[][]): number;
    static AvailableDimensions(dimensions: Dimensions[], startRow: number, startColumn: number, maxRows: number, maxColumns: number, cells: boolean[][]): Dimensions[];
    static Build(images: Image[], canvasHeight: any, canvasWidth: any, totalRows?: number, totalColumns?: number, maxRows?: number, maxColumns?: number): Collage;
    static BuildEmptyCells(rows: number, cols: number): boolean[][];
    static BuildTiles(collage: Collage): Tile[];
    static ChooseTileId(id: number, tileIds: number[]): number[];
    static FindCoordinates(index: number, totalRows: number, totalColumns: number): Coordinates;
    static FindCoordinatesNested(index: number, totalRows: number, totalColumns: number, startRow: number, startColumn: number): Coordinates;
    static FindDimensions(height: number, width: number, dimensions: Dimensions[], cellHeight: number, cellWidth: number): Dimensions;
    static FindNextTileId(tiles: Tile[], tileIds: number[], dimensions: Dimensions): number;
    static FindBestMatchId(tiles: Tile[], tileIds: number[], dimensions: Dimensions): number;
    static FindNextMatchId(tiles: Tile[], tileIds: number[], dimensions: Dimensions): number;
    static FindBestMatch(tiles: Tile[], tileIds: number[], dimensions: Dimensions): Tile;
    static FindNextTile(tiles: Tile[], tileIds: number[], dimensions: Dimensions[]): Tile;
    static GetTileDimensions(cellHeight: number, cellWidth: number, maxRows: number, maxColumns: number): Dimensions[];
    static MarkCellsAsFilled(cells: boolean[][], startIndex: number, dimensions: Dimensions, totalRows: number, totalColumns: number): boolean[][];
    static PositionTiles(tiles: Tile[], collage: Collage): Tile[];
    readonly cellHeight: number;
    readonly cellWidth: number;
    readonly emptyCells: boolean[][];
    images: Image[];
    readonly tileDimensions: Dimensions[];
    tiles: Tile[];
    readonly totalCells: number;
}
