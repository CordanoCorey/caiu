import { Type } from '@angular/core';
import { Route, ActivatedRouteSnapshot, Event, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, RoutesRecognized, RouterStateSnapshot, UrlSegment, Params, Data } from '@angular/router';
import { Dictionary } from '../shared/models';
export declare class ActivatedRoutePayload {
    routeName: string;
    parent?: string;
}
export declare class Breadcrumbs {
    segments: RouteSegment[];
    constructor(segments: RouteSegment[]);
}
export declare class CustomRoute implements Route {
    children: Route[];
    lazyChildren: Route[];
    component: Type<any>;
    private _path;
    constructor(props: Dictionary<any>);
    path: string;
    readonly route: Route;
}
export declare class LazyRoute extends CustomRoute {
    constructor(props: Dictionary<any>);
}
export interface RouterEvent {
    eventType: any;
    event: Event;
    navigationCancel?: NavigationCancel;
    navigationEnd?: NavigationEnd;
    navigationError?: NavigationError;
    navigationStart?: NavigationStart;
    routesRecognized?: RoutesRecognized;
}
export declare enum NavigationStatus {
    Default = 0,
    NavigationStart = 1,
    NavigationCancel = 2,
    NavigationError = 3,
    RoutesRecognized = 4,
    NavigationEnd = 5,
}
export declare class RouteSegment {
    /** The static and resolved data of this route */
    data: Data;
    /** The URL fragment shared by all the routes */
    fragment: string;
    /** The order of the segment in the route */
    order: number;
    /** The outlet name of the route */
    outlet: string;
    /** The path from the root of the router state tree to this route */
    pathFromRoot: ActivatedRouteSnapshot[];
    /** The matrix parameters scoped to this route */
    params: Params;
    /** The label to pass to the anchor tag */
    routeLabel: string;
    /** The unique identifier for the route segment */
    routeName: string;
    /** The URL segments matched by this route */
    url: UrlSegment[];
    /** The link to pass to the anchor tag */
    readonly routerLink: string;
}
export declare class RouterState {
    id: number;
    activatedRoute: ActivatedRouteSnapshot;
    error: any;
    events: RouterEvent[];
    history: VisitedRoute[];
    navigationStatus: NavigationStatus;
    reason: string;
    rootRoute: ActivatedRouteSnapshot;
    state: RouterStateSnapshot;
    url: string;
    urlAfterRedirects: string;
    static BuildRoute(props: Dictionary<any>): Route;
    static BuildLazyRoute(props: Dictionary<any>): Route;
    static BuildUrlSegment(url: UrlSegment[]): string;
    static GetActivatedOutlets(root: ActivatedRouteSnapshot, index?: number): Dictionary<RouteSegment>;
    static GetActivatedRoute(root: ActivatedRouteSnapshot): ActivatedRouteSnapshot;
    static GetAllParams(route: ActivatedRouteSnapshot): any;
    static GetRouteData(route: ActivatedRouteSnapshot): any;
    static GetRouteSegment(route: ActivatedRouteSnapshot, existing?: RouteSegment, index?: number): RouteSegment;
    static GetRouteName(route: ActivatedRouteSnapshot): string;
    readonly activatedOutlets: Dictionary<RouteSegment>;
    readonly lastEvent: RouterEvent;
    readonly params: any;
    readonly routeName: string;
    readonly visited: string[];
    addRouterEvent(e: Event, eventType: any): RouterEvent[];
    navigationCancel(payload: NavigationCancel): RouterState;
    navigationEnd(payload: NavigationEnd): RouterState;
    navigationError(payload: NavigationError): RouterState;
    navigationStart(payload: NavigationStart): RouterState;
    routesRecognized(payload: RoutesRecognized): RouterState;
}
export declare class VisitedRoute {
    label: string;
    link: string;
    name: string;
    visitTime: Date;
}
