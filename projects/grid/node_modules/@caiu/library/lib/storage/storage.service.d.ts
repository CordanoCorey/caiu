import { Store } from '@ngrx/store';
import { Action } from '../store/models';
export declare class StorageService {
    store: Store<any>;
    storeKey: string;
    localStorageActions: string[];
    sessionStorageActions: string[];
    localStorageMapper: (state: any) => any;
    sessionStorageMapper: (state: any) => any;
    constructor(store: Store<any>, storeKey: string);
    readonly localStore: any;
    readonly sessionStore: any;
    readonly storage: Storage;
    /**
     * Initialize the use of local storage and/or session storage
     * @param localStorageMapper Mapper function for mapping state to local store
     * @param sessionStorageMapper Mapper function for mapping state to session store
     * @param localStorageActions Actions after which to save to local storage
     * @param sessionStorageActions Actions after which to save to session storage
     */
    init(localStorageMapper?: (state: any) => any, sessionStorageMapper?: (state: any) => any, localStorageActions?: any[], sessionStorageActions?: any[]): void;
    /**
     * Initialize the use of local storage
     * @param localStorageMapper Mapper function for mapping state to local store
     * @param localStorageActions Actions after which to save to local storage
     */
    initLocalStore(localStorageMapper?: (state: any) => any, localStorageActions?: any[]): any;
    /**
     * Initialize the use of session storage
     * @param sessionStorageMapper Mapper function for mapping state to session store
     * @param sessionStorageActions Actions after which to save to session storage
     */
    initSessionStore(sessionStorageMapper?: (state: any) => any, sessionStorageActions?: any[]): Storage;
    inLocalStorage(actionType: string): boolean;
    inSessionStorage(actionType: string): boolean;
    /**
     * Store state to local storage.
     */
    storeLocal(state: any, action: Action): void;
    /**
     * Store state to session storage.
     */
    storeSession(state: any, action: Action): void;
}
