import { SimpleChanges } from '@angular/core';
import { Dictionary, TypeConstructor, HasMetadata } from './models';
import { Action } from '../store/models';
/**
 * @param derivedCtor The clas Constructor
 * @param baseCtor The mixins to apply
 * Example Usage: applyMixins(UniversityProfessor, [Employee, Researcher])
 */
export declare function applyDecorators(derived: any, baseCtors: any[]): void;
/**
 * @param derivedCtor The clas Constructor
 * @param baseCtor The mixins to apply
 * Example Usage: applyMixins(UniversityProfessor, [Employee, Researcher])
 */
export declare function applyMixins(derivedCtor: any, baseCtors: any[]): void;
/**
 * Find distinct elements in the union of 2 arrays.
 * @param array1
 * @param array2
 */
export declare function arrayUnion(array1: any, array2: any): any[];
export declare function assignProps(target: any, props: Dictionary<any>): void;
export declare function build<T>(ctor: TypeConstructor<T>, ...args: any[]): T;
export declare function compareDates(a: Date, b: Date): number;
export declare function compareNumbers(a: number, b: number): number;
export declare function compareStrings(a: string, b: string): 1 | -1 | 0;
export declare function distinct(arr: any[], key?: string): any[];
export declare function equals(x1: any, x2: any): boolean;
/**
 * Extends an object with the *enumerable* and *own* properties of one or more source objects,
 * similar to Object.assign.
 *
 * @param dest The object which will have properties copied to it.
 * @param sources The source objects from which properties will be copied.
 */
export declare function extendObject(dest: any, ...sources: any[]): any;
export declare function falsy(value: any): boolean;
/**
   * Remove problematic or undesired store properties.
   */
export declare function filterState(obj: any): any;
export declare function findMetadata(ctor: TypeConstructor<HasMetadata | any>): any;
export declare function findSchoolYear(): string;
export declare function flattenKeys(obj: Object, parents: string[]): any[];
export declare function formatPhoneNumber(number?: string): string;
export declare function format7DigitPhoneNumber(number?: string): string;
export declare function format10DigitPhoneNumber(number?: string): string;
export declare function formatPrice(total: number): string;
export declare function getTypeNameForDebugging(type: any): string;
export declare function getAllProps(obj: any): string[];
export declare function getGetters(obj: any): string[];
export declare function getKeyValues(model: any): any;
export declare function getSetters(obj: any): string[];
export declare function getStyle(el: Element, styleProp: string): string;
export declare function getValue(model: any): any;
export declare function guid(): string;
export declare function hasChanged(changes: SimpleChanges, key: string, props: string[]): boolean;
export declare function idChanged(changes: SimpleChanges, key: string): boolean;
export declare function ignoreKey(model: any, key: string): boolean;
export declare function inArray(arr: any[], val: any): boolean;
export declare function inArrayByKey(arr: any[], val: any, key: string | number): boolean;
export declare function integerArray(n: number): number[];
export declare function isBetweenDates(dateFrom: any, dateTo: any, dateCheck: any): boolean;
/**
 * Detects cycles in an object.
 * @param obj
 */
export declare function isCyclic(obj: any): boolean;
/**
 * @param fromState The last state object from the store
 * @param dState A partial class containing all properties that have changed wrt fromState
 * @return The current/updated state of the application (toState)
 */
export declare function nextState(fromState: any, dState: any): any;
export declare function positiveIntegerArray(n: number): number[];
/**
 * Remove store props that contain cycles.
 */
export declare function removeCycles(obj: any): any;
/**
 * Remove any props that should not appear in the store.
 */
export declare function removeProps(obj: any): any;
export declare function serialize(model: any): any;
export declare function stringify(token: any): string;
export declare function str2CharCode(str: string): number;
export declare function str2Id(str: string): number;
export declare function str2int(str: string): number;
export declare function strArray2Id(strArray: string[]): number;
export declare function throwException(errorName: string, errorMessage: string): void;
export declare function throwNotImplementedException(): void;
export declare function toArray(val: any): any[];
export declare function toInt(val: string | number): number;
export declare function toPayload(action: Action): any;
export declare function toPx(n: number): string;
export declare function truthy(value: any): boolean;
export declare function tryCast(obj: any, type: any): any;
export declare function valueChanged(changes: SimpleChanges, key?: string): boolean;
export declare function valueEquals(value: any, formValue: any): boolean;
