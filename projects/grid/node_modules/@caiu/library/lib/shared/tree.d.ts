import { TypeConstructor } from './models';
export declare class TreeItem<T> {
    item: T;
    parent: T;
    id: number;
    order: number;
    parentId: number;
    treeId: number;
    index: number;
    static Build<T>(item: T): TreeItem<T>;
    constructor(item: T, parent?: T);
    readonly hasParent: boolean;
    readonly sortOrder: number;
    readonly treeOrder: number;
}
export declare class Tree<T> {
    private _treeItems;
    ctor: TypeConstructor<T>;
    _activeId: number;
    _activeIndex: number;
    static FindParent<T>(items: TreeItem<T>[], item: TreeItem<T>): TreeItem<T>;
    static FindParentOrder<T>(items: TreeItem<T>[], item: TreeItem<T>): number;
    static Build<T>(items: TreeItem<T>[], ctor: TypeConstructor<T>): Tree<T>;
    constructor(_treeItems: TreeItem<T>[], ctor: TypeConstructor<T>);
    activeId: number;
    activeIndex: number;
    readonly copy: Tree<T>;
    readonly instance: T;
    readonly next: TreeItem<T>;
    readonly nextId: number;
    readonly nextIndex: number;
    readonly previous: TreeItem<T>;
    readonly previousId: number;
    readonly previousIndex: number;
    readonly items: T[];
    readonly treeItems: TreeItem<T>[];
    readonly orderedItems: TreeItem<T>[];
    readonly subtrees: Tree<T>[];
    readonly subtreeItems: TreeItem<T>[][];
    getIdByIndex(index: number): number;
    getIndexById(id: number): number;
    getItemById(id: number): TreeItem<T>;
    getItemByIndex(index: number): TreeItem<T>;
    getNext(index: number): TreeItem<T>;
    getNextId(index: number): number;
    getPrevious(index: number): TreeItem<T>;
    getPreviousId(index: number): number;
}
