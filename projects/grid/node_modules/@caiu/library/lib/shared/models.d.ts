export declare class Address {
    firstName: string;
    lastName: string;
    streetAddress: string;
    address2: string;
    city: string;
    state: string;
    stateId: number;
    zipCode: number;
    metadata: Metadata;
    cityStateZip: string;
    fullName: string;
    readonly hasAddress: boolean;
    readonly hasCityStateZip: boolean;
    readonly hasStreetAddress: boolean;
}
export declare class Alert {
    message: string;
    type: 'ERROR' | 'SUCCESS';
}
export declare class Coordinates {
    row: number;
    column: number;
}
export interface Dictionary<T> {
    [id: string]: T;
}
export declare class Dimensions {
    height: number;
    width: number;
    rows: number;
    columns: number;
    readonly approxRatio: number;
    readonly ratio: number;
}
export declare class Email {
    id: number;
    bcc: string;
    body: string;
    cc: string;
    failed: string;
    from: string;
    sent: boolean;
    sentDate: Date;
    subject: string;
    to: string;
    createdById: any;
    createdDate: Date;
    createdBy: any;
    attachments: any[];
}
export declare const EMAIL_REGEX: RegExp;
export declare class Filters {
    skip: number;
    sortBy: string;
    take: number;
}
export declare type Func<T, TResult> = (item: T) => TResult;
export interface HasId {
    id: string | number;
}
export interface HasMetadata {
    metadata: Metadata;
}
export declare class Image {
    src: string;
    orientation: 'h' | 'v';
    height: number;
    width: number;
    readonly horizontal: boolean;
    readonly vertical: boolean;
    readonly colspan: number;
    readonly rowspan: number;
}
export declare class Metadata {
    controls?: string[];
    ignore?: string[];
    label?: string;
    name?: string;
    value?: any;
    [key: string]: any;
}
export declare enum MetadataType {
    CLASS = 0,
    METHOD = 1,
    PROPERTY = 2,
    PARAMETER = 3,
    STATIC_METHOD = 4,
    STATIC_PROPERTY = 5,
}
export declare class PropertyMetadata<T> {
    ignore?: string[];
    label?: string;
    name?: string;
    value?: T;
}
export declare class QueryItem {
    label: string;
    value: any;
}
export declare class QueryModel<T> {
    userId: number;
    accountId: number;
    fields: string[];
    filterBy: (x: T) => boolean;
    filters: string[];
    groupBy: (x: T) => any;
    groups: string[];
    include: (x: T) => any;
    map: (x: T) => any;
    orderBy: (x: T) => any;
    params: {};
    skip: number;
    sort: string[];
    take: number;
    term: string;
    readonly hasParams: boolean;
    readonly keys: string[];
    readonly totalParams: number;
    static AppendQueryString(query: QueryModel<any>): string;
    static AppendToQueryString(path: string, str: string): string;
    static BuildQueryString(query: QueryModel<any>): string;
    static BuildQueryObject(query: QueryModel<any>): any;
    static FormatDate(date: Date): string;
    static ParseQuery(queryString: any): {};
    static QueryParams(query: QueryModel<any>): any;
    static QuerySkip(query: QueryModel<any>): string;
    static QueryTake(query: QueryModel<any>): string;
    static QueryTerm(query: QueryModel<any>): string;
    readonly queryParams: any;
    readonly queryString: string;
    readonly queryObject: any;
    readonly querySkip: string;
    readonly queryTake: string;
    readonly queryTerm: string;
}
export declare class Search<T> {
    query: QueryModel<T>;
    results: T[];
    total: number;
}
export declare class StyleModel {
    backgroundColor: string;
    border: string;
    borderRadius: number | string;
    color: string;
    cursor: string;
    display: string;
    fontSize: number | string;
    height: number | string;
    lineHeight: number | string;
    padding: number | string;
    paddingTop: number | string;
    paddingBottom: number | string;
    paddingLeft: number | string;
    paddingRight: number | string;
    textDecoration: string;
    width: number;
    readonly styles: any;
}
export interface Type<T> extends Function {
    new (...args: any[]): T;
}
export interface TypeConstructor<T> {
    new (): T;
}
