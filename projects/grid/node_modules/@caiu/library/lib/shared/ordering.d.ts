import { TypeConstructor } from './models';
export declare class Permutation<T> {
    order: OrderedItem<T>[];
    _timestamp: Date;
    constructor(order: OrderedItem<T>[]);
    readonly ranks: OrderedItem<T>[];
    readonly timestamp: Date;
}
export declare class OrderedItem<T> {
    item: T;
    id: any;
    order: number;
    rank?: number;
    constructor(item: T);
}
export declare class Ordering<T> {
    private _items;
    ctor: TypeConstructor<T>;
    orderKey: string;
    idKey: string;
    private _history;
    constructor(_items: T[], ctor: TypeConstructor<T>, orderKey: string, idKey?: string);
    readonly count: number;
    readonly history: Permutation<T>[];
    readonly instance: T;
    readonly items: T[];
    readonly maxIndex: number;
    readonly order: OrderedItem<T>[];
    readonly permutation: Permutation<T>;
    readonly nextPosition: number;
    addItem(item: T): T[];
    addItemAtPosition(item: T, pos: number): T[];
    archive(items?: T[]): void;
    getItemId(item: T): any;
    getItemOrder(item: T): number;
    getPermutation(items: T[]): Permutation<T>;
    move(item: T, to: number): T[];
    moveDown(item: T): T[];
    moveUp(item: T): T[];
    removeItem(item: T): T[];
    removeItemAtPosition(pos: number): T[];
    updateItems(items: T[]): void;
}
