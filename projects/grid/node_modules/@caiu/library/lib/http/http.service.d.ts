import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { HttpOptions } from './http.models';
import { QueryModel } from '../shared/models';
export declare class HttpService {
    http: HttpClient;
    private baseUrl$;
    private authToken$;
    private _authToken;
    private _baseUrl;
    private authTokenChanges;
    private baseUrlChanges;
    headers: {};
    logEvents: boolean;
    useDefaultHeaders: boolean;
    constructor(http: HttpClient, baseUrl$: Observable<string>, authToken$: Observable<string>);
    authToken: string;
    baseUrl: string;
    readonly defaultHeaders: HttpHeaders;
    readonly requestHeaders: HttpHeaders;
    appendHeaders(headers?: {}): HttpHeaders;
    /**
     * Make a DELETE request.
     * @param relativePath
     * @param headers
     * @param options
     */
    delete(relativePath: string, headers?: {}, options?: HttpOptions): Observable<any>;
    /**
     * Make a GET request.
     * @param relativePath
     * @param headers
     * @param options
     */
    get(relativePath: string, headers?: {}, options?: HttpOptions): Observable<any>;
    /**
     * Make an autocomplete GET request.
     * @param relativePath
     * @param headers
     * @param options
     */
    autocomplete(relativePath: string, query: QueryModel<any>, headers?: {}, options?: HttpOptions): Observable<any>;
    /**
     * Make a POST request.
     * @param relativePath
     * @param body
     * @param headers
     * @param options
     */
    post(relativePath: string, body: any, headers?: {}, options?: HttpOptions): Observable<any>;
    /**
     * Make a POST request with form url-encoded content type.
     * @param relativePath
     * @param body
     * @param headers
     * @param options
     */
    postFormUrlEncoded(relativePath: string, body: any, headers?: {}, options?: HttpOptions): Observable<any>;
    /**
     * Make a PUT request.
     * @param relativePath
     * @param body
     * @param headers
     * @param options
     */
    put(relativePath: string, body: any, headers?: {}, options?: HttpOptions): Observable<any>;
    /**
     * This method will be used to format URLs for all cross-origin requests.
     */
    formatUrl(path: string): string;
    /**
     * Use this method when a promise is preferred over an observable.
     */
    getPromise(url: string): Promise<any>;
    private onError(error);
    private onComplete(method, url);
}
