import { HttpAction, HttpGetPayload, HttpPutPayload, HttpPostPayload, HttpDeletePayload } from './http.models';
import { ErrorOutlet, ErrorPayload } from '../errors/errors.models';
import { Action } from '../store/models';
export declare class HttpActions {
    static DELETE: string;
    static DELETE_SUCCESS: string;
    static DELETE_ERROR: string;
    static GET: string;
    static GET_SUCCESS: string;
    static GET_ERROR: string;
    static POST: string;
    static POST_SUCCESS: string;
    static POST_ERROR: string;
    static POST_FORM_URL_ENCODED: string;
    static PUT: string;
    static PUT_SUCCESS: string;
    static PUT_ERROR: string;
    static SEARCH: string;
    static SEARCH_SUCCESS: string;
    static SEARCH_ERROR: string;
    static addPath(path: any, target: any): any;
    static matchPath(path: any, payload: any): any;
    static buildError(payload: ErrorPayload): Action;
    static buildErrorPayload(key: string, e: Error): ErrorPayload;
    static handleError(e: Error, onError: string): Action;
    static handleErrorOutlet(e: Error, outlet: ErrorOutlet): Action;
    static handleErrorDefault(e: Error): Action;
    static delete(path: string, onSuccessPayload: any, onSuccess?: string, onError?: string | ErrorOutlet): HttpAction;
    static httpDelete(payload: HttpDeletePayload<any>): HttpAction;
    static deleteSuccess(model: any, actionType?: string): HttpAction;
    static deleteError(e: Error, onError?: string | ErrorOutlet): Action;
    static get(path: string, onSuccess?: string, onError?: string | ErrorOutlet): HttpAction;
    static httpGet(payload: HttpGetPayload<any>): HttpAction;
    static getSuccess(response: any, actionType?: string): HttpAction;
    static getError(e: Error, onError?: string | ErrorOutlet): Action;
    static post(path: string, model: any, onSuccess?: string, onError?: string | ErrorOutlet): HttpAction;
    static httpPost(payload: HttpPostPayload<any>): HttpAction;
    static postFormUrlEncoded(path: string, model: any, onSuccess?: string, onError?: string | ErrorOutlet): HttpAction;
    static postSuccess(model: any, actionType?: string): HttpAction;
    static postError(e: Error, onError?: string | ErrorOutlet): Action;
    static put(path: string, model: any, onSuccess?: string, onError?: string | ErrorOutlet): HttpAction;
    static httpPut(payload: HttpPutPayload<any>): HttpAction;
    static putSuccess(model: any, actionType?: string): HttpAction;
    static putError(e: Error, onError?: string | ErrorOutlet): Action;
    static search(path: string, onSuccess?: string, onError?: string | ErrorOutlet): HttpAction;
    static searchSuccess(response: any, actionType?: string, path?: string): HttpAction;
}
